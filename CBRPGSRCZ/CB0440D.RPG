     H        1   Y
      *****************************************************************
/*STD *  RPGBASE                                                      *
/*EXI *  TEXT('Midas CB Display components - task split job')         *
      *****************************************************************
      *                                                               *
      *  Midas - Close of Business Module                             *
      *                                                               *
      *  CB0440D - COB Task Split Jobs Components Maintenance         *
      *                                                               *
      *  Function:  This program displays CoB Split Task Components.  *
      *                                                               *
      *  (c) Misys International Banking Systems Ltd. 2001            *
      *                                                               *
      *  Last Amend No. CCB020             Date 06Aug12               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      * Midas Release 4 --------------- Base -------------------------*
      * Midas DBA 3.00 ---------------- Base -------------------------*
      *  Prev Amend No. CCB008             Date 02JAN98               *
      *                 CCB003             Date 02DEC96               *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *   CCB020 - COB Restructure - Secondary COB Infrastructure     *
      *  CCB008 - Synon Closedown Project (CB):                       *
      *           - File removed from CB model.                       *
      *  CCB003 - CoB Task Split Enhancement:                         *
      *           New function.                                       *
      *                                                               *
      *****************************************************************
     FCB0440D#CF  E                    WORKSTN                        UC
     F                                        ##RR  KSFILE #SFLRCD
     F                                              KINFDS INFDS#
     F                                              KINFSR *PSSR
      * DSP: Midas CB Task split job components enquiry
      *
     FCBCMPNLCIF  E           K        DISK                           UC
     F                                              KINFDS INFDS1
     F                                              KINFSR *PSSR
      * RTV : Midas CB Components  Task Split Job Ind = Y
      *
     E* Description     : Copyright notice for inclusion in all programs
     E*
     E********************************************************************
     E                    CPY@    1   1 80               Copyright array
     I*
     I* Description     : Copyright notice for inclusion in all programs
     I*
      /EJECT
      * Data structures:
     IPGMDS     ESDSY2PGDSP
      * Program data structure
     IJBDTTM      DS
      * Job date/time
     I                                        1   70##JDT
     I                                        1   10##JCC
     I                                        2   30##JYY
     I                                        4   50##JMM
     I                                        6   70##JDD
     I                                        8  130##JTM
     I                                        8   90##JHH
     I                                       10  110##JNN
     I                                       12  130##JSS
      * ABO DEFINE LARGE STRING FOR CL CMD
     IYARTCM      DS                            512
     I                                        1   1 DUMMY1
     IINFDS#    E DSY2I#DSP
      * Display file information data structure
      *
     IINFDS1    E DSY2I1DSP
      * File information data structure
      *
     IA@CPY       DS
     I* Copyright array
     I                                        1  80 CPY@
     IRUNDAT      DS
     I                                        1   7 MRDT
     I                                    P   8  100RDNB
     I                                       11  11 SUC
     I                                       12  12 DFF
     I                                       13  13 MBIN
      /EJECT
      * Parameter declarations
     IP1PARM      DS
      * B :  Successful Update Made
     I                                        1   1 P1SUPD
      /EJECT
      *****************************************************************
      * Entry parameters
     C           *ENTRY    PLIST
     C                     PARM           P0RTN   7
     C           P1SUPD    PARM P1SUPD    WP0001  1        Successful Upda
      *****************************************************************
      * Initialize
     C                     EXSR ZZINIT
      *
     C                     DO   *HIVAL
      * Initialise & load subfile page
     C                     EXSR BAIZSF
     C                     MOVEL'N'       W0RSF   1
      * Display screen until reload requested
     C           W0RSF     DOWEQ'N'
      * Display screen
     C                     EXSR CAEXFM
      * Process response
      * Cancel & exit program
     C   03                CAS            ZXEXPG
      * HOME: Request subfile reload
     C   05                CAS            FBRQRL
      * Display next SFL page
     C   27                CAS            BBLDSF
      * Process screen input
     C                     CAS            DAPR##
     C                     END
      *
     C                     END                             OD W0RSF
     C                     END                             OD *HIVAL
      *****************************************************************
      /EJECT
     CSR         BAIZSF    BEGSR
      *================================================================
      * Initialise and load subfile page
      *================================================================
      * Clear subfile
     C                     SETON                     80
     C                     WRITE#SFLCTL
     C                     SETOF                     80
      * Reset no of records in subfile
     C                     Z-ADD*ZERO     ##RRMX  50 81     SETOF 81
      * Position DBF file
     C           KPOS      KLIST
     C                     KFLD           DHCOTT           Component Name
     C                     KFLD           DHCSEQ           Component Seque
      * Setup key
     C                     MOVEL#2COTT    DHCOTT           Component Name
     C                     MOVEL#2CSEQ    DHCSEQ           Component Seque
     C           KPOS      SETLL@CMPNLC
     C                     READ @CMPNLC                8782*82=EOF
      * Save previous selector values
     C           *LIKE     DEFN #2CSTS    WZCSTS
     C                     MOVEL#2CSTS    WZCSTS           Component Statu
     C           *LIKE     DEFN #2CSHP    WZCSHP
     C                     MOVEL#2CSHP    WZCSHP           Scheduling Prio
     C           *LIKE     DEFN #2CEPY    WZCEPY
     C                     MOVEL#2CEPY    WZCEPY           Execution Prior
     C           *LIKE     DEFN #2CTSL    WZCTSL
     C                     MOVEL#2CTSL    WZCTSL           Timeslice
     C           *LIKE     DEFN #2CFOB    WZCFOB
     C                     MOVEL#2CFOB    WZCFOB           FCOOB Error Acc
     C           *LIKE     DEFN #2CTXT    WZCTXT
     C                     MOVEL#2CTXT    WZCTXT           Component Text
     C           *LIKE     DEFN #2CPRM    WZCPRM
     C                     MOVEL#2CPRM    WZCPRM           Execution Param
     C           *LIKE     DEFN #2CRQD    WZCRQD
     C                     MOVEL#2CRQD    WZCRQD           Sel for Today's
     C           *LIKE     DEFN #2CMOD    WZCMOD
     C                     MOVEL#2CMOD    WZCMOD           Module
     C           *LIKE     DEFN #2CEMI    WZCEMI
     C                     MOVEL#2CEMI    WZCEMI           Complex Module
     C           *LIKE     DEFN #2CRES    WZCRES
     C                     MOVEL#2CRES    WZCRES           Restart Flag
     C           *LIKE     DEFN #2CODP    WZCODP
     C                     MOVEL#2CODP    WZCODP           No.Outstndng De
     C           *LIKE     DEFN #2CMEF    WZCMEF
     C                     MOVEL#2CMEF    WZCMEF           Mut.Exclusive C
     C           *LIKE     DEFN #2CFRQ    WZCFRQ
     C                     MOVEL#2CFRQ    WZCFRQ           Run Conditions
     C           *LIKE     DEFN #2CSDE    WZCSDE
     C                     MOVEL#2CSDE    WZCSDE           Start Date
     C           *LIKE     DEFN #2CSTI    WZCSTI
     C                     MOVEL#2CSTI    WZCSTI           Start Time
     C           *LIKE     DEFN #2CEDE    WZCEDE
     C                     MOVEL#2CEDE    WZCEDE           End Date
     C           *LIKE     DEFN #2CETI    WZCETI
     C                     MOVEL#2CETI    WZCETI           End Time
     C           *LIKE     DEFN #2CHTB    WZCHTB
     C                     MOVEL#2CHTB    WZCHTB           Halt Before
     C           *LIKE     DEFN #2CHTA    WZCHTA
     C                     MOVEL#2CHTA    WZCHTA           Halt After
     C           *LIKE     DEFN #2CFAL    WZCFAL
     C                     MOVEL#2CFAL    WZCFAL           Component Faile
     C           *LIKE     DEFN #2COTT    WZCOTT
     C                     MOVEL#2COTT    WZCOTT           Component Name
     C           *LIKE     DEFN #2CSEQ    WZCSEQ
     C                     MOVEL#2CSEQ    WZCSEQ           Component Seque
      * Translate search mask for text field
     C                     MOVEL'QSYST'   WQB10X 10
     C                     MOVE 'RNTBL'   WQB10X
     C           *LIKE     DEFN #2CTXT    WQCTXT           Component Text
     C                     CALL 'QDCXLATE'
      * Length
     C                     PARM 60        WQA5N   50
     C                     PARM #2CTXT    WQCTXT           Component Text
     C                     PARM           WQB10X           QSYSTRNTBL
     C                     PARM 'QSYS'    WQC10X 10
     C           *LIKE     DEFN #2CPRM    WQCPRM           Execution Param
     C                     CALL 'QDCXLATE'
      * Length
     C                     PARM 100       WQA5N   50
     C                     PARM #2CPRM    WQCPRM           Execution Param
     C                     PARM           WQB10X           QSYSTRNTBL
     C                     PARM 'QSYS'    WQC10X 10
      * Load subfile page
     C                     Z-ADD0         ##RROK  50
     C                     EXSR BBLDSF
      *================================================================
     CSR         BAEXIT    ENDSR
      /EJECT
     CSR         BBLDSF    BEGSR
      *================================================================
      * Load subfile page
      *================================================================
      * Re-establish fields in read-ahead record
     C   27                DO
     C  N82                READP@CMPNLC                  90*
     C  N82                READ @CMPNLC                  90*
     C                     END
      *
      * Setof record error indicators
     C                     MOVEL*ALL'0'   WKIND0  1
     C                     MOVEAWKIND0    *IN,33
      * Start at previous highest record in SFL
     C                     Z-ADD##RRMX    ##RR    50
      * Reset count of DBF records read
     C                     Z-ADD0         ##RRRD  50
      * Set required pages based on *Set Cursor or *Subfile Pages
     C           W0RR0     IFGT 0
     C           W0RR0     DIV  ##SFPG    ##SPG   30
     C                     MVR            ##SLIN  30
     C           ##SLIN    IFGT 0
     C                     ADD  1         ##SPG
     C                     END
     C           W0SPG     IFGT ##SPG
     C                     Z-ADDW0SPG     ##SPG
     C                     END
     C                     ELSE
     C                     Z-ADDW0SPG     ##SPG
     C                     END
      * Compute lines required based on pages
     C           ##SPG     MULT ##SFPG    ##SFLN  90
     C           ##SFLN    IFGT 999
     C                     Z-ADD999       ##SFLN
     C                     END
      *................................................................
      * Load next SFL page until SFL page full, or
      * Scan limit reached
     C           *IN82     DOWEQ'0'                        DO
     C           ##RROK    ANDLT##SFLN
     C           ##RRRD    ANDLTW0SLM
      * Check selection fields - if fail, read next record
     C           #2CSTS    IFNE *BLANK                     Component Statu
     C           DHCSTS    CABNE#2CSTS    BB020            Component Statu
     C                     END
     C           #2CSHP    IFNE *ZERO                      Scheduling Prio
     C           DHCSHP    CABNE#2CSHP    BB020            Scheduling Prio
     C                     END
     C           #2CEPY    IFNE *ZERO                      Execution Prior
     C           DHCEPY    CABNE#2CEPY    BB020            Execution Prior
     C                     END
     C           #2CTSL    IFNE *ZERO                      Timeslice
     C           DHCTSL    CABNE#2CTSL    BB020            Timeslice
     C                     END
     C           #2CFOB    IFNE *BLANK                     FCOOB Error Acc
     C           DHCFOB    CABNE#2CFOB    BB020            FCOOB Error Acc
     C                     END
     C           #2CTXT    IFNE *BLANK                     Component Text
      * Scan for search string
     C                     CALL 'QCLSCAN'
     C                     PARM           DHCTXT           Component Text
      * Length
     C                     PARM 60        WQA3N   30
      * Start
     C                     PARM 1         WQB3N   30
      * Mask
     C                     PARM           WQCTXT
      * Length
     C                     PARM 60        WQC3N   30
      * Translate
     C                     PARM '1'       WQD1    1
      * Trim
     C                     PARM '1'       WQE1    1
      * Wild
     C                     PARM '?'       WQF1    1
      * Result
     C                     PARM           WQG3N   30
     C           WQG3N     CABLT1         BB020
     C                     END
     C           #2CPRM    IFNE *BLANK                     Execution Param
      * Scan for search string
     C                     CALL 'QCLSCAN'
     C                     PARM           DHCPRM           Execution Param
      * Length
     C                     PARM 100       WQA3N   30
      * Start
     C                     PARM 1         WQB3N   30
      * Mask
     C                     PARM           WQCPRM
      * Length
     C                     PARM 100       WQC3N   30
      * Translate
     C                     PARM '1'       WQD1    1
      * Trim
     C                     PARM '1'       WQE1    1
      * Wild
     C                     PARM '?'       WQF1    1
      * Result
     C                     PARM           WQG3N   30
     C           WQG3N     CABLT1         BB020
     C                     END
     C           #2CRQD    IFNE *BLANK                     Sel for Today's
     C           DHCRQD    CABNE#2CRQD    BB020            Sel for Today's
     C                     END
     C           #2CMOD    IFNE *BLANK                     Module
     C           DHCMOD    CABNE#2CMOD    BB020            Module
     C                     END
     C           #2CEMI    IFNE *BLANK                     Complex Module
     C           DHCEMI    CABNE#2CEMI    BB020            Complex Module
     C                     END
     C           #2CRES    IFNE *BLANK                     Restart Flag
     C           DHCRES    CABNE#2CRES    BB020            Restart Flag
     C                     END
     C           #2CODP    IFNE *ZERO                      No.Outstndng De
     C           DHCODP    CABNE#2CODP    BB020            No.Outstndng De
     C                     END
     C           #2CMEF    IFNE *BLANK                     Mut.Exclusive C
     C           DHCMEF    CABNE#2CMEF    BB020            Mut.Exclusive C
     C                     END
     C           #2CFRQ    IFNE *BLANK                     Run Conditions
     C           DHCFRQ    CABNE#2CFRQ    BB020            Run Conditions
     C                     END
     C           #2CSDE    IFNE *ZERO                      Start Date
     C           DHCSDE    CABNE#2CSDE    BB020            Start Date
     C                     END
     C           #2CSTI    IFNE *ZERO                      Start Time
     C           DHCSTI    CABNE#2CSTI    BB020            Start Time
     C                     END
     C           #2CEDE    IFNE *ZERO                      End Date
     C           DHCEDE    CABNE#2CEDE    BB020            End Date
     C                     END
     C           #2CETI    IFNE *ZERO                      End Time
     C           DHCETI    CABNE#2CETI    BB020            End Time
     C                     END
     C           #2CHTB    IFNE *BLANK                     Halt Before
     C           DHCHTB    CABNE#2CHTB    BB020            Halt Before
     C                     END
     C           #2CHTA    IFNE *BLANK                     Halt After
     C           DHCHTA    CABNE#2CHTA    BB020            Halt After
     C                     END
     C           #2CFAL    IFNE *BLANK                     Component Faile
     C           DHCFAL    CABNE#2CFAL    BB020            Component Faile
     C                     END
     C           #2COTT    IFEQ *BLANK                     Component Name
     C           #2CSEQ    IFNE *BLANK                     Component Seque
     C           DHCSEQ    CABNE#2CSEQ    BB020            Component Seque
     C                     END
     C                     END
      * Load SFL fields
     C                     EXSR MBFL#1
     C                     MOVEL'Y'       W0RSL   1
      * Allow for possible *Set Cursor processing
     C                     ADD  1         ##RR
      * USER: Initialize subfile record from DBF record
      * CASE: DB1.Component Name is cobbegin
     C           DHCOTT    IFEQ 'COBBEGIN'                 *IF
     C                     MOVEL'N'       W0RSL            *Record selecte
     C                     END                             *FI
      **CASE:*DB1.Component*Name*is*Cobend*****************************                       CCB020
      ** CASE: DB1.Component Name is SCOBFINISH                                               CCB020
     C                     MOVEL'SCOBFINI'SCOBFI 10                                           CCB020
     C                     MOVE 'SH'      SCOBFI                                              CCB020
     C********** DHCOTT    IFEQ 'COBEND'                   *IF                                CCB020
     C           DHCOTT    IFEQ SCOBFI                                                        CCB020
     C                     MOVEL'N'       W0RSL            *Record selecte
     C                     END                             *FI
     C                     SUB  1         ##RR
      * DBF record not selected
     C           W0RSL     CABNE'Y'       BB020
      * Output to subfile
     C                     ADD  1         ##RR
     C                     ADD  1         ##RROK     81    *
      * If SFLRCD invalid, note that errors present
     C   98N99             SETON                     99    *
     C                     WRITE#SFLRCD
     C           BB020     TAG
      * Increment scan check count
     C                     ADD  1         ##RRRD
     C                     READ @CMPNLC                  82*82=EOF
     C                     END                             OD 1 - ##SFPG
      *................................................................
     C           BB900     TAG
      *................................................................
      * If no DBF records found, display error message
     C           ##RR      IFEQ *ZERO
     C           *IN82     ANDEQ'1'
      * Send message '*No data to display'
     C                     MOVEL'Y2U0008' ZAMSID
     C                     MOVEL'Y2USRMSG'ZAMSGF
     C                     EXSR ZASNMS
     C                     END                             FI ##RR = *ZERO
      *
      *................................................................
      * Save highest SFL record load can continue at end point
     C           ##RR      IFGT ##RRMX
      * Calculate top line
     C           ##RROK    DIV  ##SFPG    ##SPG
     C                     MVR            ##SLIN
     C           ##SLIN    IFGT 0
     C           ##RR      SUB  ##SLIN    ##SFRC
     C                     ELSE
     C           ##RR      SUB  ##SFPG    ##SFRC
     C                     END
     C                     ADD  1         ##SFRC
     C                     Z-ADD##RR      ##RRMX
     C                     END
      * If scan limit reached, display error message
     C           ##RRRD    IFGE W0SLM
      * Send message '*Scan limit reached'
     C                     MOVEL'Y2U0017' ZAMSID
     C                     MOVEL'Y2USRMSG'ZAMSGF
     C                     EXSR ZASNMS
     C                     ELSE
     C                     Z-ADD0         ##RROK
     C                     END
      *================================================================
     CSR         BBEXIT    ENDSR
      /EJECT
     CSR         CAEXFM    BEGSR
      *================================================================
      * Display screen
      *================================================================
     C           W0HLP     DOUEQ'N'
     C                     MOVEL'N'       W0HLP   1
     C                     MOVE *IN25     HELP25  1
     C                     MOVE *ALL'0'   ##OFF  30
     C                     MOVEA##OFF     *IN,1
     C                     MOVE HELP25    *IN25
      * Update screen time
     C                     TIME           ##TME
      * PUTOVR unless conditioned fields change
     C                     SETON                     86
     C           *IN81     IFNE CAIN81
     C                     SETOF                     86
     C                     END
     C                     MOVE *IN81     CAIN81  1
      * Set cursor by *SET CURSOR data
     C           YSETCS    IFEQ 'Y'
     C                     EXSR Y0SET
     C                     END
     C                     WRITE#MSGCTL
     C                     WRITE#CMDTXT1
     C                     EXFMT#SFLCTL
      * Maintain subfile position where possible
     C           @#SFRC    IFGT *ZERO
     C                     Z-ADD@#SFRC    ##SFRC
     C                     END
      * Test cursor
     C                     EXSR Y8TST
      * Clear set cursor DDS indicator
     C           WCSRLC    IFEQ 'OFF'
     C                     SETOF                     94    *
     C                     END
     C                     MOVE *BLANK    WCSRLC
      * If help requested, display help text
     C   25                EXSR ZHHPKY
     C                     END
      * Update job time
     C                     TIME           ##JTM
      * Clear messages from program message queue
     C                     CALL 'Y2CLMSC'
     C                     PARM ##PGM     ZAPGMQ 10
     C                     PARM '*SAME'   ZAPGRL  5
      * Reset first message only flag
     C                     MOVEL'Y'       ZAFSMS  1      99*
     C                     SETOF                       8392*
     C           YSETCS    IFEQ 'Y'
     C                     EXSR Y9CLR
     C                     END
      *================================================================
     CSR         CAEXIT    ENDSR
      /EJECT
     CSR         DAPR##    BEGSR
      *================================================================
      * Process screen input
      *================================================================
      *
      * Confirm/update is not deferred
     C                     MOVEL'N'       W0DCF   1
      * Check Component Sequence Number is numeric
     C                     MOVEL*IN90     XG90    1
     C                     TESTN          #2CSEQ     90  90*
     C   90                MOVE #2CSEQ    XGX1    1
     C   90                TESTB'0123'    XGX1           90*
      * All blank is OK
     C  N90      #2CSEQ    COMP *BLANKS                  90*
      * '?' is OK
     C  N90                MOVEL#2CSEQ    XGX1
     C  N90      XGX1      COMP '?'                      90*
     C           *IN90     IFEQ '0'
      * Send message '*Field must be numeric'
     C                     MOVEL'Y2U0010' ZAMSID
     C                     MOVEL'Y2USRMSG'ZAMSGF
     C                     EXSR ZASNMS
     C                     SETON                     9932  *
     C                     END
     C                     MOVELXG90      *IN90
      * If error, exit
     C           *IN99     CABEQ'1'       DAEXIT
      *................................................................
      * Change of position specified
     C           WZCOTT    CASNE#2COTT    FBRQRL
     C           WZCSEQ    CASNE#2CSEQ    FBRQRL
     C                     END
      * Reload subfile requested
     C           W0RSF     CABEQ'Y'       DAEXIT
     C           *IN81     IFEQ '1'
      * Process subfile records
     C                     EXSR DBPRSF
     C                     END
      * If error, quit processing
     C           *IN99     CABEQ'1'       DAEXIT
      * Defer confirm/update requested
     C           W0DCF     CABEQ'Y'       DAEXIT
      *================================================================
     CSR         DAEXIT    ENDSR
      /EJECT
     CSR         DBPRSF    BEGSR
      *================================================================
      * Process modified subfile record
      *================================================================
     C                     READC#SFLRCD                  92*
     C           *IN92     DOWEQ'0'
      * Process subfile record
     C                     EXSR DCPRSR
     C                     UPDAT#SFLRCD
     C                     READC#SFLRCD                  92*
     C                     END
      *================================================================
     CSR         DBEXIT    ENDSR
      /EJECT
     CSR         DCPRSR    BEGSR
      *================================================================
      * Process subfile record
      *================================================================
      * Setof error indicators and SFLNXTCHG
     C                     MOVEAWKIND0    *IN,33
     C                     SETOF                     98    *
      * USER: Process subfile record (Pre-confirm)
      * CASE: RCD.*SFLSEL is *Amend
     C           #1SEL     IFEQ 'A'                        *IF
      * Edit Components - Components  *
     C                     CALL 'CB0400R'              90  Edit Components
     C                     PARM *BLANK    W0RTN   7
     C                     PARM #1COTT    WQ0001 10        Component Name
     C                     PARM #1CSEQ    WQ0002  5        Component Seque
     C           P1SUPD    PARM P1SUPD    WQ0003  1        Successful Upda
      *
     C           *IN90     IFEQ '1'
      * Call to program ended in error
     C                     MOVEL'Y2U0032' W0RTN
     C                     MOVEL*BLANKS   W0CLPG 10
     C                     MOVEL'CB0400R' W0CLPG
      * Send message '*Error occured on CALL...'
     C                     MOVEL'Y2U0032' ZAMSID
     C                     MOVEL'Y2USRMSG'ZAMSGF
     C                     MOVELW0CLPG    ZAMSDA           Message data
     C                     EXSR ZASNMS
     C                     END
      *
      * Error detected?
     C           W0RTN     IFNE *BLANK
     C                     SETON                     98    *
     C                     END
     C                     MOVEL'Y'       W0RSF            *Reload subfile
     C                     END                             *FI
      * CASE: RCD.*SFLSEL is *Enquire
     C           #1SEL     IFEQ 'E'                        *IF
      * display components rec - Components  *
     C                     CALL 'CB0400E'              90  display compone
     C                     PARM *BLANK    W0RTN   7
     C                     PARM #1COTT    WQ0004 10        Component Name
     C                     PARM #1CSEQ    WQ0005  5        Component Seque
      *
     C           *IN90     IFEQ '1'
      * Call to program ended in error
     C                     MOVEL'Y2U0032' W0RTN
     C                     MOVEL*BLANKS   W0CLPG 10
     C                     MOVEL'CB0400E' W0CLPG
      * Send message '*Error occured on CALL...'
     C                     MOVEL'Y2U0032' ZAMSID
     C                     MOVEL'Y2USRMSG'ZAMSGF
     C                     MOVELW0CLPG    ZAMSDA           Message data
     C                     EXSR ZASNMS
     C                     END
      *
      * Error detected?
     C           W0RTN     IFNE *BLANK
     C                     SETON                     98    *
     C                     END
     C                     MOVEL'Y'       W0RSF            *Reload subfile
     C                     END                             *FI
     C           *IN98     IFEQ '1'
      * SFLRCD invalid
     C  N99                Z-ADD##RR      ##SFRC     99    *
      * SFLNXTCHG
     C                     SETON                     84
     C                     ELSE
      * SFLRCD valid
      * SFLNXTCHG
     C                     SETOF                     84
     C                     MOVEL*BLANK    #1SEL
     C                     END                             FI *IN98
      *================================================================
     CSR         DCEXIT    ENDSR
      /EJECT
     CSR         FBRQRL    BEGSR
      *================================================================
      * Request subfile reload
      *================================================================
     C                     MOVEL'Y'       W0RSF
      *================================================================
     CSR         FBEXIT    ENDSR
      /EJECT
     CSR         MBFL#1    BEGSR
      *================================================================
      * Move @CMPNLC fields to subfile
      *================================================================
     C                     MOVEL*BLANK    #1SEL
     C                     MOVELDHCSTS    #1CSTS           Component Statu
     C                     Z-ADDDHCSHP    #1CSHP           Scheduling Prio
     C                     Z-ADDDHCEPY    #1CEPY           Execution Prior
     C                     Z-ADDDHCTSL    #1CTSL           Timeslice
     C                     MOVELDHCFOB    #1CFOB           FCOOB Error Acc
     C                     MOVELDHCTXT    #1CTXT           Component Text
     C                     MOVELDHCPRM    #1CPRM           Execution Param
     C                     MOVELDHCRQD    #1CRQD           Sel for Today's
     C                     MOVELDHCMOD    #1CMOD           Module
     C                     MOVELDHCEMI    #1CEMI           Complex Module
     C                     MOVELDHCRES    #1CRES           Restart Flag
     C                     Z-ADDDHCODP    #1CODP           No.Outstndng De
     C                     MOVELDHCMEF    #1CMEF           Mut.Exclusive C
     C                     MOVELDHCFRQ    #1CFRQ           Run Conditions
     C                     Z-ADDDHCSDE    #1CSDE           Start Date
     C                     Z-ADDDHCSTI    #1CSTI           Start Time
     C                     Z-ADDDHCEDE    #1CEDE           End Date
     C                     Z-ADDDHCETI    #1CETI           End Time
     C                     MOVELDHCHTB    #1CHTB           Halt Before
     C                     MOVELDHCHTA    #1CHTA           Halt After
     C                     MOVELDHCFAL    #1CFAL           Component Faile
     C                     Z-ADDDHEODT    #1EODT           End of Day Run
     C                     Z-ADDDHEOMT    #1EOMT           End of Month Ru
     C                     Z-ADDDHBOMT    #1BOMT           Begin of Month
     C                     Z-ADDDHEOYT    #1EOYT           End of Year Run
     C                     Z-ADDDHEODC    #1EODC           End of Day CPU
     C                     Z-ADDDHEOMC    #1EOMC           End of Month CP
     C                     Z-ADDDHBOMC    #1BOMC           Begin of Month
     C                     Z-ADDDHEOYC    #1EOYC           End of Year CPU
     C                     MOVELDHABIC    #1ABIC           Allow Bypass in
     C                     MOVELDHCBSN    #1CBSN           COB Stream Name
     C                     MOVELDHTASK    #1TASK           Task Split Job
     C                     Z-ADDDHTSNO    #1TSNO           Number of Task
     C                     MOVELDHCOTT    #1COTT           Component Name
     C                     MOVELDHCSEQ    #1CSEQ           Component Seque
     C                     MOVEL*BLANK    #1SEL            *SFLSEL
      *================================================================
     CSR         MBEXIT    ENDSR
      /EJECT
     CSR         MEIZ#2    BEGSR
      *================================================================
      * Initialise subfile control
      *================================================================
     C                     MOVEL*BLANK    #2CSTS           Component Statu
     C                     Z-ADD*ZERO     #2CSHP           Scheduling Prio
     C                     Z-ADD*ZERO     #2CEPY           Execution Prior
     C                     Z-ADD*ZERO     #2CTSL           Timeslice
     C                     MOVEL*BLANK    #2CFOB           FCOOB Error Acc
     C                     MOVEL*BLANK    #2CTXT           Component Text
     C                     MOVEL*BLANK    #2CPRM           Execution Param
     C                     MOVEL*BLANK    #2CRQD           Sel for Today's
     C                     MOVEL*BLANK    #2CMOD           Module
     C                     MOVEL*BLANK    #2CEMI           Complex Module
     C                     MOVEL*BLANK    #2CRES           Restart Flag
     C                     Z-ADD*ZERO     #2CODP           No.Outstndng De
     C                     MOVEL*BLANK    #2CMEF           Mut.Exclusive C
     C                     MOVEL*BLANK    #2CFRQ           Run Conditions
     C                     Z-ADD*ZERO     #2CSDE           Start Date
     C                     Z-ADD*ZERO     #2CSTI           Start Time
     C                     Z-ADD*ZERO     #2CEDE           End Date
     C                     Z-ADD*ZERO     #2CETI           End Time
     C                     MOVEL*BLANK    #2CHTB           Halt Before
     C                     MOVEL*BLANK    #2CHTA           Halt After
     C                     MOVEL*BLANK    #2CFAL           Component Faile
     C                     MOVEL*BLANK    #2COTT           Component Name
     C                     MOVEL*BLANK    #2CSEQ           Component Seque
      *================================================================
     CSR         MEEXIT    ENDSR
      /EJECT
     CSR         Y0SET     BEGSR
      *================================================================
      * Set cursor by *SET CURSOR data
      *================================================================
      *================================================================
     CSR         Y0EXIT    ENDSR
      /EJECT
     CSR         Y8TST     BEGSR
      *================================================================
      * Test cursor
      *================================================================
     C                     Z-ADD@#RWCL    ZINPOS  50
     C           ZINPOS    DIV  256       W0CRW
     C                     MVR            W0CCL
      *================================================================
     CSR         Y8EXIT    ENDSR
      /EJECT
     CSR         Y9CLR     BEGSR
      *================================================================
      * Clear *SET CURSOR data
      *================================================================
      *================================================================
     CSR         Y9EXIT    ENDSR
      /EJECT
     CSR         ZASNMS    BEGSR
      *================================================================
      * Send message to program's message queue
      *================================================================
     C           ZAPGMQ    IFEQ *BLANK
     C                     MOVEL##PGM     ZAPGMQ
     C                     END
     C                     CALL 'Y2SNMGC'
     C                     PARM           ZAPGMQ 10        Program queue
     C                     PARM           ZAPGRL  5        Rel queue
     C                     PARM           ZAMSID  7        Message ID
     C                     PARM           ZAMSGF 10        Message file
     C                     PARM           ZAMSDA132        Message data
     C                     PARM           ZAMSTP  7        Message type
      * Clear all fields for default mechanism next time
     C                     MOVEL*BLANK    ZAPGMQ
     C                     MOVEL*BLANK    ZAPGRL
     C                     MOVEL*BLANK    ZAMSID
     C                     MOVEL*BLANK    ZAMSGF
     C                     MOVEL*BLANK    ZAMSDA
     C                     MOVEL*BLANK    ZAMSTP
      *================================================================
     CSR         ZAEXIT    ENDSR
      /EJECT
     CSR         ZHHPKY    BEGSR
      *================================================================
      * Display HELP text
      *================================================================
      * Signal help request
     C                     MOVEL'Y'       W0HLP   1
      *
      * Extract cursor row and column
     C           @#RWCL    DIV  256       ZHCSRW  50       Row
     C                     MVR            ZHCSCL  50       Column
      *
      * Save cursor position for redisplay
     C                     Z-ADDZHCSRW    ZZCSRW  30       Row
     C                     Z-ADDZHCSCL    ZZCSCL  30       Column
      *
      *
     C                     CALL 'YDDSHPR'
     C                     PARM 'UUHBDFR' W0HPMB 10        Help text sourc
     C                     PARM *BLANK    YYHPFL 10        Help text file
     C                     PARM *BLANK    YYHPLB 10        Help text libra
     C                     PARM           W0RTN   7
     C                     PARM '*START'  YYHLVN 10        Help label
     C                     PARM '*NORMAL' YYUSOP 10        Options
     C                     PARM ZHCSRW    YYRW    50       Row
     C                     PARM ZHCSCL    YYCL    50       Column
     C                     PARM *ZERO     YYLGCT  50       # of grps
     C                     PARM *BLANK    YYLGVN 10        Label grps
      *
      * Clear set cursor DDS indicator
     C  N94                MOVEL'OFF'     WCSRLC
     C  N94                SETON                     94    *
      *================================================================
     CSR         ZHEXIT    ENDSR
      /EJECT
     CSR         ZXEXPG    BEGSR
      *================================================================
      * Cancel & exit program
      *================================================================
     C                     EXSR ZYEXPG
      *================================================================
     CSR         ZXEXIT    ENDSR
      /EJECT
     CSR         ZYEXPG    BEGSR
      *================================================================
      * Exit program: Direct
      *================================================================
      * Terminate program
     C                     SETON                     LR
      *
      * Exit program
     C                     RETRN
      *
      *================================================================
     CSR         ZYEXIT    ENDSR
      /EJECT
     CSR         ZZINIT    BEGSR
      *================================================================
      * Initialisation
      *================================================================
     C           W0ICL     IFEQ *BLANK
     C                     MOVEL'Y'       W0ICL   1        *Initial call
     C                     ELSE
     C                     MOVEL'N'       W0ICL
     C                     END
     C                     MOVE *BLANK    P0RTN
     C                     MOVE *BLANK    W0RTN   7
     C                     MOVEL*BLANK    W0RSL   1
     C                     MOVEL*BLANK    W0RSF   1
     C                     MOVEL*ZEROS    W0RTW   90
     C                     MOVEL'400'     W0ENV   3
      * Setup job date/time
      *
     C                     Z-ADDUDATE     ##JDT
      * Set century digit (If YY prior to 1940 treat as 20YY)
     C           ##JYY     IFLT 40
     C                     Z-ADD1         ##JCC
     C                     ELSE
     C                     Z-ADD0         ##JCC
     C                     END
     C                     TIME           ##JTM
      * Update screen time
     C                     TIME           ##TME   60
      * Define work field midas rundate
     C                     MOVEL*BLANK    WUAANA  7
      * Define work field run day number
     C                     Z-ADD*ZERO     WUAKTX  50
      * Define work field Set Up Complete
     C                     MOVEL*BLANK    WUAUST  1
      * Define work field date format flag
     C                     MOVEL*BLANK    WUE3ST  1
      * Define work field Multi-branching Indicator
     C                     MOVEL*BLANK    WUF1ST  1
      * Flag no *SET CURSOR in the program
     C                     MOVE 'N'       YSETCS  1
     C                     MOVE *BLANK    WCSRLC  3
      * Define *Synon program work fields
     C                     MOVEL*BLANKS   W0CFL  10        *Cursor field
     C                     Z-ADD*ZEROS    W0CRW   50       *Cursor row
     C                     Z-ADD*ZEROS    W0CCL   50       *Cursor column
      * Move main file information to JOB context
     C                     MOVE @1FFL     ZZFFL  10        Main file name
     C                     MOVE @1FLB     ZZFLB  10        Main file lib
     C                     MOVE @1FMB     ZZFMB  10        Main file mbr
     C                     MOVE ZZFFL     @1FFL  10
     C                     MOVE ZZFLB     @1FLB  10
     C                     MOVE ZZFMB     @1FMB  10
     C                     CALL 'Y2QLVNR'
     C                     PARM           ZZFFL  10
     C                     PARM           ZZFLB  10
     C                     PARM           ZZFQL  21        LIBRARY/FILE
      * Open files
     C                     OPEN CB0440D#
     C                     OPEN CBCMPNLC
     C                     MOVEL'N'       W0PMT   1
     C                     Z-ADD14        ##SFPG  30       SFLPAG
     C                     Z-ADD1         ##SFRC
      * Maximum record number
     C                     Z-ADD*ZERO     ##RRMX
      * Scan limit
     C                     Z-ADD500       W0SLM   50
      * Subfile pages
     C                     Z-ADD1         W0SPG   30
      * Processed Subfile record
     C                     Z-ADD0         W0RR0   40
      *................................................................
     C                     MOVEL*BLANK    W0GRP   1
      * USER: Initialize program
      * CB0440D Precompiler - Components  *
      * Setup Footer:Dsp Tsk Sp J - Components  *
     C*
     C                     MOVEL'CBUSRMSG'WUMSGF 10
     C                     MOVE *BLANKS   WUMTXT 80
     C*
     C* Setup footer text:
     C* A=Amend   E=Enquire   F3=Exit   F5=Refresh Screen
     C                     MOVEL'CBM0201' WUMSID  7        Message Identifier
     C                     CALL 'SDRTVTXT'             90  Retrieve MSGF message
     C           WUMSID    PARM WUMSID    WQ0286  7        Message Identifier
     C           WUMSGF    PARM WUMSGF    WQ0287 10        Message File Name
     C           WUMTXT    PARM WUMTXT    WQ0288 80        Message Text
     C                     MOVELWUMTXT    ##ARNA
     C*
     C           *IN90     IFEQ '1'
     C* Call to program ended in error
     C                     MOVEL'Y2U0032' W0RTN
     C                     MOVEL*BLANKS   W0CLPG 10
     C                     MOVEL'SDRTVTXT'W0CLPG
     C* Send message '*Error occured on CALL...'
     C                     MOVEL'Y2U0032' ZAMSID
     C                     MOVEL'Y2USRMSG'ZAMSGF
     C                     MOVELW0CLPG    ZAMSDA           Message data
     C                     EXSR ZASNMS
     C                     END
     C*
      * Copyright Statement 1996 - Standard functions  *
      * Get Rundate - Rundate  *
     C           *NAMVAR   DEFN           RUNDAT
     C                     IN   RUNDAT
     C                     MOVE MRDT      ##AANA  7
     C                     MOVE MRDT      WUAANA
     C                     MOVE RDNB      WUAKTX
     C                     MOVE SUC       WUAUST
     C                     MOVE DFF       WUE3ST
     C                     MOVE MBIN      WUF1ST
      * Initialise subfile control
     C                     EXSR MEIZ#2
      *================================================================
     CSR         ZZEXIT    ENDSR
      /EJECT
     CSR         *PSSR     BEGSR
      *****************************************************************
      *                                                               *
      * *PSSR  - Program exception error routine                      *
      *          Called automatically if a program error occurs,      *
      *          or directly by the program code using EXSR.          *
      *          This subroutine DUMPs the program just once.         *
      *                                                               *
      *****************************************************************
      *
      * Core function specific processing.
      *
     C/COPY WNCPYSRC,CB0440DPSC
      *
      * Start of PSSR user point.
      *
     C/COPY WNCPYSRC,CB0440DPS1
      *
      * Standard Midas PSSR processing.
      *
     C/COPY CBCPYSRC,CBPSSRINS
      *
      * End of PSSR user point.
      *
     C/COPY WNCPYSRC,CB0440DPS2
      *
      *================================================================
     CSR                   ENDSR
      *================================================================
** CPY@     : Copyright notice for inclusion in all programs
(c) Misys International Banking Systems Ltd. 2001
