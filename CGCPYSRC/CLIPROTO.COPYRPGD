      *****************************************************************
      *                                                               *
      *  Midas - /COPY Member (RPGLE)                                 *
      *                                                               *
      *  CLIPROTO : Function prototypes for SQL CLI functions         *
      *                                                               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      * Midas Release 4.01 -------------------------------------------*
      *  Last Amend No. CCG015  *CREATE    Date 01Nov01               *
      *  Prev Amend No. nnnnnn             Date ddmmmyy               *
      *                                                               *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *  CCG015 - Correspondance Management                           *
      *  nnnnnn - (change description)                                *
      *                                                               *
      *****************************************************************
      *********************************************************************
      * Function Prototype ALLOCATE ENVIRONMENT HANDLE
      *
      *          SQLRETURN  SQLAllocEnv (SQLHENV  *phenv);
      *********************************************************************
      * Return value = 0 (OK) or -1 (error)
     DSQLAlcEnv        PR            10I 0 ExtProc('SQLAllocEnv')
      * Environmental handle
     D                               10I 0
      *********************************************************************
      * Function Prototype ALLOCATE CONNECTION HANDLE
      *
      *          SQLRETURN  SQLAllocConnect (SQLHENV   henv,
      *                                      SQLHDBC  *phdbc);
      *********************************************************************
      * Return value = 0 (OK) or -1 (error) or -2 (invalid handle)
     DSQLAlcCon        PR            10I 0 ExtProc('SQLAllocConnect')
      * Environmental handle
     D                               10I 0 VALUE
      * Connection handle
     D                               10I 0
      *********************************************************************
      * Function Prototype CONNECTION TO A DATABASE
      *
      *           SQLRETURN SQLConnect (SQLHDBC       hdbc,
      *                                 SQLCHAR      *szDSN,
      *                                 SQLSMALLINT   cbDSN,
      *                                 SQLCHAR      *szUID,
      *                                 SQLSMALLINT   cbUID,
      *                                 SQLCHAR      *szAuthStr,
      *                                 SQLSMALLINT   cbAuthStr);
      *********************************************************************
      * Return value = 0 or 1 (OK) or -1 (error) or -2 (invalid handle)
     DSQLConnect       PR            10I 0 ExtProc('SQLConnect')
      * Connection handle
     D                               10I 0 VALUE
      * Pointer of the field containing the name of the database
     D                                 *   VALUE
      * Length of the name of the database
     D                                5I 0 VALUE
      * Pointer of the field containing the user identification
     D                                 *   VALUE
      * Length of the user identification
     D                                5I 0 VALUE
      * Pointer of the field containing the password
     D                                 *   VALUE
      * Length of the password
     D                                5I 0 VALUE
      *********************************************************************
      * Function Prototype SET CONNECTION OPTION
      *
      *          SQLRETURN SQLSetConnectOption (SQLHDBC      hdbc,
      *                                         SQLSMALLINT  fOption,
      *                                         SQLPOINTER   vParam);
      *********************************************************************
      * Return value = 0 or 1 (OK) or -1 (error) or -2 (invalid handle)
     DSQLSetCnOp       PR            10I 0 ExtProc('SQLSetConnectOption')
      * Connection handle
     D                               10I 0 VALUE
      * Connect option
     D                                5I 0 VALUE
      * Pointer to the field containing the value of the connect option
     D                                 *   VALUE
      *********************************************************************
      * Function Prototype SET ENVIRONMENT ATTRIBUTE
      *
      *          SQLRETURN SQLSetEnvAttr (SQLHENV henv,
      *                                   SQLINTEGER Attribute,
      *                                   SQLPOINTER pValue,
      *                                   SQLINTEGER StringLength)
      *********************************************************************
     DSQLSetEnvA       PR            10I 0 ExtProc('SQLSetEnvAttr')
      * Environmental handle
     D                               10I 0 VALUE
      * Environment attribute to set
     D                                5I 0 VALUE
      * Pointer to the field containing the value of the connect option
     D                                 *   VALUE
      * String Length (if the attribute value is char)
     D                                5I 0 VALUE
      *********************************************************************
      * Function Prototype ALLOCATE STATEMENT HANDLE
      *
      *          SQLRETURN SQLAllocStmt (SQLHDBC   hdbc,
      *                                  SQLHSTMT *phstmt);
      *********************************************************************
      * Return value = 0 (OK) or -1 (error) or -2 (invalid handle)
     DSQLAlcStmt       PR            10I 0 ExtProc('SQLAllocStmt')
      * Connection handle
     D                               10I 0 VALUE
      * Handle of the SQL statement
     D                               10I 0
      *********************************************************************
      * Function Prototype PREPARE SQL STATEMENT
      *
      *          SQLRETURN SQLPrepare (SQLHSTMT    hstmt,
      *                                SQLCHAR    *szSqlStr,
      *                                SQLINTEGER  cbSqlStr);
      *********************************************************************
      * Return value = 0 or 1 (OK) or -1 (error) or -2 (invalid handle)
     DSQLPrepare       PR            10I 0 ExtProc('SQLPrepare')
      * Handle of the SQL statement
     D                               10I 0 VALUE
      * Pointer to the field containing the SQL statement
     D                                 *   VALUE
      * Length of the SQL statement
     D                                5I 0 VALUE
      *********************************************************************
      * Function Prototype BIND BUFFER TO A PARAMETER MARKER
      *
      *          SQLRETURN  SQLBindParam(SQLHSTMT     hstmt,
      *                                  SQLSMALLINT  iparm,
      *                                  SQLSMALLINT  iType,
      *                                  SQLSMALLINT  pType,
      *                                  SQLINTEGER   pLen,
      *                                  SQLSMALLINT  pScale,
      *                                  SQLPOINTER   pData,
      *                                  SQLINTEGER  *pcbValue);
      *********************************************************************
      * Return value = 0 or 1 (OK) or -1 (error) or -2 (invalid handle)
     DSQLBindPar       PR            10I 0 ExtProc('SQLBindParam')
      * Handle of the SQL statement
     D                               10I 0 VALUE
      * Sequential parameter marker number
     D                                5I 0 VALUE
      * Data type of the parameter (application)
     D                                5I 0 VALUE
      * Data type of the parameter (SQL)
     D                                5I 0 VALUE
      * Length of the parameter
     D                               10I 0 VALUE
      * Decimal number of the parameter
     D                                5I 0 VALUE
      * Pointer to the buffer containing the parameter
     D                                 *   VALUE
      * Length of the parameter (se alfanumerico) or 0
     D                               10I 0
      *********************************************************************
      * Function Prototype BIND A COLUMN TO APPLICATION VARIABLE
      *
      *          SQLRETURN  SQLBindCol (SQLHSTMT     hstmt,
      *                                 SQLSMALLINT  icol,
      *                                 SQLSMALLINT  fCType,
      *                                 SQLPOINTER   rgbValue,
      *                                 SQLINTEGER   cbValueMax,
      *                                 SQLINTEGER  *pcbValue);
      *********************************************************************
      * Return value = 0 (OK) or -1 (error) or -2 (invalid handle)
     DSQLBindCol       PR            10I 0 ExtProc('SQLBindCol')
      * Handle of the SQL statement
     D                               10I 0 VALUE
      * Sequential parameter marker number
     D                                5I 0 VALUE
      * Data type of the parameter (application)
     D                                5I 0 VALUE
      * Pointer to the program variable
     D                                 *   VALUE
      * Length of the variable
     D                               10I 0 VALUE
      * Length of the parameter
     D                               10I 0
      *********************************************************************
      * Function Prototype EXECUTION STATEMENT PREPARED USING SQLPREPARE
      *
      *          SQLRETURN  SQLExecute (SQLHSTMT  hstmt);
      *********************************************************************
      * Return value = 0 or 1 (OK) or 100 (no data found)
      * or -1 (error) or -2 (invalid handle)
     DSQLExecute       PR            10I 0 ExtProc('SQLExecute')
      * Handle of the SQL statement
     D                               10I 0 VALUE
      *********************************************************************
      * Function Prototype EXECUTION DIRECT SQL STATEMENT
      *
      *          SQLRETURN SQLExecDirect (SQLHSTMT    hstmt,
      *                                   SQLCHAR    *szSqlStr,
      *                                   SQLINTEGER  cbSqlStr);
      *********************************************************************
      * Return value = 0 or 1 (OK) or 100 (no data found)
      * or -1 (error) or -2 (invalid handle)
     DSQLExecDir       PR            10I 0 ExtProc('SQLExecDirect')
      * Handle of the SQL statement
     D                               10I 0 VALUE
      * Pointer of the field containing the SQL statement
     D                                 *   VALUE
      * Length of the SQL statement
     D                                5I 0 VALUE
      *********************************************************************
      * Function Prototype FETCH NEXT ROW
      *
      *          SQLRETURN SQLFetch (SQLHSTMT   hstmt)
      *********************************************************************
      * Return value = 0 or 1 (OK) or 100 (no data found)
      * or -1 (error) or -2 (invalid handle)
     DSQLFetch         PR            10I 0 ExtProc('SQLFetch')
      * Statement handle
     D                               10I 0 VALUE
      *********************************************************************
      * Function Prototype LAST TRANSACTION
      *
      *          SQLRETURN  SQLTransact (SQLHENV      henv,
      *                                  SQLHDBC      hdbc,
      *                                  SQLSMALLINT  fType);
      *********************************************************************
      * Return value = 0 (OK) or -1 (error) or -2 (invalid handle)
     DSQLTrans         PR            10I 0 ExtProc('SQLTransact')
      * Environmental handle
     D                               10I 0 VALUE
      * Connection handle
     D                               10I 0 VALUE
      * Action of last transaction: 0=COMMIT, 1=ROLLBACK
     D                                5I 0 VALUE
      *********************************************************************
      * Function Prototype RETRIEVE ERROR INFORMATION
      *
      *          SQLRETURN  SQLError   (SQLHENV       henv,
      *                                 SQLHDBC       hdbc,
      *                                 SQLHSTMT      hstmt,
      *                                 SQLCHAR      *szSqlState,
      *                                 SQLINTEGER   *pfNativeError,
      *                                 SQLCHAR      *szErrorMsg,
      *                                 SQLSMALLINT   cbErrorMsgMax,
      *                                 SQLSMALLINT  *pcbErrorMsg);
      *********************************************************************
      * Return value = 0 or 1 (OK) or 100 (no data found)
      * or -1 (error) or -2 (invalid handle)
     DSQLError         PR            10I 0 ExtProc('SQLError')
      * Environmental handle
     D                               10I 0 VALUE
      * Connection handle
     D                               10I 0 VALUE
      * Handle of the SQL statement
     D                               10I 0 VALUE
      * Pointer to the field that must contain the SQLSTATE
     D                                 *   VALUE
      * SQLCODE returned from the database
     D                               10I 0
      * Pointer to the field that must contain the error message
     D                                 *   VALUE
      * Maximum length of the error message
     D                                5I 0 VALUE
      * Total length of the error message
     D                                5I 0
      *********************************************************************
      * Function Prototype DEALLOCATION HANDLE OF THE SQL STATEMENT
      *
      *          SQLRETURN SQLFreeStmt (SQLHSTMT    hstmt,
      *                                 SQLSMALLINT fOption)
      *********************************************************************
      * Return value = 0 or 1 (OK) or -1 (error) or -2 (invalid handle)
     DSQLFreeStm       PR            10I 0 ExtProc('SQLFreeStmt')
      * Handle of the SQL statement
     D                               10I 0 VALUE
      * Mode of deallocation
     D                                5I 0 VALUE
      *********************************************************************
      * Function Prototype DISCONNECTION OF A DATABASE
      *
      *          SQLRETURN  SQLDisconnect (SQLHDBC  hdbc);
      *
      *********************************************************************
      * Return value = 0 or 1 (OK) or -1 (error) or -2 (invalid handle)
     DSQLDisconn       PR            10I 0 ExtProc('SQLDisconnect')
      * Connection handle
     D                               10I 0 VALUE
      *********************************************************************
      * Function Prototype CONNECTION DEALLOCATION HANDLE
      *
      *          SQLRETURN  SQLFreeConnect (SQLHDBC hdbc);
      *********************************************************************
      * Return value = 0 (OK) or -1 (error) or -2 (invalid handle)
     DSQLFreeCon       PR            10I 0 ExtProc('SQLFreeConnect')
      * Connection handle
     D                               10I 0 VALUE
      *********************************************************************
      * Function Prototype DEALLOCATION ENVIRONMENTAL HANDLE
      *
      *          SQLRETURN  SQLFreeEnv (SQLHENV  henv);
      *********************************************************************
      * Return value = 0 (OK) or -1 (error) or -2 (invalid handle)
     DSQLFreeEnv       PR            10I 0 ExtProc('SQLFreeEnv')
      * Environmental handle
     D                               10I 0 VALUE
      *********************************************************************
      * RETCODE values
      *********************************************************************
     DSQL_OK           C                   CONST(0)
     DSQL_OK_INF       C                   CONST(1)
     DSQL_NODATA       C                   CONST(100)
     DSQL_NEEDAT       C                   CONST(99)
     DSQL_ERROR        C                   CONST(-1)
     DSQL_INVHAN       C                   CONST(-2)
      *********************************************************************
      * Valid values for connect attribute
      *********************************************************************
     DSQL_AUTIPD       C                   CONST(10001)
     DSQL_ISOLVL       C                   CONST(0)
     DSQL_NONE         C                   CONST(1)
     DSQL_CHANGE       C                   CONST(2)
     DSQL_CS           C                   CONST(3)
     DSQL_ALL          C                   CONST(4)
     DSQL_RR           C                   CONST(5)
      *********************************************************************
      * SQLFreeStmt option values
      *********************************************************************
     DSQL_CLOSE        C                   CONST(0)
     DSQL_DROP         C                   CONST(1)
     DSQL_UNBIND       C                   CONST(2)
     DSQL_RESET        C                   CONST(3)
      *********************************************************************
      * SQLTransact option values
      *********************************************************************
     DSQL_COMMIT       C                   CONST(0)
     DSQL_ROLLBK       C                   CONST(1)
      *********************************************************************
      * Standard SQL data types
      *********************************************************************
     DSQL_CHAR         C                   CONST(1)
     DSQL_NUMER        C                   CONST(2)
     DSQL_DECIM        C                   CONST(3)
     DSQL_INTEG        C                   CONST(4)
     DSQL_SMINT        C                   CONST(5)
     DSQL_FLOAT        C                   CONST(6)
     DSQL_REAL         C                   CONST(7)
     DSQL_DOUBLE       C                   CONST(8)
     DSQL_DATTIM       C                   CONST(9)
     DSQL_VARCH        C                   CONST(12)
     DSQL_GRAPH        C                   CONST(95)
     DSQL_VARGR        C                   CONST(96)
     DSQL_DATE         C                   CONST(91)
     DSQL_TIME         C                   CONST(92)
     DSQL_TIMEST       C                   CONST(93)
     DSQL_CD_DAT       C                   CONST(1)
     DSQL_CD_TIM       C                   CONST(2)
     DSQL_CD_TST       C                   CONST(3)
     DSQL_ALLTYP       C                   CONST(0)
      *********************************************************************
      * C data type to SQL data type mapping
      *********************************************************************
     DSQL_C_CHAR       C                   CONST(1)
     DSQL_C_LONG       C                   CONST(4)
     DSQL_C_SHRT       C                   CONST(5)
     DSQL_C_FLOT       C                   CONST(7)
     DSQL_C_DOUB       C                   CONST(8)
     DSQL_C_DTTM       C                   CONST(9)
      *********************************************************************
      * Generally useful constants
      *********************************************************************
      * Null Terminated String
     DSQL_NTS          C                   CONST(-3)
     DSQL_MAXMSG       C                   CONST(255)
     DSQL_SQLSTS       C                   CONST(5)
     DSQL_TRUE         C                   CONST(1)
     DSQL_FALSE        C                   CONST(0)
      *********************************************************************
      * Valid values for environment attributes
      *********************************************************************
     DSQL_AT_SYSNAM    C                   CONST(10002)
