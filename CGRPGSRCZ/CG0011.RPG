     H        1
      *****************************************************************
/*S*D****RPGBASE*******************************************************                       CSD053
/*STD *  RPGBNOCVT                                                    *                       CSD053
/*EXS *  RPGCVTOPT1                                                   *                       CSD053
/*EXI *  TEXT('Midas CG Correspondence details validation')
/*OVRF*: OVRDBF (File in program) (file on system)                  : *
     F*****************************************************************
     F*                                                               *
     F*  Midas - User Defined Correspondence                  *
     F*                                                               *
     F*  CG0011 - Correspondence details validation                   *
     F*                                                               *
     F*  Function:  This program xxxxxxxxxxxxxxxxxxxxxxxxxxxx         *
     F*  (phase(s))                                                   *
     F*                                                               *
     F*  Called By: mmCnnnn - (program name)                          *
     F*                                                               *
      *  (c) Misys International Banking Systems Ltd. 2001            *
     F*                                                               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      *  Last Amend No. CSD053             Date 01Jun06               *
      *  Prev Amend No. CSC022             Date 24Feb04               *
      * Midas Release 4 --------------- Base -------------------------*
      * Midas DBA 3.00 ---------------- Base -------------------------*
      *                 S01522             Date 01Jan95               *
      *                                    Date ddmmmyy               *
     F*                                                               *
     F*---------------------------------------------------------------*
     F*                                                               *
      *  CSD053 - Correspondence Manager Multilanguage Upgrade        *
      *         - (recompile)                                         *
      *  CSC022 - Commitment Control Changes for MidasPlus            *
      *  S01522 - User Defined Correspondence                         *
     F*                                                               *
     F*****************************************************************
     FCGCORRL1IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGCASCL1IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGCASCL2IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGCSTRL1IF  E           K        DISK
     F                                              KINFSR SRFILE
     E/EJECT
     E*
     E*  Array containing Copyright statement
     E*
     E                    CPY@    1   1 80
      **                                                                                      CSC022
      ** Array to hold commitment jobs name                                                   CSC022
      **                                                                                      CSC022
     E                    WCMT       10 10                                                    CSC022
      **                                                                                      CSC022
     E/COPY CGCPYSRC,SRERRE
     E*
     E*  Copysource for error processing
     E*
     I/COPY CGCPYSRC,SRERRI
     I*
     I*  End of Program Error Processing copysource
     I*
     IRUNDTA    E DSRUNDAT
     I*
     I* Get Rundate - Rundate  *
     I*
     IMMODDS    E DSSDMMODPD
     I*
     I* Modules Data Structure *
     I*
     IDSFDY     E DSDSFDY                                                 S01194
     I*                                                                   S01194
     I* Data Structures used by Access Programs                           S01194
     I*                                                                   S01194
     I/COPY CGCPYSRC,CGCOV
     I*
     I* Plist DS
     I*
      *
     I            DS
     I                                        1   40Z1
     I                                        5   80Z2
     I                                        9  120Z3
     I                                       13  160Z4
     I                                       17  200Z5
      *
     ISTACK       DS
      *
     I                                        1  38 ACTION
      *
     I            DS
     I I            99999                     1   50#L
      *
     I              'PCOSTACK  '          C         WKDQ1
     I              'PCOSTORE  '          C         WKDQ2
     I              '*LIBL'               C         LIBL
     I              'CGD1811'             C         ERRMSG
      *
     I            DS
     I I            38                    P   1   20WKDL1
     I I            1                     P   3   40WKDL2
     I I            10                    P   3   40WKDK2
      *
     IST1DS       DS
     I                                        1  10 ST1DS1
     I                                       11  20 ST1DS2
     I                                       21  230ST1DS3
     I                                       24  260ST1DS4
     I                                       27  290ST1DS5
     I                                       30  30 ST1DS6
      *
     I                                       31  34 ST1DS7
      *
     I                                       31  31 STF001
     I                                       32  32 STF002
     I                                       33  33 STF003
     I                                       34  34 STF004
      *
     I                                       35  38 ST1DS8
      *
     I                                       35  35 STT001
     I                                       36  36 STT002
     I                                       37  37 STT003
     I                                       38  38 STT004
      *
     IST2DS       DS
     I                                        1  10 ST2DS1
      *
     I            DS
     I I            'CGUSRMSG'                1  10 ZADFMF
      **                                                                                      CSC022
     ISCCMT       DS                            256                                           CSC022
     I                                        1   30WCMTNO                                    CSC022
     I                                        4 103 WCJOBS                                    CSC022
      ** Commitment Control dataarea                                                          CSC022
      **                                                                                      CSC022
     ISCSARD    E DSSCSARDPD                                                                  CSC022
      ** DS for Switchable Features details                                                   CSC022
      **                                                                                      CSC022
      *****************************************************************
      *                 M A I N L I N E
      *****************************************************************
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'MAIN'    @STK,Q
      * Entry parameters
     C           *ENTRY    PLIST
     C                     PARM           P0RTN   7
     C                     PARM           CGCOV
      *
     C           STINZ1    PLIST
     C                     PARM WKDQ1     QNAME  10
     C                     PARM LIBL      LIB    10
      *
     C           STINZ2    PLIST
     C                     PARM WKDQ2     QNAME  10
     C                     PARM LIBL      LIB    10
      *
     C           STPUSH    PLIST
     C                     PARM WKDQ1     QNAME  10
     C                     PARM LIBL      LIB    10
     C                     PARM WKDL1     FLDLEN  50
     C                     PARM ST1DS     STACK
      *
     C           STPOP     PLIST
     C                     PARM WKDQ1     QNAME  10
     C                     PARM LIBL      LIB    10
     C                     PARM WKDL2     FLDLEN  50
     C           ST1DS     PARM           STACK
     C                     PARM 0         WAIT    50
      *
     C           STSTOR    PLIST
     C                     PARM WKDQ2     QNAME  10
     C                     PARM LIBL      LIB    10
     C                     PARM WKDL2     FLDLEN  50
     C                     PARM           DUMMY1  1
     C                     PARM WKDK2     KEYLEN  30
     C                     PARM ST2DS     KEYVAL 10
      *
     C           STPULL    PLIST
     C                     PARM WKDQ2     QNAME  10
     C                     PARM LIBL      LIB    10
     C                     PARM WKDL2     FLDLEN  50
     C                     PARM           DUMMY1  1
     C                     PARM 0         WAIT    50
     C                     PARM 'EQ'      KEYORD  2
     C                     PARM WKDK2     KEYLEN  30
     C                     PARM ST2DS     KEYVAL 10
     C                     PARM 0         SNDLEN  30
     C                     PARM           SNDR   44
      *
     C           KEYL01    KLIST
     C                     KFLD           CAFCOR
      *
     C           KEYL02    KLIST
     C                     KFLD           CATCOR
      *
     C           KEYL03    KLIST
     C                     KFLD           CDCORR
      *
     C           KEYL04    KLIST
     C                     KFLD           CSCSTR
      *
      *  Reset return code
      *
     C                     MOVEL*BLANKS   P0RTN
      *  Clear stack
     C                     CALL 'QCLRDTAQ'STINZ1
      *  Process known updates
     C                     SELEC
      *
     C           W0FIL     WHEQ 'C'
     C           W0ACTP    ANDEQ'A'
      *
      *  Check backwards for error
      *
     C                     MOVE 'B'       #DIREC
      *
     C                     Z-ADD1         #L
      *
     C                     CLEARST1DS
     C                     MOVE *HIVAL    ST1DS1
     C                     MOVELW0COR1    ST1DS2    P
     C                     EXSR SRCHKC
      *
      *  Check forwards for error & loop
      *
     C                     MOVE 'F'       #DIREC
      *
     C                     RESET#L
      *
     C                     CLEARST1DS
     C                     MOVELW0COR1    ST1DS1    P
     C                     MOVE *HIVAL    ST1DS2
     C                     EXSR SRCHKC
      *
     C           W0FIL     WHEQ 'A'
     C           W0ACTP    ANDEQ'I'
      *
      *  Check backwards for error
      *
     C                     MOVE 'B'       #DIREC
      *
     C                     Z-ADD1         #L
      *
     C                     CLEARST1DS
     C                     MOVELW0COR1    ST1DS1    P
     C                     MOVELW0COR2    ST1DS2    P
     C                     EXSR SRCHKC
      *
      *  Check forwards for error & loop
      *
     C                     MOVE 'F'       #DIREC
      *
     C                     RESET#L
      *
     C                     CLEARST1DS
     C                     MOVELW0COR1    ST1DS1    P
     C                     MOVELW0COR2    ST1DS2    P
     C                     EXSR SRCHKC
      *
     C           W0FIL     WHEQ 'S'
     C           W0ACTP    ANDEQ'I'
      *
      *  Check backwards for error
      *
     C                     MOVE 'B'       #DIREC
      *
     C                     RESET#L
      *
     C                     CLEARST1DS
     C                     MOVE *HIVAL    ST1DS1
     C                     MOVELW0COR2    ST1DS2    P
     C                     EXSR SRCHKC
      *  if link not found error
     C           #CORRS    IFEQ *BLANKS
      *
     C                     MOVELW0PGM     ZAPGMQ
     C                     MOVEL'CGD1806' ZAMSID
     C           W0COR1    CAT  W0COR2    ZAMSDA    P
     C                     EXSR ZASNMS
     C                     MOVELERRMSG    P0RTN
      *
     C                     END
      *
     C                     OTHER
      *
      *  Unknown update: serious error
      *
     C                     MOVELERRMSG    P0RTN
      *
     C                     ENDSL
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
      *  Return to calling program
      *
     C                     RETRN
     C/EJECT
     C           *INZSR    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q       50
     C                     MOVEL'*INZSR'  @STK,Q
      *
      *  Set up copyright statement
      *
     C                     MOVEACPY@      ACT@   80
      *
      *  Get Rundate information
      *
     C           *NAMVAR   DEFN RUNDAT    RUNDTA
     C                     IN   RUNDTA
     C                     MOVE AGMRDT    WUMRDT  7        Midas Run date
     C                     MOVE AGRDNB    WURDNB  50       Run day number
     C                     MOVE AGSUC     WUSUC   1        Set up complete
     C                     MOVE AGDFF     WUDFF   1        Date Format
     C                     MOVE AGMBIN    WUMBIN  1        Multi Branched
     C*
     C* Get modules information
     C*
     C                     CALL 'AOMMODR0'             9090
     C                     PARM *BLANKS   P@RTCD  7        B:Return code
     C                     PARM '*FIRST ' P@OPTN  7        I:Option
     C           MMODDS    PARM *BLANKS   DSFDY            O:Module Flg
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           P@RTCD    OREQ '*ERROR*'
     C                     MOVEL'AOMMODR0'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD1         W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      * Put DTAQ into QTEMP for use as stack
      *
     C                     CALL 'CGC3002'              9090
     C                     PARM *BLANKS   P@RTCD  7        B:Return code
     C                     PARM WKDQ1     P@DTAQ 10
     C                     PARM WKDL1     P@DTAL  30
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           P@RTCD    OREQ '*ERROR*'
     C                     MOVEL'CGC3002' W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD2         W0ERNB           * DB ERROR 05 *
     C                     MOVEL'CGD1741' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      * Put DTAQ into QTEMP for use as store
      *
     C                     CALL 'CGC3005'              9090
     C                     PARM *BLANKS   P@RTCD  7        B:Return code
     C                     PARM WKDQ2     P@DTAQ 10
     C                     PARM WKDL2     P@DTAL  30
     C                     PARM WKDK2     P@KEYL  30
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           P@RTCD    OREQ '*ERROR*'
     C                     MOVEL'CGC3002' W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD3         W0ERNB           * DB ERROR 05 *
     C                     MOVEL'CGD1741' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      **                                                                                      CSC022
      ** Initialize CSC022 and Skip Commit/Rollback flags                                     CSC022
      **                                                                                      CSC022
     C                     MOVE 'N'       CSC022  1                                           CSC022
     C                     MOVE 'N'       WCMTSK  1                                           CSC022
      **                                                                                      CSC022
      ** Access SAR details file to determine if CSC022 switchable feature                    CSC022
      ** is switched on                                                                       CSC022
      **                                                                                      CSC022
     C                     CALL 'AOSARDR0'                                                    CSC022
     C                     PARM *BLANKS   P@RTCD  7                                           CSC022
     C                     PARM '*VERIFY 'P@OPTN  7                                           CSC022
     C                     PARM 'CSC022'  P@SARD  6                                           CSC022
     C           SCSARD    PARM SCSARD    DSFDY                                               CSC022
      **                                                                                      CSC022
     C           P@RTCD    IFEQ *BLANKS                                                       CSC022
     C                     MOVE 'Y'       CSC022                                              CSC022
      **                                                                                      CSC022
      ** Get Jobs currently running i batch mode using SCCMRJOB dataarea                      CSC022
      **                                                                                      CSC022
     C           *NAMVAR   DEFN SCCMTJOB  SCCMT                                               CSC022
     C                     IN   SCCMT                                                         CSC022
      **                                                                                      CSC022
     C           WCMTNO    IFGT 0                                                             CSC022
      ** Move committed jobs to arrary for checking                                           CSC022
     C                     MOVEAWCJOBS    WCMT                                                CSC022
      ** Verify if job running exists in array                                                CSC022
     C           ##JOB     LOKUPWCMT                     50                                   CSC022
     C           *IN50     IFEQ *ON                                                           CSC022
     C                     MOVE 'Y'       WCMTSK                                              CSC022
     C                     ENDIF                                                              CSC022
     C                     ENDIF                                                              CSC022
      **                                                                                      CSC022
     C                     ELSE                                                               CSC022
      ** Execute *PSSR if CSC022 is not found or Database error                               CSC022
     C           P@RTCD    IFNE '*NRF'                                                        CSC022
     C                     MOVEL'CSC022'  W0KEY                                               CSC022
     C                     MOVEL'SCSARDPD'W0FILE                                              CSC022
     C                     Z-ADD1         W0ERNB                                              CSC022
     C                     EXSR SRERR                                                         CSC022
     C                     ENDIF                                                              CSC022
      **                                                                                      CSC022
     C                     ENDIF                                                              CSC022
      **                                                                                      CSC022
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRCHKC   : Push next level                                   *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 010                                               *
      *                                                               *
      *****************************************************************
     CSR         SRCHKC    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRCHKC'  @STK,Q
      *
      *  Initialise duplicates queue
      *
     C                     CALL 'QCLRDTAQ'STINZ2
      *  Store starting point
     C                     SELEC
     C           #DIREC    WHEQ 'F'
     C                     MOVE ST1DS1    ST2DS1
     C           #DIREC    WHEQ 'B'
     C                     MOVE ST1DS2    ST2DS1
     C                     ENDSL
      *
     C                     CALL 'QSNDDTAQ'STSTOR
      *
      *  Clear working indicators
      *
     C           *LIKE     DEFN W0COR1    #CORRS
     C                     CLEAR#CORRS
     C                     CLEARFLDLEN
      *
      *  DOU Stack Pull End
      *
     C           FLDLEN    DOUEQ0
      *  validate node
     C           FLDLEN    IFNE 0
      *  set flag if link
     C           ST1DS1    IFEQ W0COR1
     C                     MOVE ST1DS1    #CORRS
     C                     END
      *
     C                     SELEC
      *
     C           #DIREC    WHEQ 'B'
      *
     C           STT001    IFEQ '0'
      *
     C                     MOVELW0PGM     ZAPGMQ
     C                     MOVEL'CGD1807' ZAMSID
     C           ST1DS2    CAT  ST1DS1    ZAMSDA
     C                     EXSR ZASNMS
     C                     MOVELERRMSG    P0RTN
      *
     C                     END
      *
     C           'S'       SCAN ST1DS8                   30
     C           *IN30     IFEQ *OFF
     C           ST1DS5    ANDGT1
      *
     C                     MOVELW0PGM     ZAPGMQ
     C                     MOVEL'CGD1808' ZAMSID
     C           ST1DS2    CAT  ST1DS1    ZAMSDA
     C                     EXSR ZASNMS
     C                     MOVELERRMSG    P0RTN
      *
     C                     END
      *
     C           #DIREC    WHEQ 'F'
      *
     C           STF002    IFEQ '0'
      *
     C                     MOVELW0PGM     ZAPGMQ
     C                     MOVEL'CGD1809' ZAMSID
     C           ST1DS1    CAT  ST1DS2    ZAMSDA
     C                     EXSR ZASNMS
     C                     MOVELERRMSG    P0RTN
      *
     C                     END
      *
     C                     ENDSL
      *
     C                     END
      *
     C                     ADD  1         ST1DS3
     C                     Z-ADD0         ST1DS4
     C                     Z-ADD0         ST1DS5
      *
     C           ST1DS3    IFLE #L
      *
      *  Push first (no database entry at this point)
      *
     C           ST1DS3    IFEQ 1
     C           ST1DS1    ANDNE*HIVAL
     C           ST1DS2    ANDNE*HIVAL
     C                     EXSR SRPUSH
     C                     END
      *  check for associations
     C                     SELEC
     C           #DIREC    WHEQ 'F'
      *
     C           ST1DS3    IFGT 1
     C                     MOVELST1DS2    ST1DS1
     C                     END
      *
     C                     MOVELST1DS1    CAFCOR    P
     C           KEYL01    CHAIN@CASCL1              02
      *
     C           *IN02     DOWEQ*OFF
      *
     C                     MOVELCATCOR    ST1DS2    P
     C                     EXSR SRPUSH
      *
     C           KEYL01    READE@CASCL1                  02
     C                     END
      *
     C           #DIREC    WHEQ 'B'
      *
     C           ST1DS3    IFGT 1
     C                     MOVELST1DS1    ST1DS2
     C                     END
      *
     C                     MOVELST1DS2    CATCOR    P
     C           KEYL02    CHAIN@CASCL2              03
      *
     C           *IN03     DOWEQ*OFF
      *
     C                     MOVELCAFCOR    ST1DS1    P
     C                     EXSR SRPUSH
      *
     C           KEYL02    READE@CASCL2                  03
     C                     END
      *
     C                     ENDSL
      *
     C                     END
      *
     C                     CALL 'QRCVDTAQ'STPOP
      *
     C                     END
      *
     C                     MOVE *BLANKS   #DIREC  1
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRPUSH   : Push next level                                   *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 100                                               *
      *                                                               *
      *****************************************************************
     CSR         SRPUSH    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRPUSH'  @STK,Q
      *
     C                     SELEC
     C           #DIREC    WHEQ 'F'
     C                     MOVE ST1DS2    ST2DS1
     C           #DIREC    WHEQ 'B'
     C                     MOVE ST1DS1    ST2DS1
     C                     ENDSL
      *  Test for loop
     C                     CALL 'QRCVDTAQ'STPULL
      *
     C           FLDLEN    IFNE 0
      *
     C           ST1DS6    IFEQ 'N'
      *
     C                     MOVELW0PGM     ZAPGMQ
     C                     MOVEL'CGD1810' ZAMSID
     C           ST1DS1    CAT  ST1DS2    ZAMSDA
     C                     EXSR ZASNMS
     C                     MOVELERRMSG    P0RTN
      *
     C                     END
      *
     C                     ELSE
      *
     C                     CALL 'QSNDDTAQ'STSTOR
      *
     C                     ADD  1         ST1DS4
     C                     MOVELST1DS1    CDCORR
     C           KEYL03    CHAIN@CORRL1              01
      *
     C           *IN01     IFEQ *ON
     C                     MOVEL'CGCORRL1'W0FILE
     C                     MOVELST1DS1    W0KEY            ***************
     C                     Z-ADD101       W0ERNB           * DB ERROR 01 *
     C                     MOVEL'MEM5004' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     MOVELCDCSTR    CSCSTR
      *
     C           W0CSTR    IFNE *BLANKS
     C           W0COR1    ANDEQCDCORR
     C                     MOVELW0CSTR    CSCSTR
     C                     END
      *
     C           KEYL04    CHAIN@CSTRL1              04
      *
     C           *IN04     IFEQ *ON
     C                     MOVEL'CGCSTRL1'W0FILE
     C                     MOVELCSCSTR    W0KEY            ***************
     C                     Z-ADD102       W0ERNB           * DB ERROR 01 *
     C                     MOVEL'MEM5004' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     MOVELCSATYP    ST1DS7
      *
     C           #DIREC    IFEQ 'B'
      * MIDAS Entity
     C           CDCUST    IFNE *BLANKS
     C           CDCPNC    ORNE *BLANKS
     C           CDBICC    ORNE *BLANKS
     C           CDBICB    ORNE *BLANKS
     C                     ADD  1         ST1DS5
     C                     END
      * Non recursor in loop
     C           'R'       SCAN ST1DS7                   30
     C           *IN30     IFEQ *OFF
     C                     MOVE 'N'       ST1DS6
     C                     END
      *
     C                     END
      *
     C                     MOVELST1DS2    CDCORR
     C           KEYL03    CHAIN@CORRL1              01
      *
     C           *IN01     IFEQ *ON
     C                     MOVEL'CGCORRL1'W0FILE
     C                     MOVELST1DS1    W0KEY            ***************
     C                     Z-ADD103       W0ERNB           * DB ERROR 01 *
     C                     MOVEL'MEM5004' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     MOVELCDCSTR    CSCSTR
      *
     C           W0CSTR    IFNE *BLANKS
     C           W0COR1    ANDEQCDCORR
     C                     MOVELW0CSTR    CSCSTR
     C                     END
      *
     C           KEYL04    CHAIN@CSTRL1              04
      *
     C           *IN04     IFEQ *ON
     C                     MOVEL'CGCSTRL1'W0FILE
     C                     MOVELCSCSTR    W0KEY            ***************
     C                     Z-ADD104       W0ERNB           * DB ERROR 01 *
     C                     MOVEL'MEM5004' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     MOVELCSATYP    ST1DS8
      *
     C           #DIREC    IFEQ 'F'
      * MIDAS Entity
     C           CDCUST    IFNE *BLANKS
     C           CDCPNC    ORNE *BLANKS
     C           CDBICC    ORNE *BLANKS
     C           CDBICB    ORNE *BLANKS
     C                     ADD  1         ST1DS5
     C                     END
      * Non recursor in loop
     C           'R'       SCAN ST1DS7                   30
     C           *IN30     IFEQ *OFF
     C                     MOVE 'N'       ST1DS6
     C                     END
      *
     C                     END
      *
     C                     CALL 'QSNDDTAQ'STPUSH
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
      /EJECT
     CSR         ZASNMS    BEGSR
      *================================================================
      * Send message to program's message queue
      *================================================================
     C           ZAPGMQ    IFEQ *BLANK
     C                     MOVEL##PGM     ZAPGMQ
     C                     END
      * If no message file specified, use default
     C           ZAMSGF    IFEQ *BLANK
     C                     MOVELZADFMF    ZAMSGF
     C                     END
     C                     CALL 'Y2SNMGC'
     C                     PARM           ZAPGMQ 10        Program queue
     C                     PARM           ZAPGRL  5        Rel queue
     C                     PARM           ZAMSID  7        Message ID
     C                     PARM           ZAMSGF 10        Message file
     C                     PARM           ZAMSDA132        Message data
     C                     PARM           ZAMSTP  7        Message type
      * Clear all fields for default mechanism next time
     C                     MOVEL*BLANK    ZAPGMQ
     C                     MOVEL*BLANK    ZAPGRL
     C                     MOVEL*BLANK    ZAMSID
     C                     MOVEL*BLANK    ZAMSGF
     C                     MOVEL*BLANK    ZAMSDA
     C                     MOVEL*BLANK    ZAMSTP
      *================================================================
     CSR         ZAEXIT    ENDSR
     C/EJECT
      *
      * File and Program Error Processing
      *
     C/COPY CGCPYSRC,SRERRC
     C/EJECT
**  CPY@
(c) Misys International Banking Systems Ltd. 2001
