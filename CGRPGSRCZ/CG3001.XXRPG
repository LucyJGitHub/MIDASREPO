     H        1
      *****************************************************************
/*STD *  RPGBASE                                                      *
/*EXI *  TEXT('Midas CG Print Generator')
     F*****************************************************************
     F*                                                               *
     F*  Midas - User Defined Correspondence                          *
     F*                                                               *
     F*  CG3001 - Print Generator                                     *
     F*                                                               *
     F*  Function:  This program xxxxxxxxxxxxxxxxxxxxxxxxxxxx         *
     F*  (phase(s))                                                   *
     F*                                                               *
     F*  Called By: CG3000 - Print Generator Driver                   *
     F*                                                               *
      *  (c) Finastra International Limited 2001                      *
     F*                                                               *
      *  Last Amend No. MD054955 *REDUNDANTDate 16Dec19               *
      *  Prev Amend No. MD046248           Date 27Oct17               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      *                 CSD027             Date 09Dec05               *
      *                 CSC022             Date 24Feb04               *
      * Midas Release 4 --------------- Base -------------------------*
      *                 117554             Date 21May01               *
      * Midas DBA 3.00 ---------------- Base -------------------------*
      *                 104906             Date 06Mar97               *
     F*                 111544             DATE 26FEB97               *
     F*                 109567             DATE 04NOV96               *
     F*                 095470             DATE 24OCT95               *
     F*                 CCG011             DATE 10AUG95               *
     F*                 091826             DATE 10AUG95               *
     F*                 CCG009             DATE 01JUN95               *
     F*                 090417             DATE 12JUL95               *
     F*                 090256             DATE 10JUL95               *
     F*                 089201             DATE 16JUN95               *
     F*                 089195             DATE 16JUN95               *
     F*                 087786             DATE 14MAY95               *
     F*                 087781             DATE 10MAY95               *
     F*                 087066             DATE 04MAY95               *
     F*                 086243             DATE 06APR95               *
     F*                 086152             DATE 30MAR95               *
     F*                 084324             DATE 07MAR95               *
     F*                 086153             DATE 02MAR95               *
     F*                 S01522             DATE 09FEB95               *
     F*                                                               *
     F*---------------------------------------------------------------*
     F*                                                               *
      *  MD054955 - Deliverable Data Split for Correspondence Mgr     *
      *  MD046248 - Finastra Rebranding                               *
      *  CSD027 - Conversion Of Customer Number to Alpha              *
      *  CSC022 - Commitment Control Changes for MidasPlus            *
     F*  117554 - Increase CND (condition sets) to 120.               *
     F*           Change Hook CGCPYSRC/SRPII
     F*  104906 - Recompile only.                                     *
     F*  111544 - Recompile with IGNDECERR(*YES)                      *
     F*  109567 - Reset conditions after increment page number        *
     F*           Add records read as RDE to SYSTEM                   *
     F*  095470 - Get total number of pages                           *
     F*  CCG011 - Allow Fonts etc                                     *
     F*  091826 - Various print generator errors                      *
     F*  CCG009 - Private Banking UDC                                 *
     F*  090417 - Upon copies, page number being incorrectly updated  *
     F*           on the log record.                                  *
     F*  090256 - Inversion operator array incorrect.                 *
     F*  089201 - Prevent output of blank pages.                      *
     F*  089195 - Change Bulk jobs to use separate folders            *
     F*  087786 - Add pseudo-RDE for page number starting at 0.       *
     F*            o To reference this value, an RDE should be        *
     F*              created (PAGE_ZERO) and linked to the SYSTEM     *
     F*              group set.                                       *
     F*  087781 - Attempt to close any stream files from the last     *
     F*           invocation before starting new item.                *
     F*  087066 - Literal from/to pointer values too short            *
     F*            o ensure /COPY member SRPGE is also changed        *
     F*              before compiling.                                *
     F*  086243 - Substring literal on its length not translated      *
     F*  086152 - Change hardcoded fill of page                       *
     F*  084324 - Allow formatting of literals                        *
     F*  086153 - Add Graticule to Layout tool                        *
     F*  S01522 - User Defined Correspondence                         *
     F*                                                               *
     F*****************************************************************
     FCGWPCONDUF  E           K        DISK                      A    UC
     F                                              KINFSR SRFILE
     FCGPDECL1IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGPASCL3IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGPDEFL1IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGCONDL1IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGGCONL1IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGCGRPL1IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGRDTAL1IF  E           K        DISK
     F                                              KINFSR SRFILE
     FCGUDTAL2IF  E           K        DISK                           UC
     F                                              KINFSR SRFILE
     FCGXDTAL2IF  E           K        DISK                           UC
     F                                              KINFSR SRFILE
     F*GFOPTL1IF  E           K        DISK
     F**********************************************KINFSR SRFILE
     F**CG3000P1O***F     198     OA     PRINTER                      UC  CCG011
     FCG3000P1O   E             50     PRINTER                        UC  CCG011
     F                                              KINFDS DSQSYS
     F                                              KINFSR SRFILE
      *
     FCGWPDISPUF  E           K        DISK                      A    UC
     F                                              KINFSR SRFILE
     FCGWPBCNDO   E           K        DISK                           UC
     F                                              KINFSR SRFILE
     E/EJECT
     E*
     E*  Array containing Copyright statement
     E*
     E                    CPY@    1   1 80
     E/COPY CGCPYSRC,SROPRE
     E*  Pack/Unpack routine PLIST arrays
     E                    ##R        20 22               RDEs + attributes
     E                    ##D        20256               Data
     E                    ##S        20256               Data String
     E*  Line Manipulation Arrays
     E                    LIN       198  1
     E/COPY CGCPYSRC,SRERRE
     E*
     E*  Copysource for error processing
     E*
      ** Array of Commitment Job Names                                                        CSC022
     E                    CMTJOB     10 10                                                    CSC022
     E*EDTRCD: Cpysrc Templates Initialise Program E-spec
     E/COPY CGCPYSRC,SRPGE
      /EJECT
     I/COPY CGCPYSRC,SRPII
     I/COPY CGCPYSRC,SRPGI
     I/COPY CGCPYSRC,SRPGS
     I/COPY CGCPYSRC,SRPGN
     I/COPY CGCPYSRC,SRERRI
     I*
     I*  End of Program Error Processing copysource
     I*
     I*
     IRUNDTA    E DSRUNDAT
     I*
     I* Get Rundate - Rundate  *
     I*
     IMMODDS    E DSSDMMODPD
     I*
     I* Modules Data Structure *
     I*
     IDSFDY     E DSDSFDY                                                 S01194
     I*                                                                   S01194
     I* Data Structures used by Access Programs                           S01194
     I*                                                                   S01194
     IDSQSYS      DS                                                      S01194
     I                                      103 112 SPLNAM
     I                                    B 123 1240SPLNUM
     I                                    B 369 3720SPLPAG
      *
     IUDTDTA    E DSCGUDTAPD
      *
      *  User Defined Correspondence Data Area
      *
     ISDSTAT    E DSSDSTAT                                                S01194
     ICGDTA     E DSCGDTA                                                 S01194
     ICGLDA     E DSCGLDA                                                 S01194
      *
     ISCSARD    E DSSCSARDPD                                              CCG011
      **  Sar Text details                                                CCG011
      *                                                                   CCG011
     I#LFDS       DS
     I                                        1   30@CCB
     I                                        4   60#PFROW
     I                                        7   90#PFCOL
     I                                       10  120#POROW
     I                                       13  150#POCOL
     I                                       16  16 F#BOXD
      *
     I#LRDS       DS
     I                                        1   30#PRROW
     I                                        4   60#PRCOL
     I                                        7   90#PEROW
     I                                       10  120#PECOL
     I                                       13  13 R#BOXD
     I                                       14  14 #POFOP
      *
     I#LODS       DS
     I                                        1   1 #POFAB
      *
     I#LCDS       DS
     I                                        1   80#PPCON
      *
     I#FCDS       DS
     I                                        1   80#PFCON
      *
     I#FCKEY      DS
     I                                        1  10 #RPLAN
     I                                       11  20 ###LDN
      *
     I#LADS       DS
     I                                        1  10 #ATPLN
     I                                       11  13 #ASEQA
      *
     I#RGDS       DS
     I                                        1   30@CBI
     I                                        4   60@OFH
     I                                        7  12 #PRPTH
     I                                       13  13 #FIXED
     I                                       14  14 #PFPAB
     I                                       15  15 #DUMMY
      *
     I#RCDS       DS
     I                                        1  10 OFFREP
      *
     I#ALDS       DS
     I                                        1   30@DED
      *
     I#APDS       DS
     I                                        1   30@DEP
      *
     I#ALKEY      DS
     I                                        1   6 #RRPTH
     I                                        7  12 #RNPTH
     I                                       13  22 #RRDE
      *
     I@ALKEY      DS
     I                                        1   6 @RRPTH
     I                                        7  12 @RNPTH
     I                                       13  22 @RRDE
      *
     I#ALOFH      DS
     I                                        1   6 #RROFH
     I I            'REPEAT'                  7  12 #RNOFH
     I I            '##DATA'                 13  22 #RDOFH
      *
     I#LIDS       DS
     I                                        1   30@DEDF
     I                                        4   60@DEDT
      *
     I#LIKEY      DS
     I                                        1   6 ##RPTH
     I                                        7  12 ##NPTH
      *
     I#FDDS       DS
     I                                        1   30@@DED
     I                                        4  13 #RFLDN
     I                                       14  160#RSROW
     I                                       17  190#RSCOL
     I                                       20  29 #RCFMO
     I                                       30  44 #RCFOP
     I                                       45  54 #RCOPT
     I                                       55  69 #RCFTP
     I                                       70  79 #RNFMT
     I                                       80  94 #RNFOP
     I                                       95  97 #RALGN
     I                                       98 1020#ROLEN
     I                                      103 112 #LRRDE
     I                                      113 113 #RLCVL
     I                                      114 119 ##ELYP
     I                                      120 129 ##FOPT
      * literals only
     I************************************* 130 1320#STRFR                087066
     I************************************* 133 1350#STRTO                087066
     I                                      130 1340#STRFR                087066
     I                                      135 1390#STRTO                087066
      *
     I#SCDS       DS
     I                                        1   6 #NRELM
     I                                        7  12 #NLELM
     I                                       13  150@DEDL
     I                                       16  180@DEDR
     I                                       19  28 #NOPER
      *
     I                                       13  18 #CMPSC
      *
     I#SCKEY      DS
     I                                        1   6 ##RELM
     I                                        7  12 ##LELM
     I                                       13  150@@DEDL
     I                                       16  180@@DEDR
     I                                       19  28 ##OPER
      *
     I#STDS       DS
     I                                        1   30@CND
     I                                        4   4 #GACND
     I                                        5  120#CGCID
      *
     I#EVDS       DS
     I                                        1   30@BSCE
     I                                        4   9 #NCONG
      *
     I#ECDS       DS
     I                                        1   30#M1
     I                                        4   60#M2
      *
     I#DEDS       DS
     I                                        1  25 #DETXT
     I                                    P  26  280#DMAXL
     I                                       29  34 #DELYP
     I                                       35  44 #DFOPT
      *
     I*FTDS       DS
     I*                                       1  10 #OFPGM
      *
     I*FTKEY      DS
     I*                                       1  10 #OFOPT
     I*                                      11  25 #OFRMT
      *
     I            DS
     I                                        1   40L1
     I                                        5   80L2
     I                                        9  120L3
     I                                       13  160L4
     I                                       17  200L5
     I                                       21  240L6
      *
     I            DS
     I                                        1   40S1
     I                                        5   80S2
     I                                        9  120S3
     I                                       13  160S4
     I                                       17  200S5
      *
     I            DS
     I                                        1   40F1
     I                                        5   80F2
     I                                        9  120F3
     I                                       13  160F4
     I                                       17  200F5
      *
     I            DS
     I                                        1   40I1
     I                                        5   80I2
     I                                        9  120I3
     I                                       13  160I4
     I                                       17  200I5
      *
     I            DS
     I                                        1   40A1
     I                                        5   80A2
     I                                        9  120A3
     I                                       13  160A4
     I                                       17  200A5
      *
     I            DS
     I                                        1   40Z1
     I                                        5   80Z2
     I                                        9  120Z3
     I                                       13  160Z4
     I                                       17  200Z5
      *
     I##SDS       DS
     I                                        15120 ##S
      *
     I            DS
     I                                        1 256 CL
     I                                        1 256 CLA
      *
     I            DS
     I                                        1 256 CC
     I                                        1 256 CCA
      *
     I            DS
     I                                        1 256 CO
     I                                        1 256 CCO
      *
     I            DS
     I                                        1 198 LIN
     I                                        1 198 LINE
      *
     I#PNAME      DS
     I I            '/QDLS/'                  1   6 #C1
     I                                        7   8 #P0
     I I            'FILE.DTA'                9  16 #D1
     I                                        7  16 #P1
     I                                       12  12 ##STRF                089195
     I I            '/'                      17  17 #C2
     I                                       18  23 #P2
     I I            '/J'                     24  25 #C3
     I                                       26  310#P3
      *
     I                                        1  16 #PNAM0
     I                                        1  23 #PNAM1
      *
     I#PNLE0      DS
     I I            16                    B   1   40PNLE0
      *
     I#PNLE1      DS
     I I            23                    B   1   40PNLE1
      *
     I#PATTL      DS
     I I            0                     B   1   40PATTL
      *
     I#PNLEN      DS
     I I            31                    B   1   40PNLEN
      *
     I#OPENI      DS
     I I            '2'                       1   1 OPEN01
     I I            '1'                       2   2 OPEN02
     I I            '0'                       3   3 OPEN03
     I I            ' '                       4   4 OPEN04
     I I            '1'                       5   5 OPEN05
     I I            '2'                       6   6 OPEN06
     I I            '0'                       7   7 OPEN07
     I I                                      8  10 OPENR1
      *
     I#MOVEI      DS
     I I            '0'                       1   1 MOVE01
     I I                                      2   6 MOVER1
      *
     I#AILEN      DS
     I I            0                     B   1   40AILEN
      *
     I#ERRDS      DS
     I I            256                   B   1   40BYTEP
     I                                    B   5   80BYTEA
     I                                        9  15 EXCPID
     I I                                     16  16 RESER1
     I                                       17 256 EXDATA
      *
     I#BYTEO      DS
     I                                    B   1   40BYTEO
      *
     I#BYTEW      DS
     I                                    B   1   40BYTEW
      *
     I#BYTER      DS
     I                                    B   1   40BYTER
      *
     I#BYTEM      DS
     I                                    B   1   40BYTEM
      *
     I#BSIZE      DS
     I                                    B   1   40BSIZE
      *
     ISTACK       DS
     I                                        1  10 #PLPRC
     I                                       11  20 #PLBOX
     I                                       21  230#DEPTH
      *
     I            DS
     I                                        1   3 #SFILL
     I                                        1   1 #START
     I                                        2   2 #DIREC
      *
     I            DS
     I                                        1   30N#ROW
     I                                        1   3 A#ROW
      *
     I            DS
     I                                        1   30N#COL
     I                                        1   3 A#COL
      *
     IMED#        DS
     I                                        1   20OPR1
     I                                        3   40OPR2
      *
     I            DS
     I                                        1   70#COPY
      *
     I            DS
     I                                        1   70##PAGE
      *
     I            DS
     I                                        1   70##PAGR
      *
     I            DS
     I                                        1   70#ITNO
      *
     I            DS                                                      087786
     I                                        1   70##PAG0                087786
      *                                                                   087786
     I            DS                                                      CCG009
     I                                        1   70##PAPB                CCG009
      *                                                                   CCG009
     I            DS                                                      095470
     I                                        1   70##TNP                 095470
      *                                                                   095470
      * Define number of reads per page                                   109567
     I            DS                                                      109567
     I                                        1   70##RDS                 109567
      *                                                                                       CSC022
     ISCCMT       DS                            256                                           CSC022
     I                                        1   30CMTNUM                                    CSC022
     I                                        4 103 CMTARR                                    CSC022
      *                                                                   109567
     I              'PGPSTACK  '          C         WKDQ1
     I              'CGWPCOND  '          C         WKF1
      *
     I              'SYSTEM'              C         SYSPTH
     I              'COPY'                C         RDECPY
     I              'PAGE'                C         RDEPAG
     I              'ROLL_PAGE'           C         RDEPAR
     I              'ITEM_NMBR'           C         RDEITN
     I              'PAGE_ZERO'           C         RDEPG0                087786
     I              'GROUP_PAGE'          C         RDEPPB                CCG009
     I              'TOTAL_PAGE'          C         RDETNP                095470
     I              'PAGE_READS'          C         RDERDS                109567
      *
     I              '*LIBL'               C         LIBL
      *
     I              'OVRDBF FILE('        C         CMDS11
     I              ') TOFILE(QTEMP/'     C         CMDS12
     I              ')'                   C         CMDS13
      *
     I              'OVRPRTF (CG3000P1)'  C         CMDS21
     I              'PAGESIZE('           C         CMDS22
     I              ') OVRFLW('           C         CMDS23
     I              ')'                   C         CMDS24
      *
     I              'AND   '              C         ANDCND
     I              'OR    '              C         ORCND
     I              'IF    '              C         IFCND
      *
     I              'Y '                  C         FSTCND
     I              'NN'                  C         SUBCND
     I              ' Y'                  C         LSTCND
     I              'YY'                  C         ONECND
      *
     I              ':'                   C         BORL01
     I              '*'                   C         BORL02
     I              '+'                   C         BORL03
     I              '&'                   C         BORL04                086153
      *
     I              '*ALL      '          C         ALLDFT
      *
     I              'Character'           C         CHACDE
     I              'BRACKETS'            C         BRACDE
      *
     I              '*BLANK'              C         BLNCDE
     I              '*ZERO'               C         ZERCDE
     I              '0'                   C         ZEROLI
      *****************************************************************
      *                 M A I N L I N E
      *****************************************************************
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'MAIN'    @STK,Q
      * Entry parameters
     C           *ENTRY    PLIST
     C                     PARM           P0RTN   7
     C                     PARM           W0ACT   8        Action Code
     C***********          PARM INDEX     #INDEX                          086152
      *
     C************LIKE     DEFN INDEX     #INDEX                          086152
      *
     C           *LIKE     DEFN #@LAYO    I#LCDE
     C           *LIKE     DEFN #@LAYO    I@LCDE
      *
     C           *NAMVAR   DEFN *LDA      CGLDA
      *
     C           PL3010    PLIST
     C                     PARM *BLANKS   P@RTCD  7
     C                     PARM           ##LELM
     C                     PARM           ##RELM
     C                     PARM           ##OPER
     C                     PARM           ##L256256
     C                     PARM           ##R256256
     C                     PARM           #CONDV  1
      *
     C           PLFOPT    PLIST
     C                     PARM *BLANKS   P@RTCD  7
     C                     PARM @RD256    #DATAI256
     C           @RD256    PARM *BLANKS   #DATAO256
     C                     PARM           #DATAL  30
     C                     PARM #RNFMT    #DAOP1
     C                     PARM #RNFOP    #DATY1
     C                     PARM #RCOPT    #DAOP2
     C                     PARM #RCFTP    #DATY2
     C                     PARM #RCFMO    #DAOP3
     C                     PARM #RCFOP    #DATY3
     C                     PARM #RALGN    @RALGN
     C                     PARM ##ELYP    @DELYP
     C                     PARM ##FOPT    @DFOPT
      *
     C           *LIKE     DEFN #RNFMT    #DAOP1
     C           *LIKE     DEFN #RNFOP    #DATY1
     C           *LIKE     DEFN #RCOPT    #DAOP2
     C           *LIKE     DEFN #RCFTP    #DATY2
     C           *LIKE     DEFN #RCFMO    #DAOP3
     C           *LIKE     DEFN #RCFOP    #DATY3
     C           *LIKE     DEFN #RALGN    @RALGN
     C           *LIKE     DEFN #DELYP    @DELYP
     C           *LIKE     DEFN #DFOPT    @DFOPT
      *
     C           PL3999    PLIST
     C                     PARM *BLANKS   P@RTCD  7
     C                     PARM '*SHOP   'P@ACTN  8        Action Code
     C                     PARM           ##R
     C                     PARM *BLANKS   ##D
     C                     PARM           ##S
      *
     C           PLHFC0    PLIST
     C                     PARM #PNAM0    @PNAM0256
     C                     PARM #PNLE0    @PNLE0  4
     C                     PARM *BLANKS   @PATTR  1
     C                     PARM #PATTL    @PATTL  4
     C                     PARM #ERRDS    @ERRDS
      *
     C           PLHFC1    PLIST
     C                     PARM #PNAM1    @PNAM0256
     C                     PARM #PNLE1    @PNLE1  4
     C                     PARM *BLANKS   @PATTR  1
     C                     PARM #PATTL    @PATTL  4
     C                     PARM #ERRDS    @ERRDS
      *
     C           *LIKE     DEFN #ERRDS    @ERRDS
      *
     C           PLHFOP    PLIST
     C                     PARM *BLANKS   @OPNFH 16
     C                     PARM #PNAME    @PNAME 31
     C                     PARM #PNLEN    @PNLEN  4
     C                     PARM #OPENI    @OPENI 10
     C                     PARM *BLANKS   @ATTRI  1
     C                     PARM #AILEN    @AILEN  4
     C                     PARM *BLANKS   @ATAKE  1
     C                     PARM           #ERRDS
      *
     C           PLHFWR    PLIST
     C                     PARM #OPNFH    @OPNFH 16
     C                     PARM           UDTDTA
     C                     PARM #BYTEO    @BYTEO  4
     C           #BYTEW    PARM           @BYTEW  4
     C                     PARM           #ERRDS
      *
     C           PLHFRD    PLIST
     C                     PARM #OPNFH    @OPNFH 16
     C                     PARM           UDTDTA
     C                     PARM #BYTEO    @BYTEO  4
     C           #BYTER    PARM           @BYTER  4
     C                     PARM           #ERRDS
      *
     C           PLHFCH    PLIST
     C                     PARM #OPNFH    @OPNFH 16
     C                     PARM #MOVEI    @MOVEI  6
     C                     PARM #BYTEM    @BYTEM  4
     C                     PARM           @BYTEN  4
     C                     PARM           #ERRDS
      *
     C           PLHFGE    PLIST
     C                     PARM #OPNFH    @OPNFH 16
     C           #BSIZE    PARM           @BSIZE  4
     C                     PARM           #ERRDS
      *
     C           STINZ     PLIST
     C                     PARM WKDQ1     QNAME  10
     C                     PARM LIBL      LIB    10
      *
     C           STPUSH    PLIST
     C                     PARM WKDQ1     QNAME  10
     C                     PARM LIBL      LIB    10
     C                     PARM 23        FLDLEN  50
     C                     PARM           STACK
      *
     C           STPOP     PLIST
     C                     PARM WKDQ1     QNAME  10
     C                     PARM LIBL      LIB    10
     C                     PARM 23        FLDLEN  50
     C                     PARM           STACK
     C                     PARM 0         WAIT    50
      *
     C           CGUKEY    KLIST
     C                     KFLD           #@ITEM
     C                     KFLD           #PRPTH
      *
     C           CGGKEY    KLIST
     C                     KFLD           I#LCDE
     C                     KFLD           GCCID
      *
     C           CGAKEY    KLIST
     C                     KFLD           I#LCDE
     C                     KFLD           BAPLAN
      *
     C           CGCKEY    KLIST
     C                     KFLD           I#LCDE
     C                     KFLD           ###CON
      *
     C           CGIKEY    KLIST
     C                     KFLD           I#LCDE
     C                     KFLD           ###CID
      *
     C***********CGFKE1    KLIST
     C*********************KFLD           #DFOPT
      *
     C***********CGFKE2    KLIST
     C*********************KFLD           #OFOPT
     C*********************KFLD           #OFRMT
      *
      *  Reset return code
      *
     C                     MOVEL*BLANKS   P0RTN
     C                     IN   CGLDA
     C                     MOVE #@LAYO    I#LCDE
      *                                                                   087781
      ** Clear any open file handles from previous invocation             087781
     C           *LIKE     DEFN #OPNFH    #SLFH                           087781
     C                     Z-ADD1         #SL     50                      087781
     C           #SL       OCUR OFH                                       087781
     C           #OPNFH    DOWNE*BLANKS                                   087781
     C                     CALL 'QHFCLOSF'                                087781
     C                     PARM #OPNFH    #SLFH                           087781
     C                     PARM #ERRDS    @ERRDS                          087781
     C                     ADD  1         #SL                             087781
     C           #SL       OCUR OFH                                       087781
     C                     ENDDO                                          087781
      *
      **  Open the appropriate files if not already open
     C           #@ARCH    IFEQ 'A'
     C           ##FIL1    IFNE 'Y'
     C                     OPEN CGXDTAL2
     C                     MOVE 'Y'       ##FIL1  1
     C                     ENDIF
     C                     ELSE
     C           ##FIL2    IFNE 'Y'
     C                     OPEN CGUDTAL2
     C                     MOVE 'Y'       ##FIL2  1
     C                     ENDIF
     C                     ENDIF
      *
      * Diagnostic Mode level is controlled via. *LDA
      *
     C                     SELEC
     C           W0ACT     WHEQ '*DIAGNOS'
     C           W0ACT     OREQ '*DISPLAY'
      * Initialise target plane toggle
     C           *LIKE     DEFN #@PLAN    #@@LAN
     C                     CLEAR#@@LAN
      * Always initialise if processing all planes
     C           W0ACT     IFEQ '*DIAGNOS'
     C           W0ACT     OREQ '*DISPLAY'
     C           #@PLAN    ANDNEALLDFT
     C                     CLEARI@LCDE
     C                     END
      *
     C           W0ACT     WHEQ '*PRINT  '
     C                     Z-ADD#@ITNO    #ITNO
      *
     C                     ENDSL
      *
      *  Initialise Layout data if required
      *
     C           I@LCDE    IFNE I#LCDE
     C                     EXSR SRLAYI
     C                     END
      *
     C                     MOVE I#LCDE    I@LCDE
      *
      *  Initialise all previous values
      *
     C                     EXSR SRIDEP
      *
      *  Process depending on action code
      *
     C           W0ACT     CASEQ'*DISPLAY'SRDISP
     C           W0ACT     CASEQ'*DIAGNOS'SRDIAG
     C           W0ACT     CASEQ'*PRINT  'SRPRNT
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
      *  Return to calling program
      *
     C                     RETRN
     C/EJECT
     C           *INZSR    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q       50
     C                     MOVEL'*INZSR'  @STK,Q
      *
      *  Set up copyright statement
      *
     C                     MOVEACPY@      ACT@   80
      *                                                                                       CSC022
      ** Check if CSC022 is switched *ON.                                                     CSC022
      *                                                                                       CSC022
     C                     CALL 'AOSARDR0'                                                    CSC022
     C                     PARM *BLANKS   @RTCD   7                                           CSC022
     C                     PARM '*VERIFY' @OPTN   7                                           CSC022
     C                     PARM 'CSC022'  @SARD   6                                           CSC022
      *                                                                                       CSC022
     C           @RTCD     IFEQ *BLANKS                                                       CSC022
     C                     MOVE 'Y'       CSC022  1                                           CSC022
     C           *NAMVAR   DEFN SCCMTJOB  SCCMT                                               CSC022
     C                     IN   SCCMT                                                         CSC022
     C                     Z-ADD1         C       30                                          CSC022
     C                     MOVE 'N'       WCMTSK  1                                           CSC022
     C                     MOVEACMTARR    CMTJOB                                              CSC022
     C           CMTNUM    IFGT 0                                                             CSC022
     C           C         DOWLECMTNUM                                                        CSC022
     C           ##JOB     IFEQ CMTJOB,C                                                      CSC022
     C                     MOVEL'Y'       WCMTSK                                              CSC022
     C                     ENDIF                                                              CSC022
     C                     ADD  1         C                                                   CSC022
     C                     ENDDO                                                              CSC022
     C                     ENDIF                                                              CSC022
     C                     ELSE                                                               CSC022
     C                     MOVE 'N'       CSC022                                              CSC022
     C                     ENDIF                                                              CSC022
      *
      *  Get Rundate information
      *
     C           *NAMVAR   DEFN RUNDAT    RUNDTA
     C                     IN   RUNDTA
     C                     MOVE AGMRDT    WUMRDT  7        Midas Run date
     C                     MOVE AGRDNB    WURDNB  50       Run day number
     C                     MOVE AGSUC     WUSUC   1        Set up complete
     C                     MOVE AGDFF     WUDFF   1        Date Format
     C                     MOVE AGMBIN    WUMBIN  1        Multi Branched
     C*
     C* Get modules information
     C*
     C                     CALL 'AOMMODR0'             9090
     C                     PARM *BLANKS   P@RTCD  7        B:Return code
     C                     PARM '*FIRST ' P@OPTN  7        I:Option
     C           MMODDS    PARM *BLANKS   DSFDY            O:Module Flg
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           P@RTCD    OREQ '*ERROR*'
     C                     MOVEL'AOMMODR0'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD1         W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      * Put DTAQ into QTEMP for use as stack
      *
     C                     CALL 'CGC3002'              9090
     C                     PARM *BLANKS   P@RTCD  7        B:Return code
     C                     PARM WKDQ1     P@DTAQ 10
     C                     PARM 23        P@DTAL  30
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           P@RTCD    OREQ '*ERROR*'
     C                     MOVEL'CGC3002' W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD2         W0ERNB           * DB ERROR 05 *
     C                     MOVEL'PGI0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     CLEARI@LCDE
      *
      *  Initialise program Caches
      *
     C                     MOVE *HIVAL    PLR
     C                     MOVE *HIVAL    PLF
     C                     MOVE *HIVAL    PLO
     C                     MOVE *HIVAL    PLC
     C                     MOVE *HIVAL    PFC
     C                     MOVE *HIVAL    PLA
     C                     MOVE *HIVAL    PRG
     C                     MOVE *HIVAL    PRC
     C                     MOVE *HIVAL    DAL
     C                     MOVE *HIVAL    DAP
     C                     MOVE *HIVAL    DLI
     C                     MOVE *HIVAL    PFD
     C                     MOVE *HIVAL    BSC
     C                     MOVE *HIVAL    CST
     C                     MOVE *HIVAL    CEV
     C                     MOVE *HIVAL    MEC
     C                     MOVE *HIVAL    RDE
     C*********************MOVE *HIVAL    FFT
      *
     C                     MOVE *HIVAL    ##R
      *
      *  Set API Defaults
      *
     C                     Z-ADD##JNO     #P3
      *
     C                     CLEARUDTDTA
     C                     MOVE '#'       UDTDTA
     C           '#'       SCAN UDTDTA    BYTEO
      *
     C                     CLEARUDTDTA
     C                     MOVEL'#'       DECH01
     C           '#'       SCAN UDTDTA    DP      60
      *
     C           *NAMVAR   DEFN           CGDTA
     C           *LOCK     IN   CGDTA
      *
     C           DAFILE    IFNE *BLANKS
     C                     MOVELDAFILE    #P1       P
     C                     END
      *
     C           *NAMVAR   DEFN           SDSTAT
     C                     IN   SDSTAT
      *
     C                     MOVELLIBR      #P0       P
      *
     C                     MOVEL#P1       DAFILE    P
     C                     OUT  CGDTA
      *                                                                   089195
      * If bulk job use different directory                               089195
      *                                                                   089195
     C                     MOVE ##JOB     ##STRM  1                       089195
     C           ##STRM    IFGE '1'                                       089195
     C           ##STRM    ANDLE'6'                                       089195
     C                     MOVEL##STRM    ##STRF                          089195
     C                     ENDIF                                          089195
      *
      * Create directory for "pipes"
      *
     C                     CALL 'QHFCRTDR'PLHFC0
      **
      **Put work files into QTEMP
      **
     C*********************CALL 'CGC3003'              9090
     C*********************PARM *BLANKS   P@RTCD  7        B:Return code
     C*********************PARM WKF1      P@WRKF 10                    e
      **
      ** If return with an error (LR seton in called program) then
      ** process for database error.
      **
     C********** *IN90     IFEQ '1'
     C***********P@RTCD    OREQ '*ERROR*'
     C*********************MOVEL'CGC3003' W0FILE
     C*********************MOVEL'*CALL'   W0KEY            ***************
     C*********************Z-ADD301       W0ERNB           * DB ERROR 05 *
     C*********************MOVEL'PGI0002' W0MSGD           ***************
     C*********************MOVEL'CGUSRMSG'W0MSGF
     C*********************EXSR SRERR
     C*********************END
      *                                                                   CCG011
      **  Determine which SARs are in effect ...                          CCG011
      **  ... FONTS  - allow extra DDS descriptions to be used            CCG011
      *                                                                   CCG011
     C                     CALL 'AOSARDR0'             90                 CCG011
     C                     PARM '       ' ##RTCD  7                       CCG011
     C                     PARM '*VERIFY' ##OPTN  7                       CCG011
     C                     PARM 'CCG011'  ##SARD  6                       CCG011
     C           SCSARD    PARM *BLANKS   SCSARD                          CCG011
      *                                                                   CCG011
      **  If the Access Object returns an error code, process a           CCG011
      **  database error.                                                 CCG011
     C           ##RTCD    IFNE *BLANK                                    CCG011
     C           ##RTCD    ANDNE'*NRF   '                                 CCG011
     C           *IN90     OREQ *ON                                       CCG011
     C                     MOVEL'AOSARDR0'W0FILE           ***************CCG011
     C                     MOVEL'CCG011'  W0KEY            * DB ERROR 913*CCG011
     C                     Z-ADD913       W0ERNB           ***************CCG011
     C                     MOVEL'MEM5003' W0MSGD                          CCG011
     C                     MOVEL'MIDAS  ' W0MSGF                          CCG011
     C                     EXSR SRERR                                     CCG011
     C                     END                                            CCG011
      *                                                                   CCG011
     C           ##RTCD    IFEQ *BLANK                                    CCG011
     C                     MOVEL'CCG011'  CCG011  7                       CCG011
     C                     END                                            CCG011
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRLAYI   : Initialise Layout Caches (eg. load arrays)        *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 100                                               *
      *                                                               *
      *****************************************************************
     CSR         SRLAYI    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRLAYI'  @STK,Q
      *
      *  Initialise program Caches
      *
     C                     RESETPLR
     C                     RESETPLF
     C                     RESETPLO
     C                     RESETPLC
     C                     RESETPFC
     C                     RESETPLA
     C                     RESETPRG
     C                     RESETPRC
     C                     RESETDAL
     C                     RESETDAP
     C                     RESETDLI
     C                     RESETPFD
     C                     RESETBSC
     C                     RESETCST
     C                     RESETCEV
     C                     RESETMEC
     C                     RESETRDE
     C*********************RESETFFT
      *
     C                     CLEAR#LF
     C                     CLEAR#LR
     C                     CLEAR#LO
     C                     CLEAR#LC
     C                     CLEAR#FC
     C                     CLEAR#LA
     C                     CLEAR#RG
     C                     CLEAR#RC
     C                     CLEAR#AL
     C                     CLEAR#AP
     C                     CLEAR#LI
     C                     CLEAR#FD
     C                     CLEAR#SC
     C                     CLEAR#ST
     C                     CLEAR#EV
     C                     CLEAR#DE
     C*********************CLEAR#FT
      *
     C                     CLEARINDEX
      *
     C                     CLEAR#LFDS
     C                     CLEAR#LRDS
     C                     CLEAR#LCDS
     C                     CLEAR#FCDS
     C                     CLEAR#RGDS
     C                     CLEAR#RCDS
     C                     CLEAR#ALDS
     C                     CLEAR#APDS
     C                     CLEAR#LIDS
     C                     CLEAR#FDDS
     C                     CLEAR#SCDS
     C                     CLEAR#STDS
     C                     CLEAR#EVDS
     C                     CLEAR#ECDS
     C                     CLEAR#DEDS
     C*********************CLEAR#FTDS
      *
      *  Test extent of page caches
      *
     C           PAGROW    OCUR PAC
     C           PAGROW    OCUR PCO
     C           PAGROW    OCUR PCE
      *
     C                     MOVE *BLANK    TESTB   1
     C                     Z-ADDPAGCOL    L1
     C           1         SUBSTPACLIN:L1 TESTB
     C           1         SUBSTPCOLIN:L1 TESTB
     C           1         SUBSTPCELIN:L1 TESTB
      *
     C           *LIKE     DEFN @DED      @DCOPY
     C                     Z-ADD0         @DCOPY
      *
     C           *LIKE     DEFN @DED      @DPAGE
     C                     Z-ADD0         @DPAGE
      *
     C           *LIKE     DEFN @DED      @DPAGR
     C                     Z-ADD0         @DPAGR
      *
     C           *LIKE     DEFN @DED      @DITNO
     C                     Z-ADD0         @DITNO
      *
     C           *LIKE     DEFN @DED      @DPAG0                          087786
     C                     Z-ADD0         @DPAG0                          087786
      *                                                                   087786
     C           *LIKE     DEFN @DED      @DPAPB                          CCG009
     C                     Z-ADD0         @DPAPB                          CCG009
      *                                                                   CCG009
     C           *LIKE     DEFN @DED      @DTNP                           095470
     C                     Z-ADD0         @DTNP                           095470
     C                     MOVEL'F'       ##TNPF                          095470
      *                                                                   095470
     C           *LIKE     DEFN @DED      @DRDS                           109567
     C                     Z-ADD0         @DRDS                           109567
      *                                                                   109567
      *  Load program Caches
      *
     C           I#LCDE    CHAINCGPDECL1             01
     C           *IN01     DOWEQ*OFF
      *  Fixed
     C           LPRROW    IFEQ 0
     C           LPRCOL    ANDEQ0
      *
     C                     ADD  1         @CCB
     C                     Z-ADDLPFROW    #PFROW
     C                     Z-ADDLPFCOL    #PFCOL
     C                     Z-ADDLPOROW    #POROW
     C                     Z-ADDLPOCOL    #POCOL
     C                     MOVE LPBOXD    F#BOXD
      *
     C                     ADD  1         LF
     C                     MOVE LPPLAN    PLF,LF
     C                     MOVE #LFDS     #LF,LF
      *
     C           LPTOPP    IFEQ 'Y'
      * Default fill strategy to 'Statement' type
     C                     MOVE 'AC '     #SFILL    P
     C           LPFILS    IFNE *BLANKS
     C                     MOVELLPFILS    #SFILL
     C                     END
      *
     C           *LIKE     DEFN LF        @LF
     C                     Z-ADDLF        @LF
      *
     C                     Z-ADDLPEROW    N#ROW
     C                     Z-ADDLPECOL    N#COL
      *
     C           *LIKE     DEFN A#ROW     A@ROW
     C           *LIKE     DEFN A#COL     A@COL
      *
     C                     Z-ADD1         L1
     C           '0'       CHECKA#ROW     L1
     C                     SUBSTA#ROW:L1  A@ROW     P
      *
     C                     Z-ADD1         L1
     C           '0'       CHECKA#COL     L1
     C                     SUBSTA#COL:L1  A@COL     P
      *
     C                     END
      *
     C                     ELSE
      *  Relative
     C                     ADD  1         LR
     C                     Z-ADDLPRROW    #PRROW
     C                     Z-ADDLPRCOL    #PRCOL
     C                     Z-ADDLPEROW    #PEROW
     C                     Z-ADDLPECOL    #PECOL
     C                     MOVE LPBOXD    R#BOXD
     C                     MOVE LPOFOP    #POFOP
     C                     MOVE LPPLAN    PLR,LR
     C                     MOVE #LRDS     #LR,LR
      *
     C                     END
      *  Overflow
     C           LPOFAB    IFNE *BLANKS
      *
     C           LPOFAB    IFNE 'R'
      *
     C                     ADD  1         LO
     C                     MOVE LPOFAB    #POFAB
     C                     MOVE LPPLAN    PLO,LO
     C                     MOVE #LODS     #LO,LO
      *
     C                     ELSE
      *  Collect dummy repeater information here if planes attached
     C                     MOVE LPPLAN    BAPLAN
     C           CGAKEY    SETLLCGPASCL3                 01
      *
     C           *IN01     IFEQ *ON
      *
     C                     MOVE 'Y'       #DUMMY
     C                     ADD  1         @CBI
     C                     ADD  1         @OFH
     C                     ADD  1         RG
     C                     MOVE '#DUMMY'  #PRPTH
     C                     MOVE LPFPAB    #PFPAB
     C                     MOVE LPPLAN    PRG,RG
     C                     MOVE #RGDS     #RG,RG
     C                     CLEAR#DUMMY
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     Z-ADDLPTCGP    GCCID
     C           CGGKEY    CHAINCGGCONL1             02
     C           *IN02     DOWEQ*OFF
      *  Conditioned
     C                     ADD  1         LC
     C                     Z-ADDGCTCGP    #PPCON
     C                     MOVE LPPLAN    PLC,LC
     C                     MOVE #LCDS     #LC,LC
      *  Add condition
     C                     Z-ADDGCTCGP    ###CON
     C                     EXSR SRADDC
      *
     C           CGGKEY    READECGGCONL1                 02
     C                     END
      *
     C           LPRPTH    IFNE *BLANKS
      *  Repeating
     C                     ADD  1         @CBI
     C                     ADD  1         @OFH
     C                     ADD  1         RG
     C                     MOVE LPRPTH    #PRPTH
     C                     MOVE LPFPAB    #PFPAB
     C                     MOVE LPPLAN    PRG,RG
     C                     MOVE #RGDS     #RG,RG
      *
     C           LPTOPP    IFEQ 'Y'
     C           *LIKE     DEFN RG        @T
     C                     Z-ADDRG        @T
     C                     END
      *
     C                     END
      *
     C           I#LCDE    READECGPDECL1                 01
     C                     END
      *
     C                     DO   LF        L1
      *
     C                     MOVELPLF,L1    BAPLAN    P
      *
     C                     MOVE 'Y'       #OVR
     C                     EXSR SRAPLA
      *
     C                     MOVE 'E'       #OVR
     C                     EXSR SRAPLA
      *
     C                     MOVE 'N'       #OVR
     C                     EXSR SRAPLA
      *
     C                     END
      *
     C                     DO   RG        L1
      *
     C                     MOVE #RG,L1    #RGDS
     C                     MOVE 'Y'       #FIXED
      *
     C                     Z-ADD1         L2
     C           PRG,L1    LOKUPPLA,L2               99  30
      *
     C           *IN30     IFEQ *ON
     C           L2        DO   LA        L3
      *
     C           PRG,L1    IFNE PLA,L3
     C                     LEAVE
     C                     END
      *
     C                     MOVE #LA,L3    #LADS
      * Determine repeating planes attached to repeating planes
     C                     Z-ADD1         L4
     C           #ATPLN    LOKUPPRG,L4               99  31
      *
     C           *IN31     IFEQ *ON
      *
     C           #FIXED    IFEQ 'Y'
     C                     MOVE ' '       #FIXED
     C                     END
      *
     C                     ADD  1         RC
     C                     MOVE PRG,L4    #RCDS
     C                     MOVE PRG,L1    PRC,RC
     C                     MOVE #RCDS     #RC,RC
      *
     C                     ELSE
      * Determine repeating planes attached to relative planes
     C                     Z-ADD1         L4
     C           #ATPLN    LOKUPPLR,L4               99  31
      *
     C           *IN31     IFEQ *ON
      *
     C                     MOVE 'N'       #FIXED
     C                     MOVE #LADS     #LA,L3
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     MOVE #RGDS     #RG,L1
      *
     C                     END
      *
      * Put condition RDEs into lookup
      *
     C           I#LCDE    CHAINCGCONDL1             01
     C           *IN01     DOWEQ*OFF
      * LH RDE
     C                     MOVE CNLRP     #RRPTH
     C                     MOVE CNLNRP    #RNPTH
     C                     MOVE CNLRDE    #RRDE
      *
     C           #RRDE     IFNE *BLANKS
     C                     Z-ADD1         L1
     C           #ALKEY    LOKUPDAL,L1                   30
     C           *IN30     IFEQ *OFF
     C                     ADD  1         AL
     C                     MOVE #ALKEY    DAL,AL
     C                     END
      *
     C           CNLVAL    IFNE *BLANKS
     C                     Z-ADD1         L1
     C           #ALKEY    LOKUPDAP,L1                   30
     C           *IN30     IFEQ *OFF
     C                     ADD  1         AP
     C                     MOVE #ALKEY    DAP,AP
     C                     END
     C                     END
      *
     C                     END
      * RH RDE
     C                     MOVE CNRRP     #RRPTH
     C                     MOVE CNRNRP    #RNPTH
     C                     MOVE CNRRDE    #RRDE
      *
     C           #RRDE     IFNE *BLANKS
     C                     Z-ADD1         L1
     C           #ALKEY    LOKUPDAL,L1                   30
     C           *IN30     IFEQ *OFF
     C                     ADD  1         AL
     C                     MOVE #ALKEY    DAL,AL
     C                     END
      *
     C           CNRVAL    IFNE *BLANKS
     C                     Z-ADD1         L1
     C           #ALKEY    LOKUPDAP,L1                   30
     C           *IN30     IFEQ *OFF
     C                     ADD  1         AP
     C                     MOVE #ALKEY    DAP,AP
     C                     END
     C                     END
      *
     C                     END
      *
     C           I#LCDE    READECGCONDL1                 01
     C                     END
      *
      * Put field RDEs into lookup
      *
     C           I#LCDE    CHAINCGPDEFL1             01
     C           *IN01     DOWEQ*OFF
      *
     C           LRRDE     IFNE *BLANKS
      *
     C                     MOVE LRRPTH    #RRPTH
     C                     MOVE LRNPTH    #RNPTH
     C                     MOVE LRRDE     #RRDE
      *                                                                   095470
      *  Check if total number of pages used                              095470
      *                                                                   095470
     C           LRNPTH    IFEQ SYSPTH                                    095470
     C           LRRDE     ANDEQRDETNP                                    095470
     C                     MOVEL'T'       ##TNPF                          095470
     C                     ENDIF                                          095470
      *
     C                     Z-ADD1         L1
     C           #ALKEY    LOKUPDAL,L1                   30
     C           *IN30     IFEQ *OFF
     C                     ADD  1         AL
     C                     MOVE #ALKEY    DAL,AL
     C                     END
      *
     C           LRLCVL    IFNE *BLANKS
     C                     Z-ADD1         L1
     C           #ALKEY    LOKUPDAP,L1                   30
     C           *IN30     IFEQ *OFF
     C                     ADD  1         AP
     C                     MOVE #ALKEY    DAP,AP
     C                     END
     C                     END
      *
     C                     END
      *
     C           I#LCDE    READECGPDEFL1                 01
     C                     END
      *
      * Now sort DAL & assign @DEDs
      *
     C                     SORTADAL
     C                     CLEAR@ALKEY
      *
     C                     DO   AL        L1
      *
     C                     Z-ADDL1        @DED
     C                     MOVE #ALDS     #AL,L1
      *
     C                     MOVE DAL,L1    #ALKEY
      *
      * Ignore special values
      *
     C           #RNPTH    IFNE #RNOFH
      *
     C           #RRPTH    IFNE @RRPTH
     C           #RNPTH    ORNE @RNPTH
      *
     C           LI        IFNE 0
     C                     MOVE @RRPTH    ##RPTH
     C                     MOVE @RNPTH    ##NPTH
     C                     MOVE #LIKEY    DLI,LI
     C                     MOVE #LIDS     #LI,LI
     C                     END
      *
     C                     ADD  1         LI
     C                     Z-ADD@DED      @DEDF
      *
     C                     END
      *
     C                     Z-ADD@DED      @DEDT
      *
     C                     END
      *
     C                     MOVE #ALKEY    @ALKEY
      *
     C                     END
      *
     C           LI        IFNE 0
      *
     C           #RNPTH    IFNE #RNOFH
     C                     MOVE #RRPTH    ##RPTH
     C                     MOVE #RNPTH    ##NPTH
     C                     MOVE #LIKEY    DLI,LI
     C                     MOVE #LIDS     #LI,LI
     C                     ELSE
     C                     SUB  1         LI
     C                     END
      *
     C                     END
      *
     C                     SORTADAP
     C                     Z-ADD1         L2
      *
     C                     DO   AP        L1
      *
     C                     MOVE DAP,L1    #ALKEY
     C           #ALKEY    LOKUPDAL,L2               99  30
      * Failure to find RDE here is terminal error
     C           *IN30     IFEQ *OFF
     C                     Z-ADD102       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGA0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     MOVE #AP,L1    #APDS
     C           AL        ADD  L1        @DEP
     C                     MOVE #APDS     #AP,L1
      *
     C                     END
      *
      * Pack literals into LIT & assemble RDE lookup
      *
     C                     CLEARLIT
      *
     C           I#LCDE    CHAINCGPDEFL1             01
     C           *IN01     DOWEQ*OFF
      *
     C                     CLEAR#FDDS
     C                     ADD  1         FD
      *                                                                   084324
     C                     MOVE LRFLDN    #RFLDN                          084324
     C                     MOVE LRRDE     #LRRDE                          084324
     C                     Z-ADDLRSROW    #RSROW                          084324
     C                     Z-ADDLRSCOL    #RSCOL                          084324
     C                     MOVE LRCFMO    #RCFMO                          084324
     C                     MOVE LRCFOP    #RCFOP                          084324
     C                     MOVE LRCOPT    #RCOPT                          084324
     C                     MOVE LRCFTP    #RCFTP                          084324
     C                     MOVE LRNFMT    #RNFMT                          084324
     C                     MOVE LRNFOP    #RNFOP                          084324
     C                     MOVE LRALGN    #RALGN                          084324
     C                     Z-ADDLROLEN    #ROLEN                          084324
     C                     MOVE LRLCVL    #RLCVL                          084324
      * Literal or Data-Element
     C           LRRDE     IFNE *BLANKS
      *
     C                     MOVE LRRPTH    #RRPTH
     C                     MOVE LRNPTH    #RNPTH
     C                     MOVE LRRDE     #RRDE
      *
     C                     Z-ADD1         L1
     C           #ALKEY    LOKUPDAL,L1                   30
      *
     C           *IN30     IFEQ *OFF
     C                     Z-ADD103       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGA0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     MOVE #AL,L1    #ALDS
      *
     C           LRLCVL    IFEQ *BLANKS
     C                     Z-ADD@DED      @@DED
     C                     ELSE
      *
     C                     Z-ADD1         L2
     C           #ALKEY    LOKUPDAP,L2               99  31
      *
     C           *IN31     IFEQ *OFF
     C                     Z-ADD104       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGA0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     MOVE #AP,L2    #APDS
      *
     C                     Z-ADD@DEP      @@DED
     C                     END
      *                                                                   084324
     C***********          MOVE LRFLDN    #RFLDN                          084324
     C***********          MOVE LRRDE     #LRRDE                          084324
     C***********          Z-ADDLRSROW    #RSROW                          084324
     C***********          Z-ADDLRSCOL    #RSCOL                          084324
     C***********          MOVE LRCFMO    #RCFMO                          084324
     C***********          MOVE LRCFOP    #RCFOP                          084324
     C***********          MOVE LRCOPT    #RCOPT                          084324
     C***********          MOVE LRCFTP    #RCFTP                          084324
     C***********          MOVE LRNFMT    #RNFMT                          084324
     C***********          MOVE LRNFOP    #RNFOP                          084324
     C***********          MOVE LRALGN    #RALGN                          084324
     C***********          Z-ADDLROLEN    #ROLEN                          084324
     C***********          MOVE LRLCVL    #RLCVL                          084324
      *
      * Default Layout delimiter
      *
     C           W0ACT     IFNE '*PRINT'
     C           #RCFMO    ANDEQ*BLANKS
     C                     MOVELCHACDE    #RCFMO    P
     C                     MOVELBRACDE    #RCFOP    P
     C                     END
      *
     C                     ELSE
      *
     C           ' '       CHEKRLIT       Z1             30
     C  N30                Z-ADD0         Z1
     C                     Z-ADDZ1        #STRFR
     C                     ADD  1         #STRFR
     C           LIT       CAT  LRD256:0  LIT       P
     C           ' '       CHEKRLIT       Z1
     C                     Z-ADDZ1        #STRTO
      *
     C***********          Z-ADDLRSROW    #RSROW                          084324
     C***********          Z-ADDLRSCOL    #RSCOL                          084324
     C***********          MOVE LROLEN    #ROLEN                          084324
     C***********          MOVE LRFLDN    #RFLDN                          084324
      *
     C                     END
      *
     C                     MOVE LRPLAN    PFD,FD
     C                     MOVE #FDDS     #FD,FD
      *
     C                     Z-ADDLRTCGP    GCCID
     C           CGGKEY    CHAINCGGCONL1             02
     C           *IN02     DOWEQ*OFF
      *  Conditioned
     C                     ADD  1         FC
     C                     Z-ADDGCTCGP    #PFCON
     C                     MOVELLRPLAN    PFC,FC
     C                     MOVE LRFLDN    PFC,FC
     C                     MOVE #FCDS     #FC,FC
      *  Add condition
     C                     Z-ADDGCTCGP    ###CON
     C                     EXSR SRADDC
      *
     C           CGGKEY    READECGGCONL1                 02
     C                     END
      *
     C           I#LCDE    READECGPDEFL1                 01
     C                     END
      *
      *  Assemble condition lookups
      *
     C           *LIKE     DEFN @DED      #@DED
     C           *LIKE     DEFN @DED      #@DEDS
     C           AL        ADD  AP        #@DED
     C           #@DED     ADD  1         #@DEDS
      *
      *  Default No. of copies
      *
     C           *LIKE     DEFN #COPY     @COPY
     C                     Z-ADD1         @COPY
      *
     C                     DO   ST        L1
      *
     C                     MOVE #ST,L1    #STDS
     C                     Z-ADD#CGCID    ###CID
      *
     C           CGIKEY    CHAINCGCONDL1             30
     C           *IN30     DOWEQ*OFF
      *
     C                     CLEAR#SCKEY
      *
     C                     MOVE CNLRP     #RRPTH
     C                     MOVE CNLNRP    #RNPTH
     C                     MOVE CNLRDE    #RRDE
      *
     C           #RRDE     IFNE *BLANKS
      *
     C                     Z-ADD1         L2
     C           #ALKEY    LOKUPDAL,L2               99  31
      *
     C           *IN31     IFEQ *ON
     C                     MOVE #AL,L2    #ALDS
      *
     C           CNLVAL    IFNE *BLANKS
      *
     C                     Z-ADD1         L3
     C           #ALKEY    LOKUPDAP,L3               99  32
      *
     C           *IN32     IFEQ *ON
     C                     MOVE #AP,L3    #APDS
     C                     Z-ADD@DEP      @@DEDL
     C                     ELSE
     C                     Z-ADD105       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGA0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     ELSE
     C                     Z-ADD@DED      @@DEDL
     C                     END
      *
     C                     ELSE
     C                     Z-ADD105       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGA0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     ELSE
      *
     C                     MOVELCNLDTA    ###DTA    P
     C                     EXSR SRADDL
     C                     Z-ADD@DED      @@DEDL
      *
     C                     END
      *
     C                     MOVE CNRRP     #RRPTH
     C                     MOVE CNRNRP    #RNPTH
     C                     MOVE CNRRDE    #RRDE
      *
     C           #RRDE     IFNE *BLANKS
      *
     C                     Z-ADD1         L2
     C           #ALKEY    LOKUPDAL,L2               99  31
      *
     C           *IN31     IFEQ *ON
     C                     MOVE #AL,L2    #ALDS
      *
     C           CNRVAL    IFNE *BLANKS
      *
     C                     Z-ADD1         L3
     C           #ALKEY    LOKUPDAP,L3               99  32
      *
     C           *IN32     IFEQ *ON
     C                     MOVE #AP,L3    #APDS
     C                     Z-ADD@DEP      @@DEDR
     C                     ELSE
     C                     Z-ADD106       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGA0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     ELSE
     C                     Z-ADD@DED      @@DEDR
     C                     END
      *
     C                     ELSE
     C                     Z-ADD106       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGA0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     ELSE
      *
     C                     MOVELCNRDTA    ###DTA    P
     C                     EXSR SRADDL
     C                     Z-ADD@DED      @@DEDR
      *
     C                     END
      *
     C                     EXSR SRCOPY
      *
      *  Store relation in ascending DED sequence for MEC resolution
      *
     C                     MOVE CNLELM    ##LELM
     C                     MOVE CNRELM    ##RELM
     C                     MOVE CNOPER    ##OPER
      *
     C                     Z-ADD1         L2
     C           ##OPER    LOKUPOPR@,L2                  31
      *  Unknown operator: error
     C           *IN31     IFEQ *OFF
     C                     Z-ADD107       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGA0002' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C           *LIKE     DEFN @DED      #DED
      *
     C           @@DEDL    IFGT @@DEDR
      *
     C                     Z-ADD@@DEDL    #DED
     C                     Z-ADD@@DEDR    @@DEDL
     C                     Z-ADD#DED      @@DEDR
      *  Invert operator if reqiured
     C           *LIKE     DEFN OPI@,1    OPI@#
     C                     Z-ADDL2        OPI@#
     C                     Z-ADD1         L3
     C           OPI@#     LOKUPOPI@,L3              99  31
     C   31                Z-ADDOPI#,L3   L4
     C   31                MOVELOPR@,L4   ##OPER    P
      *
     C                     END
      *
      *  First check if basic condition already known
      *
     C                     Z-ADD1         L2
     C           #SCKEY    LOKUP#SC,L2                   31
      *
     C           *IN31     IFEQ *OFF
     C                     ADD  1         SC
     C                     MOVE ##RELM    #NRELM
     C                     MOVE ##LELM    #NLELM
     C                     Z-ADD@@DEDL    @DEDL
     C                     Z-ADD@@DEDR    @DEDR
     C                     MOVE ##OPER    #NOPER
     C                     Z-ADDSC        BSC,SC
     C                     MOVE #SCDS     #SC,SC
     C                     Z-ADDSC        L2
     C                     END
      *
     C                     ADD  1         EV
     C                     Z-ADDL2        @BSCE
     C                     MOVE CNCONG    #NCONG
     C                     Z-ADDCNCID     CEV,EV
     C                     MOVE #EVDS     #EV,EV
      *
     C           CGIKEY    READECGCONDL1                 30
     C                     END
      *
     C                     END
      *
     C                     EXSR SRPAGE
      *
      * Load RDE example data
      *
     C                     DO   AL        L1
      *
     C                     MOVELDAL,L1    #ALKEY
      *
     C                     Z-ADD1         L2
     C           #RRDE     LOKUPRDE,L2                   30
      *
     C           *IN30     IFEQ *OFF
     C                     ADD  1         DE
     C                     MOVEL#RRDE     RDE,DE
     C                     END
      *
     C                     END
      *
     C                     SORTARDE
      *
     C                     DO   DE        L1
      *
     C                     MOVELRDE,L1    RDRDE
      *
     C           RDRDE     CHAINCGRDTAL1             30
      *
     C           *IN30     IFEQ *OFF
     C                     MOVELRDETXT    #DETXT
     C                     MOVELRDMAXL    #DMAXL
     C                     MOVELRDELYP    #DELYP
     C                     MOVELRDFOPT    #DFOPT
     C                     MOVEL#DEDS     #DE,L1
     C                     END
      *
     C                     END
      *
     C                     DO   FD        L1
      *
     C                     MOVEL#FD,L1    #FDDS
      *
     C           #LRRDE    IFNE *BLANKS
      *
     C                     Z-ADD1         L2
     C           #LRRDE    LOKUPRDE,L2               99  30
      *
     C           *IN30     IFEQ *ON
     C                     MOVEL#DE,L2    #DEDS
     C                     MOVEL#DELYP    ##ELYP
     C                     MOVEL#DFOPT    ##FOPT
     C                     MOVEL#FDDS     #FD,L1
     C                     END
      *
     C                     END
      *
     C                     END
      *
      * Now fill first part of FFT array
      *
     C*********************DO   DE        L1
      *
     C*********************MOVEL#DE,L1    #DEDS
      *
     C***********#DFOPT    IFNE *BLANKS
      *
     C***********CGFKE1    CHAIN@FOPTL1              31
     C************IN31     DOWEQ*OFF
      *
     C*********************MOVE FOFOPT    #OFOPT
     C*********************MOVE FOFRMT    #OFRMT
     C*********************Z-ADD1         L2
     C***********#FTKEY    LOKUPFFT,L2                   32
      *
     C********** *IN32     IFEQ *OFF
     C*********************ADD  1         FT
     C*********************MOVELFOFOPT    FFT,FT    P
     C*********************MOVE FOFRMT    FFT,FT
     C*********************END
      *
     C***********CGFKE1    READE@FOPTL1                  31
     C*********************END
      *
     C*********************END
      *
     C*********************END
      *
     C*********************SORTAFFT
      *
     C*********************DO   FT        L1
      *
     C*********************MOVE FFT,L1    #FTKEY
     C***********CGFKE2    CHAIN@FOPTL1              31
      *
     C********** *IN31     IFEQ *OFF
     C*********************MOVE FOFPGM    #OFPGM
     C*********************MOVE #FTDS     #FT,L1
     C*********************END
      *
     C*********************END
      *
      * determine mutually exclusive conditions if in diagnostic mode
      *
     C           W0ACT     IFEQ '*DIAGNOS'
      *
     C           *LIKE     DEFN #CMPSC    @CMPSC
     C           *LIKE     DEFN #NOPER    @NOPER
     C           *LIKE     DEFN SC        C1
     C           *LIKE     DEFN SC        C2
     C           *LIKE     DEFN SC        C3
      *
     C                     Z-ADDSC        C2
     C                     SUB  1         C2
     C                     DO   C2        L1
      *
     C                     MOVE #SC,L1    #SCDS
     C                     MOVE #CMPSC    @CMPSC
     C                     MOVE #NOPER    @NOPER
      *
     C           L1        ADD  1         C3
     C           C3        DO   SC        L2
      *
     C                     MOVE #SC,L2    #SCDS
     C           #CMPSC    IFEQ @CMPSC
      *
     C                     CLEARMED#
      *
     C                     Z-ADD1         L3
     C           #NOPER    LOKUPOPR@,L3              99  30
     C   30                Z-ADDL3        OPR1
      *
     C                     Z-ADD1         L3
     C           @NOPER    LOKUPOPR@,L3              99  30
     C   30                Z-ADDL3        OPR2
      *
     C                     Z-ADD1         L3
     C           MED#      LOKUPOPM@,L3              99  30
      *
     C           *IN30     IFEQ *ON
     C                     ADD  1         EC
     C                     Z-ADDL1        #M1
     C                     Z-ADDL2        #M2
     C                     MOVE #ECDS     MEC,EC
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     CLEARCC
     C                     CLEARCO
      *
      *  Determine critical condition changes
      *
     C                     DO   LC        L1
      *
     C                     Z-ADD1         L2
     C           PLC,L1    LOKUPPLR,L2               99  30
      *
     C                     Z-ADD1         L2
     C           PLC,L1    LOKUPPLO,L2               99  31
     C   31                MOVEL#LO,L2    #LODS
     C  N31                CLEAR#LODS
      *
     C           *IN30     IFEQ *ON
      *
     C                     MOVE #LC,L1    #LCDS
     C                     Z-ADD#PPCON    ###CON
      *
     C                     Z-ADD1         L3
     C           ###CON    LOKUPCEV,L3                   32
      *
     C           L3        DO   EV        L4
      *
     C           ###CON    IFNE CEV,L4
     C                     LEAVE
     C                     END
      *
     C                     MOVE #EV,L4    #EVDS
     C                     Z-ADD@BSCE     L5
     C                     MOVE 'Y'       CCA,L5
      *
     C           #POFAB    IFEQ 'B'
     C                     MOVE 'Y'       CCO,L5
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRCOPY   : Search For Copy in condition                      *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 190                                               *
      *                                                               *
      *****************************************************************
     CSR         SRCOPY    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRCOPY'  @STK,Q
      *
     C                     CLEARNUMDS
     C                     Z-ADD1         NUMVAL
      *
      *  If RDE is Copy then translate literal
      *
     C                     SELEC
     C           CNLNRP    WHEQ SYSPTH
     C           CNLRDE    ANDEQRDECPY
     C                     MOVELCNRDTA    NUMDS
     C                     Z-ADD@@DEDL    @DCOPY
     C           CNRNRP    WHEQ SYSPTH
     C           CNRRDE    ANDEQRDECPY
     C                     MOVELCNLDTA    NUMDS
     C                     Z-ADD@@DEDR    @DCOPY
     C                     ENDSL
      *
     C           NUMVAL    IFGT @COPY
     C                     Z-ADDNUMVAL    @COPY
     C                     END
      *                                                                   095470
      *  Check if total number of pages used                              095470
      *                                                                   095470
     C           CNRNRP    IFEQ SYSPTH                                    095470
     C           CNRRDE    ANDEQRDETNP                                    095470
     C           CNLNRP    OREQ SYSPTH                                    095470
     C           CNLRDE    ANDEQRDETNP                                    095470
     C                     MOVEL'T'       ##TNPF  1                       095470
     C                     ENDIF                                          095470
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRPAGE   : Search For Page in condition                      *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 191                                               *
      *                                                               *
      *****************************************************************
     CSR         SRPAGE    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRPAGE'  @STK,Q
      *
     C                     DO   AL        L1
      *
     C                     MOVEL#AL,L1    #ALDS
     C                     MOVELDAL,L1    #ALKEY
      *
      *  If RDE is Page then translate literal
      *
     C                     SELEC
      *
     C           #RNPTH    WHEQ SYSPTH
     C           #RRDE     ANDEQRDECPY
      *
     C           @DCOPY    IFEQ 0
     C                     Z-ADD@DED      @DCOPY
     C                     END
      *
     C           #RNPTH    WHEQ SYSPTH
     C           #RRDE     ANDEQRDEPAG
     C                     Z-ADD@DED      @DPAGE
      *
     C           #RNPTH    WHEQ SYSPTH
     C           #RRDE     ANDEQRDEPAR
     C                     Z-ADD@DED      @DPAGR
      *
     C           #RNPTH    WHEQ SYSPTH
     C           #RRDE     ANDEQRDEITN
     C                     Z-ADD@DED      @DITNO
      *
     C           #RNPTH    WHEQ SYSPTH                                    087786
     C           #RRDE     ANDEQRDEPG0                                    087786
     C                     Z-ADD@DED      @DPAG0                          087786
      *                                                                   087786
     C           #RNPTH    WHEQ SYSPTH                                    CCG009
     C           #RRDE     ANDEQRDEPPB                                    CCG009
     C                     Z-ADD@DED      @DPAPB                          CCG009
      *                                                                   CCG009
     C           #RNPTH    WHEQ SYSPTH                                    095470
     C           #RRDE     ANDEQRDETNP                                    095470
     C                     Z-ADD@DED      @DTNP                           095470
      *                                                                   095470
     C           #RNPTH    WHEQ SYSPTH                                    109567
     C           #RRDE     ANDEQRDERDS                                    109567
     C                     Z-ADD@DED      @DRDS                           109567
      *                                                                   109567
     C                     ENDSL
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRIDEP   : Initialise previous values                        *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 195                                               *
      *                                                               *
      *****************************************************************
     CSR         SRIDEP    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRIDEP'  @STK,Q
      *
     C                     DO   AL        L1
      *
     C                     MOVE DAL,L1    #ALKEY
     C                     Z-ADD1         L2
     C           #ALKEY    LOKUPDAP,L2               99  30
      *
     C           *IN30     IFEQ *ON
     C                     MOVE #AP,L2    #APDS
     C           @DEP      OCUR DED
     C                     MOVE *LOVAL    #RD256
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRADDC   : Add condition to tables                           *
      *                                                               *
      *  CALLED BY: SRLAYI                                            *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 200                                               *
      *                                                               *
      *****************************************************************
     CSR         SRADDC    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRADDC'  @STK,Q
      *
      *  Check if condition already in list
      *
     C                     Z-ADD1         S1
     C           ###CON    LOKUPCST,S1                   30
      *
     C           *IN30     IFEQ *OFF
      *
     C           CGCKEY    CHAINCGCGRPL1             31
     C           *IN31     IFEQ *ON
     C                     MOVEL'CGCGRPL1'W0FILE
     C                     MOVEL###CON    W0KEY            ***************
     C                     Z-ADD201       W0ERNB           * DB ERROR 01 *
     C                     MOVEL'MEM5004' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     ELSE
     C                     ADD  1         ST
     C                     ADD  1         @CND
     C                     MOVE CGACND    #GACND
     C                     Z-ADDCGCID     #CGCID
     C                     Z-ADD###CON    CST,ST
     C                     MOVE #STDS     #ST,ST
     C                     END
      *
     C                     END
      *
     C           *LIKE     DEFN CGCID     ###CID
     C           *LIKE     DEFN GCCID     ###CON
     C                     CLEAR###CON
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRAPLA   : Add plane associations to tables                  *
      *                                                               *
      *  CALLED BY: SRLAYI                                            *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 250                                               *
      *                                                               *
      *****************************************************************
     CSR         SRAPLA    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRAPLA'  @STK,Q
      *
     C           CGAKEY    CHAINCGPASCL3             01
     C           *IN01     DOWEQ*OFF
      *
     C                     Z-ADD1         S1
     C           BATPLN    LOKUPPLO,S1               99  30
      *
     C   30                MOVE #LO,S1    #LODS
      * select oveflow types
     C           *IN30     IFEQ *ON
     C           #OVR      ANDEQ'Y'
     C           #POFAB    ANDNE'E'
      * select EODs
     C           *IN30     OREQ *ON
     C           #OVR      ANDEQ'E'
     C           #POFAB    ANDEQ'E'
      * select non overflows
     C           *IN30     OREQ *OFF
     C           #OVR      ANDEQ'N'
      *
     C                     ADD  1         LA
     C                     MOVE BATPLN    #ATPLN
     C                     MOVE BASEQA    #ASEQA
     C                     MOVE BAPLAN    PLA,LA
     C                     MOVE #LADS     #LA,LA
      *
     C                     END
      *
     C           CGAKEY    READECGPASCL3                 01
     C                     END
      *
     C                     MOVE *BLANKS   #OVR    1
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRDIAG   : Perform Diagnostics                               *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 300                                               *
      *                                                               *
      *****************************************************************
     CSR         SRDIAG    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRDIAG'  @STK,Q
      *
      * If at plane level generate "All On" condition, Otherwise
      * assemble full list of conditions in QTEMP for batch run.
      *
     C           #@PLAN    IFNE *BLANKS
      *
     C                     OPEN CGWPCOND
      *
     C                     MOVE *ALL'1'   CL
     C                     WRITE@CNDFMT
      *  Generate QTEMP data of basic conditions for layout tool
     C                     OPEN CGWPBCND
      *
     C                     DO   SC        L1
      *
     C                     CLEAR@BCNFMT
      *
     C                     MOVE #SC,L1    #SCDS
     C                     Z-ADDL1        B#CSEQ
     C                     MOVEL#NOPER    B#OPER    P
      *
     C                     Z-ADD@DEDL     B#LDED
     C                     Z-ADD@DEDR     B#RDED
      *
     C           @DEDL     OCUR DED
      *
     C                     Z-ADD@DEDL     @DED
     C                     Z-ADD1         L2
     C           #ALDS     LOKUP#AL,L2                   31
     C           *IN31     IFEQ *ON
     C                     MOVE DAL,L2    #ALKEY
     C                     MOVE #RRPTH    B#LRPT
     C                     MOVE #RRDE     B#LRDE
     C                     ELSE
      *
     C                     Z-ADD@DEDL     @DEP
     C                     Z-ADD1         L2
     C           #APDS     LOKUP#AP,L2                   31
     C           *IN31     IFEQ *ON
     C                     MOVE DAP,L2    #ALKEY
     C                     MOVE #RRPTH    B#LRPT
     C                     MOVE #RRDE     B#LRDE
     C                     MOVE 'P'       B#LVAL
     C                     END
      *
     C                     END
      *
     C           *IN31     IFEQ *OFF
     C                     MOVEL#RD256    B#LDTA
     C                     END
      *
     C           @DEDR     OCUR DED
      *
     C                     Z-ADD@DEDR     @DED
     C                     Z-ADD1         L2
     C           #ALDS     LOKUP#AL,L2                   31
     C           *IN31     IFEQ *ON
     C                     MOVE DAL,L2    #ALKEY
     C                     MOVE #RRPTH    B#RRPT
     C                     MOVE #RRDE     B#RRDE
     C                     ELSE
      *
     C                     Z-ADD@DEDR     @DEP
     C                     Z-ADD1         L2
     C           #APDS     LOKUP#AP,L2                   31
     C           *IN31     IFEQ *ON
     C                     MOVE DAP,L2    #ALKEY
     C                     MOVE #RRPTH    B#RRPT
     C                     MOVE #RRDE     B#RRDE
     C                     MOVE 'P'       B#RVAL
     C                     END
      *
     C                     END
      *
     C           *IN31     IFEQ *OFF
     C                     MOVEL#RD256    B#RDTA
     C                     END
      *
     C                     WRITE@BCNFMT
      *
     C                     END
      *
     C                     CLOSECGWPBCND
      *
     C                     ELSE
      *
      * Put work files into QTEMP if in diagnostic mode
      *
     C                     CALL 'CGC3003'              9090
     C                     PARM *BLANKS   P@RTCD  7        B:Return code
     C                     PARM WKF1      P@WRKF 10                    e
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           P@RTCD    OREQ '*ERROR*'
     C                     MOVEL'CGC3003' W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD301       W0ERNB           * DB ERROR 05 *
     C                     MOVEL'PGI0002' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     CLEARCMDSTR
     C                     MOVELCMDS11    CMDSTR
     C           CMDSTR    CAT  WKF1:0    CMDSTR    P
     C           CMDSTR    CAT  CMDS12:0  CMDSTR    P
     C           CMDSTR    CAT  WKF1:0    CMDSTR    P
     C           CMDSTR    CAT  CMDS13:0  CMDSTR    P
     C                     CALL 'QCMDEXC'
     C                     PARM           CMDSTR256
     C                     PARM 256       CMDLEN 155
     C                     OPEN CGWPCOND
      *
      *  Generate all permutations of basic conditions
      *  (suppressing mutually exclusive ones)
      *
     C           *LIKE     DEFN CL        #CL
     C                     CLEARCLA
      *
     C                     DO   SC        L1
      *
     C           CCA,L1    IFEQ 'Y'
     C                     MOVE '1'       CLA,L1
     C                     ELSE
     C                     MOVE '0'       CLA,L1
     C                     END
      *
     C                     END
      *
     C                     MOVELCL        #CL
      *
     C                     DO   SC        L1
     C                     MOVE '0'       CLA,L1
     C                     END
      *
     C                     SETON                     30
     C           CL        DOWNE#CL
      *
     C           *IN30     IFEQ *ON
     C                     SETOF                     30
     C                     ELSE
      *
     C                     DO   SC        L2
      *
     C           CCA,L2    IFEQ 'Y'
      *
     C           CLA,L2    IFEQ '0'
     C                     MOVE '1'       CLA,L2
     C                     LEAVE
     C                     ELSE
     C                     MOVE '0'       CLA,L2
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     MOVE 'N'       EXCL    1
      *
     C                     DO   EC        L1
      *
     C                     MOVE MEC,L1    #ECDS
     C           1         SUBSTCL:#M1    #LCOND  1
     C           1         SUBSTCL:#M2    #RCOND  1
      *
     C           #LCOND    IFEQ '1'
     C           #RCOND    ANDEQ'1'
     C           #LCOND    OREQ '0'
     C           #RCOND    ANDEQ'0'
      *
     C                     MOVE 'Y'       EXCL
     C                     LEAVE
      *
     C                     END
      *
     C                     END
      *
     C           EXCL      IFEQ 'N'
     C                     WRITE@CNDFMT
     C                     END
      *
     C                     END
      *
     C                     END
      *
      *  Now Test All Conditions if at layout level
      *
     C           #@PLAN    IFEQ *BLANKS
      *
     C           *LOVAL    SETLL@CNDFMT
     C                     READ @CNDFMT                  01
     C           *IN01     DOWEQ*OFF
      *
     C                     EXSR SRLOOP
      *
     C                     DELET@CNDFMT
     C                     READ @CNDFMT                  01
     C                     END
      *
     C                     END
      *
     C                     CLOSECGWPCOND
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRDISP   : Generate Display Data                             *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 300                                               *
      *                                                               *
      *****************************************************************
     CSR         SRDISP    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRDISP'  @STK,Q
      *
      *  Set ##SIZEs for read simulations
      *
     C                     DO   RG        L1
     C                     MOVE #RG,L1    #RGDS
     C           @OFH      OCUR OFH
     C                     Z-ADD1         ##SIZE
     C                     END
      *
      *  Fill DED with example data for testing
      *
     C                     DO   AL        L1
      *
     C                     MOVEL#AL,L1    #ALDS
     C           @DED      OCUR DED
     C                     CLEARDED
      *
     C                     MOVELDAL,L1    #ALKEY
     C                     Z-ADD1         L2
     C           #RRDE     LOKUPRDE,L2               99  30
      *
     C           *IN30     IFEQ *ON
     C                     MOVEL#DE,L2    #DEDS
     C                     MOVEL#DETXT    #RD256
     C                     END
      *
     C                     END
      *
     C                     OPEN CGWPCOND
      *
     C                     CLEAR@CNDFMT
     C           *LOVAL    SETLL@CNDFMT
     C                     READ @CNDFMT                  01
      *
     C           *IN01     IFEQ *OFF
     C                     EXSR SRCCND
     C                     END
      *
     C                     CLOSECGWPCOND
      *
     C                     EXSR SRLOOP
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRPRNT   : Perform Printing                                  *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 400                                               *
      *                                                               *
      *****************************************************************
     CSR         SRPRNT    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRPRNT'  @STK,Q
      *
      * Open/Close controlled by #@SPLC
      *
     C           #@SPLC    IFEQ 'O'
     C           #@SPLC    OREQ 'B'
      *
     C                     CLEARCMDSTR
     C                     MOVELCMDS21    CMDSTR
     C           CMDSTR    CAT  CMDS22:1  CMDSTR    P
     C           CMDSTR    CAT  A@ROW:0   CMDSTR    P
     C           CMDSTR    CAT  A@COL:1   CMDSTR    P
     C           CMDSTR    CAT  CMDS23:0  CMDSTR    P
     C           CMDSTR    CAT  A@ROW:0   CMDSTR    P
     C           CMDSTR    CAT  CMDS24:0  CMDSTR    P
     C                     CALL 'QCMDEXC'
     C                     PARM           CMDSTR256
     C                     PARM 256       CMDLEN 155
      *
     C                     OPEN CG3000P1
     C                     END
      *
     C                     Z-ADDSPLNUM    #@SPNO
     C                     MOVELSPLNAM    #@SPNA
      *
      *  Pull extract data into data-stream @ open pipes
      *
     C                     EXSR SRPULL
      *
      * Set total pages to zero                                           095470
      *                                                                   095470
     C                     Z-ADD0         ##TNP                           095470
      *                                                                   095470
      * If  total pages calculate                                         095470
      *                                                                   095470
     C           ##TNPF    IFEQ 'T'                                       095470
     C           W0ACT     ANDEQ'*PRINT'                                  095470
      *  Initialise ALL Data                                              095470
     C                     DO   AL        L1                              095470
      *                                                                   095470
     C                     MOVE DAL,L1    #ALKEY                          095470
      *                                                                   095470
     C           #RNPTH    IFNE #RNOFH                                    095470
      *                                                                   095470
     C                     MOVE #AL,L1    #ALDS                           095470
      *                                                                   095470
     C           @DED      OCUR DED                                       095470
     C                     CLEARDED                                       095470
      *                                                                   095470
     C                     END                                            095470
      *                                                                   095470
     C                     END                                            095470
      *                                                                   095470
     C                     DO   AP        L1                              095470
      *                                                                   095470
     C                     MOVE #AP,L1    #APDS                           095470
      *                                                                   095470
     C           @DEP      OCUR DED                                       095470
     C                     CLEARDED                                       095470
      *                                                                   095470
     C                     END                                            095470
      *                                                                   095470
      *  Loop around structure till data exhausted                        095470
      *                                                                   095470
      * Flag to prevent output to printer                                 095470
     C                     MOVEL'NO PRINT'##TNPO  8                       095470
     C                     EXSR SRLOOP                                    095470
     C                     MOVEL*BLANKS   ##TNPO                          095470
      *                                                                   095470
     C                     Z-ADDPAGNUM    ##TNP                           095470
     C                     ENDIF                                          095470
      *                                                                   095470
     C                     DO   @COPY     #COPY
      *  Initialise ALL Data
     C                     DO   AL        L1
      *
     C                     MOVE DAL,L1    #ALKEY
      *
     C           #RNPTH    IFNE #RNOFH
      *
     C                     MOVE #AL,L1    #ALDS
      *
     C           @DED      OCUR DED
     C                     CLEARDED
      *
     C                     END
      *
     C                     END
      *
     C                     DO   AP        L1                             086152
      *                                                                  086152
     C                     MOVE #AP,L1    #APDS                          086152
      *                                                                  086152
     C           @DEP      OCUR DED                                      086152
     C                     CLEARDED                                      086152
      *                                                                  086152
     C                     END                                           086152
      *
     C           #COPY     IFEQ 1
     C                     Z-ADD#@RPPS    #AGNUM  60
     C                     Z-ADDSPLPAG    #@SPPS
     C                     SUB  1         #@SPPS
     C                     OUT  CGLDA
     C                     END
      *
      *  Loop around structure till data exhausted
      *
     C                     EXSR SRLOOP
      *
     C           #COPY     IFEQ 1
     C                     Z-ADDSPLPAG    #@SPPE
     C                     SUB  1         #@SPPE
     C                     OUT  CGLDA
     C                     END
      *
     C                     END
      *
     C           #@SPLC    IFEQ 'C'
     C           #@SPLC    OREQ 'B'
     C                     CLOSECG3000P1
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRPULL   : Pull UDC extract data ready for streaming         *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 500                                               *
      *                                                               *
      *****************************************************************
     CSR         SRPULL    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRPULL'  @STK,Q
      *
     C                     DO   RG        L1
      *
     C                     MOVE #RG,L1    #RGDS
     C                     MOVE #PRPTH    #P2
      *
      *  Create directory if required
      *
     C                     CALL 'QHFCRTDR'PLHFC1
      *
      *  Open data stream
      *
     C                     RESET#ERRDS
     C                     CALL 'QHFOPNSF'PLHFOP
      *
     C           EXCPID    IFNE *BLANKS
     C                     MOVEL'QHFOPNSF'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD501       W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C           @OFH      OCUR OFH
     C                     MOVE @OPNFH    #OPNFH
      *
      *  Read data by item No.
      *
     C                     CLEARUDTDTA
     C           #@ARCH    IFEQ 'A'
     C           CGUKEY    CHAINCGXDTAL2             01
     C                     ELSE
     C           CGUKEY    CHAINCGUDTAL2             01
     C                     ENDIF
     C           *IN01     DOWEQ*OFF
      *  Write to stream
     C                     RESET#ERRDS
     C                     CALL 'QHFWRTSF'PLHFWR
      *
     C           EXCPID    IFNE *BLANKS
     C           BYTEO     ORNE BYTEW
     C                     MOVEL'QHFWRTSF'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD502       W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     CLEARUDTDTA
     C           #@ARCH    IFEQ 'A'
     C           CGUKEY    READECGXDTAL2                 01
     C                     ELSE
     C           CGUKEY    READECGUDTAL2                 01
     C                     ENDIF
     C                     END
      *
      *  Retreive size
      *
     C                     RESET#ERRDS
     C                     CALL 'QHFGETSZ'PLHFGE
      *
     C           EXCPID    IFNE *BLANKS
     C                     MOVEL'QHFGETSZ'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD503       W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     Z-ADDBSIZE     ##SIZE
      *
      *  Initialise pertinent DED items for each repaeting group
      *
     C                     MOVE #PRPTH    #RROFH
      *
     C                     Z-ADD1         L2
     C           #ALOFH    LOKUPDAL,L2               99  30
      *
     C           *IN30     IFEQ *ON
     C                     MOVE #AL,L2    #ALDS
     C           @DED      OCUR DED
      *
     C           ##SIZE    IFEQ 0
     C                     MOVELZEROLI    #RD256    P
     C                     ELSE
     C                     MOVEL##SIZE    #RD256    P
     C                     END
      *
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRLOOP   : Process structure with main loop                  *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 600                                               *
      *                                                               *
      *****************************************************************
     CSR         SRLOOP    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRLOOP'  @STK,Q
      *  Initialise Binds
     C                     DO   RG        L1
      *
     C                     MOVE #RG,L1    #RGDS
     C           @CBI      OCUR CBI
     C           @CBI      OCUR PBI
     C                     CLEARCBI
     C                     CLEARPBI
      *
     C           W0ACT     IFEQ '*PRINT  '
      *  Reposition pointers
     C           @OFH      OCUR OFH
     C                     CLEAR#BYTEM
     C                     CALL 'QHFCHGFP'PLHFCH
      *
     C                     END
      *
     C                     END
      *
     C                     Z-ADD0         PAGNUM  60
      *                                                                   CCG009
      ** If Group Transaction Reference changes,                          CCG009
      ** or Group Sequence Number is '01',                                CCG009
      ** reset group page number                                          CCG009
      *                                                                   CCG009
     C           *LIKE     DEFN #@GPTR    #SVGBT                          CCG009
     C           #@GPTR    IFNE #SVGBT                                    CCG009
     C           #@GPTR    OREQ *BLANK                                    CCG009
     C           #@GPSQ    OREQ '01'                                      CCG009
     C                     MOVE #@GPTR    #SVGBT                          CCG009
     C                     Z-ADD0         #GRPAG  50                      CCG009
     C                     ENDIF                                          CCG009
      *
      *  Top Loop controlled by Top Plane data
      *
     C           #CACHE    DOUEQ'Y'
      *
      *  Process planes list
      *
     C                     EXSR SRLIST
      *                                                                   089201
      ** Check whether SRLIST actually returned anything before           089201
      ** outputting, in order to ensure blank pages are not printed.      089201
      ** NB. this fix should be regarded as temporary - a better          089201
      ** solution would be to change the logic in SRLIST.                 089201
     C                     MOVEL'N'       #SLDTA  1                       089201
     C                     DO   N#ROW     L1                              089201
     C           L1        OCUR PAC                                       089201
     C           PACLIN    IFNE *BLANKS                                   089201
     C                     MOVEL'Y'       #SLDTA                          089201
     C                     LEAVE                                          089201
     C                     ENDIF                                          089201
     C                     ENDDO                                          089201
      *                                                                   DJU001
     C           #PAGE     IFNE '*OFF'                                    DJU001
     C           #SLDTA    ANDEQ'Y'                                       089201
      *
     C                     SELEC
     C* Do nothing if finding total number of pages                       095470
     C           ##TNPO    WHEQ 'NO PRINT'                                095470
     C* Print if action is print                                          095470
     C           W0ACT     WHEQ '*PRINT  '
      *
     C***********          EXCPTPAGEO                                     CCG011
     C                     WRITEPAGEO                                     CCG011
     C***********          DO   66        L1                              086152
     C                     DO   N#ROW     L1                              086152
     C           L1        OCUR PAC
     C***********          EXCPTLINEO                                     CCG011
      *                                                                   CCG011
      * Look at position 1 and write format if FONTS being used           CCG011
      *                                                                   CCG011
     C           CCG011    IFEQ 'CCG011 '                                 CCG011
     C                     MOVELPACLIN    ##001A  1                       CCG011
     C                     MOVEL' '       PACLIN                          CCG011
     C                     SELEC                                          CCG011
     C           ##001A    WHEQ 'A'                                       CCG011
     C                     WRITELINEA                                     CCG011
     C           ##001A    WHEQ 'B'                                       CCG011
     C                     WRITELINEB                                     CCG011
     C           ##001A    WHEQ 'C'                                       CCG011
     C                     WRITELINEC                                     CCG011
     C           ##001A    WHEQ 'D'                                       CCG011
     C                     WRITELINED                                     CCG011
     C                     OTHER                                          CCG011
     C                     WRITELINEA                                     CCG011
     C                     ENDSL                                          CCG011
     C                     ELSE                                           CCG011
     C                     WRITELINEA                                     CCG011
     C                     ENDIF                                          CCG011
      *                                                                   CCG011
     C                     END
      *
     C           PAGNUM    IFEQ 0
     C           #COPY     ANDEQ1                                         090417
     C                     Z-ADDSPLPAG    #@SPPS
     C                     SUB  1         #@SPPS
     C                     OUT  CGLDA
     C                     END
      *
     C                     OTHER
      *
     C           #@PLAN    IFNE *BLANKS
      *
     C                     OPEN CGWPDISP
      *
     C           N#ROW     MULT PAGNUM    L1
      *
     C                     DO   N#ROW     L2
     C           L1        ADD  L2        L3
      *
     C                     Z-ADDL3        DSPSEQ
     C           DSPSEQ    CHAIN@DSPFMT              30
      *
     C           *NOKEY    CLEAR@DSPFMT
     C           L2        OCUR PAC
     C                     MOVELPACLIN    DSPLIN    P
     C   30                WRITE@DSPFMT
     C  N30                UPDAT@DSPFMT
     C                     END
      *
     C                     CLOSECGWPDISP
      *
     C                     END
      *
     C                     ENDSL
      *
     C                     ADD  1         PAGNUM
     C                     ADD  1         #AGNUM
     C                     ADD  1         #GRPAG                          CCG009
      *                                                                   DJU001
     C                     END                                            DJU001
      *
      *  Test EOD for Top Plane
      *
     C                     MOVE #RG,@T    #RGDS
     C           @CBI      OCUR CBI
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRLIST   : Iterate Recursively to process list               *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 600                                               *
      *                                                               *
      *****************************************************************
     CSR         SRLIST    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRLIST'  @STK,Q
     C                     Z-ADD1         @REC,Q
      *
      *  Set Page RDE DED
      *
     C           @DPAGE    IFNE 0
     C           @DPAGE    OCUR DED
     C           PAGNUM    ADD  1         ##PAGE
     C                     CLEARNUMDS
     C                     Z-ADD##PAGE    NUMVAL
     C                     MOVELNUMDS     #RD256    P
     C                     END
      *
     C           @DPAGR    IFNE 0
     C           @DPAGR    OCUR DED
     C           #AGNUM    ADD  1         ##PAGR
     C                     CLEARNUMDS
     C                     Z-ADD##PAGR    NUMVAL
     C                     MOVELNUMDS     #RD256    P
     C                     END
      *                                                                   087786
     C           @DPAG0    IFNE 0                                         087786
     C           @DPAG0    OCUR DED                                       087786
     C                     Z-ADDPAGNUM    ##PAG0                          087786
     C                     CLEARNUMDS                                     087786
     C                     Z-ADD##PAG0    NUMVAL                          087786
     C                     MOVELNUMDS     #RD256    P                     087786
     C                     END                                            087786
      *                                                                   087786
     C           @DPAPB    IFNE 0                                         CCG009
     C           @DPAPB    OCUR DED                                       CCG009
     C           #GRPAG    ADD  1         ##PAPB                          CCG009
     C                     CLEARNUMDS                                     CCG009
     C                     Z-ADD##PAPB    NUMVAL                          CCG009
     C                     MOVELNUMDS     #RD256    P                     CCG009
     C                     END                                            CCG009
      *                                                                   109567
      * Reset Reads                                                       109567
      *                                                                   109567
     C           @DRDS     IFNE 0                                         109567
     C           @DRDS     OCUR DED                                       109567
     C                     Z-ADD0         ##RDS                           109567
     C                     CLEARNUMDS                                     109567
     C                     Z-ADD##RDS     NUMVAL                          109567
     C                     MOVELNUMDS     #RD256    P                     109567
     C                     END                                            109567
      *                                                                   109567
      *                                                                   109567
      * If print re-do conditions                                         109567
      *                                                                   109567
     C           W0ACT     IFEQ '*PRINT  '                                109567
      *  Evaluate basic conditions                                        109567
     C                     EXSR SRBCND                                    109567
      *  Evaluate complex if basic ones change                            109567
     C                     EXSR SRCCND                                    109567
      *                                                                   109567
     C                     END                                            109567
      *                                                                   CCG009
      *  Initialise Binds
     C                     DO   RG        L1
      *
     C                     MOVE #RG,L1    #RGDS
     C           @CBI      OCUR CBI
     C           @CBI      OCUR EBI
     C           @CBI      OCUR MBI
     C           @CBI      OCUR PBI
     C                     CLEARMBI
      *  If re-entering post burst; ensure re-read if "Refill"
     C           #CACHE    IFEQ 'N'
     C                     MOVE PBI       EBI
     C                     ELSE
     C                     MOVE CBI       EBI
     C                     END
      *
     C                     END
      *  Clear Page-Cache
     C                     DO   PAGROW    L1
     C           L1        OCUR PAC
     C                     CLEARPACLIN
     C                     END
      *  Re-Entry Point for Main loop
     C           REFILL    TAG
      *  Set #PAGE:*OFF
     C                     MOVE '*OFF '   #PAGE   5
      *  Initialise Control Boxes
     C                     EXSR SRIBOX
      *  Initialise Pre-Cache initialisation count
     C                     Z-ADD0         PREINZ
     C                     Z-ADD0         @@R
      *  Clear stack
     C                     CALL 'QCLRDTAQ'STINZ
      *  Default Pre-Cache application
     C           W0ACT     IFEQ '*PRINT  '
     C                     MOVE 'EOD'     #APPL   3
     C                     ELSE
     C                     MOVE 'OVR'     #APPL
     C                     END
      *
     C                     MOVE #APPL     @APPL
     C           *LIKE     DEFN #APPL     @APPL
      *
      *  Load stack starting with Top Level
      *
     C                     MOVE PLF,@LF   #PLPRC
     C                     MOVE PLF,@LF   #PLBOX
     C                     Z-ADD1         #DEPTH
     C                     CALL 'QSNDDTAQ'STPUSH                          091826
      *  DOU Stack Pull End
     C           FLDLEN    DOUEQ0
      *  Set controlling box from stack
     C                     Z-ADD1         L1
     C           #PLBOX    LOKUPPLF,L1                   30
      *
     C           *IN30     IFEQ *ON
     C                     MOVE #LF,L1    #LFDS
     C           *LIKE     DEFN @CCB      @@CCB
     C                     Z-ADD@CCB      @@CCB
     C                     END
      *
     C                     Z-ADD1         L1
     C           #PLPRC    LOKUPPRG,L1               99  30
      *  If repeater
     C           *IN30     IFEQ *ON
      *  Store last repeater off stack
     C                     Z-ADDL1        @R
      *  Set EOD to true
     C                     MOVE 'Y'       OFFEOD  1
      *  Check preceeding offspring repeaters for EOD
     C                     Z-ADD1         L2
     C           #PLPRC    LOKUP#RC,L2                   31
      *
     C           *IN31     IFEQ *ON
     C           L2        ANDLTRC
      *
     C           *LIKE     DEFN LPPLAN    #PPLAN
     C                     MOVE PRC,L2    #PPLAN
     C                     ADD  1         L2
      *
     C***********L2        DO   RC                                        DJU001
     C           L2        DO   RC        L3                              DJU001
      *
     C***********PRC,L2    IFNE #PPLAN                                    DJU001
     C           PRC,L3    IFNE #PPLAN                                    DJU001
     C                     LEAVE
     C                     END
      *
     C***********          MOVE #RC,L2    #RCDS                           DJU001
     C                     MOVE #RC,L3    #RCDS                           DJU001
     C***********          Z-ADD1         L3                              DJU001
     C                     Z-ADD1         L4                              DJU001
     C***********OFFREP    LOKUPPRG,L3               99  32               DJU001
     C           OFFREP    LOKUPPRG,L4               99  32               DJU001
      *
     C           *IN32     IFEQ *ON
     C***********          MOVE #RG,L3    #RGDS                           DJU001
     C                     MOVE #RG,L4    #RGDS                           DJU001
     C           @CBI      OCUR CBI
      *  If bind indicates EOD toggle on OFFEOD
     C           #EFLST    IFNE 'Y'
     C           #CACHE    ORNE 'Y'
     C                     MOVE 'N'       OFFEOD
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *  All preceeding offspring repeaters EOD
     C           OFFEOD    IFEQ 'Y'
      *  Reset path data
     C                     MOVE #RG,@R    #RGDS
     C           @CBI      OCUR CBI
      *  Check plane condition; if off read until EOD
     C                     MOVE PRG,@R    #PLANE
     C                     MOVE 'P'       #CTYPE
     C                     EXSR SRCNDT
      *
     C           CNDTST    IFNE 'Y'
      *                                                                   109567
      * Increment the reads                                               109567
      *                                                                   109567
     C           @DRDS     IFNE 0                                         109567
     C           @DRDS     OCUR DED                                       109567
     C                     ADD  1         ##RDS                           109567
     C                     CLEARNUMDS                                     109567
     C                     Z-ADD##RDS     NUMVAL                          109567
     C                     MOVELNUMDS     #RD256    P                     109567
     C                     END                                            109567
      *
     C           #EFLST    DOUEQ'Y'
     C                     EXSR SRREAD
     C                     END
      *  Set as EOD for next offspring repeater test
     C                     MOVE 'Y'       #CACHE
      *
     C                     END
      *                                                                   091826
      * Synchronise #CACHE at ALL levels above:                           091826
      *                                                                   091826
     C                     MOVELPRG,@R    #PLANE                          091826
     C                     EXSR SR#CAC                                    091826
      *  Reset path data                                                  091826
     C                     MOVE #RG,@R    #RGDS                           091826
     C           @CBI      OCUR CBI                                       091826
      *                                                                   091826
     C           @PR       IFNE 0                                         091826
     C           @PR       OREQ @R                                        091826
     C           CNDTST    ANDEQ'Y'                                       091826
     C                     MOVE '*FILL'   #PAGE                           091826
     C                     END                                            091826
      *  If coupled correctly apply pre-cache
     C           #FIXED    IFEQ 'N'
     C           #PAGE     ANDEQ'*FILL'
     C***********@@R       ANDEQ@R                                        091826
     C           #ETBIN    ANDGT##TBIN                                    091826
      *  Or progress made filling pre-cache with this repeater            091826
     C           #FIXED    OREQ 'N'                                       091826
     C           #PAGE     ANDEQ'*FILL'                                   091826
     C           #ETBIN    ANDEQ##TBIN                                    091826
     C           #CACHE    ANDEQ'Y'                                       091826
      *  Or transition from last repeater
     C           #PAGE     OREQ '*ON  '
     C           #EFLST    ANDEQ'Y'
     C           #CACHE    ANDEQ'Y'
     C                     EXSR SRAPRE
     C                     END
      *
     C           #PAGE     IFNE '*FILL'
      *
     C           #EFLST    IFNE 'Y'
     C           #CACHE    ORNE 'Y'
      *  Read next if previous cached & set conditions
     C           #CACHE    IFNE 'N'
      *                                                                   109567
      * Increment the reads                                               109567
      *                                                                   109567
     C           @DRDS     IFNE 0                                         109567
     C           @DRDS     OCUR DED                                       109567
     C                     ADD  1         ##RDS                           109567
     C                     CLEARNUMDS                                     109567
     C                     Z-ADD##RDS     NUMVAL                          109567
     C                     MOVELNUMDS     #RD256    P                     109567
     C                     END                                            109567
      *
     C                     EXSR SRREAD
      *
     C           W0ACT     IFEQ '*PRINT  '
      *  Evaluate basic conditions
     C                     EXSR SRBCND
      *  Evaluate complex if basic ones change
     C           CL        IFNE @CL
     C                     EXSR SRCCND
     C                     END
      *
     C                     END
      *
      *  *CHANGE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      *
      *  NB: Logic here is very subtle. If conditions have changed and
      *  previous maximum nibble has been exceeded then:
      *
      *  1) Apply Overflow pre-cache to page cache
      ***2) Initialise pre-caches with new conditions
      *  3) Set nibble count maxmima
      *  4) Re-set pipes to entry point
      *  5) Re-enter main loop
      *
      *  I have bundled 3) & 4) into subroutine SRCCHG for clarity
      *
     C           #PAGE     IFEQ '*ON  '
      *
     C                     EXSR SRNIBL
      *
     C           DTACND    IFEQ 'Y'
     C           #CCCHG    ANDEQ'Y'
     C                     EXSR SRAPRE
     C                     EXSR SRCCHG
     C                     ADD  1         @REC,Q
     C                     GOTO REFILL
     C                     END
      *
     C                     END
      *
     C                     END
      *  Test for page fill triggered by conditions if filling page
     C           #PAGE     IFEQ '*ON  '
     C*********************EXSR XXXXXX
     C                     END
      *  Reset path data
     C                     MOVE #RG,@R    #RGDS
      *
     C           #PAGE     IFEQ '*OFF '
      *
     C                     SELEC
      *  If coupled correctly initialise pre-cache
     C           #FIXED    WHEQ 'N'
     C                     MOVE '*ON  '   #PAGE
      *  Otherwise assume page fill
     C           #FIXED    WHEQ 'Y'
     C                     MOVE '*FILL'   #PAGE
     C                     ENDSL
      *
     C                     END
      *                                                                   DJU001
     C           #PAGE     IFEQ '*ON  '                                   DJU001
     C           #FIXED    ANDEQ'Y'                                       DJU001
      *                                                                   DJU001
     C                     MOVE '*FILL'   #PAGE                           DJU001
      *                                                                   DJU001
     C                     ELSE                                           DJU001
      *  Push complex-repeating first if page fill required
     C           #FIXED    IFNE *BLANKS                                   091826
     C           @R        OREQ @T                                        091826
     C                     CALL 'QSNDDTAQ'STPUSH                          091826
     C                     END                                            091826
      *                                                                   091826
     C           #PAGE     IFEQ '*ON  '
     C***********          CALL 'QSNDDTAQ'STPUSH                          091826
      *  Initialse Pre-Cache whenever repeater changes to inherit
     C           @@R       IFNE @R
     C                     EXSR SRIPRE
     C                     END
     C                     END
      *  Reset path data
     C                     MOVE #RG,@R    #RGDS
     C           @CBI      OCUR CBI
     C           @OFH      OCUR OFH                                       DJU001
     C           @CBI      OCUR PBI
      *  If no data in repeater check for page break
     C***********##SIZE    IFEQ 0                                         DJU001
     C           PCOUNT    IFEQ #COUNT                                    DJU001
     C           @R        ANDEQ#@R                                       DJU001
     C***********#DUMMY    ANDNE'Y'                                       DJU001
      *
     C                     MOVE 'Y'       #CACHE
     C***********          EXSR SRPAGB                                    DJU001
      *
     C***********#FPAGB    IFEQ 'Y'                                       DJU001
     C***********          MOVE '*FILL'   #PAGE                           DJU001
     C***********          END                                            DJU001
      *
     C***********          ELSE                                           DJU001
     C                     END                                            DJU001
      *                                                                   DJU001
     C           #CACHE    IFNE 'Y'                                       DJU001
      *                                                                   091826
     C           #FIXED    IFEQ 'Y'                                       091826
     C                     MOVE 'Y'       #CACHE                          091826
     C                     END                                            091826
      *
     C           *LIKE     DEFN #PLBOX    @PLBOX
     C                     MOVE #PLBOX    @PLBOX
      *  Push associated exc. Overflow-Before & exhausted repeaters
     C                     Z-ADD1         L2
     C           PRG,@R    LOKUPPLA,L2               99  31
      *
     C           *IN31     IFEQ *ON
      *
     C                     ADD  1         #DEPTH
      *
     C           L2        DO   LA        L3
      *
     C           PLA,L3    IFNE PLA,L2
     C                     LEAVE
     C                     END
      *
     C                     MOVE #LA,L3    #LADS
      *
     C                     SETOF                     33
      *
     C                     Z-ADD1         L4
     C           #ATPLN    LOKUPPRG,L4               99  32
      *  Check this repeater for EOD
     C           *IN32     IFEQ *ON
     C                     MOVE #RG,L4    #RGDS
     C           @CBI      OCUR CBI
      *  If bind indicates EOD toggle off
     C           #EFLST    IFEQ 'Y'
     C           #CACHE    ANDEQ'Y'
     C                     SETON                     33
     C                     END
      *
     C                     END
      *
     C                     Z-ADD1         L4
     C           #ATPLN    LOKUPPLO,L4               99  32
      *
     C           *IN32     IFEQ *ON
     C                     MOVE #LO,L4    #LODS
     C           #POFAB    IFEQ 'B'
     C           #POFAB    OREQ 'O'
     C           #POFAB    OREQ 'F'
     C           #POFAB    OREQ 'N'
     C                     SETON                     33
     C                     END
     C                     END
      *
     C           *IN33     IFEQ *OFF
      * If pushing fixed box set controlling box
     C                     Z-ADD1         L5
     C           #ATPLN    LOKUPPLF,L5               99  34
      *
     C   34                MOVE #ATPLN    #PLBOX
     C  N34                MOVE @PLBOX    #PLBOX
      *
     C                     MOVE #ATPLN    #PLPRC
     C                     CALL 'QSNDDTAQ'STPUSH
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *                                                                   DJU001
     C                     END                                            DJU001
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *  Non repeater
     C                     ELSE
      *                                                                   091826
     C                     MOVE #RG,@R    #RGDS                           091826
     C           @CBI      OCUR CBI                                       091826
      *  Fixed
     C                     Z-ADD1         L2
     C           #PLPRC    LOKUPPLF,L2               99  31
      *
     C           *IN31     IFEQ *ON
      *
     C                     MOVE #LF,L2    #LFDS
     C                     MOVE F#BOXD    #PBOXD
      *  Test if ON first
     C                     MOVE #PLPRC    #PLANE
     C                     MOVE 'P'       #CTYPE
     C                     EXSR SRCNDT
      *
     C           CNDTST    IFEQ 'Y'
      *
     C                     MOVE #PLBOX    @PLBOX
     C                     Z-ADD1         L3
     C           #PLPRC    LOKUPPLA,L3               99  32
      *  & Complex
     C           *IN32     IFEQ *OFF
      *  If fixed/simple apply directly to page cache
     C                     Z-ADD4         CB
     C           CB        OCUR FCB
     C           @@CCB     OCUR CCB
      *
     C                     MOVELCCB       FCB
     C                     MOVE 'PAG'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #PLPRC    #PLANE
     C                     EXSR SRFILL
      *
     C***********          MOVE #RG,@R    #RGDS                           091826
     C***********@CBI      OCUR CBI                                       091826
      *
     C***********#FIXED    IFEQ 'Y'                                       091826
     C***********          MOVE 'Y'       #CACHE                          091826
     C***********          END                                            091826
      *
     C                     ELSE
      *
     C                     ADD  1         #DEPTH
      *  Otherwise push associated
     C           L3        DO   LA        L4
      *
     C           PLA,L3    IFNE PLA,L4
     C                     LEAVE
     C                     END
      *
     C                     MOVE #LA,L4    #LADS
      * If pushing fixed box set controlling box
     C                     Z-ADD1         L5
     C           #ATPLN    LOKUPPLF,L5               99  33
      *
     C   33                MOVE #ATPLN    #PLBOX
     C  N33                MOVE @PLBOX    #PLBOX
     C                     MOVE #ATPLN    #PLPRC
     C                     CALL 'QSNDDTAQ'STPUSH
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *  If relative
     C                     Z-ADD1         L2
     C           #PLPRC    LOKUPPLR,L2               99  31
      *
     C           *IN31     IFEQ *ON
      *
     C                     MOVE #LR,L2    #LRDS
     C                     MOVE R#BOXD    #PBOXD
      *
     C                     Z-ADD1         L3
     C           #PLPRC    LOKUPPLO,L3               99  32
      *
     C           *IN32     IFEQ *ON
      *  Test if ON first
     C                     MOVE #PLPRC    #PLANE
     C                     MOVE 'P'       #CTYPE
     C                     EXSR SRCNDT
      *
     C           CNDTST    IFEQ 'Y'
      *
     C                     MOVE #LO,L3    #LODS
      *  If Overflow/EOD etc...
     C           #POFAB    IFEQ 'E'
     C           #EFLST    ANDEQ'Y'
      *
     C           @BURST    IFNE 'Y'
      *
     C                     Z-ADD1         CB
     C                     MOVE 'OVR'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #PLPRC    #PLANE
     C                     EXSR SRFILL
      *
     C                     END
      *
     C                     Z-ADD2         CB
     C                     MOVE 'EOD'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #PLPRC    #PLANE
     C                     EXSR SRFILL
      *
     C                     END
      *
     C           #POFAB    IFEQ 'A'
      *
     C                     Z-ADD1         CB
     C                     Z-ADD1         WB
     C           CB        OCUR FCB
     C           WB        OCUR FWB
     C                     MOVELFCB       FWB
     C                     MOVE 'OVR'     #FILL
     C                     MOVE #PLPRC    #PLANE
     C                     EXSR SRFILL
      *
     C                     END
      *
     C                     END
      *
     C                     ELSE
      *
     C           #PAGE     IFEQ '*ON  '
      *  If "bog-standard" relative plane in a box THEN...
      *  first check all fill control boxes for burst
      *  Test if #CACHE first
      *
     C***********          MOVE #RG,@R    #RGDS                           091826
     C***********@CBI      OCUR CBI                                       091826
      *
     C           #CACHE    IFNE 'Y'
      *
     C                     DO   3         CB
     C           CB        ADD  2         WB
     C           CB        OCUR FCB
     C           WB        OCUR FWB
     C                     MOVELFCB       FWB
     C                     END
      *
     C                     SETOF                     30
     C                     DO   LA        L4
     C                     MOVEL#LA,L4    ##LANE
     C           #PLPRC    IFEQ ##LANE
     C                     SETON                     30
     C                     Z-ADDL4        L5
     C                     LEAVE
     C                     END
     C                     END
      *
     C   30                DO   LA
      *
     C           L5        IFEQ 0
     C                     LEAVE
     C                     END
      *
     C           PLA,L4    IFNE PLA,L5
     C                     LEAVE
     C                     END
      *
     C           *LIKE     DEFN LPPLAN    ###ANE
     C                     MOVEL#LA,L5    ###ANE
     C                     Z-ADD1         L6
     C           ###ANE    LOKUPPLO,L6               99  30
      *
     C           *IN30     IFEQ *OFF
      *  Store Last
     C           *LIKE     DEFN LPPLAN    ##LANE
     C                     MOVEL#LA,L5    ##LANE
      *  Test if ON first
     C                     MOVEL#LA,L5    #PLANE
     C                     MOVE 'P'       #CTYPE
     C                     EXSR SRCNDT
      *
     C           CNDTST    IFEQ 'Y'
      *
     C           *LIKE     DEFN CB        #CB
     C           *LIKE     DEFN WB        #WB
      *
     C                     DO   3         #CB
     C           #CB       ADD  2         #WB
      *
     C           #CB       OCUR FCB
      *
     C           #BURST    IFNE 'Y'
     C                     Z-ADD#WB       WB
     C                     MOVEL#LA,L5    #PLANE
     C                     EXSR SRFILL
     C                     END
      *
     C           #WB       OCUR FWB
     C           @@URST    IFEQ 'Y'
     C           #CB       OCUR FCB
     C                     MOVE 'Y'       #BURST
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     SUB  1         L5
      *
     C                     END
      *
     C                     END
      *
     C           *LIKE     DEFN #BURST    @BURST
     C                     MOVE *BLANKS   @BURST
      *
     C           #EFLST    IFEQ 'Y'
      *
     C***********          Z-ADD3         CB                              091826
     C                     Z-ADD2         CB                              091826
     C           CB        OCUR FCB
     C           #BURST    IFEQ 'Y'
     C                     MOVE #BURST    @BURST
     C                     END
      *
     C                     ELSE
      *
     C                     Z-ADD1         CB
     C           CB        OCUR FCB
     C           #BURST    IFEQ 'Y'
     C                     MOVE #BURST    @BURST
     C                     END
      *
     C                     END
      ***Test for page throw triggered by bind levels                     091826
     C***********          EXSR SRPAGB                                    091826
      ***If:*FILL check EOD pre-cache                                     091826
     C***********#FPAGB    IFEQ 'Y'                                       091826
     C***********          Z-ADD2         CB                              091826
     C***********CB        OCUR FCB                                       091826
     C***********          MOVE #BURST    @BURST                          091826
     C***********          END                                            091826
      *
     C           @BURST    IFNE 'Y'
      *
     C                     MOVE #RG,@R    #RGDS
     C           @CBI      OCUR CBI
      *
     C                     MOVE 'Y'       #CACHE
      *
     C                     ELSE
      *
      *  Determine whether data nibbled
      *
     C                     EXSR SRNIBL
      *
     C           DTACND    IFNE 'Y'
      *
     C           PREINZ    IFEQ 1
      *                                                                   091826
     C                     IN   CGLDA                                     091826
     C                     MOVE 'CGD1588' #@MSID                          091826
     C                     MOVELPRG,@R    #@MDTA    P                     091826
     C                     OUT  CGLDA                                     091826
      * *ERROR <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      * NB: Logic here is subtle. If the pre-cache boxes are burst
      * without nibbling of data then we have a loop condition. This is
      * a terminal error in print mode and a "soft" error in diagnostic
      * mode; process accordingly.
     C                     SELEC
     C           W0ACT     WHEQ '*DISPLAY'
      *
     C***********          IN   CGLDA                                     091826
     C***********          MOVE 'CGD1588' #@MSID                          091826
     C***********          OUT  CGLDA                                     091826
     C                     RETRN
      *
     C                     OTHER
      *
     C                     EXSR *PSSR
      *
     C                     ENDSL
      *
     C                     ELSE
      * *SLIDE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      * NB: Logic here is subtle. If the best fit was the previous
      * maximum then no pre-cache application is required. However the
      * main loop must start at this point so the "pipes" need to slide
      * forward to this point. This is bundled into SRSLID
     C           DTACND    IFEQ 'N'
     C                     MOVE *BLANKS   #APPL
     C                     EXSR SRSLID
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     MOVE 'OVR'     #APPL
     C                     MOVE '*FILL'   #PAGE
      *
     C                     END
      *
     C           #PAGE     IFEQ '*ON  '
      *  Test if ON first
     C                     MOVE #PLPRC    #PLANE
     C                     MOVE 'P'       #CTYPE
     C                     EXSR SRCNDT
      *
     C           CNDTST    IFEQ 'Y'
      *
     C                     Z-ADD1         CB
     C                     MOVE 'OVR'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #PLPRC    #PLANE
     C                     EXSR SRFILL
     C                     Z-ADD2         CB
     C                     MOVE 'EOD'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #PLPRC    #PLANE
     C                     EXSR SRFILL
     C                     Z-ADD3         CB
     C                     MOVE 'Y'       #BOX
     C                     MOVE #PLPRC    #PLANE
     C                     EXSR SRFILL
      *
     C                     END
      *
     C                     END
      *
     C***********#FPAGB    IFEQ 'Y'                                       091826
     C***********#PLPRC    ANDEQ##LANE                                    091826
     C***********          MOVE '*FILL'   #PAGE                           091826
     C***********          END                                            091826
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      **Synchronise #CACHE at ALL levels above:                           091826
     C***********          MOVELPRG,@R    #PLANE                          091826
     C***********          EXSR SR#CAC                                    091826
      *
     C                     CALL 'QRCVDTAQ'STPOP
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SR#CAC   : Set #CACHE at all levels                          *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 700                                               *
      *                                                               *
      *****************************************************************
     CSR         SR#CAC    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SR#CAC'  @STK,Q
      *                                                                   091826
     C           *LIKE     DEFN RG        @PR                             091826
     C                     Z-ADD0         @PR                             091826
      *
     C                     Z-ADD1         S1
     C           #PLANE    LOKUPPRG,S1                   30
      *                                                                   DJU001
     C           *IN30     IFEQ *ON                                       DJU001
      *                                                                   091826
     C                     Z-ADDS1        S4                              091826
      *                                                                   DJU001
     C                     MOVE #RG,S1    #RGDS
     C           @CBI      OCUR CBI
      * Update binds if no following offspring until top level
     C           #PLANE    DOWNEPLF,@LF
     C           #EFLST    ANDEQ'Y'
     C           #CACHE    ANDEQ'Y'
      *                                                                   091826
     C           #PFPAB    IFEQ 'Y'                                       091826
     C                     Z-ADDS4        @PR                             091826
     C                     END                                            091826
      *
     C***********          Z-ADD1         S1                              DJU001
     C***********#PLANE    LOKUP#RC,S1                   33               DJU001
     C************IN33     IFEQ *ON                                       DJU001
     C***********          MOVELPRC,S1    #PLANE                          DJU001
     C                     Z-ADD1         S2                              DJU001
     C           #PLANE    LOKUP#RC,S2                   33               DJU001
     C           *IN33     IFEQ *ON                                       DJU001
     C                     MOVELPRC,S2    #PLANE                          DJU001
      * Check following repeater
     C           *LIKE     DEFN #PLANE    @PLANE
     C                     MOVE *LOVAL    @PLANE
     C***********S1        IFGT 1                                         DJU001
     C***********          SUB  1         S1                              DJU001
     C***********          MOVELPRC,S1    @PLANE                          DJU001
     C           S2        IFGT 1                                         DJU001
     C           S2        SUB  1         S3                              DJU001
     C                     MOVELPRC,S3    @PLANE                          DJU001
     C                     END
      *
     C           #PLANE    IFNE @PLANE
      *                                                                   DJU001
     C***********          Z-ADD1         S2                              DJU001
     C***********#PLANE    LOKUPPRG,S2                   34               DJU001
     C                     Z-ADD1         S4                              DJU001
     C           #PLANE    LOKUPPRG,S4                   34               DJU001
      *
     C           *IN34     IFEQ *ON
     C***********          MOVEL#RG,S2    #RGDS                           DJU001
     C                     MOVEL#RG,S4    #RGDS                           DJU001
     C           @CBI      OCUR CBI
     C***********#EFLST    IFEQ 'Y'                                       091826
     C***********PRG,S1    OREQ #RC,S2                                    091826
     C                     MOVE 'Y'       #CACHE
     C***********          END                                            091826
     C                     END
      *
     C                     ELSE
     C                     LEAVE
     C                     END
      *
     C                     ELSE
     C                     LEAVE                                          091826
     C***********          MOVELPLF,@LF   #PLANE                          091826
     C                     END
      *
     C                     END
      *                                                                   DJU001
     C                     END                                            DJU001
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRFILL   : Fill box checking for bursting                    *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 800                                               *
      *                                                               *
      *****************************************************************
     CSR         SRFILL    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRFILL'  @STK,Q
      *
     C           *LIKE     DEFN LPBOXD    #PBOXD
      *
     C                     Z-ADD0         ROW     40
     C                     Z-ADD0         #ROW    40
     C                     Z-ADD0         COL     40
     C                     Z-ADD0         #COL    40
      *
     C           *LIKE     DEFN @@TRRO    @#TRRO
     C           *LIKE     DEFN @@TRCO    @#TRCO
     C           *LIKE     DEFN @@NDRO    @#NDRO
     C           *LIKE     DEFN @@NDCO    @#NDCO
      *
     C           *LIKE     DEFN FWB       #FWB
      *
     C           #BOX      IFEQ 'Y'
     C           1         OCUR FWB
     C           CB        OCUR FCB
     C                     MOVELFCB       #FWB
     C                     ELSE
     C           WB        OCUR FWB
     C                     MOVELFWB       #FWB
     C                     END
      *  Apply data to caches/boxes in forward/reverse sequence
     C           #FSEQ     COMP 'R'                      80
      *  First determine working variables:
     C                     Z-ADD1         F1
     C           #PLANE    LOKUPPLR,F1               99  30
      *
     C           *IN30     IFEQ *OFF
     C                     MOVEL#FWB      FWB
     C                     Z-ADD@@TRRO    @#TRRO
     C                     Z-ADD@@TRCO    @#TRCO
     C                     Z-ADD@@NDRO    @#NDRO
     C                     Z-ADD@@NDCO    @#NDCO
     C                     ELSE
      *
     C                     MOVE #LR,F1    #LRDS
      *  1st attempt
     C                     MOVEL#FWB      FWB
     C                     EXSR SRBCHK
      *
      *  determine if wrapping required
      *
     C           @@URST    IFEQ 'Y'
     C           #POFOP    ANDEQ'Y'
      *  2nd attempt
     C                     MOVE 'Y'       #TRANS
     C                     MOVEL#FWB      FWB
     C                     EXSR SRBCHK
      *
     C                     END
      *
     C                     END
      * If filling initialise first
     C           #FILL     IFNE *BLANKS
      *
     C           @STRRO    DO   @ENDRO    F1
      *
     C                     SELEC
     C           #FILL     WHEQ 'OVR'
     C           F1        OCUR PCO
     C                     MOVE PCOLIN    LINE
     C           #FILL     WHEQ 'EOD'
     C           F1        OCUR PCE
     C                     MOVE PCELIN    LINE
     C                     ENDSL
      *
     C                     SELEC
     C           #SFILL    WHEQ 'AR '
     C           #SFILL    WHEQ 'AC '
      *
     C           F1        IFGT @NXTRV
     C                     Z-ADD@NXTCI    F2
     C                     ELSE
     C                     Z-ADD@NXTCV    F2
     C                     END
      *
     C           F2        IFGT @STRCO
     C           F2        SUBSTLINE      LINE      P
     C                     ELSE
     C                     CLEARLINE
     C                     END
      *
     C           #SFILL    WHEQ 'BR '
     C           #SFILL    WHEQ 'BC '
     C           #SFILL    WHEQ 'CR '
     C           #SFILL    WHEQ 'CC '
     C           #SFILL    WHEQ 'DR '
     C           #SFILL    WHEQ 'DC '
     C                     ENDSL
      *
     C                     SELEC
     C           #FILL     WHEQ 'OVR'
     C                     MOVE LINE      PCOLIN
     C           #FILL     WHEQ 'EOD'
     C                     MOVE LINE      PCELIN
     C                     ENDSL
      *
     C                     END
      *
     C                     END
      *
     C           #@PLAN    IFNE *BLANKS
     C           #FILL     ANDNE*BLANKS
      *
     C                     MOVE BORL03    BORLIT  1
      * Overlay control border
     C           #FILL     IFNE 'PAG'
      *
     C                     Z-ADD@@TRRO    BORSRO
     C                     Z-ADD@@NDRO    BORERO
     C                     Z-ADD@@TRCO    BORSCO
     C                     Z-ADD@@NDCO    BORECO
      *
     C                     EXSR SRFBOR
      *
     C                     END
      *
     C                     MOVE BORL01    BORLIT
      *
     C           #@PLAN    IFEQ #PLANE
     C           #@@LAN    ANDEQ*BLANKS
      *
     C           #FILL     IFEQ 'PAG'
     C           #FILL     OREQ #APPL
      * If at plane level update *LDA with absolute box position
     C           PAGNUM    MULT N#ROW     #@ASRO
     C           PAGNUM    MULT N#ROW     #@AERO
      *
     C                     ADD  @#TRRO    #@ASRO
     C                     Z-ADD@#TRCO    #@ASCO
     C                     ADD  @#NDRO    #@AERO
     C                     Z-ADD@#NDCO    #@AECO
     C                     OUT  CGLDA
      *
     C                     MOVE BORL02    BORLIT
     C                     MOVE 'Y'       #STAMP
      *
     C                     MOVE #PLANE    #@@LAN
      *
     C                     END
      *
     C                     END
      * If in print mode show borders of boxes
     C                     MOVE #PLANE    #FILLP
     C                     Z-ADD@#TRRO    BORSRO
     C                     Z-ADD@#NDRO    BORERO
     C                     Z-ADD@#TRCO    BORSCO
     C                     Z-ADD@#NDCO    BORECO
     C                     EXSR SRFBOR
      *
     C                     END
      *
     C           #FILL     IFNE *BLANKS
      *
     C                     Z-ADD1         F1
     C           #PLANE    LOKUPPFD,F1               99  30
      *
     C           *IN30     IFEQ *ON
      *
     C           F1        DO   FD        F2
      *
     C           #PLANE    IFNE PFD,F2
     C                     LEAVE
     C                     END
      *
     C                     MOVE #FD,F2    #FDDS
     C                     MOVE #RFLDN    #FIELD
      *
     C                     MOVE 'F'       #CTYPE
     C                     EXSR SRCNDT
      *
     C           CNDTST    IFEQ 'Y'
      * Clear data work field
     C           *LIKE     DEFN #RD256    @RD256
     C                     CLEAR@RD256
      *
     C           #LRRDE    IFNE *BLANKS
      *
     C           @@DED     OCUR DED
      *
     C                     MOVE #RD256    @RD256
      *
     C                     ELSE
      *
      * Get literal using start position and length                       086243
      *                                                                   086243
     C***********#ROLEN    SUBSTLIT:#STRFR@RD256    P                     086243
     C           #STRTO    SUB  #STRFR    ##005N                          086243
     C                     ADD  1         ##005N  50                      086243
     C           ##005N    SUBSTLIT:#STRFR@RD256    P                     086243
      *
     C                     END
      *
      * Invoke formatting program if required
      *
     C           #RCFMO    IFNE *BLANKS
     C           #RNFMT    ORNE *BLANKS
     C           #RCOPT    ORNE *BLANKS
     C           #RALGN    ORNE *BLANKS
     C           ##FOPT    ORNE *BLANKS
      *
     C                     Z-ADD#ROLEN    #DATAL
     C                     CALL 'CGZ1700' PLFOPT       9090
      *
     C           *IN90     IFEQ '1'
     C                     MOVEL'CGZ1700' W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD801       W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C           P@RTCD    IFNE *BLANKS
     C                     MOVE #DATAI    @RD256
     C                     ELSE
      * Set returned data if length indicated
     C           #DATAL    IFGT 0
     C                     Z-ADD#DATAL    #ROLEN
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C*********************Z-ADD1         Z1
     C***********#FTKEY    LOKUPFFT,Z1               99  30
      *
     C************IN30     IFEQ *ON
     C*********************CALL #FT,Z1    PLFOPT       9090
      *
     C*********************END
      *
     C           *IN80     IFEQ *OFF
     C           @#TRRO    ADD  #RSROW    ROW
     C           @#TRCO    ADD  #RSCOL    COL
      * Box filled at field level
     C           #PBOXD    IFEQ 'F'
      *
     C           COL       ADD  #ROLEN    #COL
     C           #COL      IFGT @#NDCO
     C                     ADD  1         ROW
     C                     Z-ADD@#TRCO    COL
     C                     ADD  #ROLEN    #COL
     C                     END
      *
     C                     END
      *
     C                     ELSE
     C           @#NDRO    SUB  #RSROW    ROW
     C           @#NDCO    SUB  #RSCOL    COL
      * Box filled at field level
     C           #PBOXD    IFEQ 'F'
      *
     C           COL       SUB  #ROLEN    #COL
     C           #COL      IFLT @#TRCO
     C                     SUB  1         ROW
     C           @#NDCO    SUB  #ROLEN    COL
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     SELEC
     C           #FILL     WHEQ 'PAG'
     C           ROW       OCUR PAC                    90
     C                     MOVELPACLIN    LINE
     C           #FILL     WHEQ 'OVR'
     C           ROW       OCUR PCO                    90
     C                     MOVELPCOLIN    LINE
     C           #FILL     WHEQ 'EOD'
     C           ROW       OCUR PCE                    90
     C                     MOVELPCELIN    LINE
     C                     ENDSL
      *
     C           *IN90     IFEQ *OFF
      *
     C                     SUB  1         COL
      *
     C                     DO   #ROLEN    Z1
     C           COL       ADD  Z1        Z2
     C           1         SUBST@RD256:Z1 LIN,Z2
     C                     END
      *
     C                     SELEC
     C           #FILL     WHEQ 'PAG'
     C                     MOVELLINE      PACLIN
     C           #FILL     WHEQ 'OVR'
     C                     MOVELLINE      PCOLIN
     C           #FILL     WHEQ 'EOD'
     C                     MOVELLINE      PCELIN
     C                     ENDSL
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *  If box fill specified apply to control box
     C           #BOX      IFEQ 'Y'
      *
     C           1         OCUR FWB
      *
     C           *IN80     IFEQ *OFF
     C                     Z-ADD@@XTRV    @NXTRV
     C                     Z-ADD@@XTCV    @NXTCV
     C                     Z-ADD@@XTRI    @NXTRI
     C                     Z-ADD@@XTCI    @NXTCI
     C                     ELSE
     C                     Z-ADD@@VRRV    @OVRRV
     C                     Z-ADD@@VRCV    @OVRCV
     C                     Z-ADD@@VRRI    @OVRRI
     C                     Z-ADD@@VRCI    @OVRCI
     C                     END
      *
     C                     END
      *
     C           *LIKE     DEFN LPPLAN    #PLANE
     C                     MOVE *BLANKS   #PLANE
     C                     MOVE *BLANKS   #FILL   3
     C                     MOVE *BLANKS   #BOX    1
     C                     MOVE *BLANKS   #FSEQ   1
      *
     C                     Z-ADD0         CB      30
     C                     Z-ADD0         WB      30
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRFBOR   : Fill border                                       *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 800                                               *
      *                                                               *
      *****************************************************************
     CSR         SRFBOR    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRFBOR'  @STK,Q
      *
     C           BORSRO    DO   BORERO    Z1
      *
     C                     SELEC
     C           #FILL     WHEQ 'PAG'
     C           Z1        OCUR PAC                    90
     C                     MOVELPACLIN    LINE
     C           #FILL     WHEQ 'OVR'
     C           Z1        OCUR PCO                    90
     C                     MOVELPCOLIN    LINE
     C           #FILL     WHEQ 'EOD'
     C           Z1        OCUR PCE                    90
     C                     MOVELPCELIN    LINE
     C                     ENDSL
      *
     C           *IN90     IFEQ *OFF
      *
     C                     Z-ADDBORSCO    Z2
     C           LIN,Z2    IFEQ *BLANKS
     C           #STAMP    OREQ 'Y'
      *                                                                   086153
      * Divide Column to find position number                             086153
      *                                                                   086153
     C           Z1        DIV  10        ##X     30                      086153
     C                     MVR            ##Y     10                      086153
      *                                                                   086153
      * Fill depending on ##Y value                                       086153
      *                                                                   086153
     C                     SELEC                                          086153
     C           ##Y       WHEQ 0                                         086153
     C                     MOVE ##X       LIN,Z2                          086153
     C           ##Y       WHGT 0                                         086153
     C           ##Y       ANDLE4                                         086153
     C           ##Y       ORGT 5                                         086153
     C           ##Y       ANDLE9                                         086153
     C                     MOVE BORLIT    LIN,Z2
     C           ##Y       WHEQ 5                                         086153
     C                     MOVELBORL04    LIN,Z2                          086153
     C                     ENDSL                                          086153
      *                                                                   086153
     C                     END
      *
     C                     Z-ADDBORECO    Z2
     C           LIN,Z2    IFEQ *BLANKS
     C           #STAMP    OREQ 'Y'
      *                                                                   086153
      * Divide Column to find position number                             086153
      *                                                                   086153
     C           Z1        DIV  10        ##X     30                      086153
     C                     MVR            ##Y     10                      086153
      *                                                                   086153
      * Fill depending on ##Y value                                       086153
      *                                                                   086153
     C                     SELEC                                          086153
     C           ##Y       WHEQ 0                                         086153
     C                     MOVE ##X       LIN,Z2                          086153
     C           ##Y       WHGT 0                                         086153
     C           ##Y       ANDLE4                                         086153
     C           ##Y       ORGT 5                                         086153
     C           ##Y       ANDLE9                                         086153
     C                     MOVE BORLIT    LIN,Z2
     C           ##Y       WHEQ 5                                         086153
     C                     MOVELBORL04    LIN,Z2                          086153
     C                     ENDSL                                          086153
      *                                                                   086153
     C                     END
      *
     C           Z1        IFEQ BORSRO
     C           Z1        OREQ BORERO
      *
     C           BORSCO    DO   BORECO    Z2
      *
     C           LIN,Z2    IFEQ *BLANKS
     C           #STAMP    OREQ 'Y'
      *                                                                   086153
      * Divide Column to find position number                             086153
      *                                                                   086153
     C           Z2        DIV  10        ##X     30                      086153
     C                     MVR            ##Y     10                      086153
      *                                                                   086153
      * Fill depending on ##Y value                                       086153
      *                                                                   086153
     C                     SELEC                                          086153
     C           ##Y       WHEQ 0                                         086153
     C                     MOVE ##X       LIN,Z2                          086153
     C           ##Y       WHGT 0                                         086153
     C           ##Y       ANDLE4                                         086153
     C           ##Y       ORGT 5                                         086153
     C           ##Y       ANDLE9                                         086153
     C                     MOVE BORLIT    LIN,Z2
     C           ##Y       WHEQ 5                                         086153
     C                     MOVELBORL04    LIN,Z2                          086153
     C                     ENDSL                                          086153
      *                                                                   086153
     C                     END
      *
     C                     END
      *
     C           Z1        IFEQ BORSRO
      *
     C                     Z-ADDBORSCO    COL
     C                     SUB  1         COL
      *
     C           ' '       CHEKR#FILLP    Z3             30
      *
     C           *IN30     IFEQ *ON
      *
     C                     DO   Z3        Z4
     C           COL       ADD  Z4        Z5
     C           1         SUBST#FILLP:Z4 LIN,Z5
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     SELEC
     C           #FILL     WHEQ 'PAG'
     C                     MOVELLINE      PACLIN
     C           #FILL     WHEQ 'OVR'
     C                     MOVELLINE      PCOLIN
     C           #FILL     WHEQ 'EOD'
     C                     MOVELLINE      PCELIN
     C                     ENDSL
      *
     C                     END
      *
     C                     END
      *
     C           *LIKE     DEFN LRPLAN    #FILLP
     C                     MOVE *BLANKS   #FILLP
      *
     C           *LIKE     DEFN LPSROW    BORSRO
     C           *LIKE     DEFN LPSROW    BORSCO
     C           *LIKE     DEFN LPSROW    BORERO
     C           *LIKE     DEFN LPSROW    BORECO
      *
     C                     MOVE *BLANKS   #STAMP  1
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBCHK   : Check for bursting                                *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 900                                               *
      *                                                               *
      *****************************************************************
     CSR         SRBCHK    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBCHK'  @STK,Q
      *
     C           #TRANS    IFEQ 'Y'
      *
     C                     SELEC
     C           #DIREC    WHEQ 'R'
      *
     C           #START    IFEQ 'A'
     C           *IN80     ANDEQ*OFF
     C           #START    OREQ 'B'
     C           *IN80     ANDEQ*OFF
     C           #START    OREQ 'C'
     C           *IN80     ANDEQ*ON
     C           #START    OREQ 'D'
     C           *IN80     ANDEQ*ON
     C                     Z-ADD@@TRCO    @@XTCV
     C                     Z-ADD@@TRCO    @@XTCI
     C                     Z-ADD@@XTRV    @@XTRI
     C                     ELSE
     C                     Z-ADD@@NDCO    @@XTCV
     C                     Z-ADD@@NDCO    @@XTCI
     C                     Z-ADD@@XTRV    @@XTRI
     C                     END
      *
     C           #DIREC    WHEQ 'C'
      *
     C           #START    IFEQ 'A'
     C           *IN80     ANDEQ*OFF
     C           #START    OREQ 'B'
     C           *IN80     ANDEQ*OFF
     C           #START    OREQ 'C'
     C           *IN80     ANDEQ*ON
     C           #START    OREQ 'D'
     C           *IN80     ANDEQ*ON
     C                     Z-ADD@@TRRO    @@XTRV
     C                     Z-ADD@@TRRO    @@XTRI
     C                     Z-ADD@@XTCV    @@XTCI
     C                     ELSE
     C                     Z-ADD@@NDRO    @@XTRV
     C                     Z-ADD@@NDRO    @@XTRI
     C                     Z-ADD@@XTCV    @@XTCI
     C                     END
      *
     C                     ENDSL
      *
     C                     END
      *  Calculate start/End
     C                     SELEC
     C           #START    WHEQ 'A'
     C           *IN80     IFEQ *OFF
      *
     C           @@XTRI    ADD  #PRROW    @#TRRO
     C           @@XTCI    ADD  #PRCOL    @#TRCO
     C           @#TRRO    ADD  #PEROW    @#NDRO
     C           @#TRCO    ADD  #PECOL    @#NDCO
      *
     C                     ELSE
      *
     C           @@VRRI    SUB  #PRROW    @#NDRO
     C           @@VRCI    SUB  #PRCOL    @#NDCO
     C           @#NDRO    SUB  #PEROW    @#TRRO
     C           @#NDCO    SUB  #PECOL    @#TRCO
      *
     C                     END
     C           #START    WHEQ 'B'
     C           #START    WHEQ 'C'
     C           #START    WHEQ 'D'
     C                     ENDSL
      *
      *  Calculate new vertex/indent
      *
     C                     SELEC
     C           #SFILL    WHEQ 'AR '
      *
     C           *IN80     IFEQ *OFF
     C                     Z-ADD@#NDCO    @@XTCV
     C                     Z-ADD@#NDCO    @@XTCI
     C           @#NDRO    IFGT @@XTRV
     C                     Z-ADD@#NDRO    @@XTRV
     C                     END
      *
     C                     ELSE
      *
     C                     Z-ADD@@TRCO    @@VRCV
     C                     Z-ADD@@TRCO    @@VRCI
     C           @#TRRO    IFLT @@VRRV
     C                     Z-ADD@#TRRO    @@VRRV
     C                     END
     C                     END
      *
     C           #SFILL    WHEQ 'AC '
      *
     C           *IN80     IFEQ *OFF
     C                     Z-ADD@#NDRO    @@XTRV
     C                     Z-ADD@#NDRO    @@XTRI
     C           @#NDCO    IFGT @@XTCV
     C                     Z-ADD@#NDCO    @@XTCV
     C                     END
      *
     C                     ELSE
      *
     C                     Z-ADD@#TRRO    @@VRRV
     C                     Z-ADD@#TRRO    @@VRRI
     C           @#TRCO    IFLT @@VRCV
     C                     Z-ADD@#TRCO    @@VRCV
     C                     END
     C                     END
      *
     C           #SFILL    WHEQ 'BR '
     C           #SFILL    WHEQ 'BC '
     C           #SFILL    WHEQ 'CR '
     C           #SFILL    WHEQ 'CC '
     C           #SFILL    WHEQ 'DR '
     C           #SFILL    WHEQ 'DC '
     C                     ENDSL
      *
      *  A vertex out of it's box is always a burst !!! (sic.)
      *
     C           *IN80     IFEQ *OFF
     C           @@XTRV    IFLT @@TRRO
     C           @@XTRV    ORGT @@NDRO
     C                     MOVE 'Y'       @@URST
     C                     END
     C           @@XTCV    IFLT @@TRCO
     C           @@XTCV    ORGT @@NDCO
     C                     MOVE 'Y'       @@URST
     C                     END
     C                     ELSE
     C           @@VRRV    IFLT @@TRRO
     C           @@VRRV    ORGT @@NDRO
     C                     MOVE 'Y'       @@URST
     C                     END
     C           @@VRCV    IFLT @@TRCO
     C           @@VRCV    ORGT @@NDCO
     C                     MOVE 'Y'       @@URST
     C                     END
     C                     END
      *
      *  specific cases
      *
     C                     SELEC
     C           #SFILL    WHEQ 'AR '
      *
     C           *IN80     IFEQ *OFF
     C           @@XTCV    IFGT @@VRCI
     C           @@XTRV    ORLT @@VRRV
     C           @@XTCV    ANDGT@@VRCV
     C                     MOVE 'Y'       @@URST
     C                     END
     C                     ELSE
     C           @@VRCV    IFLT @@XTCI
     C           @@VRRV    ORGT @@XTRV
     C           @@VRCV    ANDLT@@XTCV
     C                     MOVE 'Y'       @@URST
     C                     END
     C                     END
      *
     C           #SFILL    WHEQ 'AC '
      *
     C           *IN80     IFEQ *OFF
     C           @@XTRV    IFGT @@VRRI
     C           @@XTRV    ORGT @@VRRV
     C           @@XTCV    ANDGT@@VRCV
     C                     MOVE 'Y'       @@URST
     C                     END
     C                     ELSE
     C           @@VRRV    IFLT @@XTRI
     C           @@VRRV    ORLT @@XTRV
     C           @@VRCV    ANDLT@@XTCV
     C                     MOVE 'Y'       @@URST
     C                     END
     C                     END
      *
     C           #SFILL    WHEQ 'BR '
     C           #SFILL    WHEQ 'BC '
     C           #SFILL    WHEQ 'CR '
     C           #SFILL    WHEQ 'CC '
     C           #SFILL    WHEQ 'DR '
     C           #SFILL    WHEQ 'DC '
     C                     ENDSL
      *
     C                     MOVE *BLANKS   #TRANS  1
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRREAD   : Read from stream                                  *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 900                                               *
      *                                                               *
      *****************************************************************
     CSR         SRREAD    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRREAD'  @STK,Q
      *
     C           *LIKE     DEFN RG        @R
     C           *LIKE     DEFN RG        #@R                             DJU001
     C                     Z-ADD@R        #@R                             DJU001
      *  Set LBI from parents CBI
     C                     RESETLBI
      *
     C                     Z-ADD1         S1
     C           PRG,@R    LOKUP#RC,S1                   30
      *
     C           *IN30     IFEQ *ON
      *
     C                     Z-ADD1         S2
     C           PRC,S1    LOKUPPRG,S2               99  31
      *
     C           *IN31     IFEQ *ON
     C                     MOVE #RG,S2    #RGDS
     C           @CBI      OCUR CBI
     C                     MOVE CBI       LBI
     C                     END
      *
     C                     END
      *  Set pre-read bind information
     C                     DO   RG        S1
     C                     MOVE #RG,S1    #RGDS
     C           @CBI      OCUR CBI
     C           @CBI      OCUR PBI
     C                     MOVE CBI       PBI
     C                     END
      *
     C                     MOVE #RG,@R    #RGDS
     C           @CBI      OCUR CBI
     C           @CBI      OCUR PBI                                       091826
     C           @OFH      OCUR OFH
      *  Simulate read for dummy repeater
     C***********#DUMMY    IFEQ 'Y'                                       DJU001
     C***********          MOVE ONECND    #EFSLI                          DJU001
     C***********          MOVE 'N'       #CACHE                          DJU001
      *  By-pass rest of processing
     C***********          GOTO SRRE99
     C***********          END
      *  Simulate read in diagnostic mode
     C           W0ACT     IFEQ '*DIAGNOS'
     C           W0ACT     OREQ '*DISPLAY'
      *  Simulate read for dummy repeater                                 DJU001
     C           #DUMMY    OREQ 'Y'                                       DJU001
      *                                                                   091826
     C                     MOVE ONECND    #EFSLI
     C                     MOVE 'N'       #CACHE
     C           PCOUNT    ADD  1         #COUNT                          091826
      *                                                                   091826
     C***********#COUNT    IFEQ 0                                  DJU001 091826
     C***********          ADD  1         #COUNT                   DJU001 091826
     C***********          END                                     DJU001 091826
      *  By-pass rest of processing
     C                     GOTO SRRE99
     C                     END
      *
     C           *LIKE     DEFN #COUNT    ##OUNT
     C                     Z-ADD#COUNT    ##OUNT
     C           #COUNT    MULT BYTEO     BSIZE
      *  Check integrity of expected binds
     C           @ETBIN    IFLT #EPBIN
     C                     Z-ADD901       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGD0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *  Initialise all potential RDEs
     C                     MOVEL#PRPTH    ##RPTH
     C                     MOVE *LOVAL    ##NPTH
     C                     Z-ADD0         S2
     C                     Z-ADD1         S1
     C           #LIKEY    LOKUPDLI,S1               30
      *
     C           *IN30     IFEQ *ON
      *
     C                     MOVE DLI,S1    #LIKEY
      *
     C           ##RPTH    IFEQ #PRPTH
      *
     C                     MOVEL#PRPTH    ##RPTH
     C                     MOVE *HIVAL    ##NPTH
     C                     Z-ADD1         S2
     C           #LIKEY    LOKUPDLI,S2               30
     C   30                SUB  1         S2
     C  N30                Z-ADDLI        S2
      *
     C                     END
      *
     C                     END
      *
     C           S1        IFLE S2
      *
     C           S1        DO   S2        S3
      *
     C                     MOVE #LI,S3    #LIDS
     C                     MOVE DLI,S3    #LIKEY
      *
     C           @DEDF     DO   @DEDT     @DED
      *
     C           @DED      OCUR DED
      * If previous value required shuffle across DED
     C                     Z-ADD1         S4
     C           #ALDS     LOKUP#AL,S4                   30
      *
     C           *IN30     IFEQ *ON
     C                     MOVE DAL,S4    #ALKEY
     C                     Z-ADD1         S5
     C           #ALKEY    LOKUPDAP,S5               99  31
      *
     C           *IN31     IFEQ *ON
     C                     MOVE #AP,S5    #APDS
     C                     MOVE #RD256    @RD256
     C           @DEP      OCUR DED
     C                     MOVE @RD256    #RD256
     C                     END
      *
     C                     END
      *
     C           @DED      OCUR DED
     C                     CLEARDED
     C                     END
      *
     C           ##NPTH    IFEQ SYSPTH
     C                     MOVE 'Y'       #SDATA
     C                     EXSR SRRGSD
     C                     END
      *
     C                     END
      *
     C                     END
      *  If path not exhausted:
     C           BSIZE     IFLT ##SIZE
      *  Initialise data read toggle
     C                     MOVE 'N'       DTABND  1
      *  DO Until...
      *  Change of Previous Bind
     C           DEPBIN    DOUGT@ETBIN
      *  OR Change of Bind
     C           DEPBIN    OREQ @ETBIN
     C           DETBIN    ANDGT#ETBIN
      *  OR End of stream
     C           BSIZE     OREQ ##SIZE
      *  Read from stream
     C                     RESET#ERRDS
     C                     CALL 'QHFRDSF' PLHFRD
      *
     C           EXCPID    IFNE *BLANKS
     C           BYTEO     ORNE BYTER
     C                     MOVEL'QHFRDSF' W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD902       W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *  Check integrity of expected binds
     C           DETBIN    IFLT #ETBIN
     C           DEPBIN    ORLT #EPBIN
     C                     Z-ADD903       W0ERNB           * DB ERROR 02 *
     C                     MOVEL'PGD0001' W0MSGD           ***************
     C                     MOVEL'CGUSRMSG'W0MSGF
     C                     EXSR SRERR
     C                     END
      *  Increment working "bite" count
     C                     ADD  1         ##OUNT
      *
     C           DTABND    IFEQ 'N'
     C           DEPBIN    ANDEQ@ETBIN
      *
     C                     MOVE 'Y'       DTABND
      * Binding sound so continue
     C                     Z-ADDDETBIN    #ETBIN
     C                     Z-ADDDEPBIN    #EPBIN
     C*********************MOVE DEFSLI    #EFSLI
      * Set here to flag succeeding levels
     C                     MOVE 'N'       #CACHE
      *                                                                   DJU001
     C                     Z-ADD1         S1                              DJU001
     C           PRG,@R    LOKUPPRC,S1               99  30               DJU001
      *                                                                   DJU001
     C           *IN30     IFEQ *ON                                       DJU001
      *                                                                   DJU001
     C           S1        DO   RC        S2                              DJU001
      *                                                                   DJU001
     C           PRG,@R    IFNE PRC,S2                                    DJU001
     C                     LEAVE                                          DJU001
     C                     END                                            DJU001
      *                                                                   DJU001
     C                     Z-ADD1         S3                              DJU001
     C           #RC,S2    LOKUPPRG,S3               99  31               DJU001
      *                                                                   DJU001
     C           *IN31     IFEQ *ON                                       DJU001
     C                     MOVE #RG,S3    #RGDS                           DJU001
     C           @CBI      OCUR CBI                                       DJU001
     C                     MOVE *BLANKS   #EFSLI                          DJU001
     C                     MOVE *BLANKS   #CACHE                          DJU001
     C                     END                                            DJU001
      *                                                                   DJU001
     C                     END                                            DJU001
      *                                                                   DJU001
     C                     END                                            DJU001
      *                                                                   DJU001
     C                     MOVE #RG,@R    #RGDS                           DJU001
     C           @CBI      OCUR CBI                                       DJU001
     C           @OFH      OCUR OFH                                       DJU001
      *
     C                     END
      *
     C           DTABND    IFEQ 'Y'
     C           DETBIN    ANDEQ#ETBIN
      * Set "bite" count
     C                     Z-ADD##OUNT    #COUNT
     C           #COUNT    MULT BYTEO     BSIZE
      *
     C                     MOVE DERPTH    ##RPTH
     C                     MOVE DENPTH    ##NPTH
     C                     Z-ADD1         S1
     C           #LIKEY    LOKUPDLI,S1               99  30
     C                     MOVE #LI,S1    #LIDS
      *
     C           *IN30     IFEQ *ON
      *
      * Call unpack routine passing "shopping list" of RDEs
      *
     C                     EXSR SRRGSD
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *  Set #EFSLI manually
     C           ##SIZE    IFGT 0
      *
     C           #EFSLI    IFEQ *BLANKS
     C                     MOVE FSTCND    #EFSLI
     C                     ELSE
     C                     MOVE SUBCND    #EFSLI
     C                     END
      *
     C                     END
      *  Set EOD manually to prevent looping (eg. ensure escape at EOD)
     C           DEPBIN    IFGT @ETBIN
     C           BSIZE     OREQ ##SIZE
     C                     MOVE 'Y'       #EFLST
     C                     END
      * Reset pointer
     C           #COUNT    MULT BYTEO     BYTEM
     C                     CALL 'QHFCHGFP'PLHFCH
      *
     C           SRRE99    TAG
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBCND   : Evaluate Basic condition changes                  *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 950                                               *
      *                                                               *
      *****************************************************************
     CSR         SRBCND    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBCND'  @STK,Q
      *  Store last conditions
     C           *LIKE     DEFN CL        @CL
     C                     MOVE CL        @CL
      *
      *  Toggle off critical changes flag
      *
     C                     MOVE *BLANKS   #CCCHG  1
      *
      *  Evalute Basic conditions changed by path read
      *
     C                     DO   SC        S2
      *
     C                     MOVE #SC,S2    #SCDS
      *
     C                     MOVE #SCDS     #SCKEY
     C           @@DEDL    OCUR DED
     C                     MOVEL#RD256    ##L256
     C           @@DEDR    OCUR DED
     C                     MOVEL#RD256    ##R256
     C                     CALL 'CG3010'  PL3010
      *
     C           P@RTCD    IFEQ '*ERROR*'
     C                     MOVEL'CG3010'  W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD905       W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C           #CONDV    IFEQ 'T'
     C           CLA,S2    ANDEQ'0'
     C           #CONDV    OREQ 'F'
     C           CLA,S2    ANDEQ'1'
      *
     C           CCO,S2    IFEQ 'Y'
     C                     MOVE 'Y'       #CCCHG
     C                     END
      *
     C                     END
      *
     C           #CONDV    IFEQ 'T'
     C                     MOVE '1'       CLA,S2
     C                     END
      *
     C           #CONDV    IFEQ 'F'
     C                     MOVE '0'       CLA,S2
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRCCND   : Evaluate Complex conditions from Basic ones       *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1000                                              *
      *                                                               *
      *****************************************************************
     CSR         SRCCND    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRCCND'  @STK,Q
      *
      *  Now evaluate Complex conditions from basic ones
      *
     C                     DO   ST        S1
      *
     C                     MOVE #ST,S1    #STDS
     C           @CND      OCUR CND
      *
     C                     Z-ADD1         S2
     C           CST,S1    LOKUPCEV,S2                   30
      *
     C           *IN30     IFEQ *ON
      *
     C                     MOVE '0'       #LOGIC
     C           *LIKE     DEFN #LOGIC    @LOGIC
     C                     MOVE '0'       @LOGIC
      *
     C           S2        DO   EV        S3
      *
     C                     MOVE #EV,S3    #EVDS
      *
     C           #NCONG    IFEQ ORCND
     C           #NCONG    OREQ IFCND
     C           CST,S1    ORNE CEV,S3
      *
     C           @LOGIC    IFEQ '1'
     C                     MOVE '1'       #LOGIC
     C                     LEAVE
     C                     END
      *
     C           CST,S1    IFNE CEV,S3
     C                     LEAVE
     C                     ELSE
      *
     C           CLA,@BSCE IFEQ '1'
     C                     MOVE '1'       @LOGIC
     C                     ELSE
     C                     MOVE '0'       @LOGIC
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C           CLA,@BSCE IFEQ '0'
     C           #NCONG    ANDEQANDCND
     C           @LOGIC    ANDEQ'1'
     C                     MOVE '0'       @LOGIC
     C                     END
      *
     C           S3        IFEQ EV
     C           @LOGIC    ANDEQ'1'
     C                     MOVE @LOGIC    #LOGIC
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRIBOX   : Initialise Control Boxes                          *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1050                                              *
      *                                                               *
      *****************************************************************
     CSR         SRIBOX    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRIBOX'  @STK,Q
      *  Initiaise Boxes
     C                     DO   LF        I1
      *
     C                     MOVE #LF,I1    #LFDS
     C           @CCB      OCUR CCB
     C                     CLEARCCB
     C                     Z-ADD#PFROW    #STRRO
     C                     Z-ADD#PFCOL    #STRCO
     C                     Z-ADD#PFROW    #NXTRI
     C                     Z-ADD#PFCOL    #NXTCI
     C                     Z-ADD#PFROW    #NXTRV
     C                     Z-ADD#PFCOL    #NXTCV
     C           #STRRO    ADD  #POROW    #ENDRO
     C           #STRCO    ADD  #POCOL    #ENDCO
     C           #STRRO    ADD  #POROW    #OVRRI
     C           #STRCO    ADD  #POCOL    #OVRCI
     C           #STRRO    ADD  #POROW    #OVRRV
     C           #STRCO    ADD  #POCOL    #OVRCV
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRIPRE   : Initialise Pre-Caches                             *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1100                                              *
      *                                                               *
      *****************************************************************
     CSR         SRIPRE    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRIPRE'  @STK,Q
      *  Increment Count
     C                     ADD  1         PREINZ  30
      *  Apply current-controlling box
     C           @@CCB     OCUR CCB
      *
     C                     DO   3         I1
     C           I1        OCUR FCB
     C                     CLEARFCB
     C                     MOVELCCB       FCB
     C                     END
      *  Check previous repeater for inheritance
     C           @@R       IFNE 0
     C                     MOVE #RG,@@R   #RGDS
     C                     END
      *
     C           @@R       IFNE 0
     C***********#PFPAB    ANDEQ*BLANKS                                   091826
      *  Inherit previous pre-cache:
     C                     DO   PAGROW    I1
     C           I1        OCUR PCO
     C           I1        OCUR PCE
      *
     C                     SELEC
     C           #APPL     WHEQ 'EOD'
     C                     MOVE PCELIN    PCOLIN
     C           #APPL     WHEQ 'OVR'
     C                     MOVE PCOLIN    PCELIN
     C                     ENDSL
      *
     C                     END
      *  Default Pre-Cache application
     C                     MOVE @APPL     #APPL
      *  Inherit previous controlling box
     C           @@@CCB    OCUR CCB
      *
     C                     DO   3         I1
     C           I1        OCUR FCB
      *
     C                     SELEC
     C           #SFILL    WHEQ 'AR '
     C           #SFILL    WHEQ 'AC '
      *
     C           #NXTRV    IFGT @STRRO
     C           #NXTCV    ANDGT@STRCO
      *
     C                     SELEC
      *
     C           #NXTRV    WHLT @ENDRO
     C           #NXTCV    ANDLT@ENDCO
      *
     C           #NXTRV    ORGT @ENDRO
     C           #NXTCV    ANDLT@ENDCO
      *
     C           #NXTRV    IFGT @NXTRV
     C                     Z-ADD#NXTRV    @NXTRV
     C                     Z-ADD#NXTRV    @NXTRI
     C                     END
      *
     C           #NXTCV    IFGT @NXTCV
     C                     Z-ADD#NXTCV    @NXTCV
     C                     END
      *
     C           #NXTRV    WHLT @ENDRO
     C           #NXTCV    ANDGT@ENDCO
      *
     C                     Z-ADD#NXTRV    @STRRO
      *
     C           #NXTRV    IFGT @NXTRV
     C                     Z-ADD#STRCO    @NXTCI
     C                     Z-ADD#NXTRV    @NXTRI
     C                     Z-ADD#STRCO    @NXTCV
     C                     Z-ADD#NXTRV    @NXTRV
     C                     END
      *
     C                     OTHER
     C                     Z-ADD#NXTRV    @NXTRV
     C                     Z-ADD#NXTRV    @NXTRI
     C                     Z-ADD#NXTCV    @NXTCV
     C                     ENDSL
      *
     C                     END
      *
     C           #NXTCI    IFGT @STRCO
     C           #NXTCI    ANDGT#STRCO
     C           #ENDRO    ANDGT@STRRO
      *
     C                     SELEC
      *
     C           #ENDRO    WHLT @ENDRO
     C           #NXTCI    ANDLT@ENDCO
      *
     C           #ENDRO    ORGT @ENDRO
     C           #NXTCI    ANDLT@ENDCO
      *
     C           #ENDRO    IFGT @NXTRV
     C                     Z-ADD#ENDRO    @NXTRV
     C                     Z-ADD#ENDRO    @NXTRI
     C                     END
      *
     C           #NXTCI    IFGT @NXTCV
     C                     Z-ADD#NXTCI    @NXTCV
     C                     END
      *
     C           #ENDRO    WHLT @ENDRO
     C           #NXTCI    ANDGT@ENDCO
      *
     C                     Z-ADD#ENDRO    @STRRO
      *
     C           #ENDRO    IFGT @NXTRV
     C                     Z-ADD#STRCO    @NXTCI
     C                     Z-ADD#ENDRO    @NXTRI
     C                     Z-ADD#STRCO    @NXTCV
     C                     Z-ADD#ENDRO    @NXTRV
     C                     END
      *
     C                     OTHER
     C                     Z-ADD#ENDRO    @NXTRV
     C                     Z-ADD#ENDRO    @NXTRI
     C                     Z-ADD#NXTCI    @NXTCV
     C                     ENDSL
      *
     C                     END
      *
     C           #SFILL    WHEQ 'BR '
     C           #SFILL    WHEQ 'BC '
     C           #SFILL    WHEQ 'CR '
     C           #SFILL    WHEQ 'CC '
     C           #SFILL    WHEQ 'DR '
     C           #SFILL    WHEQ 'DC '
     C                     ENDSL
      *
     C                     END
      *
     C                     ELSE
      *  Clear Overflow Pre-Cache
     C                     DO   PAGROW    I1
     C           I1        OCUR PCO
     C                     CLEARPCOLIN
     C                     END
      *  Clear EOD Pre-Cache
     C                     DO   PAGROW    I1
     C           I1        OCUR PCE
     C                     CLEARPCELIN
     C                     END
      *
     C                     END
      *
      *  Apply any overflows to pre-cache
      *
     C                     Z-ADD1         I1
     C           #PLPRC    LOKUPPLA,I1               99  30
     C           *IN30     IFEQ *ON
      *                                                                   091826
      *  Reverse of Cache sequence is required                            091826
      *                                                                   091826
     C                     Z-ADD1         I2                              091826
     C           #PLPRC    LOKUPPLA,I2               30                   091826
     C  N30                ADD  LA        I2                              091826
      *
     C***********I1        DO   LA        I2                              091826
     C                     DO   LA                                        091826
      *                                                                   091826
     C                     SUB  1         I2                              091826
      *
     C           I2        IFEQ 0                                         091826
     C                     LEAVE                                          091826
     C                     END                                            091826
      *                                                                   091826
     C           PLA,I1    IFNE PLA,I2
     C                     LEAVE
     C                     END
      *
     C                     MOVE #LA,I2    #LADS
      *  Check condition first
     C                     MOVE #ATPLN    #PLANE
     C                     MOVE 'P'       #CTYPE
     C                     EXSR SRCNDT
      *
     C           CNDTST    IFEQ 'Y'
      *
     C                     END
     C                     Z-ADD1         I3
     C           #ATPLN    LOKUPPLO,I3               99  31
      *
     C           *IN31     IFEQ *ON
      *
     C                     MOVE #LO,I3    #LODS
      *
     C                     Z-ADD1         I4
     C           #ATPLN    LOKUPPLR,I4               99  32
      *
     C           *IN32     IFEQ *ON
     C                     MOVE #LR,I4    #LRDS
     C                     MOVE R#BOXD    #PBOXD
     C                     END
      * If first read insert Start-of-Data plane
     C                     MOVE #RG,@R    #RGDS
     C           @CBI      OCUR CBI
     C           @OFH      OCUR OFH
      *
     C           ##SIZE    IFEQ 0
     C           W0ACT     OREQ '*DISPLAY'
      *
     C           #POFAB    IFEQ 'N'
      *
     C                     Z-ADD1         CB
     C                     MOVE 'OVR'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     EXSR SRFILL
      *
     C                     Z-ADD2         CB
     C                     MOVE 'EOD'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     EXSR SRFILL
      *
     C                     Z-ADD3         CB
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     EXSR SRFILL
      *
     C                     END
      *
     C                     END
      *
     C           ##SIZE    IFGT 0
      *
     C           #POFAB    IFEQ 'O'
      *
     C                     Z-ADD1         I4
     C           #ATPLN    LOKUPPLF,I4               99  32
     C           *IN32     IFEQ *ON
     C                     MOVE #LF,I4    #LFDS
     C                     MOVE F#BOXD    #PBOXD
     C           @CCB      OCUR CCB
     C                     Z-ADD4         CB
     C           CB        OCUR FCB
     C                     MOVELCCB       FCB
      *
     C                     MOVE 'OVR'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     EXSR SRFILL
      *
     C                     END
      *
     C                     END
      *
     C           #POFAB    IFEQ 'F'
     C           #EFFST    ANDEQ'Y'
      *
     C                     Z-ADD1         CB
     C                     MOVE 'OVR'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     EXSR SRFILL
      *
     C                     Z-ADD2         CB
     C                     MOVE 'EOD'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     EXSR SRFILL
      *
     C                     Z-ADD3         CB
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     EXSR SRFILL
      *
     C                     END
      *
     C           #POFAB    IFEQ 'B'
      *
     C                     Z-ADD1         CB
     C                     MOVE 'OVR'     #FILL
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     EXSR SRFILL
      *
     C                     Z-ADD3         CB
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     EXSR SRFILL
      *
     C                     END
      *
     C           #POFAB    IFEQ 'A'
      *
     C                     Z-ADD1         CB
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     MOVE 'R'       #FSEQ
     C                     EXSR SRFILL
      *
     C                     Z-ADD3         CB
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     MOVE 'R'       #FSEQ
     C                     EXSR SRFILL
      *
     C                     END
      *
     C           #POFAB    IFEQ 'E'
      *
     C                     Z-ADD2         CB
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     MOVE 'R'       #FSEQ
     C                     EXSR SRFILL
      *
     C                     Z-ADD3         CB
     C                     MOVE 'Y'       #BOX
     C                     MOVE #ATPLN    #PLANE
     C                     MOVE 'R'       #FSEQ
     C                     EXSR SRFILL
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
      *  Set nibble counts
     C           *LIKE     DEFN #ETBIN    ##TBIN                          091826
     C                     Z-ADD#ETBIN    ##TBIN                          091826
      *  Store active repeater index
     C           *LIKE     DEFN @R        @@R
     C                     Z-ADD@R        @@R
      *  Store control box index
     C           *LIKE     DEFN @@CCB     @@@CCB
     C                     Z-ADD@@CCB     @@@CCB
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRAPRE   : Apply Pre-Cache                                   *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1200                                              *
      *                                                               *
      *****************************************************************
     CSR         SRAPRE    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRAPRE'  @STK,Q
      *
     C           @@@CCB    OCUR CCB
      *
     C           #STRRO    DO   #ENDRO    A1
      *
     C           A1        OCUR PAC
     C                     MOVELPACLIN    LINE
     C           A1        OCUR PCO
     C           A1        OCUR PCE
      *
     C           #STRCO    DO   #ENDCO    A2
      *
     C                     SELEC
     C           #APPL     WHEQ 'OVR'
     C           1         SUBSTPCOLIN:A2 LIN,A2
     C           #APPL     WHEQ 'EOD'
     C           1         SUBSTPCELIN:A2 LIN,A2
     C                     ENDSL
      *
     C                     END
      *
     C                     MOVELLINE      PACLIN
      *
     C                     END
      * Update control box to allow inheritance
     C                     SELEC
     C           #APPL     WHEQ 'OVR'
     C           1         OCUR FCB
     C           #APPL     WHEQ 'EOD'
     C           2         OCUR FCB
     C                     ENDSL
      *
     C                     MOVELFCB       CCB
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRCNDT   : Test Condition Plane/Field                        *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1300                                              *
      *                                                               *
      *****************************************************************
     CSR         SRCNDT    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRCNDT'  @STK,Q
      *
     C                     MOVE 'Y'       CNDTST  1
      *  Always return true if displaying given plane & no settings
     C           W0ACT     IFNE '*DISPLAY'
     C           W0ACT     OREQ '*DISPLAY'
     C           CL        ANDNE*BLANKS
      *
     C                     Z-ADD0         ###CON
     C                     Z-ADD0         Z1
     C                     Z-ADD0         #PPCON
     C                     Z-ADD0         #PFCON
     C                     MOVE #PLANE    #RPLAN
     C                     MOVE #FIELD    ###LDN
      *
     C           *IN30     DOUEQ*OFF
      *
     C                     ADD  1         Z1
      *
     C                     SELEC
     C           #CTYPE    WHEQ 'P'
      *  Bottle out at array end
     C           Z1        IFGT LC
     C                     LEAVE
     C                     END
      *
     C           #PLANE    LOKUPPLC,Z1               99  30
      *  Check field condition
     C           #CTYPE    WHEQ 'F'
      *  Bottle out at array end
     C           Z1        IFGT FC
     C                     LEAVE
     C                     END
      *
     C           #FCKEY    LOKUPPFC,Z1               99  30
     C                     ENDSL
      *
     C           *IN30     IFEQ *ON
      *
     C                     SELEC
     C           #CTYPE    WHEQ 'P'
     C                     MOVE #LC,Z1    #LCDS
     C                     Z-ADD#PPCON    ###CON
     C           #CTYPE    WHEQ 'F'
     C                     MOVE #FC,Z1    #FCDS
     C                     Z-ADD#PFCON    ###CON
     C                     ENDSL
      *
     C                     Z-ADD1         Z2
     C           ###CON    LOKUPCST,Z2                   31
      *
     C           *IN31     IFEQ *ON
     C                     MOVE #ST,Z2    #STDS
     C           @CND      OCUR CND
      *
     C           #LOGIC    IFEQ '0'
     C           #GACND    ANDEQ'T'
     C           #LOGIC    OREQ '1'
     C           #GACND    ANDEQ'F'
     C                     MOVE 'N'       CNDTST
     C                     LEAVE
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C                     MOVE *BLANKS   #CTYPE  1
     C           *LIKE     DEFN LRFLDN    #FIELD
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRNIBL   : Test Whether Data nibbled                         *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1400                                              *
      *                                                               *
      *****************************************************************
     CSR         SRNIBL    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRNIBL'  @STK,Q
     C                     MOVE *BLANKS   DTACND  1
      *
     C                     DO   RG        Z1
      *
     C                     MOVEL#RG,Z1    #RGDS
     C           @CBI      OCUR MBI
     C           @CBI      OCUR PBI
      *
     C           DTACND    IFEQ *BLANKS
     C           MBI       ANDNEPBI
     C                     MOVE 'N'       DTACND
     C                     END
      *
     C           P#PBIN    IFGT M#PBIN
     C           P#TBIN    ORGT M#TBIN
     C           P#TBIN    OREQ M#TBIN
     C           P#CACH    ANDEQ'Y'
     C           M#CACH    ANDNE'Y'
     C                     MOVE 'Y'       DTACND
     C                     LEAVE
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRCCHG   : Process condition changes                         *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1500                                              *
      *                                                               *
      *****************************************************************
     CSR         SRCCHG    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRCCHG'  @STK,Q
      *
      *  see *CHANGE <<<<... for explanation
      *
     C                     DO   RG        Z1
      *
     C                     MOVE #RG,Z1    #RGDS
     C           @CBI      OCUR CBI
     C           @CBI      OCUR EBI
     C                     MOVE EBI       CBI
      *
     C           @OFH      OCUR OFH
     C           ECOUNT    MULT BYTEO     BYTEM
     C                     CALL 'QHFCHGFP'PLHFCH
      *
     C                     END
      *
     C                     DO   RG        I1
      *
     C                     MOVE #RG,I1    #RGDS
     C           @CBI      OCUR PBI
     C           @CBI      OCUR MBI
     C                     MOVE PBI       MBI
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRSLID   : "Slide" pipes forward to previous maximum         *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1600                                              *
      *                                                               *
      *****************************************************************
     CSR         SRSLID    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRSLID'  @STK,Q
      *
      *  see *SLIDE <<<<... for explanation
      *
     C                     DO   RG        Z1
      *
     C                     MOVE #RG,Z1    #RGDS
     C           @CBI      OCUR CBI
     C           @CBI      OCUR MBI
     C                     MOVE MBI       CBI
      *
     C           @OFH      OCUR OFH
     C           MCOUNT    MULT BYTEO     BYTEM
     C                     CALL 'QHFCHGFP'PLHFCH
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRPAGB   : Page throw due to bind                            *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1700                                              *
      *                                                               *
      *****************************************************************
     C***********SRPAGB    BEGSR                                          091826
      *
      *  Set up subroutine stack name
      *
     C***********          ADD  1         Q                               091826
     C***********          MOVEL'SRPAGB'  @STK,Q                          091826
      *
     C***********          MOVE *BLANKS   #FPAGB  1                       091826
      *
     C***********          MOVE #RG,@R    #RGDS                           091826
     C***********@CBI      OCUR CBI                                       091826
      *
     C***********#EFLST    IFEQ 'Y'                                       091826
     C***********#PFPAB    ANDEQ'Y'                                       091826
     C***********          MOVE 'Y'       #FPAGB                          091826
     C***********          END                                            091826
      *
      *  Unwind subroutine stack name
      *
     C***********          MOVEA*BLANKS   @STK,Q                          091826
     C***********          SUB  1         Q                               091826
      *
     C***********          ENDSR                                          091826
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRRGSD   : Retreive Group Set Data                           *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1800                                              *
      *                                                               *
      *****************************************************************
     CSR         SRRGSD    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRRGSD'  @STK,Q
      *
     C                     Z-ADD20        #R      30
     C                     Z-ADD0         #1      30
      *
     C           @DEDF     DOWLE@DEDT
      *
     C                     RESET##R
     C                     DO   #R        #1
      *
     C           @DEDF     ADD  #1        @DED
     C                     SUB  1         @DED
      *
     C           @DED      IFGT @DEDT
     C                     LEAVE
     C                     END
      *
     C                     MOVE DAL,@DED  ##R,#1
      *
     C                     END
      *
     C           #SDATA    IFEQ 'Y'
      *
     C                     CALL 'CG3997'  PL3999       9090
      *
     C           *IN90     IFEQ '1'
     C           P@RTCD    OREQ '*ERROR*'
     C                     MOVEL'CG3997'  W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD1801      W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     ELSE
      *
     C           BYTEO     SUB  DP        S4
     C                     ADD  1         S4
      *
     C           S4        SUBSTUDTDTA:DP ##SDS     P
     C                     CALL 'CG3999'  PL3999       9090
      *
     C           *IN90     IFEQ '1'
     C           P@RTCD    OREQ '*ERROR*'
     C                     MOVEL'CG3999'  W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD1802      W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
     C                     END
      *
     C                     DO   #R        #1
      *
     C           @DEDF     ADD  #1        @DED
     C                     SUB  1         @DED
      *
     C           @DED      IFGT @DEDT
     C                     LEAVE
     C                     END
      *
     C           @DED      OCUR DED
     C                     MOVEL##D,#1    DED
      *
     C                     END
      *
     C                     ADD  #R        @DEDF
      *
     C                     END
      *
     C           #SDATA    IFEQ 'Y'
      *
      *  Set Copy RDE DED
      *
     C           @DCOPY    IFNE 0
     C           @DCOPY    OCUR DED
     C                     CLEARNUMDS
     C                     Z-ADD#COPY     NUMVAL
     C                     MOVELNUMDS     #RD256    P
     C                     END
      *
      *  Reset Page RDE DED
      *
     C           @DPAGE    IFNE 0
     C           @DPAGE    OCUR DED
     C                     CLEARNUMDS
     C                     Z-ADD##PAGE    NUMVAL
     C                     MOVELNUMDS     #RD256    P
     C                     END
      *
     C           @DPAGR    IFNE 0
     C           @DPAGR    OCUR DED
     C                     CLEARNUMDS
     C                     Z-ADD##PAGR    NUMVAL
     C                     MOVELNUMDS     #RD256    P
     C                     END
      *
     C           @DITNO    IFNE 0
     C           @DITNO    OCUR DED
     C                     CLEARNUMDS
     C                     Z-ADD#ITNO     NUMVAL
     C                     MOVELNUMDS     #RD256    P
     C                     END
      *                                                                   087786
     C           @DPAG0    IFNE 0                                         087786
     C           @DPAG0    OCUR DED                                       087786
     C                     CLEARNUMDS                                     087786
     C                     Z-ADD##PAG0    NUMVAL                          087786
     C                     MOVELNUMDS     #RD256    P                     087786
     C                     END                                            087786
      *                                                                   CCG009
     C           @DPAPB    IFNE 0                                         CCG009
     C           @DPAPB    OCUR DED                                       CCG009
     C                     CLEARNUMDS                                     CCG009
     C                     Z-ADD##PAPB    NUMVAL                          CCG009
     C                     MOVELNUMDS     #RD256    P                     CCG009
     C                     END                                            CCG009
      *                                                                   095470
     C           @DTNP     IFNE 0                                         095470
     C           @DTNP     OCUR DED                                       095470
     C                     CLEARNUMDS                                     095470
     C                     Z-ADD##TNP     NUMVAL                          095470
     C                     MOVELNUMDS     #RD256    P                     095470
     C                     END                                            095470
      *                                                                   109567
     C           @DRDS     IFNE 0                                         109567
     C           @DRDS     OCUR DED                                       109567
     C                     CLEARNUMDS                                     109567
     C                     Z-ADD##RDS     NUMVAL                          109567
     C                     MOVELNUMDS     #RD256    P                     109567
     C                     END                                            109567
      *
     C                     END                                            095470
      *
     C                     MOVE *BLANKS   #SDATA  1
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRADDL   : Add Literal to DED                                *
      *                                                               *
      *  CALLED BY: Main Processing                                   *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *  OFFSET   : 1900                                              *
      *                                                               *
      *****************************************************************
     CSR         SRADDL    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRADDL'  @STK,Q
      *
     C           *LIKE     DEFN #RD256    ###DTA
      *
     C                     SELEC
     C           CNRDTA    WHEQ BLNCDE
     C                     CLEAR###DTA
     C           CNRDTA    WHEQ ZERCDE
     C                     MOVELZEROLI    ###DTA    P
     C                     ENDSL
      *
      *  Search existing entries for this literal
      *
     C           #@DED     IFGE #@DEDS
      *
     C           #@DEDS    DO   #@DED     @DED
     C           @DED      OCUR DED
      *
     C           #RD256    IFEQ ###DTA
     C                     LEAVE
     C                     END
      *
     C                     END
      *
     C                     END
      *
     C           #@DED     IFLT #@DEDS
     C           #RD256    ORNE ###DTA
      *
     C                     ADD  1         #@DED
     C                     Z-ADD#@DED     @DED
     C           @DED      OCUR DED
     C                     MOVEL###DTA    #RD256
      *
     C                     END
      *
     C                     CLEAR###DTA
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *
      * File and Program Error Processing
      *
     C/COPY CGCPYSRC,SRERRC
     C/COPY CGCPYSRC,SRERRPSSR
     C/EJECT
     O****CG3000P1E    1           PAGEO                                  CCG011
     O****    E  1             LINEO                                      CCG011
     O****                     PACLIN   198                               CCG011
      **  OPI@                                                            090256
      **  0205                                                            090256
      **  0304                                                            090256
      **  0403                                                            090256
      **  0502                                                            090256
**  CPY@
(c) Finastra International Limited 2001
**  OPM@
0102
0104
0106
0201
0204
0205
0304
0401
0402
0403
0502
0601
**  OPI@
0204                                                                      090256
0305                                                                      090256
0402                                                                      090256
0503                                                                      090256
**  OPR@
EQUAL
GREATER
GREATEREQ
LESS
LESSEQUAL
NOTEQUAL
