     H DEBUG
     H COPYRIGHT('(c) Misys International Banking Systems Ltd. 2001')
      *****************************************************************
/*STD *  RPGBASEMOD                                                   *
/*EXS *  RPGCVTOPT2                                                   *                       CSD053
/*EXI *  TEXT('Midas CG FTP Log Read')
      *****************************************************************
      *                                                               *
      *  Midas - User Defined Correspondence                          *
      *                                                               *
      *  CG3629 - Midas CG FTP Log Read                               *
      *                                                               *
      *  Function:  This module will read the log generated by the    *
      *             FTP transfer                                      *
      *                                                               *
      *  (c) Misys International Banking Systems Ltd. 2001            *
      *                                                               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      * Midas Release 4.01 -------------------------------------------*
      *  Last Amend No. CSD053             Date 07Jul06               *
      *  Prev Amend No. CCG015  *CREATE    Date 07Mar02               *
      *  Prev Amend No.                    Date ddmmmyy               *
      *
      *---------------------------------------------------------------*
      *                                                               *
      *  CSD053 - Correspondence Manager Multilanguage Upgrade.       *
      *         - Recompile due to SDCORMPD.                          *
      *  CCG015 - Correspondence Manager Phase 1                      *
      *                                                               *
      *****************************************************************
      *                                                               *
      *  S U B R O U T I N E  I N D E X                               *
      *                                                               *
      * *PSSR - Error processing                                      *
      * *INZSR - Initialise                                           *
      *                                                               *
      *    The *INZSR subroutine will only get called automatically   *
      *    on entry to the module the first time it is run            *
      *    (unless you end the program with LR on).  Similarly        *
      *    D-spec initialisation only happens the first time.  Use    *
      *    RESET for subsequent passes.                               *
      *                                                               *
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ F-specs                              ¦
      ** ¦ =======                              ¦
      ** +--------------------------------------+
     FCGUDCLL3  IF   E           K DISK
     FCGXDCLL2  IF   E           K DISK
 
      *****************************************************************
      /EJECT
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ D-specs                              ¦
      ** ¦ =======                              ¦
      ** +--------------------------------------+
      * +--------------------------------------+
      * ¦ Prototypes required for the IFS APIs ¦
      * +--------------------------------------+
      /COPY CGCPYSRC,IFSPROTO
      /COPY CGCPYSRC,OPENDFN
 
     D LDA           E DS           256    EXTNAME(LDA)
      *
      ** Local data area for database error details
      ** *LOCK IN LDA immediately before and OUT LDA immediately
      ** after each database error handling.
      **
      **                                    134 141 DBFILE
      **       Defines:                     142 170 DBKEY
      **                                    171 180 DBPGM
      **                                    181 1830DBASE
      **                                    184 193 DBMOD
      **                                    194 203 DBPROC
      *
      ** Data Area giving Installation Control Details
      *
      ** The following /COPY line includes all the defined fields in the
      ** PSDS.  They have meaningful names, prefixed by 'PS'.
 
     D/COPY ZACPYSRC,PSDS
      *
      ** Program Status Data Structure
 
      ** +--------------------------------------+
      ** ¦ Named constants                      ¦
      ** ¦ ===============                      ¦
      ** +--------------------------------------+
      * Msg IDs to log status of FTP
     D BackupFail      C                   'CGD2542'
     D FtpNotOk        C                   'CGD2564'
     D FtpOk           C                   'CGD2563'
      ** +--------------------------------------+
      ** ¦ Arrays and Data Structures           ¦
      ** ¦ ==========================           ¦
      ** +--------------------------------------+
      * Events array
     D Events          S             10    DIM(10)
 
      * Log file data structure
     D W0FMT         E DS                  EXTNAME(CGUDCLPD)
 
      * Bank details
     D SDBANK        E DS                  EXTNAME(SDBANKPD)
 
      * Correspondence details
     D SDCORM        E DS                  EXTNAME(SDCORMPD)
 
      * Dummy DS
     D DSFDY         E DS                  EXTNAME(DSFDY)
     D DSLDY         E DS                  EXTNAME(DSLDY)
 
      ** +--------------------------------------+
      ** ¦ Declared variables                   ¦
      ** ¦ ==================                   ¦
      ** +--------------------------------------+
 
     D @RUN            S              1
 
      * Entry parameters
     D RtnCde          S             10
     D PathName        S            100
 
      * Return code for CG3613
     D Return          S             10
 
      * Application Name
     D ApplName        S             10
 
      * Parameters for OPEN() API
     D FDescDat        S             10I 0
     D FDescCtl        S             10I 0
     D*Oflag****       S             10I 0                                                    CSD053
     D Oflag           S             10I 0 INZ                                                CSD053
     D Mode1           S             10I 0 INZ                                                CSD053
     D Ccsid           S              5  0                                                    CSD053
 
      * Return code for UNLINK() API
     D RC              S             10I 0
 
      * Parameters for LINK() API
     D RC2             S             10I 0
     D NewPth          S            105
 
      * Return code for CLOSE() API
     D RC3             S             10I 0
 
      * Return code for OPENDIR() API
     D pDir            S               *
 
      * Parameters for MKDIR() API
     D RC4             S             10I 0
     D Mode            S             10I 0
 
      * Return code for CLOSEDIR() API
     D RC5             S             10I 0
 
      * Return code for CHGMOD() API
     D RC6             S             10I 0
 
      * Parameters for CG9030/CG9050
     D W0RTN           S              7
     D W0ACT           S              8
     D W0TITL          S              7
     D W0ULIN          S              7
     D W0CMT           S              3
 
      * Parameters for Acces Object
     D P@RTCD          S              7
     D P@OPTN          S              7
 
      * Parameters for ZA0140M
     D SSRTN           S              1
     D SSDAYN          S              5  0
     D SSDFMT          S              1
     D SSDATE          S              6  0
     D SSDATA          S              7
     D SSDAT8          S              8  0
     D SSDAT8F         S              8  0
 
      * Stream file name
     D StreamF         S             16
 
      * Message ID
     D WMSID           S                   LIKE(DLMSID)
 
      * Message ID
     D WriteEvent      S                   LIKE(DLMSID) INZ('CGD2538')
 
      * Control file path name
     D CtlPathName     S            100
 
      * Backup directory name
     D BackupDirName   S             84
 
      * Procedures interfaces
     D StreamFile      PR            16
     D FullPathName                 100    VALUE
 
     D ControlFile     PR           100
     D FullPathName                 100    VALUE
 
     D BackupPath      PR           105
     D BckUpDrNm                           VALUE LIKE(BackupDirName)
     D StrmFile                      16    VALUE
      *****************************************************************
      /EJECT
      *****************************************************************
      *
      ** +--- Start of Main processing -----------------------------------+
      ** ¦                                                                ¦
      ** ¦ Initial processing is performed automatically: the *INZSR is   ¦
      ** ¦ executed at program activation.                                ¦
      ** ¦                                                                ¦
      ** +----------------------------------------------------------------+
 
      *********************************************************************
      * MAIN PROCEDURE                                                    *
      *********************************************************************
 
      * Initialisation
     C                   EXSR      Init
 
      * Check the events of the FTP transmission
     C                   EXSR      ChkEvnts
 
      *If the FTP transmission is successsful: backup stream file
     C                   EXSR      Backup
 
     C                   SETON                                        LR
      **********************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * Backup - Backup stream file                                   *
      *                                                               *
      * Called by: Main                                               *
      *                                                               *
      * Calls: Logging                                                *
      *                                                               *
      *****************************************************************
 
     C     Backup        BEGSR
 
      * Try to open stream file (.dat) in exclusive mode
     C                   EVAL      Oflag = O_RDONLY +
     C**********                           O_TEXTDATA + O_SHARE_NONE                          CSD053
     C                                                  O_SHARE_NONE                          CSD053
     C                                                  + O_CCSID                             CSD053
     C                   MOVE      CMFCCS        CCSID                                        CSD053
      * Set file mode parameter                                                               CSD053
     C                   EVAL      Mode1 = S_IRWXU + S_IRWXG +                                CSD053
     C                                     S_IROTH + S_IXOTH                                  CSD053
      *                                                                                       CSD053
     C**********         EVAL      FDescDat = OPEN(%TRIMR(PathName):Oflag)                    CSD053
     C                   EVAL      FDescDat = OPEN(%TRIMR(PathName):Oflag :                   CSD053
     C                                                          Mode1 : Ccsid)                CSD053
 
     C                   IF        FDescDat <> -1
      * Try to open stream file (.ctl) in exclusive mode
     C                   EVAL      CtlPathName = ControlFile(PathName)
     C**********         EVAL      FDescCtl = OPEN(%TRIMR(CtlPathName):Oflag)                 CSD053
     C                   EVAL      FDescCtl = OPEN(%TRIMR(CtlPathName):Oflag :                CSD053
     C                                                          Mode1 : Ccsid)                CSD053
 
     C                   IF        FDescCtl <> -1
      * Check if backup directory exists
     C                   EVAL      pDir = OPENDIR(%TRIMR(BackupDirName))
 
      * Create backup directory if it doesn't exist
     C                   IF        pDir = *NULL
 
      *  Set file mode parameter
     C                   EVAL      Mode = S_IRWXU + S_IRWXG +
     C                                    S_IRWXO
 
     C                   EVAL      RC4 = MKDIR(%TRIMR(BackupDirName):Mode)
     C                   ENDIF
 
      * Create link to stream file
     C                   EVAL      NewPth = BackUpPath(BackUpDirName
     C                                       :StreamF)
     C                   EVAL      RC2 = LINK(%TRIMR(PathName):(%TRIMR(NewPth)))
 
     C                   IF        RC2 <> -1
      * Remove link to stream file
     C                   EVAL      RC = UNLINK(%TRIMR(PathName))
     C                   EVAL      RC = UNLINK(%TRIMR(CtlPathName))
      * Change authority: allow Delete for PUBLIC, so that the purging
      * directory job can delete the stream file
     C                   EVAL      Mode = S_IRWXU + S_IRWXG + S_IRWXO
     C                   EVAL      RC6 = CHMOD(%TRIMR(NewPth):Mode)
     C                   ENDIF
 
      * Close stream file
     C                   EVAL      RC3 = CLOSE(FDescDat)
     C                   EVAL      RC3 = CLOSE(FDescCtl)
 
      * Close directory
     C                   EVAL      RC5 = CLOSEDIR(pDir)
     C                   ENDIF
     C                   ENDIF
 
      * Log 'stream file back up  fails' into log file
     C                   IF        FDescDat = -1 OR FDescCtl = -1 OR
     C                             RC = -1 OR RC2 = -1 OR RC6 = -1
     C                   EVAL      WMSID = BackupFail
     C                   EXSR      Logging
     C                   ENDIF
 
     C                   ENDSR
      /EJECT
      *****************************************************************
      *                                                               *
      * ChkEvnts - Check FTP events                                   *
      *                                                               *
      * Called by: Main                                               *
      *                                                               *
      * Calls: Logging                                                *
      *        CG3613                                                 *
      *                                                               *
      *****************************************************************
 
     C     ChkEvnts      BEGSR
 
      * Define application name
     C                   EVAL      ApplName = 'CM_FTP'
 
      * Check the events of the FTP transmission
     C                   CALLB     'CG3613'
     C                   PARM                    ApplName
     C                   PARM      *BLANKS       Return
     C                   PARM      *BLANKS       Events
 
      * Error in connecting to host
     C                   IF        Return = '*ERROR'
 
      * Log 'stream file not transmitted' into log file
     C                   EVAL      WMSID = FtpNotOk
     C                   EXSR      Logging
 
     C                   EVAL      RtnCde = '*ERROR'
     C                   EVAL      DBFILE =  'CG3613'
     C                   EVAL      DBPGM  =  PSProcPgm
     C                   EVAL      DBASE  =  001
     C                   EVAL      DBMOD  =  PSProcMod
     C                   EXSR      *PSSR
     C                   ELSE
 
     C     '*LOGINOK  '  LOOKUP    Events                                 01
 
      * Logging in is successful
     C                   IF        %EQUAL
     C     '*TRANSFER '  LOOKUP    Events                                 01
 
      * Transferring the data is successful
     C                   IF        %EQUAL
 
      * Log 'stream file transmitted' into log file
     C                   EVAL      WMSID = FtpOk
     C                   EXSR      Logging
 
     C                   ELSE
 
     C     '*UNKDSTPTH'  LOOKUP    Events                                 01
 
      * Problem with path of destination directory
     C                   IF        %EQUAL
 
      * Log 'stream file not transmitted' into log file
     C                   EVAL      WMSID = FtpNotOk
     C                   EXSR      Logging
 
     C                   EVAL      RtnCde = '*UNKDSTPTH'
     C                   EVAL      DBFILE =  'CG3613'
     C                   EVAL      DBPGM  =  PSProcPgm
     C                   EVAL      DBASE  =  002
     C                   EVAL      DBMOD  =  PSProcMod
     C                   EXSR      *PSSR
 
     C                   ELSE
      * Other errors
 
      * Log 'stream file not transmitted' into log file
     C                   EVAL      WMSID = FtpNotOk
     C                   EXSR      Logging
 
     C                   EVAL      RtnCde = '*ERROR'
     C                   EVAL      DBFILE =  'CG3613'
     C                   EVAL      DBPGM  =  PSProcPgm
     C                   EVAL      DBASE  =  008
     C                   EVAL      DBMOD  =  PSProcMod
     C                   EXSR      *PSSR
     C                   ENDIF
     C                   ENDIF
     C                   ELSE
 
     C     '*LOGINFAIL'  LOOKUP    Events                                 01
 
      * Problem with logging in
     C                   IF        %EQUAL
 
      * Log 'stream file not transmitted' into log file
     C                   EVAL      WMSID = FtpNotOk
     C                   EXSR      Logging
 
     C                   EVAL      RtnCde = '*LOGINFAIL'
     C                   EVAL      DBFILE =  'CG3613'
     C                   EVAL      DBPGM  =  PSProcPgm
     C                   EVAL      DBASE  =  003
     C                   EVAL      DBMOD  =  PSProcMod
     C                   EXSR      *PSSR
 
     C                   ELSE
 
     C     '*UNKWNHOST'  LOOKUP    Events                                 01
 
      * Problem with authority to host
     C                   IF        %EQUAL
 
      * Log 'stream file not transmitted' into log file
     C                   EVAL      WMSID = FtpNotOk
     C                   EXSR      Logging
 
     C                   EVAL      RtnCde = '*UNKWNHOST'
     C                   EVAL      DBFILE =  'CG3613'
     C                   EVAL      DBPGM  =  PSProcPgm
     C                   EVAL      DBASE  =  004
     C                   EVAL      DBMOD  =  PSProcMod
     C                   EXSR      *PSSR
 
     C                   ELSE
      * Other errors
 
      * Log 'stream file not transmitted' into log file
     C                   EVAL      WMSID = FtpNotOk
     C                   EXSR      Logging
 
     C                   EVAL      RtnCde = '*ERROR'
     C                   EVAL      DBFILE =  'CG3613'
     C                   EVAL      DBPGM  =  PSProcPgm
     C                   EVAL      DBASE  =  005
     C                   EVAL      DBMOD  =  PSProcMod
     C                   EXSR      *PSSR
     C                   ENDIF
     C                   ENDIF
     C                   ENDIF
     C                   ENDIF
 
     C                   ENDSR
      /EJECT
      *****************************************************************
      *                                                               *
      * Logging  - Log status of FTP                                  *
      *                                                               *
      * Called by: ChkEvnts                                           *
      *            Backup                                             *
      *                                                               *
      * Calls: CG9030                                                 *
      *        CG9050                                                 *
      *                                                               *
      *****************************************************************
 
     C     Logging       BEGSR
 
     C     keyLog        KLIST
     C                   KFLD                    StreamF
     C                   KFLD                    WriteEvent
 
      * Check whether record with stream file name exists on log file,
      * if not check whether it exists on archive log file,otherwise dump
     C     keyLog        SETLL     CGUDCLL3
 
      * Log status on log file
     C                   IF        %EQUAL
 
     C                   CLEAR                   W0FMT
     C                   EVAL      DLSTFN = StreamF
     C                   EVAL      DLMSID = WMSID
 
     C                   CALL      'CG9030'
     C                   PARM      *BLANKS       W0RTN
     C                   PARM      '*WRITE'      W0ACT
     C                   PARM                    W0FMT
     C                   PARM      *BLANKS       W0TITL
     C                   PARM      *BLANKS       W0ULIN
     C                   PARM      'YES'         W0CMT
 
     C                   ELSE
 
     C     keyLog        SETLL     CGXDCLL2
 
      * Log status on archive log file
     C                   IF        %EQUAL
 
     C                   CLEAR                   W0FMT
     C                   EVAL      DLSTFN = StreamF
     C                   EVAL      DLMSID = WMSID
 
     C                   CALL      'CG9050'
     C                   PARM      *BLANKS       W0RTN
     C                   PARM      '*WRITE'      W0ACT
     C                   PARM                    W0FMT
     C                   PARM      *BLANKS       W0TITL
     C                   PARM      *BLANKS       W0ULIN
     C                   PARM      'YES'         W0CMT
 
     C                   ELSE
 
     C                   EVAL      RtnCde = '*ERROR'
     C                   EVAL      DBFILE =  'CG9050'
     C                   EVAL      DBPGM  =  PSProcPgm
     C                   EVAL      DBASE  =  006
     C                   EVAL      DBMOD  =  PSProcMod
     C                   EXSR      *PSSR
     C                   ENDIF
     C                   ENDIF
 
      * Comit changes to log file
     C                   COMMIT
 
     C                   ENDSR
      /EJECT
      *****************************************************************
      *                                                               *
      * Init - Program Initialisation routine                         *
      *                                                               *
      * Called by:                                                    *
      *                                                               *
      * Calls: AOBANKR0                                               *
      *        ZA0140M                                                *
      *                                                               *
      *****************************************************************
 
     C     Init          BEGSR
 
      * Retrieve stream file name from full path name
     C                   EVAL      StreamF = StreamFile(PathName)
 
      * Retrieve bank details
     C                   CALLB     'AOBANKR0'
     C                   PARM                    P@RTCD
     C                   PARM      '*FIRST'      P@OPTN
     C     SDBANK        PARM      SDBANK        DSFDY
 
      * Convert run day number to YYYYMMDD format
 
     C                   CALLB     'ZA0140M'
     C                   PARM                    SSRTN
     C                   PARM      BJRDNB        SSDAYN
     C                   PARM      BJDFIN        SSDFMT
     C                   PARM                    SSDATE
     C                   PARM                    SSDATA
     C                   PARM                    SSDAT8
     C                   PARM                    SSDAT8F
 
      * Backup directory name
     C                   MOVE      SSDAT8        TempAlpha8        8
     C                   EVAL      BackupDirName  = %TRIMR(CMLODI)
     C                             + '/' + TempAlpha8
 
     C                   ENDSR
      /EJECT
      *****************************************************************
      *                                                               *
      * *INZSR - Program Initialisation routine                       *
      *                                                               *
      * Called by: Implicitly on program activation                   *
      *                                                               *
      * Calls: None                                                   *
      *                                                               *
      *****************************************************************
 
     C     *INZSR        BEGSR
 
     C     *ENTRY        PLIST
     C                   PARM                    RtnCde
     C                   PARM                    PathName
 
      *  Retrieve Correspondence Manager ICD
     C                   CALLB(E)  'AOCORMR0'
     C                   PARM      *BLANKS       P@RTCD
     C                   PARM      '*FIRST '     P@OPTN
     C     SDCORM        PARM      *BLANKS       DSLDY
 
      * Error calling AOCORMR0
     C                   IF        %ERROR OR P@RTCD <> *BLANK
     C                   EVAL      DBFILE =  'SDCORMPD'
     C                   EVAL      DBPGM  =  PSProcPgm
     C                   EVAL      DBASE  =  007
     C                   EVAL      DBMOD  =  PSProcMod
     C                   EXSR      *PSSR
     C                   ENDIF
 
     C                   ENDSR
 
      *****************************************************************
 
      *********************************************************************
      /EJECT
      *********************************************************************
      *                                                                   *
      * *PSSR  - Program exception error routine                          *
      *          Called automatically if a program error occurs,          *
      *          or directly by the program code using EXSR.              *
      *          This subroutine DUMPs the program just once.             *
      *                                                                   *
      * Called by: (**calling routines**)                                 *
      *                                                                   *
      * Calls: None                                                       *
      *                                                                   *
      *********************************************************************
 
     C     *PSSR         BEGSR
 
     C                   DUMP
 
     C                   IF        @RUN = *BLANK
     C                   EVAL      @RUN = 'Y'
 
     C                   CALLB     'DBERRCTL'
 
     C                   ENDIF
 
     C                   EVAL      *INU7 = *ON
     C                   EVAL      *INU8 = *ON
     C                   EVAL      *INLR = *ON
     C                   RETURN
 
     C                   ENDSR
      /EJECT
      *****************************************************************
      *                                                               *
      * StreamFile - Retrieves stream file name from the full pathname*
      *                                                               *
      *****************************************************************
     PStreamFile       B
 
     D StreamFile      PI            16
     D  FullPathName                100    VALUE
 
      * Stream file
     D StreamFile      S             16
 
      * Unix style directory
     D Unix            C                   '/'
 
      * Dot
     D Dot             C                   '.'
 
      * Position of '/' / '.' in directory
     D Pos             S              5U 0
 
      * Variable used for scan of '/'
     D x               S              3  0
 
      * Variable used for scan of '.'
     D y               S              3  0
 
      * x gives you the position after the last '/'
     C                   EVAL      x=1
     C                   EVAL      Pos = %SCAN(Unix:FullPathName:x)
 
     C                   DOW       Pos <> 0
     C                   EVAL      x=Pos+1
     C                   EVAL      Pos = %SCAN(Unix:FullPathName:x)
     C                   ENDDO
 
      * y gives you the position after the last '.'
     C                   EVAL      y=1
     C                   EVAL      Pos = %SCAN(Dot:FullPathName:y)
 
     C                   DOW       Pos <> 0
     C                   EVAL      y=Pos+1
     C                   EVAL      Pos = %SCAN(Dot:FullPathName:y)
     C                   ENDDO
 
      * Stream file name
     C                   IF        (y-x-1) >= 0
     C                   EVAL      StreamFile = %SUBST(FullPathName:x:y-x-1)
     C                   ENDIF
 
     C                   RETURN    StreamFile
     P                 E
      /EJECT
      *****************************************************************
      *                                                               *
      * ControlFile - Puts an extension of .ctl to the stream file    *
      *               name                                            *
      *****************************************************************
     PControlFile      B
     D ControlFile     PI           100
     D  FullPathName                100    VALUE
 
      * Path of control file
     D ControlFile     S            100
 
      * Dot
     D Dot             C                   '.'
 
      * ctl extension
     D ctl             C                   'ctl'
 
      * Variable used for scan of '.'
     D y               S              3  0
 
      * Position of '.' in directory
     D Pos             S              5U 0
 
      * y gives you the position after the last '.'
     C                   EVAL      y=1
     C                   EVAL      Pos = %SCAN(Dot:FullPathName:y)
 
     C                   DOW       Pos <> 0
     C                   EVAL      y=Pos+1
     C                   EVAL      Pos = %SCAN(Dot:FullPathName:y)
     C                   ENDDO
 
      * Control file path
     C                   EVAL      ControlFile = FullPathName
     C                   EVAL      %SUBST(ControlFile:y:3)=ctl
 
     C                   RETURN    ControlFile
     P                 E
      /EJECT
      *****************************************************************
      *                                                               *
      * BackupPath - Creates the full pathname for the backing up of  *
      *              stream file                                      *
      *****************************************************************
     PBackupPath       B
     D BackupPath      PI           105
     D  BckUpDrNm                          VALUE LIKE(BackupDirName)
     D  StrmFile                     16    VALUE
      *
      * Backup directory pathname
     D BackupPath      S            105
 
      * Unix style directory
     D Unix            C                   '/'
 
      * .dat extension
     D Dat             C                   '.DAT'
 
      * Backup directory pathname
     C                   EVAL      BackupPath = %TRIMR(BckUpDrNM) +
     C                                          Unix + %TRIMR(StrmFile)+
     C                                          Dat
 
     C                   RETURN    BackupPath
     P                 E
