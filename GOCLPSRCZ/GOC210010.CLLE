/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas GO GPWTRAPPD Housekeeping')                     */
/*********************************************************************/
/*                                                                   */
/*       Midas - Global Processing                                   */
/*                                                                   */
/*       GOC210010 - Midas GO GPWTRAPPD Housekeeping                 */
/*                                                                   */
/*   WARNING - THIS PROGRAM IS RUNNING IN TASK SPLIT MODE.           */
/*             DO NOT ADD ANY NEW PROGRAMS TO THIS CL IF IT IS NOT   */
/*             ABLE TO RUN IN TASK SPLIT.                            */
/*                                                                   */
/*       (c) Finastra International Limited 2014                     */
/*                                                                   */
/*       Last Amend No. MD046248           Date 27Oct17              */
/*       Prev Amend No. MD023876A          Date 30Apr14              */
/*                      MD023876 *CREATE   Date 30Apr14              */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*                                                                   */
/*       MD046248 - Finastra Rebranding                              */
/*       MD023876A - Wrong location of task split objects            */
/*       MD023876 - GOC210000 Performance Issues                     */
/*                                                                   */
/*********************************************************************/
 
             PGM        PARM(&CNAME &CSEQ)
 
             DCL        VAR(&CNAME) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CSEQ) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&CSEQC) TYPE(*CHAR) LEN(5)
             DCL        VAR(&MEMBER) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DTAQLIBL) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGLENGTH) TYPE(*DEC) LEN(5 0) VALUE(50)
             DCL        VAR(&MSGDATA) TYPE(*CHAR) LEN(50)
             DCL        VAR(&SNDDTAQ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RCVDTAQ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RCVWAIT) TYPE(*DEC) LEN(5 0) VALUE(600)
             DCL        VAR(&RESTART) TYPE(*CHAR) LEN(1)
             DCL        VAR(&STAT) TYPE(*CHAR) LEN(1)
             DCL        VAR(&SNDMSG) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&LDA) TYPE(*CHAR) LEN(256)
             DCL        VAR(&MEM) TYPE(*CHAR) LEN(50)
/**********  DCL        VAR(&INDEXFL) TYPE(*CHAR) LEN(10) +          */                /*MD023876A*/
/**********             VALUE('GPWTRPIPD')                           */                /*MD023876A*/
             DCL        VAR(&INDEXFL) TYPE(*CHAR) LEN(10) +
                        VALUE('GOWTRPIPD')                                             /*MD023876A*/
/**********  DCL        VAR(&DRVRFL) TYPE(*CHAR) LEN(10) +           */                /*MD023876A*/
/**********             VALUE('GPWTRPDPD')                           */                /*MD023876A*/
             DCL        VAR(&DRVRFL) TYPE(*CHAR) LEN(10) +
                        VALUE('GOWTRPDPD')                                             /*MD023876A*/
 
             DCL        VAR(&RTCD)  TYPE(*CHAR) LEN(7)
             DCL        VAR(&ERMS)  TYPE(*CHAR) LEN(50)
             DCL        VAR(&FULLCHECK) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&ZOZONE)  TYPE(*CHAR) LEN(10)
             DCL        VAR(&ZOSHTC)  TYPE(*CHAR) LEN(4)
             DCL        VAR(&ZORDNB)  TYPE(*DEC)  LEN(5 0)
             DCL        VAR(&ZODNWD)  TYPE(*DEC)  LEN(5 0)
             DCL        VAR(&ZOBCCY)  TYPE(*CHAR) LEN(3)
             DCL        VAR(&ZONJOB)  TYPE(*DEC)  LEN(1 0)
             DCL        VAR(&PROC)  TYPE(*CHAR) LEN(1)
 
             DCLF       FILE(SDSBNKTD)
 
             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2014')
 
/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ABNOR))
 
             SNDPGMMSG  MSG('GOC210010 - GPWTRAPPD Housekeeping') +
                          TOMSGQ(MRUNQ)
 
/* Get zone */
             CALL       PGM(GOGETZONE) PARM(&RTCD &ERMS &FULLCHECK +
                          &ZOZONE &ZOSHTC &ZORDNB &ZODNWD &ZOBCCY +
                          &ZONJOB)
             IF         COND(&RTCD *NE '       ') THEN(DO)
                GOTO       CMDLBL(ABNOR)
             ENDDO
 
/* Determine if it is this zone to do the housekeeping */
 
             RCVF
             MONMSG     MSGID(CPF0864) EXEC(DO)
                GOTO       CMDLBL(ABNOR)
             ENDDO
 
             CALL       PGM(GP210000) PARM(&RTCD &ERMS &ZOZONE +
                          &BJMRDT &PROC)
             IF         COND(&RTCD *NE '       ') THEN(DO)
                GOTO       CMDLBL(ABNOR)
             ENDDO
 
             IF         COND(&PROC *NE 'Y') THEN(DO)
                GOTO       CMDLBL(ENDPGM)
             ENDDO
 
/* Read COB components file to check the restart status. */
             CALL       PGM(CB0160) PARM(&CNAME &CSEQ &STAT)
             IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                GOTO       CMDLBL(ABNOR)
             ENDDO
 
             CHGVAR     VAR(&RESTART) VALUE(&STAT)
 
/* Set restart status to 'Y'. */
             CHGVAR     VAR(&STAT) VALUE('Y')
             CALL       PGM(CB0150) PARM(&CNAME &CSEQ &STAT)
 
/* Set up call to QSNDDTAQ and override files to their members. */
             CHGVAR     VAR(&CSEQC) VALUE(&CSEQ)
             CHGVAR     VAR(&MEMBER) VALUE('WTRAP' *CAT &CSEQC)
             CHGVAR     VAR(&DTAQLIBL) VALUE('*LIBL')
/**********  CHGVAR     VAR(&SNDDTAQ) VALUE('GPWTRPSVDQ')              */              /*MD023876A*/
             CHGVAR     VAR(&SNDDTAQ) VALUE('GOWTRPSVDQ')                              /*MD023876A*/
             CHGVAR     VAR(&RCVDTAQ) VALUE(&MEMBER)
 
             OVRDBF     FILE(&DRVRFL) TOFILE(&DRVRFL) MBR(&MEMBER)
 
             STRCMTCTL  LCKLVL(*CHG) CMTSCOPE(*JOB)
 
/* If restart from component failed because of no response from server */
/* then resend message to server and wait.                             */
             IF         COND(&RESTART = 'F') THEN(DO)
                GOTO       CMDLBL(LOOP)
             ENDDO
 
/* If restart from component failed for some other reason do not wait for the */
/* data queue entry.  Clear any old data queue messages from the server but   */
/* ensure that an 'END' message sent from the end process job is not lost.    */
             IF         COND(&RESTART = 'Y') THEN(DO)
                CHGVAR     VAR(&RCVWAIT) VALUE(5)
                CALL       PGM(QRCVDTAQ) PARM(&MEMBER &DTAQLIBL +
                             &MSGLENGTH &MSGDATA &RCVWAIT)
                CHGVAR     VAR(&RCVWAIT) VALUE(600)
                CHGVAR     VAR(&MSGLENGTH) VALUE(50)
                IF         COND(%SST(&MSGDATA 1 3) = 'END') THEN(DO)
                   CALL       PGM(QSNDDTAQ) PARM(&MEMBER &DTAQLIBL +
                                &MSGLENGTH &MSGDATA)
                ENDDO
                GOTO       CMDLBL(RESTART)
             ENDDO
 
LOOP:
/* Send message to main data queue. */
             CHGVAR     VAR(&MSGDATA) VALUE(&MEMBER)
             CALL       PGM(QSNDDTAQ) PARM(&SNDDTAQ &DTAQLIBL +
                          &MSGLENGTH &MSGDATA)
             CHGVAR     VAR(&STAT) VALUE('F')
             CALL       PGM(CB0150) PARM(&CNAME &CSEQ &STAT)
 
/* Wait on reply for 5 minutes. */
             CALL       PGM(QRCVDTAQ) PARM(&RCVDTAQ &DTAQLIBL +
                          &MSGLENGTH &MSGDATA &RCVWAIT)
 
/* If  - no reply  check if the server is still active.                 */
/*     - server is not active then send error message and terminate.    */
/*     - server is active then resend message to server.                */
/*     - server still does not respond after resending the message then */
/*       send error message and terminate.                              */
             IF         COND(&MSGLENGTH = 0) THEN(DO)
                ALCOBJ     OBJ((&INDEXFL *FILE *EXCL)) WAIT(0)
                MONMSG     MSGID(CPF1002) EXEC(DO)
                IF         COND(&SNDMSG *EQ 'Y') THEN(DO)
                   SNDPGMMSG  MSG('No response from server for GOC210010') +
                                TOMSGQ(MOPERQ MRUNQ)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
                ELSE       CMD(DO)
                   CHGVAR     VAR(&SNDMSG) VALUE('Y')
                   GOTO       CMDLBL(LOOP)
                ENDDO
                ENDDO
 
                SNDPGMMSG  MSG('Server for GOC210010 not active.') +
                             TOMSGQ(MOPERQ MRUNQ)
                GOTO       CMDLBL(ABNOR)
             ENDDO
 
/* If reply = 'END', set restart status to 'N' and terminate. */
             IF         COND(%SST(&MSGDATA 1 3) = 'END') THEN(DO)
                CHGVAR     VAR(&STAT) VALUE('N')
                CALL       PGM(CB0150) PARM(&CNAME &CSEQ &STAT)
                GOTO       CMDLBL(ENDPGM)
             ENDDO
 
RESTART:
 
             CHGVAR     VAR(&RTCD) VALUE(' ')
             CHGVAR     VAR(&ERMS) VALUE(' ')
 
             CALL       PGM(GP210010) PARM(&RTCD &ERMS)
             IF         COND(&RTCD *NE '       ') THEN(DO)
                CHGJOB     SWS(XXXXXX11)
             ENDDO
 
/* Add rollback for error. */
             IF         COND(*NOT %SWITCH(XXXXXX00)) THEN(DO)
                RTVDTAARA  DTAARA(LDA *ALL) RTNVAR(&LDA)
                CHGVAR     VAR(&MEM) VALUE(%SST(&LDA 134 50))
                SNDPGMMSG  MSGID(MEM0001) MSGF(REUSRMSG) MSGDTA(&MEM) +
                             TOMSGQ(MOPERQ MRUNQ)
                ROLLBACK
                GOTO       CMDLBL(ABNOR)
             ENDDO
             ELSE       CMD(DO)
                COMMIT
             ENDDO
 
             CHGVAR     VAR(&RESTART) VALUE('N')
 
             GOTO       CMDLBL(LOOP)
 
ABNOR:
             DMPCLPGM
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)
             SNDPGMMSG  MSG('Program GOC210010 ended abnormally.') +
                          TOMSGQ(MOPERQ MRUNQ)
             MONMSG     MSGID(CPF0000 MCH0000)
             CHGJOB     SWS(XXXXXX11)
 
ENDPGM:
             ENDCMTCTL
             MONMSG     MSGID(CPF0000)
             ENDPGM
