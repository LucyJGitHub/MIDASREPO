/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas LE PDCL process - loans account keys')          */
/*********************************************************************/
/*                                                                   */
/*       Midas - Customer Lending Module                             */
/*                                                                   */
/*       LEC000456 - PDCL process - Loans account keys               */
/*                                                                   */
/*       Function: To generate PDCL records for loan account keys    */
/*                 by calling LE000456                               */
/*                                                                   */
/*       (c) Misys International Banking Systems Ltd. 2013           */
/*                                                                   */
/*       Last Amend No. MD022807I          Date 24Apr14              */
/*       Prev Amend No. MD022807E          Date 17Oct13              */
/*                      MD021423 *REWRITE  Date 21Aug13              */
/*                      MD020534           Date 23May13              */
/*                      AR1095331          Date 07Apr13              */
/*                      AR1094242          Date 06Mar13              */
/*                      AR1091213          Date 26Feb13              */
/*                      AR1085742          Date 06Feb13              */
/*                      AR1084872          Date 04Feb13              */
/*                      AR1081531          Date 24Jan13              */
/*                      AR1080650          Date 22Jan13              */
/*                      AR1073035          Date 29Dec12              */
/*                      AR1063761          Date 04Dec12              */
/*                      AR724089           Date 01Aug12              */
/*                      CLE134 *CREATE     Date 01Aug12              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD022807I- Process 'R'-esent then 'H'-eld transactions      */
/*       MD022807E- Send transactions tagged as 'R'to MQ             */
/*       MD021423 - Abnormally long run of PDCL/MAPY processing      */
/*                  components                                       */
/*       MD020534 - System did not generate PDCL for the unpaid      */
/*                  balance of interest after COB                    */
/*       AR1095331 - BFTC Security Issues                            */
/*       AR1094242 - Event code not found                            */
/*       AR1091213 - Additional fixes needed for Recovery Processing */
/*                   of PDCL components                              */
/*       AR1085742 - Recovery handling when PDP components loop due  */
/*                   to database connection issues                   */
/*       AR1084872 - The reasons or cause why PDCL went to Repair    */
/*                   Queue Tab should be described in a report       */
/*       AR1081531 - Change in components file needed for LEC000460  */
/*       AR1080650 - Checking of Listener should be done before      */
/*                   LEC000456, LEC000131 and LEC000138              */
/*       AR1073035 - Error in adding QMQM library because it         */
/*                   already exist                                   */
/*       AR1063761 - COB Optimisation Issues for PDP                 */
/*       AR724089 - Several performance issues in COB component      */
/*                  LEC0459. Move the override of ACPO1 onto this    */
/*                  program. (Child: AR724090)                       */
/*       CLE134 - Past Due Call Loan Processing                      */
/*                                                                   */
/*********************************************************************/
 
             PGM        PARM(&CNAM &CSEQ &APOS)
 
/** Declare the variables for rerun checking */
             DCL        VAR(&CNAM) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CSEQ) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&APOS) TYPE(*CHAR) LEN(1)
             DCL        VAR(&STAT) TYPE(*CHAR) LEN(1) VALUE(' ')
             DCL        VAR(&RTCD) TYPE(*CHAR) LEN(7)
             DCL        VAR(&FLAG) TYPE(*CHAR) LEN(1) VALUE('Y')
             DCL        VAR(&ENDF) TYPE(*CHAR) LEN(1)
 
             DCL        VAR(&CPYFLD) TYPE(*CHAR) LEN(64) VALUE('(c) +
                           Misys International Banking Systems Ltd. +
                           2013')
 
             DCL        VAR(&RECCONT) TYPE(*DEC) LEN(10 0)
             DCL        VAR(&PRVCONT) TYPE(*DEC) LEN(10 0)
             DCL        VAR(&ACTIME) TYPE(*CHAR) LEN(20)
             DCL        VAR(&AETIME) TYPE(*CHAR) LEN(20)
             DCL        VAR(&RECCNT2) TYPE(*DEC) LEN(10 0)
             DCL        VAR(&RECCNT3) TYPE(*DEC) LEN(10 0)                             /*MD022807E*/
             DCL        VAR(&COUNTER) TYPE(*DEC) LEN(10 0)                             /*MD022807E*/
 
             CRTDTAARA  DTAARA(QTEMP/LDA) TYPE(*CHAR) LEN(256)
             MONMSG     MSGID(CPF1023)
 
             RTVDTAARA  DTAARA(LEPDPC (3 1)) RTNVAR(&ENDF)
 
/** Reset Indicators */
             CHGJOB     SWS(00000000)
                                                                                       /*MD022807E*/
             CHGVAR     VAR(&COUNTER) VALUE(1)                                         /*MD022807E*/
 
/** Ensure that the listeners are started */
             CALL       PGM(LEC000129) PARM('CBSTART')
             IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
               GOTO       CMDLBL(DBERR)
             ENDDO
 
/** Ensure that the MQ manager and channel is running */
             CALL       PGM(LEC000130)
             IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
               GOTO       CMDLBL(DBERR)
             ENDDO
/** Start Commitment Control */
             STRCMTCTL  LCKLVL(*CHG) NFYOBJ(MNTYF (*FILE)) +
                           CMTSCOPE(*JOB)
             MONMSG     MSGID(CPF8351) EXEC(CHGVAR VAR(&FLAG) +
                           VALUE('N'))
 
/** If input parameter is blanks, default 1 */
             IF         COND(&APOS *EQ ' ') THEN(CHGVAR +
                           VAR(&APOS) VALUE('1'))
 
             SNDPGMMSG  MSG('PDCL Loans Account Keys +
                           update/create') TOMSGQ(MRUNQ)
 
/** Check the current status of this component */
             CALL PGM(CB0160) PARM(&CNAM &CSEQ &STAT)
 
/** Restart Process */
/** If restart component and value of LEMQLGL6 is not zero  */
             RTVMBRD    FILE(LEMQLGL6) NBRCURRCD(&RECCONT)
             IF         COND(&RECCONT *GT 0) THEN(DO)
               CALL       PGM(LE000500) PARM('LEC000456')
             RTVMBRD    FILE(LEPK1L3)  NBRCURRCD(&RECCONT)
             IF         COND(&RECCONT *NE 0) THEN(GOTO PROC)
             GOTO       CMDLBL(CHECKER)
             ENDDO
 
PROC:
/** Set Cob Flag */
             CHGVAR     VAR(&STAT) VALUE('Y')
             CALL       PGM(CB0150) PARM(&CNAM &CSEQ &STAT)
 
             IF         COND(&APOS *EQ '5') THEN(DO)
                  OVRDBF    FILE(ACPO1) TOFILE(ACPO5)
             ENDDO
 
             CALL       PGM(LE000456) PARM(&APOS &CNAM &RTCD)
 
             IF         COND(&APOS *EQ '5') THEN(DO)
                  DLTOVR    FILE(ACPO1)
                  MONMSG    MSGID(CPF0000)
             ENDDO
 
             IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
               SNDPGMMSG  MSG('Job terminated, database in error.') +
                             TOMSGQ(MOPERQ MRUNQ)
               CHGVAR     VAR(&STAT) VALUE('N')
               CALL       PGM(CB0150) PARM(&CNAM &CSEQ &STAT)
               GOTO       CMDLBL(DBERR)
             ENDDO
 
             IF         COND(&RTCD *NE '       ') THEN(DO)
               SNDPGMMSG  MSG('Job terminated, database in error.') +
                             TOMSGQ(MOPERQ MRUNQ)
               CHGVAR     VAR(&STAT) VALUE('N')
               CALL       PGM(CB0150) PARM(&CNAM &CSEQ &STAT)
               GOTO       CMDLBL(DBERR)
             ENDDO
 
/** Reset Cob Flag = ' '  */
             CHGVAR     VAR(&STAT) VALUE('N')
             CALL       PGM(CB0150) PARM(&CNAM &CSEQ &STAT)
             COMMIT
 
/** Statement below will call RTVMBRD command to retrieve the current */
/** record count of LEMQLGL6 which is selected as LGSTAT = 'S'.       */
/** This will continously loop until  record count is equal to zero   */
/** which means that all records has been processed by API programs   */
CHECKER:
             CALL       PGM(LE000501) PARM(&AETIME)
             CHGVAR     VAR(&PRVCONT) VALUE(0)
WAIT:
             RTVSYSVAL  SYSVAL(QDATETIME) RTNVAR(&ACTIME)
             IF         COND(&ACTIME *GT &AETIME) THEN(DO)
               SNDPGMMSG  MSG('This job has been terminated since it +
                          has reached the maximum amount of time to +
                          wait and there is still no response from +
                          Java. A database connection error maybe +
                          encountered, please check the WAS server +
                          and restart the component. Ensure that +
                          the queue are cleared to prevent +
                          duplicate entries') TOMSGQ(MOPERQ MRUNQ)
               CHGVAR     VAR(&STAT) VALUE('Y')
               CALL       PGM(CB0150) PARM(&CNAM &CSEQ &STAT)
               GOTO       CMDLBL(DBERR)
             ENDDO
 
             DLYJOB     DLY(3)
             RTVMBRD    FILE(LEMQLGL6) NBRCURRCD(&RECCONT)
 
             IF         COND(&RECCONT *NE &PRVCONT) THEN(DO)
               CHGVAR     VAR(&PRVCONT) VALUE(&RECCONT)
               CALL       PGM(LE000501) PARM(&AETIME)
             ENDDO
 
             IF         COND(&RECCONT = 0) THEN(DO)
                                                                                       /*MD022807I*/
/** Process 'R'esent Tansactions */                                                    /*MD022807I*/
             RTVMBRD    FILE(LEMQLGLG) NBRCURRCD(&RECCNT3)                             /*MD022807I*/
             IF         COND(&RECCNT3 *GT 0) THEN(DO)                                  /*MD022807I*/
                IF         COND(&COUNTER *LE 5) THEN(DO)                               /*MD022807I*/
                   CALL    PGM(LE000504) PARM('LEC000456' 'Send  ')                    /*MD022807I*/
                   MONMSG  MSGID(CPF0000)                                              /*MD022807I*/
                   CHGVAR  VAR(&COUNTER) VALUE(&COUNTER + 1)                           /*MD022807I*/
                   GOTO    CMDLBL(CHECKER)                                             /*MD022807I*/
                ENDDO                                                                  /*MD022807I*/
                ELSE       CMD(DO)                                                     /*MD022807I*/
                   CALL    PGM(LE000504) PARM('LEC000456' 'Update')                    /*MD022807I*/
                ENDDO                                                                  /*MD022807I*/
             ENDDO                                                                     /*MD022807I*/
 
/** Process 'H'eld transactions */
             RTVMBRD    FILE(LEMQLGLA) NBRCURRCD(&RECCNT2)
             IF         COND(&RECCNT2 *GT 0) THEN(DO)
               OVRDBF     FILE(LEMQHELD) TOFILE(LEMQLGLA)
               OVRDBF     FILE(LEPDUFL7) SHARE(*NO)
               OVRDBF     FILE(LEPDUEL7) SHARE(*NO)
 
               CALL       PGM(LE000502)
               DLTOVR     FILE(*ALL)
               MONMSG     MSGID(CPF0000)
 
               GOTO       CMDLBL(CHECKER)
             ENDDO
                                                                                       /*MD022807E*/
/***Process*'R'esent*Tansactions**/                                          /*MD022807E MD022807I*/
/**********  RTVMBRD    FILE(LEMQLGLG) NBRCURRCD(&RECCNT3)                   /*MD022807E MD022807I*/
/**********  IF         COND(&RECCNT3 *GT 0) THEN(DO)                        /*MD022807E MD022807I*/
/**********     IF         COND(&COUNTER *LE 3) THEN(DO)                     /*MD022807E MD022807I*/
/**********        CALL    PGM(LE000504) PARM('LEC000456' 'Send  ')          /*MD022807E MD022807I*/
/**********        MONMSG  MSGID(CPF0000)                                    /*MD022807E MD022807I*/
/**********        CHGVAR  VAR(&COUNTER) VALUE(&COUNTER + 1)                 /*MD022807E MD022807I*/
/**********        GOTO    CMDLBL(CHECKER)                                   /*MD022807E MD022807I*/
/**********     ENDDO                                                        /*MD022807E MD022807I*/
/**********     ELSE       CMD(DO)                                           /*MD022807E MD022807I*/
/**********        CALL    PGM(LE000504) PARM('LEC000456' 'Update')          /*MD022807E MD022807I*/
/**********     ENDDO                                                        /*MD022807E MD022807I*/
/**********  ENDDO                                                           /*MD022807E MD022807I*/
 
/** Reset Cob Flag = ' '  */
               OVRPRTF    FILE(LE000452P1) USRDTA(PROCESSED)
               CALL       PGM(LE000452) PARM('LEC000456' 'P')
               OVRPRTF    FILE(LE000452P1) USRDTA(REPAIR) +
                          SPLFNAME(LE000452P2)
               CALL       PGM(LE000452) PARM('LEC000456' 'E')
               GOTO       CMDLBL(END)
             ENDDO
             IF         COND(&ENDF = 'Y') THEN(DO)
               GOTO       CMDLBL(END)
             ENDDO
             GOTO       CMDLBL(WAIT)
 
/** Skip to End */
             GOTO       CMDLBL(END)
 
DBERR:       SNDPGMMSG  MSG('Job Terminated, Database in Error') +
                           TOMSGQ(MOPERQ MRUNQ)
 
             CHGJOB     SWS(XXXXXX11)
END:
             CHGVAR     VAR(&CPYFLD) VALUE('(c) Misys International +
                          Banking Systems Ltd 2013')
ENDPGM
