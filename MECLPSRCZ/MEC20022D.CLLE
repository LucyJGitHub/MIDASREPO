/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI *  TEXT('Midas MS MX IMM Action Test')                         */
/*********************************************************************/
/*                                                                   */
/*       Midas - Message Management Module                           */
/*                                                                   */
/*       MEC20022D - MS MX IMM Extraction Control - Batch process    */
/*                                                                   */
/*       (c) Finastra International Limited 2021                     */
/*                                                                   */
/*       Last Amend No. CSW122 *CREATE     Date 04Oct21              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       CSW122 - SWIFT ISO 20022                                    */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&RTN_CODE &ACTION)

/** Copyright statement defination  */

             DCL        VAR(&CPYFLD) TYPE(*CHAR) LEN(64) VALUE('(c) Finastra +
                          International Limited 2021')

/** Declare variables */

             DCL        VAR(&RTN_CODE) TYPE(*CHAR) LEN(7)
             DCL        VAR(&ACTION) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TYPE) TYPE(*CHAR) LEN(1)
             DCL        VAR(&JOB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&USER) TYPE(*CHAR) LEN(10)
             DCL        VAR(&JOBNBR) TYPE(*CHAR) LEN(6)
             DCL        VAR(&FLDLEN) TYPE(*DEC) LEN(5 0) VALUE(50)
             DCL        VAR(&WAIT) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&DATA) TYPE(*CHAR) LEN(50)
             DCL        VAR(&DELAY_TIME) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&TEMP) TYPE(*CHAR) LEN(10)
             DCL        VAR(&JOB_INFO) TYPE(*CHAR) LEN(512)
             DCL        VAR(&FORMAT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&JOB26) TYPE(*CHAR) LEN(26)
             DCL        VAR(&INT_JOB_ID) TYPE(*CHAR) LEN(16)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(132)

/** Global Monitor Message */

             MONMSG     MSGID(CPF0000 RPG0000 MCH0000) +
                           EXEC(GOTO ABNORMAL)

/**           Copyright statement definition - at runtime             */

             CHGVAR     VAR(&CPYFLD) VALUE('(c) +
                          Finastra International Limited')

/** Send Message to MRUNQ */

             SNDPGMMSG  MSG('MEC20022D - MS ME IMM Extraction Test +
                          Action') TOMSGQ(MRUNQ)
             CHGJOB     SWS(XXXXXX00)

             CHGVAR     VAR(&RTN_CODE) VALUE(' ')


/** If action is Start */

             IF         COND(&ACTION *EQ 'Start     ') THEN(DO)

/** Allocate data queue *EXCL to see if process active */

             ALCOBJ     OBJ((MSMXIMM *DTAQ *EXCL)) WAIT(60)
             MONMSG     MSGID(CPF1002) EXEC(DO)

/** Process already active */

             CHGVAR     VAR(&RTN_CODE) VALUE('MIN0619')
             GOTO       CMDLBL(ENDCLPGM)
             ENDDO

/** Change allocation to shared read */
             ALCOBJ     OBJ((MSMXIMM *DTAQ *SHRUPD)) WAIT(0)
             DLCOBJ     OBJ((MSMXIMM *DTAQ *EXCL))

/** Process is not active - if interactive submit to batch */

             RTVJOBA    TYPE(&TYPE)
             IF         COND(&TYPE *EQ '1') THEN(DO)
             CALL       PGM(MEC20022) PARM(&RTN_CODE)
             IF         COND((&RTN_CODE *NE '       ')  *AND +
                             (&RTN_CODE *NE 'MIN0619')) THEN(DO)
             GOTO       CMDLBL(ABNORMAL)
             ENDDO

             DLCOBJ     OBJ((MSMXIMM *DTAQ *SHRUPD))
             ENDDO
/** End 'Start' */
             ENDDO

/** If action is Next */

             IF         COND(&ACTION *EQ 'Next      ') THEN(DO)

/** Set delay time */

             CHGVAR     VAR(&DELAY_TIME) VALUE(10)

/** Read data queue for next prompt for action */

             CHGVAR     VAR(&WAIT) VALUE(1)

 RDTAQ:
             CALL       PGM(QRCVDTAQ) PARM('MSMXIMM' '*LIBL' &FLDLEN &DATA &WAIT)

/** No information */

             IF         COND(&FLDLEN *EQ 0) THEN(DO)
             CHGVAR     VAR(&RTN_CODE) VALUE('MIN0620')
             ENDDO

/** Information */

             IF         COND(&FLDLEN *GT 0) THEN(DO)
             CHGVAR     VAR(&RTN_CODE) VALUE('MIN0621')

/** Close down requested */

             IF         COND(%SST(&DATA 1 3) *EQ 'End') THEN(DO)
             CHGVAR     VAR(&RTN_CODE) VALUE('MIN0128')
             RETURN
             ENDDO
             ENDDO

/** Delay job by wait time (first time only) */

             IF         COND(&WAIT *GE 0) THEN(DO)
             DLYJOB     DLY(&DELAY_TIME)
             ENDDO

/** If no information from prior read of data queue */
/** Re-read queue for ever */

             IF         COND(&RTN_CODE *EQ 'MIN0620') THEN(DO)
             CHGVAR     VAR(&WAIT) VALUE(-1)
             GOTO       CMDLBL(RDTAQ)
             ENDDO

/** Else read all information on data queue */
/** and exit */

             ELSE       CMD(DO)
             CHGVAR     VAR(&WAIT) VALUE(1)

 ADTAQ:
             CALL       PGM(QRCVDTAQ) PARM('MSMXIMM' '*LIBL' &FLDLEN &DATA &WAIT)

/** No information */

             IF         COND(&FLDLEN *EQ 0) THEN(DO)
             RETURN
             ENDDO

/** Information */

             IF         COND(&FLDLEN *GT 0) THEN(DO)
             CHGVAR     VAR(&RTN_CODE) VALUE('MIN0621')

/** Close down requested */

             IF         COND(%SST(&DATA 1 3) *EQ 'End') THEN(DO)
             CHGVAR     VAR(&RTN_CODE) VALUE('MIN0128')
             RETURN
             ENDDO
             ENDDO
             GOTO       CMDLBL(ADTAQ)
             ENDDO
/** End 'Next' */
             ENDDO


/** If action is Re-submit */

             IF         COND(&ACTION *EQ 'Re-submit ') THEN(DO)
             CALL       PGM(MEC20022) PARM(&RTN_CODE)
             IF         COND(&RTN_CODE *NE '       ') THEN(DO)
             GOTO       CMDLBL(ABNORMAL)
             ENDDO

             DLCOBJ     OBJ((MSMEIMM *DTAQ *SHRUPD))
             ENDDO

/** If action is End */

             IF         COND(&ACTION *EQ 'End       ') THEN(DO)

/** Allocate data queue *SHRUPD to see if process active */

             ALCOBJ     OBJ((MSMXIMM *DTAQ *SHRUPD)) WAIT(0)
             MONMSG     MSGID(CPF1002) EXEC(DO)

/** Process cannot be killed re-try later */

             CHGVAR     VAR(&RTN_CODE) VALUE('RETRY')
             GOTO       CMDLBL(ENDCLPGM)
             ENDDO

/** Send data queue entry to End process */

             CHGVAR     VAR(&DATA) VALUE(' ')
             CHGVAR     VAR(&DATA) VALUE('End')

             CALL       PGM(QSNDDTAQ) PARM('MSMXIMM' '*LIBL' &FLDLEN +
                          &DATA)

/** If termination is interactive then show info screen */

             RTVJOBA    TYPE(&TYPE)
             IF         COND(&TYPE *EQ '1') THEN(DO)
             CHGVAR     VAR(&MSGDTA) VALUE(' ')
             CALL       PGM(MEC1027) PARM(&RTN_CODE 'MIN0615' +
                          'GBMEMSG  ' &MSGDTA '          ' ' ' +
                          'MEC20022D' 'Y')
             ENDDO

/** Try to allocate data queue *EXCL */

ALCOBJ:
             ALCOBJ     OBJ((MSMXIMM *DTAQ *EXCL)) WAIT(120)
             MONMSG     MSGID(CPF1002) EXEC(DO)

/** Check activity of job submitted */

             RTVDTAARA  DTAARA(MEMXDTA (9 10)) RTNVAR(&TEMP)
             CHGVAR     VAR(%SST(&JOB26 1 10)) VALUE(&TEMP)
             RTVDTAARA  DTAARA(MEMXDTA (19 10)) RTNVAR(&TEMP)
             CHGVAR     VAR(%SST(&JOB26 11 10)) VALUE(&TEMP)
             RTVDTAARA  DTAARA(MEMXDTA (29 6)) RTNVAR(&TEMP)
             CHGVAR     VAR(%SST(&JOB26 21 6)) VALUE(%SST(&TEMP 1 6))
             CHGVAR     VAR(&FORMAT) VALUE('JOBI0200')
             CALL       PGM(MEC1026) PARM(&RTN_CODE &JOB_INFO +
                          &FORMAT &JOB26 &INT_JOB_ID)

/** If inactive end in error */

             IF         COND((&RTN_CODE *EQ 'MIN0125') *OR +
                             (%SST(&JOB_INFO 51 10) *EQ '*OUTQ  ') +
                        ) THEN(DO)
             GOTO       CMDLBL(ABNORMAL)
             ENDDO

/** Kill process defined in MEMXDTA */

             RTVDTAARA  DTAARA(MEMXDTA (9 10)) RTNVAR(&JOB)
             RTVDTAARA  DTAARA(MEMXDTA (19 10)) RTNVAR(&USER)
             RTVDTAARA  DTAARA(MEMXDTA (29 6)) RTNVAR(&JOBNBR)

/** If termination is interactive then show info screen */

             RTVJOBA    TYPE(&TYPE)
             IF         COND(&TYPE *EQ '1') THEN(DO)
             CHGVAR     VAR(&MSGDTA) VALUE(' ')
             CHGVAR     VAR(&MSGDTA) VALUE(&JOB *CAT &USER *CAT +
                          &JOBNBR)
             CALL       PGM(MEC1027) PARM(&RTN_CODE 'MIN0616'+
                          'GBMEMSG  ' &MSGDTA '          ' ' ' +
                          'MEC20022D' 'Y')
             ENDDO

/** If jobq then *IMMED */

             IF         COND((%SST(&JOB_INFO 51 10) *EQ '*JOBQ  ') +
                        ) THEN(DO)
             ENDJOB     JOB(&JOBNBR/&USER/&JOB) OPTION(*IMMED)
             MONMSG     MSGID(CPF1362 CPF1363 CPF1361 CPF1352)
             GOTO       CMDLBL(ALCOBJ)
             ENDDO

/** If active then *CNTRLD for 10 minutes */

             IF         COND((%SST(&JOB_INFO 51 10) *EQ '*ACTIVE') +
                        ) THEN(DO)
             ENDJOB     JOB(&JOBNBR/&USER/&JOB) OPTION(*CNTRLD) +
                          DELAY(600)
             MONMSG     MSGID(CPF1362 CPF1363 CPF1361 CPF1352)
             GOTO       CMDLBL(ALCOBJ)
             ENDDO

             ENDDO

/** Check activity of job submitted */

             RTVDTAARA  DTAARA(MEMXDTA (9 10)) RTNVAR(&TEMP)
             CHGVAR     VAR(%SST(&JOB26 1 10)) VALUE(&TEMP)
             RTVDTAARA  DTAARA(MEMXDTA (19 10)) RTNVAR(&TEMP)
             CHGVAR     VAR(%SST(&JOB26 11 10)) VALUE(&TEMP)
             RTVDTAARA  DTAARA(MEMXDTA (29 6)) RTNVAR(&TEMP)
             CHGVAR     VAR(%SST(&JOB26 21 6)) VALUE(%SST(&TEMP 1 6))
             CHGVAR     VAR(&FORMAT) VALUE('JOBI0200')

/** If job specified */

             IF         COND(&JOB26 *NE ' ') THEN(DO)
             CALL       PGM(MEC1026) PARM(&RTN_CODE &JOB_INFO +
                          &FORMAT &JOB26 &INT_JOB_ID)

/** If jobq then *IMMED */

             IF         COND((%SST(&JOB_INFO 51 10) *EQ '*JOBQ  ') +
                        ) THEN(DO)
             RTVDTAARA  DTAARA(MEMXDTA (9 10)) RTNVAR(&JOB)
             RTVDTAARA  DTAARA(MEMXDTA (19 10)) RTNVAR(&USER)
             RTVDTAARA  DTAARA(MEMXDTA (29 6)) RTNVAR(&JOBNBR)
             ENDJOB     JOB(&JOBNBR/&USER/&JOB) OPTION(*IMMED)
             MONMSG     MSGID(CPF1362 CPF1363 CPF1361 CPF1352)
             GOTO       CMDLBL(ALCOBJ)
             ENDDO
             ENDDO

/** Clear data queue */

             CALL       PGM(QCLRDTAQ) PARM('MSMXIMM' '*LIBL ')

             CHGDTAARA  DTAARA(MEMXDTA (9 26)) VALUE(' ')
             DLCOBJ     OBJ((MSMXIMM *DTAQ *EXCL))
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)
             DLCOBJ     OBJ((MSMXIMM *DTAQ *SHRUPD))
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)

             ENDDO
/** End 'End' */
             GOTO       CMDLBL(ENDCLPGM)

/** Abnormal termination processing */
/** Terminate with escape message */

ABNORMAL:
             RCLRSC     LVL(*CALLER)
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)
             CHGJOB     SWS(XXXXXX11)
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)

             DLCOBJ     OBJ((MSMXIMM *DTAQ *EXCL))
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)

             DLCOBJ     OBJ((MSMXIMM *DTAQ *SHRUPD))
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)
             ROLLBACK
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)

             SNDPGMMSG  MSG('Program MEC20022D ended abnormally') +
                          TOMSGQ(MOPERQ MRUNQ)
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('Program +
                          MEC20022D ended abnormally') MSGTYPE(*ESCAPE)
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000)

 ENDCLPGM:
             ENDPGM
