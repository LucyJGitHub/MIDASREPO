     H        1
      *****************************************************************
/*STD *  RPGBASE                                                      *
/*EXI *  TEXT('Midas MM - Limits by currency maintainance')
     F****************************************************************
     F*                                                              *
     F*  Midas  MM DEALER MODULE
     F*                                                              *
     F*     MM0007    - MM LIMITS BY CURRENCY MAINTAINANCE           *
      *                                                              *
      *  (c) Misys International Banking Systems Ltd. 2001            *
      *                                                              *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      *  Last Amend No. CSD031             Date 10Apr06               *
      *  Prev Amend No. CSD027             Date 09Dec05               *
      *                 CAAA03             Date 31Mar03               *
      * Midas Release 4 --------------- Base -------------------------*
      * Midas DBA 3.00 ---------------- Base -------------------------*
      *                 S01319             Date 27Sep91               *
      *                 E20774             Date 14Mar90               *
      *                    BHF204             DATE   17JUL90         *
      *                    E12264             DATE   23/03/88        *
      *                                                              *
      ****************************************************************
      *                                                              *
      *  CSD031 - Enhanced Centralised Static Data (Recompile)        *
      *  CSD027 - Conversion Of Customer Number to Alpha              *
      * CAAA03 - Webfacing Changes (recompile)                       *
      * S01319 - Remove redundant processing                         *
      *          Bring up to R10 standards
      * E20774 - REPLACE QCAEXEC WITH QCMDEXC                        *    E20774
      * BHF204 - RECOMPILE AS FILE MMLMCYLL HAS BEEN CHANGED         *
      * E12264 - REPLACE SECOND 'DB ERROR 002' WITH 'DB ERROR 004'   *
      *                                                              *
      ****************************************************************
      /EJECT
      ****************************************************************
      *
      **  Indicator Function Summary
      *
      * ID F  C  H  L    FUNCTION OF INDICATORS
      * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      *
      *
      *       KC         Exit program.
      *       KL         Return to blank screen or, if screen blank,
      *                  exit program.
      *       KH         Advance to next record.
      *       KG         Go to previous record.
      *       KP         Select processing required.
      *       KJ         Confirm delete.
      *
      *       10         Controls SHZEND on Display File.
      *
      *       20         Error on field DDACTN.
      *
      *       21         Error on field DDCCY .                       *
      *       22         Error on field DDLMIT.                       *
      *
      *       29         Error has occurred in screen validation.
      *
      *       30         F10  is enabled.
      *
      *       31         Position cursor under key.
      *       32         Position cursor under first non-key field.
      *
      *       39         Select processing in progress.
      *       41         Controls SHZCLR on select screen.
      *       42         Allows write to msg control fmt without the
      *                  screen being displayed.
      *       50         ROLLUP key pressed.
      *       58         No more selected records on subfile.
      *
      *       60         Failure on read of display file.
      *                                                               *
      *       61         File LF/MMLMCULL is locked.                  *
      *                                                               *
      *       62         External tranaction has occurred on a record.*
      *                                                               *
      *       70         End Of File on reading LF/MMLMCYLL.          *
      *       71         Beginning Of File on reading LF/MMLMCYLL.    *
      *       72         Fail on chain to LF/MMLMCYLL                 *
      *
      *       75         Fail on chain to file in SR #ZI.
      *       76         Record on MMTTOTLL locked.
      *       77         Record on MMTTOTLL not present.
      *
      *          U7    Set on with U8 if a database error occurs.
      *          U8    File out of balance if on on its own.
      *                                                               *
      *                                                               *
      *****************************************************************
      /EJECT
     F*  C R E A T I O N     P A R A M E T E R S                      *
     F*                                                               *
     F*                                                               *
     F*****************************************************************
     F*FDICDRLLIF**E**********K********DISK*********KINFSR**PSSR**********S01319
     F************TABTB11F**************************KIGNORE***************S01319
     F************TABTB20F**************************KIGNORE***************S01319
     FMMLMCULLUF  E           K        DISK         KINFSR INFSR A
     F                                              KINFDS INFDS
     F                                              KCOMIT
     FMMTTOTLLUF  E                    DISK         KINFSR *PSSR      UC
     F                                              KINFDS @MMTTO
     F                                              KCOMIT
     F*FDCCYTLLIF**E**********K********DISK*********KINFSR**PSSR**********S01319
     FMMLMCYLLIF  E           K        DISK         KINFSR *PSSR
     F            MMLMCYP0                          KRENAMEMMLMCYL1
     FMM0007DDCF  E                    WORKSTN      KINFSR *PSSR
     F                                        @RRN  KSFILE MM0007S3
      *****************************************************************
      /EJECT
      *
      **  Array to hold key field descriptive text for screen messages.
     E                    @TXT    1   1 25
      *
      **  Array to hold override command.
     E                    @OVR    1   1 35
     E                    CPY@    1   1 80
      /EJECT
     I*TABTG10F***********************************************************S01319
     C********************************************************************S01319
     C****Fields*renamed*to*avoid*confusion*between*table*file*fields.****S01319
     I**************RECI****************************CRECI*****************S01319
     I**************KEY*****************************CKEY******************S01319
     C********************************************************************S01319
     I*TABTB10F***********************************************************S01319
     C********************************************************************S01319
     C****Fields*renamed*to*avoid*confusion*between*table*file*fields.****S01319
     I**************RECI****************************IRECI*****************S01319
     I**************LCD*****************************ILCD******************S01319
     IINFDS       DS
      *
      **  Data structure for file status of MMLMCULL
     I                                     *STATUS  STATUS
     I@MMTTO      DS
      *
      **  Data structure for file status of MMTTOTLL
     I                                        9   9 @OPN
     IPSDS       SDS
      *
      **  Program status data structure.
      **  Field containing workstaion  ID.
     I                                      244 253 @JOB
      **  Field containing user ID.
     I                                      254 263 @USER
      *
     I           UDS
      **  Local data area for data base errors.
      **  Field containing name of database file in error.
     I                                      134 141 DBFILE
      **  Field containing key value causing database error.
     I                                      142 170 DBKEY
      **  Field containing name of program causing database error.
     I                                      171 180 DBPGM
      **  Field containing number of database error.
     I                                      181 183 DBASE
      *
     IDNATN       DS                              5
      * DATA STRUCTURE TO UPDATE LAST TRANSACTION NUMBER
     I                                        1   50FNATN
     ICMTTXT      DS                             67
      *
      **  COMIT TEXT
     I                                        1   50NATN
     I                                        6   7 MDID
     I                                        8  15 PGMN
     I                                       16  18 WSIDX
     I                                       19  240MTIME
     I                                       25  25 ACTCDX
     I                                       26  35 USRIDX
     I                                       51  53 @CCYX
     I                                       54  56 @LMITX
     I@UPDT       DS                              7
      *
      ** Data structure to hold the time of update from MIDAS run date.
     I                                        1   20HZDLUP
     I                                        3   5 HZMLUP
     I                                        6   70HZYLUP
      *
     I@DATA       DS                             45
      *
      ** Data structure to hold the data for screen messages.
     I                                        1  25 @DATA1
     I                                       26  45 @DATA2
      *
     I*@KEY********DS*****************************12**********************S01319
     C********************************************************************S01319
     C****Data*structure*to*set*up*the*key*for*the*Ccy*Code*file*for******S01319
     C****the*first*default*Ccy.******************************************S01319
     I****************************************1***2*@KEY1*****************S01319
     I****************************************9**11*@KEY2*****************S01319
     I***************************************12**12*@KEY3*****************S01319
     ISDBANK    E DSSDBANKPD                                              S01319
      ** BANK DETAILS ACCESSED VIA ACCESS PROGRAM                         S01319
      *                                                                   S01319
     ISDCURR    E DSSDCURRPD                                              S01319
      ** CURRENCY DETAILS ACCESSED VIA ACCESS PROGRAM                     S01319
     I*                                                                   S01319
     IDSFDY     E DSDSFDY                                                 S01319
     I* FIRST DS FOR ACCESS PROGRAMS, SHORT DATA STRUCTURE                S01319
     I*                                                                   S01319
     IDSSDY     E DSDSSDY                                                 S01319
     I* SECOND DS FOR ACCESS PROGRAMS, LONG DATA STRUCTURE                S01319
      *                                                                   S01319
     IRUNDAT      DS                                                      S01319
     I** DATA STRUCTURE FOR MULTIBRANCH INDICATOR USING RUNDAT.           S01319
     I                                       13  13 @MBIN                 S01319
     I*                                                                   S01319
     IZMUSER      DS                             17                       S01319
     I                                       11  13 DBRN                  S01319
      /EJECT
      *****************************************************************
      *                                                               *
      * MAIN     - control process                                    *
      *                                                               *
      * CALLS    #A       - initialize                                *
      *          #B       - main processing                           *
      *          #C       - terminate                                 *
      *                                                               *
      * CALLED BY         -                                           *
      *                                                               *
      * FLDS USED         -                                           *
      *                                                               *
      *****************************************************************
      *
      **  Initial processing.
     C                     EXSR #A
      *
      **  Main processing
     C                     EXSR #B
      *
      **  Termination processing
     C                     EXSR #C
      *
     C           ENDPGM    TAG                             **ENDPGM**
      *****************************************************************
      /EJECT
      *****************************************************************
      * SUBROUTINES USED                                              *
      *                                                               *
      *  01  #B       - main processing                               *
      *  02  #ZL      - displays reads and resets main screen         *
      *  03  #ZA      - resets screen indicators and message q        *
      *  04  #BB      - cf3 processing                                *
      *  05  #BC      - cf4 processing                                *
      *  06  #BA      - cf2 processing                                *
      *  07  #ZE      - blanks out screen                             *
      *  08  #ZD      - moves file fields to screen                   *
      *  09  #ZF      - moves work fields to screen                   *
      *  10  #BD      - enter processing                              *
      *  11  #BDA     - action code I                                 *
      *  12  #ZC      - action code A                                 *
      *  13  #ZK      - gets and displays record                      *
      *  14  #ZI      - validates input to screen fields              *
      *  15  #ZJ      - moves valid fields to file                    *
      *  16  #ZG      - updates file                                  *
      *  17  #BDAA    - writes record to file                         *
      *  18  #ZN      - update the totals file                        *
      *  19  ZTNLU1   - update commit text                            *
      *  20  #ZB      - action code D                                 *
      *  21  #ZM      - cf24 processing                               *
      *  22  #BF      - cf15 processing                               *
      *  23  #BFA     - cf15 A                                        *
      *  24  #BFB     - cf15 D                                        *
      *  25  #A       - initialize                                    *
      *  26  #C       - terminate                                     *
      *  27  INFSR    - file error                                    *
     C***28**ZA0150***-*get*icd*1*****************************************S01319
      *  29  *PSSR    - program error                                 *
      *                                                               *
      * EXTERNAL ROUTINE                                              *
      *  30  ZA0250   - clear message queue                           *
      *  31  ZA0240   - send message                                  *
      *  32  ZA0440   - send message with data                        *
      ***33**QCAEXEC**-*execute*cl*command                            *   E20774
      *  33  QCMDEXC  - execute cl command                            *   E20774
      *                                                               *
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #B       - main processing                                    *
      *                                                               *
      * CALLS    #ZL      - displays reads and resets main screen     *
      *          #BA      - cf2 processing                            *
      *          #BB      - cf3 processing                            *
      *          #BC      - cf4 processing                            *
      *          #BF      - cf15 processing                           *
      *          #ZM      - cf24 processing                           *
      *                                                               *
      * CALLED BY  MAIN   - control process                           *
      *                                                               *
      * FLDS USED         -                                           *
      *                                                               *
      *****************************************************************
     C           #B        BEGSR
      *
      **  Continue processing until program exit is required.
     C           *INKC     DOWEQ'0'                        B1
      *
      **  Process screen.
     C                     EXSR #ZL                        *1
      *
      **  Process screen input - depending upon input type.
      *
      **  If CA1 is input exit main processing immediately.
     C           *INKC     CABEQ'1'       #B9              *1
      *
      **  F12 input.
     C           *INKL     CASEQ'1'       #BA              *1
      *
      **  F8 input.
     C           *INKH     CASEQ'1'       #BB              *1
      *
      **  F7 input.
     C           *INKG     CASEQ'1'       #BC              *1
      *
      **  F15 input.
     C           *INKP     CASEQ'1'       #BF              *1
      *
      **  F10 input - only possible after valid 'ENTER' processing
      **               in delete mode.
     C           *INKJ     CASEQ'1'       #ZM              *1
      *
      **  'ENTER' input.
     C                     CAS            #BD              *1
      *
     C                     END                             *1
      *
     C                     END                             E1
      *
     C           #B9       ENDSR                           **#B9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZL      - displays reads and resets main screen              *
      *                                                               *
      * CALLS    #ZA      - resets screen indicators and message q    *
      *                                                               *
      * CALLED BY  #B     - main processing                           *
      *            #BF    - cf15 processing                           *
      *            #BFA   - cf15 A                                    *
      *            #BFB   - cf15 D                                    *
      *                                                               *
      * FLDS USED         -                                           *
      *                                                               *
      *****************************************************************
     C           #ZL       BEGSR
      *
      **  Retrieve time and place in screen field.
     C                     TIME           DDTIME
      *
      **  Display screen.
     C                     WRITEMM0007S0
     C                     WRITEMM0007D0
      *
      **  Read screen.
     C                     READ MM0007S0                 60
      *
      **  Reset error indicators and clear screen message queue.
     C                     EXSR #ZA
      *
     C           #ZL9      ENDSR                           **#ZL9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZA      - resets screen indicators and message q             *
      *                                                               *
      * CALLS    ZA0250   - clear message queue                       *
      *                                                               *
      * CALLED BY  #ZL    - displays reads and resets main screen     *
      *            #ZG    - updates file                              *
      *            #BDAA  - writes record to file                     *
      *            #ZN    - update the totals file                    *
      *            #BF    - cf15 processing                           *
      *                                                               *
      * FLDS USED         -                                           *
      *                                                               *
      *****************************************************************
     C           #ZA       BEGSR
      *
      **  Reset all field error indicators.
     C                     MOVE '0'       *IN20
     C                     MOVE '0'       *IN21
     C                     MOVE '0'       *IN22
     C                     MOVE '0'       *IN23
      *
      **  Reset cursor positioning indicators.
     C                     MOVE '0'       *IN31
     C                     MOVE '0'       *IN32
      *
      **  Reset validation error indicator.
     C                     MOVE '0'       *IN29
      *
      **  Reset indicator enabling F10.
     C                     MOVE '0'       *IN30
      *
      **  Reset indicator showing external update.
     C                     MOVE '0'       *IN62
      *
      **  Clear screen message queue.
     C                     CALL 'ZA0250'
      *
     C           #ZA9      ENDSR                           **#ZA9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #BB      - cf3 processing                                     *
      *                                                               *
      * CALLS    ZA0240   - send message                              *
      *          #ZD      - moves file fields to screen               *
      *                                                               *
      * CALLED BY  #B     - main processing                           *
      *                                                               *
      * FLDS USED  @CCY   - saved currency code                       *
      *            @MSGID - message id                                *
      *                                                               *
      *****************************************************************
     C           #BB       BEGSR
      *
      **  Set action code to E.
     C                     MOVE 'E'       DDACTN
      *
      **  If the key field has changed or is blank, set file pointer
      **  using key.
     C           DDCCY     IFNE @CCY                       B1
     C           DDCCY     OREQ *BLANKS                    X1
      *
     C           DDCCY     SETLLMMLMCYLL                   *1
      *
     C                     END                             E1
      *
      **  If the key field is the same, and *IN71 is on, the beginning
      **  of the file was passed whilst the first record was displayed.
      **  Set the file pointer to read the second record.
     C           DDCCY     IFEQ @CCY                       B1
     C           *IN71     ANDEQ'1'                        X1
      *
     C           DDCCY     SETGTMMLMCYLL                   *1
      *
     C                     END                             E1
      *
      **  Read the next record on file
      *
      **  Read records until valid record found.
     C           *IN70     DOUEQ'1'                        B1
     C           HZDLTF    OREQ ' '                        X1
      *
     C                     READ MMLMCYLL                 70*1
      *
     C                     END                             E1
      *
      **  If *IN70 is on then the end of the file has been reached.
     C           *IN70     IFEQ '1'                        B1
      *
      **  Reset the file pointer for the next read operation.
      **  - If the key is that of the last record on file, a subsequent
      **    F7 will read the record prior to the last record.
      **  - If the key is beyond the last record on file, a subsequent
      **    F7 will read the the last record.
     C           DDCCY     SETGTMMLMCYLL                   *1
      *
      **  If the key field is blank then no valid records exist.
     C           DDCCY     IFEQ *BLANKS                    B*2
      *
      **  Set up error output for screen.
     C                     MOVEL'FXM1006' @MSGID           **2
     C                     CALL 'ZA0240'                   **2
     C                     PARM           @MSGID           **2
      *
      **  By-pass further F8 processing.
     C                     GOTO #BB9                       **2
      *
     C                     END                             E*2
      *
      **  Set up error output for screen.
     C                     MOVEL'FXM1002' @MSGID           *1
     C                     CALL 'ZA0240'                   *1
     C                     PARM           @MSGID           *1
      *
      **  By-pass further F8 processing.
     C                     GOTO #BB9                       *1
      *
     C                     END                             E1
      *
      **  A valid record has been read - move file fields into program
      **  work fields and screen fields.
     C                     EXSR #ZD
      *
     C           #BB9      ENDSR                           **#BB9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #BC      - cf4 processing                                     *
      *                                                               *
      * CALLS    ZA0240   - send message                              *
      *          #ZD      - moves file fields to screen               *
      *                                                               *
      * CALLED BY  #B     - main processing                           *
      *                                                               *
      * FLDS USED  @CCY   - saved currency code                       *
      *            @MSGID - message id                                *
      *                                                               *
      *****************************************************************
     C           #BC       BEGSR
      *
      **  Set action code to E.
     C                     MOVE 'E'       DDACTN
      *
      **  If the key field has changed, or is blank, set file
      **   pointer using key.
     C           DDCCY     IFNE @CCY                       B1
     C           DDCCY     OREQ *BLANKS                    X1
      *
     C           DDCCY     SETLLMMLMCYLL                   *1
      *
     C                     END                             E1
      *
      **  If the key field is the same, and *IN70 is on, the end of the
      **  file was passed whilst the last record was displayed.
      **  Set the file pointer to read the penultimate record.
     C           DDCCY     IFEQ @CCY                       B1
     C           *IN70     ANDEQ'1'                        X1
      *
     C           DDCCY     SETLLMMLMCYLL                   *1
      *
     C                     END                             E1
      *
      **  Read the previous record on file
      *
      **  Read record previous to file pointer, until valid record found.
     C           *IN71     DOUEQ'1'                        B1
     C           HZDLTF    OREQ ' '                        X1
      *
     C                     READPMMLMCYLL                 71*1
      *
     C                     END                             E1
      *
      **  If *IN71 is on then the start of the file has been reached.
     C           *IN71     IFEQ '1'                        B1
      *
      **  Reset the file pointer for the next read operation.
     C           DDCCY     SETLLMMLMCYLL                   *1
      *
      **  Set up error output for screen.
     C                     MOVEL'FXM1003' @MSGID           *1
     C                     CALL 'ZA0240'                   *1
     C                     PARM           @MSGID           *1
      *
      **  By-pass further F7 processing.
     C                     GOTO #BC9                       *1
      *
     C                     END                             E1
      *
      **  A valid record has been read - move file fields into program
      **  work fields and screen fields.
     C                     EXSR #ZD
      *
     C           #BC9      ENDSR                           **#BC9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #BA      - cf2 processing                                     *
      *                                                               *
      * CALLS    #ZE      - blanks out screen                         *
      *                                                               *
      * CALLED BY  #B     - main processing                           *
      *                                                               *
      * FLDS USED         -                                           *
      *                                                               *
      *****************************************************************
     C           #BA       BEGSR
      *
      **  Check whether all Screen fields blank.
     C           DDACTN    IFEQ *BLANKS                    B1
     C           DDCCY     ANDEQ*BLANKS                    X1
     C           DDLMIT    ANDEQ*ZEROS                     X1
      *
      **  If they are, cease main processing by setting *INKC on.
     C                     MOVE '1'       *INKC            *1
      *
      **  Otherwise, blank out all input capable screen fields.
     C                     ELSE                            X1
      *
     C                     EXSR #ZE                        *1
      *
     C                     END                             E1
      *
     C           #BA9      ENDSR                           **#BA9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZE      - blanks out screen                                  *
      *                                                               *
      * CALLS             -                                           *
      *                                                               *
      * CALLED BY  #BA    - cf2 processing                            *
      *            #ZK    - gets and displays record                  *
      *            #ZG    - updates file                              *
      *            #BDAA  - writes record to file                     *
      *            #BF    - cf15 processing                           *
      *                                                               *
      * FLDS USED  @ACTN  - saved action code                         *
      *            @CCY   - saved currency code                       *
      *            @LMIT  - saved limit                               *
      *                                                               *
      *****************************************************************
     C           #ZE       BEGSR
      *
      **  Blank all screen input fields.
     C                     MOVE *BLANKS   DDACTN
     C                     MOVE *BLANKS   DDCCY
     C                     MOVE *BLANKS   DDLMIT
     C                     MOVE *BLANKS   DDCCNM
      *
      **  Blank all program work fields.
     C                     MOVE *BLANKS   @ACTN
     C                     MOVE *BLANKS   @CCY
     C                     MOVE *BLANKS   @LMIT
      *
     C           #ZE9      ENDSR                           **#ZE9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZD      - moves file fields to screen                        *
      *                                                               *
      * CALLS             -                                           *
      *                                                               *
      * CALLED BY  #BB    - cf3 processing                            *
      *            #BC    - cf4 processing                            *
      *            #ZK    - gets and displays record                  *
      *            #ZG    - updates file                              *
      *            INFSR  - file error                                *
      *                                                               *
      * FLDS USED  @CCY   - saved currency code                       *
      *            @LMIT  - saved limit                               *
      *            @DLUP  - day of update                             *
      *            @MLUP  - month of update                           *
      *            @YLUP  - year of update                            *
      *            @TLUP  - time of update                            *
      *            @KEY   - key to FDCCYTLL                           *
      *            @KEY1  - ------"--------                           *
      *            @KEY2  - ------"--------                           *
      *            @KEY3  - ------"--------                           *
      *                                                               *
      *****************************************************************
     C           #ZD       BEGSR
      *
      **  Moves fields from file into program work fields and screen
      **  fields.
     C                     MOVE HZCCY     @CCY
     C                     MOVE HZLMIT    @LMIT
     C                     Z-ADDHZDLUP    @DLUP
     C                     MOVE HZMLUP    @MLUP
     C                     Z-ADDHZYLUP    @YLUP
     C                     Z-ADDHZTLUP    @TLUP
      *
     C                     MOVE HZCCY     DDCCY
     C                     MOVE HZLMIT    DDLMIT
      *
      ** get the currency name
     C*********************MOVE**BLANKS***@KEY****************************S01319
     C*********************MOVE*'20'******@KEY1***************************S01319
     C*********************MOVE*DDCCY*****@KEY2***************************S01319
     C*********************MOVE*'1'*******@KEY3***************************S01319
     C***********@KEY******CHAINFDCCYTLL*************68*******************S01319
     C********************************************************************S01319
     C***if*the*record*is*not*found*then*it*is*an*error*******************S01319
     C************IN68*****IFEQ*'1'************************B1*************S01319
     C*********************MOVE*'1'********INU7***************************S01319
     C*********************MOVE*'1'********INU8***************************S01319
     C*********************MOVE*'1'********INLR**************DB*ERROR*001*S01319
     C*********************MOVE*'1'********INKC***************************S01319
     C*********************MOVEL'FDCCYTLL'DBFILE**************************S01319
     C*********************MOVEL@KEY******DBKEY*************1*************S01319
     C*********************MOVE*'001'*****DBASE*************1*************S01319
     C*********************GOTO*#ZD9************************1*************S01319
     C*********************END*****************************E1*************S01319
     C                     CALL 'AOCURRR0'                                S01319
     C                     PARM '*DBERR ' @RTCD   7                       S01319
     C                     PARM '*KEY   ' @OPTN   7                       S01319
     C                     PARM DDCCY     @AJCD   3                       S01319
     C           SDCURR    PARM SDCURR    DSSDY                           S01319
      *
     C*********************MOVE*CCNM******DDCCNM**************************S01319
     C                     MOVE A6CYNM    DDCCNM                          S01319
      *
     C           #ZD9      ENDSR                           **#ZD9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZF      - moves work fields to screen                        *
      *                                                               *
      * CALLS             -                                           *
      *                                                               *
      * CALLED BY  #ZB    - action code D                             *
      *            #ZM    - cf24 processing                           *
      *                                                               *
      * FLDS USED  @CCY   - saved currency code                       *
      *            @LMIT  - saved Limit                               *
      *                                                               *
      *****************************************************************
     C           #ZF       BEGSR
      *
      **  Moves fields from program work fields into screen fields.
     C                     MOVE @CCY      DDCCY
     C                     MOVE @LMIT     DDLMIT
      *
     C           #ZF9      ENDSR                           **#ZF9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #BD      - enter processing                                   *
      *                                                               *
      * CALLS    ZA0240   - send message                              *
      *          #BDA     - action code I                             *
      *          #ZC      - action code A                             *
      *          #ZB      - action code D                             *
      *          #ZK      - gets and displays record                  *
      *                                                               *
      * CALLED BY         -                                           *
      *                                                               *
      * FLDS USED  @MSGID - message id                                *
      *                                                               *
      *****************************************************************
     C           #BD       BEGSR
      *
      **  If action code is ' ', make it default to E.
     C           DDACTN    IFEQ *BLANK                     B1
      *
     C                     MOVE 'E'       DDACTN           *1
      *
     C                     END                             E1
      *
      **  If action code is not I,A,D or E, it is invalid.
     C           DDACTN    IFNE 'I'                        B1
     C           DDACTN    ANDNE'A'                        X1
     C           DDACTN    ANDNE'D'                        X1
     C           DDACTN    ANDNE'E'                        X1
      *
      **  Set up error output to screen.
     C                     MOVE '1'       *IN20            *1
     C                     MOVEL'FXM1001' @MSGID           *1
     C                     CALL 'ZA0240'                   *1
     C                     PARM           @MSGID           *1
      *
      **  By-pass further ENTER processing.
     C                     GOTO #BD9                       *1
      **                                                                  S01319
     C                     ELSE                                           S01319
     C*                                                                   S01319
      ** If multibranching, -                                             S01319
     C           @MBIN     IFEQ 'Y'                                       S01319
      **                                                                  S01319
      ** - check the action and default branch security                   S01319
      **                                                                  S01319
     C                     CALL 'ZVACTBU'                                 S01319
     C                     PARM           DDACTN                          S01319
     C                     PARM           DBRN                            S01319
     C                     PARM           @ERR                            S01319
      **                                                                  S01319
     C           @ERR      IFNE 0                                         S01319
      ** Set code and message if ZVACTBU ended in error.                  S01319
     C                     MOVE '1'       *IN20                           S01319
     C                     MOVEL'FXM0290' @MSGID                          S01319
     C                     CALL 'ZA0240'                                  S01319
     C                     PARM           @MSGID                          S01319
     C                     GOTO #BD9                                      S01319
     C                     END                                            S01319
      **                                                                  S01319
     C                     ELSE                                           S01319
      **                                                                  S01319
     C                     CALL 'ZVACTU'                                  S01319
     C                     PARM           DDACTN                          S01319
     C                     PARM           @ERR    10                      S01319
      **                                                                  S01319
     C           @ERR      IFNE 0                                         S01319
     C                     MOVE '1'       *IN20                           S01319
     C                     MOVEL'FXM0292' @MSGID                          S01319
     C                     CALL 'ZA0240'                                  S01319
     C                     PARM           @MSGID                          S01319
     C                     GOTO #BD9                                      S01319
     C                     END                                            S01319
     C                     END                                            S01319
      *
     C                     END                             E1
      *
      **  Further processing depends on the action code.
      **  - If the action code is I, process SR #BDA.
     C           DDACTN    CASEQ'I'       #BDA
      *
      **  - If the action code is A, process SR #ZC .
     C           DDACTN    CASEQ'A'       #ZC
      *
      **  - If the action code is D, process SR #ZB .
     C           DDACTN    CASEQ'D'       #ZB
      *
      **  - If the action code is E, process SR #ZK .
     C           DDACTN    CASEQ'E'       #ZK
      *
     C                     END
      *
     C           #BD9      ENDSR                           **#BD9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #BDA     - action code I                                      *
      *                                                               *
      * CALLS    ZA0440   - send message with data                    *
      *          #ZI      - validates input to screen fields          *
      *          #BDAA    - writes record to file                     *
      *          #ZG      - updates file                              *
      *                                                               *
      * CALLED BY  #BD    - enter processing                          *
      *                                                               *
      * FLDS USED  @DATA2 - data for message                          *
      *            @MSGID - message id                                *
      *            @DATA  - data for message                          *
      *            @DLUP  - day of update                             *
      *            @MLUP  - month of update                           *
      *            @YLUP  - year of update                            *
      *            @TLUP  - time of update                            *
      *                                                               *
      *****************************************************************
     C           #BDA      BEGSR
      *
      ** CURRENCY MUST BE ENTERED
     C           DDCCY     IFEQ *BLANKS                    B1
     C                     MOVEL'MMM0010' @MSGID           *1
     C                     CALL 'ZA0240'                   *1
     C                     PARM           @MSGID           *1
     C                     MOVE '1'       *IN29            *1
     C                     END                             E1
      *
      **  Chain to the file using the key, to see if it already exists.
      **  - *IN72 set on if the record is not found.
     C           DDCCY     CHAINMMLMCYLL             72
      *
      **  If *IN72 is not on, and HZDLTF is not '*', a valid record
      **  exists on file.
     C           *IN72     IFEQ '0'                        B1
     C           HZDLTF    ANDNE'*'                        X1
      *
      **  Set up error output for screen.
     C                     MOVE '1'       *IN21            *1
     C                     MOVE '1'       *IN29            *1
     C                     MOVELDDCCY     @DATA2           *1
     C                     MOVEL'FXM1010' @MSGID           *1
     C                     CALL 'ZA0440'                   *1
     C                     PARM           @MSGID           *1
     C                     PARM           @DATA            *1
      *
      **  By-pass further ENTER processing.
     C                     GOTO #BDA9                      *1
      *
     C                     END                             E1
      *
      **  No valid record exists for that key, validate input.
     C                     EXSR #ZI
      *
      **  If the input is invalid, cease ENTER processing.
     C           *IN29     CABEQ'1'       #BDA9
      *
      **  If *IN72 is equal to '1', then no record, deleted
      **  or valid, exists on the file.
     C           *IN72     IFEQ '1'                        B1
      *
      **  Write a new record.
     C                     EXSR #BDAA                      *1
      *
      **  If a database error has occurred end processing.
     C           *INU7     CABEQ'1'       #BDA9
      *
      **  Otherwise, a deleted record exists which may be overwritten.
     C                     ELSE                            X1
      *
      **  Move last update fields into pgm work fields.
     C                     Z-ADDHZDLUP    @DLUP            *1
     C                     MOVE HZMLUP    @MLUP            *1
     C                     Z-ADDHZYLUP    @YLUP            *1
     C                     Z-ADDHZTLUP    @TLUP            *1
      *
      **  Update file, over deleted record.
     C                     EXSR #ZG                        *1
      *
      **  If a database error has occurred end file update processing.
     C           *INU7     CABEQ'1'       #BDA9
      *
      **  If a the Action code is E, then the record has been inserted
      **  by another workstation.  Therefore the intelligent insert is
      **  not set up.
     C           DDACTN    CABEQ'E'       #BDA9
      *
     C                     END                             E1
      *
      **  Set up I in the action code field.
     C                     MOVE 'I'       DDACTN
      *
      **  Position cursor on key field
     C                     MOVE '1'       *IN31
      *
     C           #BDA9     ENDSR                           **#BDA9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZC      - action code A                                      *
      *                                                               *
      * CALLS    #ZK      - gets and displays record                  *
      *          #ZI      - validates input to screen fields          *
      *          #ZG      - updates file                              *
      *                                                               *
      * CALLED BY  #BD    - enter processing                          *
      *            #BFA   - cf15 A                                    *
      *                                                               *
      * FLDS USED  @CCY   - saved currency code                       *
      *                                                               *
      *****************************************************************
     C           #ZC       BEGSR
      *
      **  If key work fields are the same as screen fields, then
      **  the record is already being displayed.
     C           @CCY      IFNE DDCCY                      B1
      *
      **  Chain to file and display on screen.
     C                     EXSR #ZK                        *1
      *
      **  If act. code is A, position cursor on first non-key field
     C           DDACTN    IFEQ 'A'                        B*2
      *
     C                     MOVE '1'       *IN32            **2
      *
     C                     END                             E*2
      *
      **  By-pass further ENTER processing.
     C                     GOTO #ZC9                       *1
      *
     C                     END                             E1
      *
      **  The record was displayed last cycle; validate amendments.
     C                     EXSR #ZI
      *
      **  If the input is invalid, cease ENTER processing.
     C           *IN29     CABEQ'1'       #ZC9
      *
      **  The input is valid, update file.
     C                     EXSR #ZG
      *
     C           #ZC9      ENDSR                           **#ZC9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZK      - gets and displays record                           *
      *                                                               *
      * CALLS    ZA0440   - send message with data                    *
      *          #ZE      - blanks out screen                         *
      *          #ZD      - moves file fields to screen               *
      *                                                               *
      * CALLED BY  #BD    - enter processing                          *
      *            #ZC    - action code A                             *
      *            #ZB    - action code D                             *
      *                                                               *
      * FLDS USED  @DATA2 - data for message                          *
      *            @MSGID - message id                                *
      *            @DATA  - data for message                          *
      *            @ACTN1 - action code                               *
      *                                                               *
      *****************************************************************
     C           #ZK       BEGSR
      *
      **  Chain to the file using the key.
      **  - *IN72 set on if the record is not found.
     C           DDCCY     CHAINMMLMCYLL             72
      *
      **  If *IN72 is not on, and HZDLTF is not '*', a valid record
      **  exists on file.
     C           *IN72     IFEQ '1'                        B1
     C           HZDLTF    OREQ '*'                        X1
      *
      **  Set up error output for screen.
     C                     MOVELDDCCY     @DATA2           *1
     C                     MOVEL'FXM1012' @MSGID           *1
     C                     CALL 'ZA0440'                   *1
     C                     PARM           @MSGID           *1
     C                     PARM           @DATA            *1
      *
      **  Clear screen fields and set up action code
     C                     MOVE DDACTN    @ACTN1           *1
     C                     EXSR #ZE                        *1
     C                     MOVE @ACTN1    DDACTN           *1
      *
      **  Position cursor on key field
     C                     MOVE '1'       *IN31            *1
      *
      **  By-pass further record retrieval processing.
     C                     GOTO #ZK9                       *1
      *
     C                     END                             E1
      *
      **  A valid record has been read, move fields into pgm fields.
     C                     EXSR #ZD
      *
     C           #ZK9      ENDSR                           **#ZK9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZI      - validates input to screen fields                   *
      *                                                               *
      * CALLS    ZA0440   - send message with data                    *
      *                                                               *
      * CALLED BY  #BDA   - action code I                             *
      *            #ZC    - action code A                             *
      *                                                               *
      * FLDS USED  @KEY   - key to FDCCYTLL                           *
      *            @KEY1  - ------"--------                           *
      *            @KEY2  - ------"--------                           *
      *            @KEY3  - ------"--------                           *
      *            @MSGID - message id                                *
      *            @DATA  - data for message                          *
      *                                                               *
      *****************************************************************
     C           #ZI       BEGSR
      *
     C                     MOVE '0'       *IN29
      *
      ** CURRENCY MUST BE ENTERED
     C           DDCCY     IFEQ *BLANKS                    B1
     C                     MOVEL'MMM0010' @MSGID           *1
     C                     CALL 'ZA0240'                   *1
     C                     PARM           @MSGID           *1
     C                     MOVE '1'       *IN29            *1
     C                     END                             E1
      *
      ** validate the currency as being valid
     C*********************MOVE**BLANKS***@KEY****************************S01319
     C*********************MOVE*'20'******@KEY1***************************S01319
     C*********************MOVE*DDCCY*****@KEY2***************************S01319
     C*********************MOVE*'1'*******@KEY3***************************S01319
     C***********@KEY******CHAINFDCCYTLL*************21*******************S01319
     C************IN21*****IFEQ*'1'************************B1*************S01319
     C                     CALL 'AOCURRR0'                                S01319
     C                     PARM '       ' @RTCD   7                       S01319
     C                     PARM '*KEY   ' @OPTN   7                       S01319
     C                     PARM DDCCY     @AJCD   3                       S01319
     C           SDCURR    PARM SDCURR    DSSDY                           S01319
     C           @RTCD     IFNE *BLANKS                                   S01319
     C                     MOVEL'MMM0009' @MSGID           *1
     C                     CALL 'ZA0240'                   *1
     C                     PARM           @MSGID           *1
     C                     MOVE '1'       *IN29            *1
     C                     GOTO #ZI9                       *1
     C                     ELSE                                           S01319
     C           DDCCY     IFEQ '?'                                       S01319
     C                     MOVE A6CYCD    DDCCY                           S01319
     C                     MOVE A6CYNM    DDCCNM                          S01319
     C                     END                                            S01319
     C                     END                             E1
      *
      *  validate the limit as being > 0
      *
     C           DDLMIT    IFLE 0                          B1
     C                     MOVEL'MMM0017' @MSGID           *1
     C                     CALL 'ZA0240'                   *1
     C                     PARM           @MSGID           *1
     C                     MOVE '1'       *IN22            *1
     C                     MOVE '1'       *IN29            *1
     C                     END                             E1
      *
     C           #ZI9      ENDSR                           **#ZI9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZJ      - moves valid fields to file                         *
      *                                                               *
      * CALLS             -                                           *
      *                                                               *
      * CALLED BY  #ZG    - updates file                              *
      *            #BDAA  - writes record to file                     *
      *                                                               *
      * FLDS USED         -                                           *
      *                                                               *
      *****************************************************************
     C           #ZJ       BEGSR
      *
      **  Moves fields from valid screen fields into file fields.
     C                     MOVE DDCCY     HZCCY
     C                     MOVE DDLMIT    HZLMIT
      *
     C           #ZJ9      ENDSR                           **#ZJ9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZG      - updates file                                       *
      *                                                               *
      * CALLS    #ZA      - resets screen indicators and message q    *
      *          ZA0440   - send message with data                    *
      *          #ZD      - moves file fields to screen               *
      *          #ZE      - blanks out screen                         *
      *          #ZN      - update the totals file                    *
      *          #ZJ      - moves valid fields to file                *
      *                                                               *
      * CALLED BY  #BDA   - action code I                             *
      *            #ZC    - action code A                             *
      *            #ZM    - cf24 processing                           *
      *                                                               *
      * FLDS USED  @DATA2 - data for message                          *
      *            @MSGID - message id                                *
      *            @DATA  - data for message                          *
      *            @DLUP  - day of update                             *
      *            @MLUP  - month of update                           *
      *            @YLUP  - year of update                            *
      *            @TLUP  - time of update                            *
      *            @RLSFL - release file                              *
      *            @UPDT  -                                           *
      *            @USER  - user id                                   *
      *                                                               *
      *****************************************************************
     C           #ZG       BEGSR
      *
      **  Chain to record to be updated to check for external update and
      **  to lock the record to prevent external update.
      **  - *IN72 set on if the record is not found.
      **  - *IN61 set on if the record is locked.
     C           DDCCY     CHAINMMLMCULL             7261
      *
      **  If no record for that key exists, *IN72 is set on.
     C           *IN72     IFEQ '1'                        B1
      *
     C                     MOVELDDCCY     DBKEY            ***************
     C                     MOVEL'MMLMCYLL'DBFILE           * DB ERROR 002*
     C                     MOVEL'002'     DBASE            ***************
     C                     MOVE '1'       *INU7            *1
     C                     MOVE '1'       *INU8            *1
     C                     MOVE '1'       *INKC            *1
      *
      **  By-pass further update processing.
     C                     GOTO #ZG9                       *1
      *
     C                     END                             E1
      *
      **  If *IN61 is on then the record is locked.
     C           *IN61     IFEQ '1'                        B1
      *
      **  Clear the screen error message queue.
     C                     EXSR #ZA                        *1
      *
      **  Set up error output to screen.
     C                     MOVELDDCCY     @DATA2           *1
     C                     MOVEL'FXM1011' @MSGID           *1
     C                     CALL 'ZA0440'                   *1
     C                     PARM           @MSGID           *1
     C                     PARM           @DATA            *1
      *
      **  By-pass further update processing.
     C                     GOTO #ZG9                       *1
      *
     C                     END                             E1
      *
      **  If any of the date and time fields have changed since
      **  the file was initially read, then the record has been
      **  updated by another workstation.
     C           @DLUP     IFNE HZDLUP                     B1
     C           @MLUP     ORNE HZMLUP                     *1
     C           @YLUP     ORNE HZYLUP                     *1
     C           @TLUP     ORNE HZTLUP                     *1
      *
      **  - If last change type is A update was an amendment.
     C           HZCHTP    IFEQ 'A'                        B*2
      *
     C                     MOVEL'FXM1013' @MSGID           **2
      *
      **  Set on indicator to show that an external transaction has
      **  taken place - used to prevent new field values from being
      **  blanked at the end of select processing.
     C                     MOVE '1'       *IN62            **2
      *
     C                     END                             E*2
      *
      **  - If last change type is D update was an deletion.
     C           HZCHTP    IFEQ 'D'                        B*2
      *
     C                     MOVEL'FXM1014' @MSGID           **2
      *
      **  Set on indicator to show that an external transaction has
      **  taken place - used to prevent new field values from being
      **  blanked at the end of select processing.
     C                     MOVE '1'       *IN62            **2
      *
     C                     END                             E*2
      *
      **  - If last change type is I update was an insertion.
     C           HZCHTP    IFEQ 'I'                        B*2
      *
     C                     MOVEL'FXM1015' @MSGID           **2
      *
      **  Set on indicator to show that an external transaction has
      **  taken place - used to prevent new field values from being
      **  blanked at the end of select processing.
     C                     MOVE '1'       *IN62            **2
      *
     C                     END                             E*2
      *
      **  Set up error output to screen.
     C                     MOVELDDCCY     @DATA2           *1
     C                     CALL 'ZA0440'                   *1
     C                     PARM           @MSGID           *1
     C                     PARM           @DATA            *1
      *
      **  - If last change type is I or A, display new field values.
     C           HZCHTP    IFEQ 'I'                        B*2
     C           HZCHTP    OREQ 'A'                        X*2
      *
      **  Set up screen and work fields with newly changed values (i.e.
      **  from chain to update file).
     C                     EXSR #ZD                        **2
     C                     MOVE 'E'       DDACTN           **2
      *
     C                     END                             E*2
      *
      **  - If last change type is D update was an deletion.
     C           HZCHTP    IFEQ 'D'                        B*2
      *
      **  Clear screen fields.
     C                     EXSR #ZE                        **2
      *
     C                     END                             E*2
      *
      **  Release locked record.
     C                     EXCPT@RLSFL                     *1
      *
      **  By-pass further update processing.
     C                     GOTO #ZG9                       *1
      *
     C                     END                             E1
      *
      **  Update validation is now complete.
      *
      **  Update file control totals data file - if a database error
      **  occurs, end file update processing.
     C                     EXSR #ZN
      *
      **  If a database error has occurred end file update processing.
     C           *INU7     CABEQ'1'       #ZG9
      *
      **  If *IN76 is on then the control totals record is locked.
     C           *IN76     CABEQ'1'       #ZG9
      *
      **  Update validation is now complete - setup file fields.
      *
      **  Retrieve the MIDAS date and set up the file fields.
     C*********************MOVELRUNA******@UPDT***************************S01319
     C                     MOVELBJMRDT    @UPDT                           S01319
      *
      **  Move the Midas day number into the file field.
     C*********************Z-ADDILCD******HZLCD***************************S01319
     C                     Z-ADDBJLCD     HZLCD                           S01319
      *
      **  Set up the last change type field.
     C           DDACTN    IFEQ 'A'                        B1
     C           DDACTN    OREQ 'I'                        X1
     C           DDACTN    OREQ 'D'                        X1
      *
     C                     MOVE DDACTN    HZCHTP           *1
      *
     C                     END                             E1
      *
      **  Set up the last user field.
     C                     MOVEL@USER     HZLUID
      *
      **  Set up the last change time field.
     C                     TIME           HZTLUP
      *
      **  If the update is for a deletion, the only further field to be
      **  modified is the logical delete flag.
     C           DDACTN    IFEQ 'D'                        B1
      *
     C                     MOVE '*'       HZDLTF           *1
      *
      **  Otherwise all the main fields must be updated.
     C                     ELSE                            X1
      *
      **  Move ' ' into the logical delete flag.
     C                     MOVE *BLANK    HZDLTF           *1
      *
      **  Fill up the other fields.
     C                     EXSR #ZJ                        *1
      *
     C                     END                             E1
      *
      **  Update the file.
     C                     UPDATMMLMCYP0
      *
      **  Commit the file updates.
     C           CMTTXT    COMIT
      *
      **  Set up successful file maintenance message.
     C                     MOVELDDCCY     @DATA2
      *
      **  If action code is A, record has been amended.
     C           DDACTN    IFEQ 'A'                        B1
      *
     C                     MOVEL'FXM1016' @MSGID           *1
      *
     C                     END                             E1
      *
      **  If action code is D, record has been deleted.
     C           DDACTN    IFEQ 'D'                        B1
      *
     C                     MOVEL'FXM1017' @MSGID           *1
      *
     C                     END                             E1
      *
      **  If action code is I, record has been inserted.
     C           DDACTN    IFEQ 'I'                        B1
      *
     C                     MOVEL'FXM1018' @MSGID           *1
      *
     C                     END                             E1
      *
      **  Blank screen fields.
     C                     EXSR #ZE
      *
      **  Reset error processing.
     C                     EXSR #ZA
      *
      **  Send successful file maintenance message.
     C                     CALL 'ZA0440'
     C                     PARM           @MSGID
     C                     PARM           @DATA
      *
     C           #ZG9      ENDSR                           **#ZG9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #BDAA    - writes record to file                              *
      *                                                               *
      * CALLS    #ZN      - update the totals file                    *
      *          #ZJ      - moves valid fields to file                *
      *          #ZE      - blanks out screen                         *
      *          #ZA      - resets screen indicators and message q    *
      *          ZA0440   - send message with data                    *
      *                                                               *
      * CALLED BY  #BDA   - action code I                             *
      *                                                               *
      * FLDS USED  @UPDT  -                                           *
      *            @USER  - user id                                   *
      *            @DATA2 - data for message                          *
      *            @MSGID - message id                                *
      *            @DATA  - data for message                          *
      *                                                               *
      *****************************************************************
     C           #BDAA     BEGSR
      *
      **  Update file control totals data file - if a database error
      **  occurs, end write processing.
     C                     EXSR #ZN
      *
      **  If a database error has occurred end file write processing.
     C           *INU7     CABEQ'1'       #BDAA9
      *
      **  If *IN76 is on then the control totals record is locked.
     C           *IN76     CABEQ'1'       #BDAA9
      *
      **  Set up the record id.
     C                     MOVE 'HZ'      HZRCID
      *
      *
      **  Retrieve the MIDAS date and set up the file fields.
     C*********************MOVELRUNA******@UPDT***************************S01319
     C                     MOVELBJMRDT    @UPDT                           S01319
      *
      **  Move the Midas day number into the file field.
     C*********************Z-ADDILCD******HZLCD***************************S01319
     C                     Z-ADDBJLCD     HZLCD
      *
      **  Move ' ' into the logical delete flag.
     C                     MOVE ' '       HZDLTF
      *
      **  Set up the last change type field.
     C                     MOVE DDACTN    HZCHTP
      *
      **  Set up the last user field.
     C                     MOVEL@USER     HZLUID
      *
      **  Fill up the other fields.
     C                     EXSR #ZJ
      *
      **  Set up the last change time field.
     C                     TIME           HZTLUP
      *
      **  Write the new record.
     C                     WRITEMMLMCYP0
      *
      **  Commit the file updates.
     C           CMTTXT    COMIT
      *
      **  Set up successful maintenance message for screen.
     C                     MOVELDDCCY     @DATA2
     C                     MOVEL'FXM1018' @MSGID
      *
      **  Blank screen fields.
     C                     EXSR #ZE
      *
      **  Reset error processing.
     C                     EXSR #ZA
      *
      **  Send successful maintenance message to screen.
     C                     CALL 'ZA0440'
     C                     PARM           @MSGID
     C                     PARM           @DATA
      *
     C           #BDAA9    ENDSR                           **#BDAA9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZN      - update the totals file                             *
      *                                                               *
      * CALLS    #ZA      - resets screen indicators and message q    *
      *          ZA0440   - send message with data                    *
      *          ZTNLU1   - update commit text                        *
      *                                                               *
      * CALLED BY  #ZG    - updates file                              *
      *            #BDAA  - writes record to file                     *
      *                                                               *
      * FLDS USED  @RLSFL - release file                              *
      *            @DATA2 - data for message                          *
      *            @MSGID - message id                                *
      *            @DATA  - data for message                          *
      *                                                               *
      *****************************************************************
     C           #ZN       BEGSR
      *
      **  Read record control totals data file.
      **  - *IN77 set on if the record is not found.
      **  - *IN76 set on if the record is locked.
     C           1         SETLLMMTTOTLL
     C                     READ MMTTOTLL               7677
      *
      **  If no record is present, *IN77 is set on.
     C           *IN77     IFEQ '1'                        B1
      *
     C************         MOVEL'MMLMCYLL'DBKEY            ***************E12264
     C                     MOVEL'1'       DBKEY                        ***
     C************         MOVEL'002'     DBASE            ***************E12264
     C************         MOVEL'MMTTOTLL'DBFILE           * DB ERROR 002*E12264
     C                     MOVEL'MMTTOTLL'DBFILE           * DB ERROR 004*E12264
     C                     MOVEL'004'     DBASE            ***************E12264
     C                     MOVE '1'       *INU7            *1
     C                     MOVE '1'       *INU8            *1
     C                     MOVE '1'       *INKC            *1
      *
      **  If *IN72 is on, and HZDLTF is not '*', no record, valid or
      **  deleted exists on file - if this is not the case, then the
      **  main file has been chained to and must be released.
     C           *IN72     IFEQ '0'                        B*2
     C           HZDLTF    OREQ '*'                        X*2
      *
      **  Release locked main file record.
     C                     EXCPT@RLSFL                     **2
      *
     C                     END                             E*2
      *
      **  By-pass further update processing.
     C                     GOTO #ZN9                       *1
      *
     C                     END                             E1
      *
      **  If *IN76 is on then the record is locked.
     C           *IN76     IFEQ '1'                        B1
      *
      **  Clear the screen error message queue.
     C                     EXSR #ZA                        *1
      *
      **  Set up error output to screen.
     C                     MOVELDDCCY     @DATA2           *1
     C                     MOVEL'FXM1011' @MSGID           *1
     C                     CALL 'ZA0440'                   *1
     C                     PARM           @MSGID           *1
     C                     PARM           @DATA            *1
      *
      **  If *IN72 is on, and HZDLTF is not '*', no record, valid or
      **  deleted exists on file - if this is not the case, then the
      **  main file has been chained to and must be released.
     C           *IN72     IFEQ '0'                        B*2
     C           HZDLTF    OREQ '*'                        X*2
      *
      **  Release locked main file record.
     C                     EXCPT@RLSFL                     **2
      *
     C                     END                             E*2
      *
      **  By-pass further update processing.
     C                     GOTO #ZN9                       *1
      *
     C                     END                             E1
      *
      **  Update file control totals.
      *
      **  If action code is A, record has been amended.
     C           DDACTN    IFEQ 'A'                        B1
      *
     C                     ADD  1         INNAMD           *1
      *
     C                     END                             E1
      *
      **  If action code is D, record has been deleted.
     C           DDACTN    IFEQ 'D'                        B1
      *
     C                     ADD  1         INNDEL           *1
      *
     C                     END                             E1
      *
      **  If action code is I, record has been inserted.
     C           DDACTN    IFEQ 'I'                        B1
      *
     C                     ADD  1         INNINS           *1
      *
     C                     END                             E1
      *
      **  Obtain Last Trans. Number and prepare the Commit Text, CMTTXT
     C                     EXSR ZTNLU1
      *
      **  Update the file.
     C                     UPDATMMTTOTP0
      *
     C           #ZN9      ENDSR                           **#ZN9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * ZTNLU1   - update commit text                                 *
      *                                                               *
      * CALLS             -                                           *
      *                                                               *
      * CALLED BY  #ZN    - update the totals file                    *
      *                                                               *
      * FLDS USED  @USER  - user id                                   *
      *            @CCYX  - comit text                                *
      *            @LMITX - comit text                                *
      *                                                               *
      *****************************************************************
     C           ZTNLU1    BEGSR
      *                                                               *
      **  Set up comit text
     C                     MOVE 'MM'      MDID
     C                     MOVEL'MM0007'  PGMN
     C                     MOVE DDWID     WSIDX
     C                     TIME           MTIME
     C                     MOVE DDACTN    ACTCDX
     C                     MOVE @USER     USRIDX
     C                     MOVE DDCCY     @CCYX
     C                     MOVE DDLMIT    @LMITX
      *
      **  Increment transaction number of last update.
     C           *NAMVAR   DEFN MNATN     DNATN
     C           *LOCK     IN   DNATN
     C                     MOVE FNATN     NATN    50
     C                     MOVE FNATN     ZZWK05  50
     C                     ADD  1         ZZWK05
     C                     MOVE ZZWK05    FNATN
     C                     OUT  DNATN
      *
     C           ZTNLU9    ENDSR                           **ZTNLU9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZB      - action code D                                      *
      *                                                               *
      * CALLS    #ZK      - gets and displays record                  *
      *          ZA0240   - send message                              *
      *          #ZF      - moves work fields to screen               *
      *                                                               *
      * CALLED BY  #BD    - enter processing                          *
      *            #BFB   - cf15 D                                    *
      *                                                               *
      * FLDS USED  @CCY   - saved currency code                       *
      *            @MSGID - message id                                *
      *            @LMIT  - saved Limit                               *
      *                                                               *
      *****************************************************************
     C           #ZB       BEGSR
      *
      **  If key work fields are not the same as screen fields, then
      **  the record is not already being displayed.
     C           @CCY      IFNE DDCCY                      B1
     C           DDCCY     OREQ *BLANKS                    X1
      *
      **  Chain to file and display on screen.
     C                     EXSR #ZK                        *1
      *
      **  If *IN72 is on, or HZDLTF is '*', no valid record exists on
      **  file.
     C           *IN72     CABEQ'1'       #ZB9             *1
     C           HZDLTF    CABEQ'*'       #ZB9             *1
      *
     C                     ELSE                            X1
      *
      **  If the action code is not D, it is invalid.
     C           DDACTN    IFNE 'D'                        B*2
      *
      **  Set up error output for screen.
     C                     MOVE '1'       *IN20            **2
     C                     MOVEL'FXM1005' @MSGID           **2
     C                     CALL 'ZA0240'                   **2
     C                     PARM           @MSGID           **2
      *
      **  Restore former field values.
     C                     EXSR #ZF                        **2
      *
      **  By-pass further Delete processing.
     C                     GOTO #ZB9                       **2
      *
     C                     END                             E*2
      *
      **  Record was displayed last cycle: check that no amendments to
      **  fields have been made.
     C           DDLMIT    IFNE @LMIT                      B*2
      *
      **  Set up error output for screen.
     C                     MOVE '1'       *IN20            **2
     C                     MOVEL'FXM1004' @MSGID           **2
     C                     CALL 'ZA0240'                   **2
     C                     PARM           @MSGID           **2
      *
      **  Restore former field values.
     C                     EXSR #ZF                        **2
      *
      **  By-pass further ENTER processing.
     C                     GOTO #ZB9                       **2
      *
     C                     END                             E*2
      *
     C                     END                             E1
      *
      **  The entry must now be valid, enable the F10 processing.
     C                     MOVE '1'       *IN30
      *
     C           #ZB9      ENDSR                           **#ZB9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #ZM      - cf24 processing                                    *
      *                                                               *
      * CALLS    ZA0240   - send message                              *
      *          #ZF      - moves work fields to screen               *
      *          #ZG      - updates file                              *
      *                                                               *
      * CALLED BY  #B     - main processing                           *
      *            #BFB   - cf15 D                                    *
      *                                                               *
      * FLDS USED  @MSGID - message id                                *
      *            @CCY   - saved currency code                       *
      *            @LMIT  - saved Limit                               *
      *                                                               *
      *****************************************************************
     C           #ZM       BEGSR
      *
      **  If the action code is not D, it is invalid.
     C           DDACTN    IFNE 'D'                        B1
      *
      **  Set up error output for screen.
     C                     MOVE '1'       *IN20            *1
     C                     MOVEL'FXM1005' @MSGID           *1
     C                     CALL 'ZA0240'                   *1
     C                     PARM           @MSGID           *1
      *
      **  Restore former field values.
     C                     EXSR #ZF                        *1
      *
      **  By-pass further F10 processing.
     C                     GOTO #ZM9                       *1
      *
     C                     END                             E1
      *
      **  If any other fields have changed since the record was
      **  displayed, delete processing is invalid.
     C           DDCCY     IFNE @CCY                       B1
     C           DDLMIT    ORNE @LMIT                      X1
      *
      **  Set up error output for screen.
     C                     MOVE '1'       *IN20            *1
     C                     MOVEL'FXM1004' @MSGID           *1
     C                     CALL 'ZA0240'                   *1
     C                     PARM           @MSGID           *1
      *
      **  Restore former field values.
     C                     EXSR #ZF                        *1
      *
      **  Reset indicator allowing F10 processing.
     C                     MOVE '0'       *IN30            *1
      *
      **  By-pass further F10 processing.
     C                     GOTO #ZM9                       *1
      *
     C                     END                             E1
      *
      *
      **  F10 processing must now be valid, update file.
     C                     EXSR #ZG
      *
     C           #ZM9      ENDSR                           **#ZM9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #BF      - cf15 processing                                    *
      *                                                               *
      * CALLS    #ZA      - resets screen indicators and message q    *
      *          ZA0240   - send message                              *
      *          #ZL      - displays reads and resets main screen     *
      *          #BFA     - cf15 A                                    *
      *          #BFB     - cf15 D                                    *
      *          #ZE      - blanks out screen                         *
      *                                                               *
      * CALLED BY  #B     - main processing                           *
      *                                                               *
      * FLDS USED  @RRN   - relative record number                    *
      *            @MSGID - message id                                *
      *            @COUNT - counter for subfile                       *
      *            @CCY   - saved currency code                       *
      *            @LMIT  - saved Limit                               *
      *            @DLUP  - day of update                             *
      *            @MLUP  - month of update                           *
      *            @YLUP  - year of update                            *
      *            @TLUP  - time of update                            *
      *                                                               *
      *****************************************************************
     C           #BF       BEGSR
      *
      **  Initialisation for subfile processing.
      *
      **  Set on indicator to show that select processing is occurring.
     C                     MOVE '1'       *IN39
      *
      **  Initialise indicator showing end of selected records.
     C                     MOVE '0'       *IN58
      *
      **  Set up Action Code text for screen for select processing.
     C                     MOVEL'( '      DDLIST
      *
      **  Initialise program field for subfile relative record number.
     C                     Z-ADD0         @RRN    50
      *
      **  Initialise screen and write main screen without displaying
      **  to clear msgq.
     C                     EXSR #ZA
     C                     MOVE '1'       *IN42
     C                     WRITEMM0007S0
     C                     MOVE '0'       *IN42
      *
      **  Clear subfile before refilling by writing control record
      **  with SHZCLR active.
     C                     MOVE '1'       *IN41
     C                     WRITEMM0007S2
     C                     MOVE '0'       *IN41
      *
      **  Write the select screen footer to the screen.
     C                     WRITEMM0007D1
      *
      **  Set on ROLLUP indicator to cause initial loop operation.
     C                     MOVE '1'       *IN50
      *
      **  Reset *IN70.
     C                     MOVE '0'       *IN70
      *
      **  Set file pointer on key displayed on screen.
     C           DDCCY     SETLLMMLMCYLL
      *
      **  Reset *IN70.
     C                     MOVE '0'       *IN70
      *
      **  Read the file initially - if *IN70 is set on then the end of
      **  the file has been reached.  Read until a valid record is
      **  found or until no more records exist.
     C           *IN70     DOUEQ'1'                        B1
     C           HZDLTF    OREQ ' '                        X1
      *
      **  Read the file.
     C                     READ MMLMCYLL                 70*1
      *
      **  If *IN70 is on no more records exist - set up an error message.
     C           *IN70     IFEQ '1'                        B*2
      *
     C                     MOVEL'FXM1007' @MSGID           **2
     C                     CALL 'ZA0240'                   **2
     C                     PARM           @MSGID           **2
      *
      *
      **  Set file pointer on key displayed on screen.
     C           DDCCY     SETLLMMLMCYLL                   **2
      *
      **  Bypass further record handling for select processing.
     C                     GOTO #BF8                       **2
      *
     C                     END                             E*2
      *
     C                     END                             E1
      *
      **  Processing for the Select Screen itself.
      *
      **  Read records from the file into the subfile until a page has
      **  been filled or there are no more records.
      **   Repeat the process until either the end of file, ROLLUP
      **  has not been entered or F3 or F12 is input.
     C           *IN70     DOWNE'1'                        B1
     C           *IN50     ANDEQ'1'                        X1
      *
      **  Initialise program field for counting records written to
      **  subfile page.
     C                     Z-ADD0         @COUNT  30       *1
      *
      **  For each record read, write a record to the screen subfile.
      **  do this until - End of file. *IN70.
      **                - The subfile page has been filled.
     C           *IN70     DOWNE'1'                        B*2
     C           @COUNT    ANDLT14                         X*2
      *
      **  Increment the relative record no. and records written fields.
     C                     ADD  1         @RRN             **2
     C                     ADD  1         @COUNT           **2
      *
      **  Set up the subfile fields.
     C                     MOVE *BLANK    DDOPT            **2
     C                     Z-ADD@RRN      DDSFRN           **2
     C                     MOVE HZCCY     DDCCY            **2
     C                     MOVE HZLMIT    DDLMIT           **2
      *                                                               *
     C                     Z-ADDHZDLUP    DDDLUP           **2
     C                     MOVE HZMLUP    DDMLUP           **2
     C                     Z-ADDHZYLUP    DDYLUP           **2
     C                     Z-ADDHZTLUP    DDTLUP           **2
      *
      **  Write the record to the subfile.
     C                     WRITEMM0007S3                   **2
      *
      **  Until a valid record is found or until no more records exist
      **  on the file.
     C           *IN70     DOUEQ'1'                        B**3
     C           HZDLTF    OREQ ' '                        B**3
      *
      **  Read the file.
     C                     READ MMLMCYLL                 70***3
      *
     C                     END                             E**3
      *
     C                     END                             E*2
      *
      **  Retrieve time and place in screen field.
     C                     TIME           DDTIME           *1
      *
      **  Write the subfile control record to the screen to display
      **  the subfile.
     C                     WRITEMM0007S2                   *1
      *
      **  Read the subfile control record to determine which records
      **  have been selected and whether ROLLUP is required.
     C                     READ MM0007S2                 60*1
      *
      **  If CA1 has been pressed, bypass further select processing.
     C           *INKC     CABEQ'1'       #BF9             *1
      *
      **  If F12 has been pressed, go to select processing termination.
     C           *INKL     CABEQ'1'       #BF8             *1
      *
     C                     END                             E1
      *
      **  Processing for selected records.
      *
      **  Each selected record, is displayed and allowed to be amended
      **  or deleted.
     C           *IN58     DOWNE'1'                        B1
      *
      **  Read the subfile for changed records - these are those that
      **  have been selected.
      **  Only process those for which the option field is blank.
     C           *IN58     DOUEQ'1'                        B*2
     C           DDOPT     ORNE *BLANK                     **2
      *
     C                     READCMM0007S3                 58**2
      *
     C                     END                             E*2
      *
      **  If *IN58 is not on then changed records exist.
     C           *IN58     IFEQ '0'                        B*2
      *
      **  Move Action code E into screen field.
     C                     MOVE 'E'       DDACTN           **2
      *
      **  Move the subfile screen fields into program work fields.
     C                     MOVE DDCCY     @CCY
     C                     MOVE DDLMIT    @LMIT
     C                     Z-ADDDDDLUP    @DLUP
     C                     MOVE DDMLUP    @MLUP
     C                     Z-ADDDDYLUP    @YLUP
     C                     Z-ADDDDTLUP    @TLUP
     C*********************MOVE**BLANKS***@KEY****************************S01319
     C*********************MOVE*'20'******@KEY1***************************S01319
     C*********************MOVE*DDCCY*****@KEY2***************************S01319
     C*********************MOVE*'1'*******@KEY3***************************S01319
     C***********@KEY******CHAINFDCCYTLL*************68*******************S01319
     C********************************************************************S01319
     C***if*the*record*is*not*found*then*it*is*an*error*******************S01319
     C************IN68*****IFEQ*'1'************************B1*************S01319
     C*********************MOVE*'1'********INU7***************************S01319
     C*********************MOVE*'1'********INU8***************************S01319
     C*********************MOVE*'1'********INLR**************DB*ERROR*003*S01319
     C*********************MOVE*'1'********INKC***************************S01319
     C*********************MOVEL'FDCCYTLL'DBFILE**************************S01319
     C*********************MOVEL@KEY******DBKEY*************1*************S01319
     C*********************MOVE*'003'*****DBASE*************1*************S01319
     C*********************GOTO*#BF9************************1*************S01319
     C*********************END*****************************E1*************S01319
     C                     CALL 'AOCURRR0'                                S01319
     C                     PARM '*DBERR ' @RTCD   7                       S01319
     C                     PARM '*KEY   ' @OPTN   7                       S01319
     C                     PARM DDCCY     @AJCD   3                       S01319
     C           SDCURR    PARM SDCURR    DSSDY                           S01319
      *
     C*********************MOVE*CCNM******DDCCNM**************************S01319
     C                     MOVE A6CYNM    DDCCNM                          S01319
      *
      **  Process this loop until a valid action code has been entered.
     C           *IN20     DOUEQ'0'                        B**3
      *
      **  Process the screen.
     C                     EXSR #ZL                        ***3
      *
      **  If CA1 is input exit main processing immediately.
     C           *INKC     CABEQ'1'       #BF9             ***3
      *
      **  If F12 is input go to select processing termination.
     C           *INKL     CABEQ'1'       #BF8             ***3
      *
      **  Process screen input - depending upon input type.
      *
      **  If DDACTN is not A,D,E, it is invalid for select proc.
     C           DDACTN    IFNE 'A'                        B***4
     C           DDACTN    ANDNE'D'                        X***4
     C           DDACTN    ANDNE'E'                        X***4
      *
      **  Set up error output for screen.
     C                     MOVE '1'       *IN20            ****4
     C                     MOVEL'FXM1001' @MSGID           ****4
     C                     CALL 'ZA0240'                   ****4
     C                     PARM           @MSGID           ****4
      *
     C                     END                             E***4
      *
     C                     END                             E**3
      *
      **  If DDACTN is A, amend the record.
     C           DDACTN    CASEQ'A'       #BFA             B**3
      **  If DDACTN is D, delete the record.
     C           DDACTN    CASEQ'D'       #BFB             B**3
     C                     END                             E**3
      *
      **  If CA1 is input exit main processing immediately.
     C           *INKC     CABEQ'1'       #BF9             **2
      *
      **  If F12 is input go to select processing termination.
     C           *INKL     CABEQ'1'       #BF8             **2
      *
      **  If a database error has occurred end processing.
     C           *INU7     CABEQ'1'       #BF9             **2
      *
     C                     END                             E*2
      *
     C                     END                             E1
      *
      **  Tag #BF8.
     C           #BF8      TAG                             ***#BF8***
      *
      **  Termination of select processing.
      *
      **  Reset indicator showing whether select processing is in progress
     C                     MOVE '0'       *IN39
      *
      **  Reset Action Code text for screen.
     C                     MOVEL'(I'      DDLIST
      *
      **  If values should remain on the screen to indicate an external
      **  transaction, do not blank screen fields.
     C           *IN62     CABEQ'1'       #BF9
      *
      **  Blank out screen fields.
     C                     EXSR #ZE
      *
     C           #BF9      ENDSR                           **#BF9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #BFA     - cf15 A                                             *
      *                                                               *
      * CALLS    #ZL      - displays reads and resets main screen     *
      *          ZA0240   - send message                              *
      *          #ZC      - action code A                             *
      *                                                               *
      * CALLED BY  #BF    - cf15 processing                           *
      *                                                               *
      * FLDS USED  @MSGID - message id                                *
      *                                                               *
      *****************************************************************
     C           #BFA      BEGSR
      *
      **  Carry out processing until a valid input has been received.
     C           *IN29     DOUEQ'0'                        B1
      *
      **  If a database error has occurred end processing.
     C           *INU7     CABEQ'1'       #BFA9            *1
      *
      **  If *IN29 is on then an amend error has occurred.
     C           *IN29     IFEQ '1'                        B*2
      *
      **  Process the screen.
     C                     EXSR #ZL                        **2
      *
      **  If CA1 is input exit main processing immediately.
     C           *INKC     CABEQ'1'       #BFA9            **2
      *
      **  If F12 is input go to select processing termination.
     C           *INKL     CABEQ'1'       #BFA9            **2
      *
      **  If the action code is now E, cease amend processing
      **  for this record.
     C           DDACTN    CABEQ'E'       #BFA9            **2
      *
      **  If the action code is not A, it is invalid.
     C           DDACTN    IFNE 'A'                        B**3
      *
      **  Set up error output for screen.
     C                     MOVE '1'       *IN20            ***3
     C                     MOVE '1'       *IN29            ***3
     C                     MOVEL'FXM1008' @MSGID           ***3
     C                     CALL 'ZA0240'                   ***3
     C                     PARM           @MSGID           ***3
      *
     C                     END                             E**3
      *
     C                     END                             E*2
      *                                                    *1
      **  Process the input to the screen - amend processing.
     C                     EXSR #ZC                        *1
      *
     C                     END                             E1
      *
     C           #BFA9     ENDSR                           **#BFA9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #BFB     - cf15 D                                             *
      *                                                               *
      * CALLS    #ZB      - action code D                             *
      *          #ZL      - displays reads and resets main screen     *
      *          #ZM      - cf24 processing                           *
      *                                                               *
      * CALLED BY  #BF    - cf15 processing                           *
      *                                                               *
      * FLDS USED         -                                           *
      *                                                               *
      *****************************************************************
     C           #BFB      BEGSR
      *
      **  Carry out processing until a valid input has been received.
     C           *IN30     DOUEQ'1'                        B1
      *
      **  Process the input to the screen - delete processing.
     C                     EXSR #ZB                        *1
      *
      **  Process the screen.
     C                     EXSR #ZL                        *1
      *
      **  If CA1 is input exit main processing immediately.
     C           *INKC     CABEQ'1'       #BFB9            *1
      *
      **  If F12 is input go to select processing termination.
     C           *INKL     CABEQ'1'       #BFB9            *1
      *
      **  If F10 is input carry out F10 processing.   .
     C           *INKJ     IFEQ '1'                        B*2
      *
      **  Process F10.
     C                     EXSR #ZM                        **2
      *
      **  If a database error has occurred end processing.
     C           *INU7     CABEQ'1'       #BFB9            **2
      *
      **  If *IN20 is off, the deletion has been successful.
     C           *IN20     CABEQ'0'       #BFB9            **2
      *
      **  Process the screen.
     C                     EXSR #ZL                        **2
      *
      **  If CA1 is input exit main processing immediately.
     C           *INKC     CABEQ'1'       #BFB9            **2
      *
      **  If F12 is input go to select processing termination.
     C           *INKL     CABEQ'1'       #BFB9            **2
      *
     C                     END                             E*2
      *
      **  If the action code is now E, cease delete processing
      **  for this record.
     C           DDACTN    CABEQ'E'       #BFB9            *1
      *
     C                     END                             E1
      *
     C           #BFB9     ENDSR                           **#BFB9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #A       - initialize                                         *
      *                                                               *
      **CALLS****QCAEXEC**-*execute*cl*command                        *   E20774
      * CALLS    QCMDEXC  - execute cl command                        *   E20774
     C***********ZA0150***-*get*icd*1*************************************S01319
      *                                                               *
      * CALLED BY  MAIN   - control process                           *
      *                                                               *
      * FLDS USED  @OVR   - over ride                                 *
      *            @CMD   - command                                   *
      *            @LEN   - length                                    *
      *            @OPN   - open indicator                            *
      *            @ACTN  - saved action code                         *
      *            @CCY   - saved currency code                       *
      *            @LMIT  - saved Limit                               *
      *            @DLUP  - day of update                             *
      *            @MLUP  - month of update                           *
      *            @YLUP  - year of update                            *
      *            @TLUP  - time of update                            *
      *            @MSGID - message id                                *
      *            @ACTN1 - action code                               *
      *            @JOB   - job name                                  *
      *            @TXT   - text for message                          *
      *            @DATA1 - message data                              *
      *                                                               *
      *****************************************************************
     C           #A        BEGSR
      *
     C                     MOVEACPY@      BIS@   80
      *
      **  Override MMTTOTLL to correct logical file member.
     C                     MOVE @OVR,1    @CMD   35
     C                     Z-ADD35        @LEN   155
     C*********************CALL 'QCAEXEC'                                 E20774
     C                     CALL 'QCMDEXC'                                 E20774
     C                     PARM           @CMD
     C                     PARM           @LEN
      **  Open MMTTOTLL under User Control
     C           @OPN      IFNE '1'                        B1
     C                     OPEN MMTTOTLL                   *1
     C                     END                             E1
      *
      **  Define program work fields with reference to file fields.
     C           *LIKE     DEFN DDACTN    @ACTN
     C           *LIKE     DEFN HZCCY     @CCY
     C           *LIKE     DEFN HZLMIT    @LMIT
     C           *LIKE     DEFN HZDLUP    @DLUP
     C           *LIKE     DEFN HZMLUP    @MLUP
     C           *LIKE     DEFN HZYLUP    @YLUP
     C           *LIKE     DEFN HZTLUP    @TLUP
      *
      **  Define program work fields.
     C                     MOVE *BLANKS   @MSGID 10
     C           *LIKE     DEFN DDACTN    @ACTN1
      *
      **  Initialise screen msg queue.
     C                     MOVEL'*'       DDPGMQ
      *
      **  Set on Message Subfile end indicator.
     C                     MOVE '1'       *IN10
      *
      **  Move workstation ID to screen field.
     C                     MOVEL@JOB      DDWID
      *
      **  Move program name into *LDA field.
     C                     MOVEL'MM0007'  DBPGM
      *
     C****Call*subroutine*to*access*ICD*file*for*MIDAS*run*date.**********S01319
     C*********************EXSR*ZA0150************************************S01319
     C********************************************************************S01319
     C****Check*for*data*base*error.**************************************S01319
     C************IN80*****IFEQ*'1'************************B1*************S01319
     C********************************************************************S01319
     C*********************MOVE*'1'********INU7*************1*************S01319
     C*********************MOVE*'1'********INU8*************1*************S01319
     C*********************MOVE*'1'********INKC*************1*************S01319
     C********************************************************************S01319
     C*********************GOTO*#A9*************************1*************S01319
     C********************************************************************S01319
     C*********************END*****************************E1*************S01319
     C*   Call AOBANKR0 to access MIDAS run date.                         S01319
     C                     CALL 'AOBANKR0'                                S01319
     C                     PARM '*DBERR ' @RTCD                           S01319
     C                     PARM '*FIRST ' @OPTN                           S01319
     C           SDBANK    PARM SDBANK    DSFDY                           S01319
      *
      **  Set up Action Code text for screen.
     C                     MOVEL'(I'      DDLIST
     C                     MOVE ',A,D,E)' DDLIST
      *
      **  Set up key field text for screen messages.
     C                     MOVEL@TXT,1    @DATA1
      *
     C** READ DATA AREA - RUNDAT                                          S01319
     C           *NAMVAR   DEFN           RUNDAT                          S01319
     C                     IN   RUNDAT                                    S01319
     C**  GET ZMUSER to access default branch.                            S01319
     C**                                                                  S01319
     C           *NAMVAR   DEFN           ZMUSER                          S01319
     C                     IN   ZMUSER                                    S01319
     C                     UNLCKZMUSER                                    S01319
W16  C**                                                                  S01319
     C           #A9       ENDSR                           **#A9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * #C       - terminate                                          *
      *                                                               *
      * CALLS             -                                           *
      *                                                               *
      * CALLED BY  MAIN   - control process                           *
      *                                                               *
      * FLDS USED         -                                           *
      *                                                               *
      *****************************************************************
     C           #C        BEGSR
      *
      **  Close MMTTOTLL under User Control
     C                     CLOSEMMTTOTLL
      *
      ** Terminate Program
     C                     MOVE '1'       *INLR
      *
     C           #C9       ENDSR                           **#C9**
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * INFSR    - file error                                         *
      *                                                               *
      * CALLS    ZA0250   - clear message queue                       *
      *          ZA0440   - send message with data                    *
      *          #ZD      - moves file fields to screen               *
      *                                                               *
      * CALLED BY         -                                           *
      *                                                               *
      * FLDS USED  @DATA2 - data for message                          *
      *            @MSGID - message id                                *
      *            @DATA  - data for message                          *
      *                                                               *
      *****************************************************************
     C           INFSR     BEGSR
      *
     C           STATUS    IFEQ 01021                      B1
      *
      **  Chain to the file using the key, to see if it already exists.
      **  - *IN72 set on if the record is not found.
     C           DDCCY     CHAINMMLMCYLL             72    *1
      *
      **  If *IN72 is not on, and HZDLTF is not '*', a valid record
      **  exists on file.
     C           *IN72     IFEQ '0'                        B*2
     C           HZDLTF    ANDNE'*'                        X*2
      *
      **  Clear program message queue.
     C                     CALL 'ZA0250'                   **2
     C                     ROLBK                           **2
      *
      ** Send message - 'Record inserted by another workstation.'
     C                     MOVELDDCCY     @DATA2           **2
     C                     MOVEL'FXM1015' @MSGID           **2
     C                     CALL 'ZA0440'                   **2
     C                     PARM           @MSGID           **2
     C                     PARM           @DATA            **2
      *
      **  Set up screen and work fields with newly changed values (i.e.
      **  from chain to update file).
     C                     EXSR #ZD                        *1
     C                     MOVE 'E'       DDACTN           *1
     C                     MOVE '*DETC '  EXTTAG           **2
     C                     ELSE                            X*2
     C                     MOVE '*CANCL'  EXTTAG  6        **2
     C                     DUMP                            **2
     C                     END                             E*2
     C                     ELSE                            X1
     C                     MOVE '*CANCL'  EXTTAG  6        *1
     C                     DUMP                            *1
     C                     END                             E1
      *
     C                     ENDSREXTTAG
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      *       SUBROUTINE ZA0150 - THIS SUBROUTINE CHAINS TO FILE LF/  *
      *       FDICDRLL TO GET THE INSTALLATION CONTROL DETAILS RECORD *
      *       1 (HELD ON PF/TABTB10)                                  *
      *       INDICATOR 80 IS SET ON IF THE CHAIN FAILS OR THE RECORD *
      *       IS FLAGGED FOR DELETION.                                *
      *       IF INDICATOR 80 IS SET ON DETAILS OF THE ATTEMPTED      *
      *       ACCESS ARE PLACED IN THE LDA.                           *
      *                                                               *
      *       FIELDS USED : SS0150 - KEY USED TO ACCESS FDICDRLL      *
      *                                                               *
      *****************************************************************
     C********************************************************************S01319
     C***********ZA0150****BEGSR******************************************S01319
     C********************************************************************S01319
     C***SET*UP*KEY*TO*OBTAIN*FORMAT*TABTB10F*'01********10'**************S01319
     C*********************MOVEL'01'******SS0150*12***********************S01319
     C*********************MOVE*'10'******SS0150**************************S01319
     C********************************************************************S01319
     C***CHAIN*TO*FILE*FDICDRLL*******************************************S01319
     C***********SS0150****CHAINFDICDRLL*************80*******************S01319
     C***********IRECI*****IFNE*'D'************************B1*************S01319
     C*********************MOVE*'1'********IN80*************1*************S01319
     C*********************END*****************************E1*************S01319
     C********************************************************************S01319
     C***DEAL*WITH*DATA*BASE*ERROR****************************************S01319
     C************IN80*****IFEQ*'1'***************************************S01319
     C*********************MOVEL'FDICDRLL'DBFILE**************************S01319
     C*********************MOVEL'900'*****DBASE**************DBERROR*900**S01319
     C*********************MOVELSS0150****DBKEY***************************S01319
     C*********************END********************************************S01319
     C********************************************************************S01319
     C***********ZA0159****ENDSR******************************************S01319
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * *PSSR    - program error                                      *
      *                                                               *
      * CALLS             -                                           *
      *                                                               *
      * CALLED BY         -                                           *
      *                                                               *
      * FLDS USED         -                                           *
      *                                                               *
      *****************************************************************
     C           *PSSR     BEGSR
      *
     C                     DUMP
      *
     C           #PSSR9    ENDSR                            ***PSSR9**
      *****************************************************************
      /EJECT
     OMMLMCYP0E                @RLSFL
** Array to hold the description of the key.
Currency Code
** Array used to hold override command.
OVRDBF FILE(MMTTOTLL) MBR(MMLMCYPP)
** CPY@   **      OBJECT COPYRIGHT
(c) Misys International Banking Systems Ltd. 2001
