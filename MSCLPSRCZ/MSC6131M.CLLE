/*********************************************************************/
/*STD    CLPBASEMOD                                                  */
/*EXI *  TEXT('Midas MS Start/Stop Midas/Swift Mer: STOP  *MODULE')  */
/*********************************************************************/
/*                                                                   */
/*       Midas/SWIFT Meridian Link                                   */
/*                                                                   */
/*       MSC6131M - Midas/SWIFT Meridian communications : STOP       */
/*                                                                   */
/*       (c) Finastra International Limited 2001                     */
/*                                                                   */
/*    This source is centrally supported and must ONLY be            */
/*    amended by Core Development Personnel                          */
/*                                                                   */
/*    /COPY, Client or Country amendments must not be                */
/*    applied to this source.                                        */
/*                                                                   */
/*       Last Amend No. MD046248           Date 27Oct17              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/* Midas Release 4 --------------- Base -----------------------------*/
/* Midas DBA 3.02 ---------------------------------------------------*/
/*       Prev Amend No. CSW017 *CREATE     Date 11Feb99              */
/*                                                                   */
/*-------------------------------------------------------------------*/
/* This program is called via command WRKMSMIF                       */
/*-------------------------------------------------------------------*/
/*                                                                   */
/*       MD046248 - Finastra Rebranding                              */
/*       CSW017 - Midas/SWIFT Meridian interface                     */
/*                                                                   */
/*********************************************************************/
 
             PGM        PARM(&JOB &CJOB &CUSR &CNUM &TYPE &CPFX &SYS)
 
             DCL        VAR(&JOB) TYPE(*CHAR) LEN(26)
             DCL        VAR(&CJOB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CUSR) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CNUM) TYPE(*CHAR) LEN(6)
             DCL        VAR(&TYPE) TYPE(*CHAR) LEN(7)
             DCL        VAR(&CPFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&SYS) TYPE(*CHAR) LEN(2)
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(256)
             DCL        VAR(&RETRY) TYPE(*CHAR) LEN(5)
             DCL        VAR(&RTN_INFO) TYPE(*CHAR) LEN(512)
             DCL        VAR(&RTN_BIN) TYPE(*CHAR) LEN(4)
             DCL        VAR(&JSTAT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DTANAM) TYPE(*CHAR) LEN(10)
             DCL        VAR(&FORMAT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&INT_JOB_ID) TYPE(*CHAR) LEN(16) VALUE(' ')
 
             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2001')
 
/* Global monitor message */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ABNOR))
 
/* Check whether session is associated with this Midas system. If */
/* not send message to user and terminate.                        */
             IF         COND(&CPFX *NE &SYS) THEN(DO)
             SNDPGMMSG  MSGID(MEM6005) MSGF(MIDAS) MSGDTA(&SYS *CAT +
                          &CPFX) TOPGMQ(*PRV (MS6130M)) MSGTYPE(*COMP)
             GOTO       CMDLBL(END)
             ENDDO
 
/* Call API function to determine status of communications job */
/*  - status should be one of {*ACTIVE, *JOBQ, *OUTQ}.         */
/* NB. if system reports 'job not available' (CPF3C54), wait   */
/* 30 seconds and try again; if it still fails, ERROR.         */
             CHGVAR     VAR(&RTN_BIN) VALUE(X'00000200')
             CHGVAR     VAR(&FORMAT) VALUE('JOBI0100')
             CHGVAR     VAR(&RETRY) VALUE('FALSE')
 RETRY:      CALL       PGM(QUSRJOBI) PARM(&RTN_INFO &RTN_BIN +
                          &FORMAT &JOB &INT_JOB_ID)
             MONMSG     MSGID(CPF3C53 CPF3C55 CPF3C54 CPF3C58) EXEC(DO)
             RCVMSG     RMV(*NO) MSGDTA(&MSGDTA) MSGID(&MSGID)
             IF         COND(&MSGID *EQ 'CPF3C54') THEN(DO)
             IF         COND(&RETRY *EQ 'FALSE') THEN(DO)
             CHGVAR     VAR(&RETRY) VALUE('TRUE ')
             DLYJOB     DLY(30)
             GOTO       CMDLBL(RETRY)
             ENDDO
             ELSE       CMD(DO)
             SNDPGMMSG  MSGID(CPF3C54) MSGF(QCPFMSG) MSGDTA(&MSGDTA) +
                          TOPGMQ(*PRV (MS6130M))
             GOTO       CMDLBL(ABNOR)
             ENDDO
             ENDDO
             CHGVAR     VAR(&JSTAT) VALUE('*OUTQ')
             GOTO TAG
             ENDDO
 
/* If job found, get status from API returned data */
             CHGVAR     VAR(&JSTAT) VALUE(%SST(&RTN_INFO 51 10))
 
/* If status is not *OUTQ, end job */
 TAG:        IF         COND(&JSTAT *NE '*OUTQ') THEN(DO)
             ENDJOB     JOB(&CNUM/&CUSR/&CJOB) DELAY(120)
             MONMSG     MSGID(CPF0000)
 
/* If type is *SYNCHronous, wait for job to end before returning  */
/* NB. when the comms job is active it locks a data area named    */
/* MSMRnnnnnn, where nnnnnn is the job number.                    */
             IF         COND((&TYPE *EQ '*SYNCH') *AND (&JSTAT *EQ +
                          '*ACTIVE')) THEN(DO)
             CHGVAR     VAR(&DTANAM) VALUE('MSMR' *CAT &CNUM)
             ALCOBJ     OBJ((&DTANAM *DTAARA *EXCL)) WAIT(180)
             MONMSG     MSGID(CPF0000) EXEC(DO)
             RCVMSG     RMV(*NO) MSGDTA(&MSGDTA) MSGID(&MSGID)
 
/* If error is 'unable to allocate object', after 3 minutes, issue */
/* message and terminate abnormally.                               */
             IF         COND(&MSGID *EQ 'CPF1002') THEN(DO)
             SNDPGMMSG  MSGID(MEM6002) MSGF(MIDAS) MSGDTA(&JOB) +
                          TOPGMQ(*PRV (MS6130M)) MSGTYPE(*COMP)
             GOTO       CMDLBL(ABNOR)
             ENDDO
 
/* Else some other message (object not found?) so skip deletion */
             ELSE       CMD(GOTO CMDLBL(SKIP))
             ENDDO
 
/* Delete data area because job has ended */
             DLTDTAARA  DTAARA(&DTANAM)
 SKIP:       ENDDO
             ENDDO
 
/* Else (status IS *OUTQ), so send message to user */
             ELSE       CMD(DO)
             SNDPGMMSG  MSGID(MEM6003) MSGF(MIDAS) MSGDTA(&JOB) +
                          TOPGMQ(*PRV (MS6130M)) MSGTYPE(*COMP)
             ENDDO
 
/* Normal end */
             GOTO       CMDLBL(END)
 
/* Abnormal end */
 ABNOR:
             CHGJOB     SWS(XXXXXX11)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) +
                          MSGDTA('WRKMSMIF ended abnormally - see +
                          job log') TOPGMQ(*PRV (MS6130M)) +
                          TOMSGQ(MOPERQ)
             MONMSG     MSGID(CPF0000 MCH0000)
 
 END:
 
             ENDPGM
