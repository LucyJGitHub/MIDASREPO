     H        1
      *****************************************************************
/*STD *  RPGBASE                                                      *
/*EXI *  TEXT('Midas MS Extract SWIFT messages for I.M.M.')           *
     F*****************************************************************
     F*                                                               *
     F*  Midas - S.W.I.F.T. Direct Link Module
     F*                                                               *
     F*  MS1900 - Extract S.W.I.F.T. Messages for I.M.M.              *
     F*                                                               *
     F*  Function:  This program extracts messages and calls          *
     F*  the I.M.M. Add Message Access Object, ME1020                 *
     F*                                                               *
     F*  Called By: MSC5030 - Incoming Message Index Extract          *
     F*                                                               *
      *  (c) Finastra International Limited 2001                      *
     F*                                                               *
      *  Last Amend No. MD046248           Date 27Oct17               *
      *  Prev Amend No. CFT135             Date 20Feb13               *
      *                 AR845802           Date 14Nov12               *
      *                 CSW212             Date 03May12               *
      *                 BUG26765           Date 17Nov09               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      *                 CSW209             Date 01Apr09               *
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      *                 243149             DATE 29Nov06               *
      * Midas Plus 1.3 ----------- Base ------------------------------*
      *                 240754             Date 06Jun06               *
      *                 225169             Date 06Jun06               *
      *                 CSD031             Date 10Apr06               *
      *                 CSD027             Date 09Dec05               *
      *                 CSC022             Date 24Feb04               *
      *                 CGL013             Date 14May01               *
      * Midas Release 4 --------------- Base -------------------------*
      * Midas DBA 3.05 -----------------------------------------------*
      *                 188036             Date 26Feb01               *
     F*                 186724             Date 18Dec00               *
      * Midas DBA 3.04 -----------------------------------------------*
      *                 CFT014             Date 25May00               *
      * Midas DBA 3.03 -----------------------------------------------*
      *                 176887             Date 29Jun00               *
      *                 CFT006             Date 24Nov99               *
      * Midas DBA 3.00 ---------------- Base -------------------------*
     F*                 149261             Date 15Jun99               *
     F*                 CFT002             Date 18Nov98               *
     F*                 140532             Date 11Aug98               *
     F*                 124673             Date 04Jun98               *
     F*                 088608             DATE 10OCT95               *
     F*                 CSW095             DATE 10APR95               *
     F*                 068251             DATE 16MAR94               *
     F*                 068104             DATE 18NOV93               *
     F*                 S01435             DATE 23JUL93               *
     F*                                                               *
     F*---------------------------------------------------------------*
     F*                                                               *
      *  MD046248 - Finastra Rebranding                               *
      *  CFT135 - MT100 MultiCash Interface                           *
      *           Added hooks:                                        *
      *           OFCPYSRCZ,CFT135_017                                *
      *           OFCPYSRCZ,CFT135_018                                *
      *           OFCPYSRCZ,CFT135_019                                *
      *           OFCPYSRCZ,CFT135_020                                *
      *  AR845802 - Looping occurs when tag 77T of an MT103 message is*
      *             processed. (Child: AR845804)                      *
      *  CSW212 - SWIFT 2012 Changes                                  *
      *  BUG26765 - Field settlement amount mapped from 33B instead   *
      *             of 32A                                            *
      *  CSW209 - SWIFT 2009 Changes                                  *
     F*   243149 - Database error 017 in SR ZALIGN.  Remove useless   *
     F*          - coding for CFT006 (field WTFAMT never used.)       *
     F*          - Applied fix 230505.                                *
      *  240754 - SQ10n fields are only 1 char and thus only          *
      *            corrupt values greater than 9 not zeroise them.    *
      *  225169 - Accept incoming messages using a SWIFT currency     *
      *            different from the Midas currency.                 *
      *  CSD031 - Enhanced Centralised Static Data (Recompile)        *
      *  CSD027 - Conversion Of Customer Number to Alpha              *
      *  CSC022 - Commitment Control Changes for MidasPlus            *
      *           (Recompile)                                         *
     F*   CGL013 - MT94x Message Generation                           *
     F*   188036 - Remove leading zeros before amounts
     F*   186724 - :34e: incorrectly formatted                        *
     F*   CFT014 - Addition of MT103 messages                         *
     F*   176887 - Allow for 8,9,11 or 12 character sender            *
     F*   CFT006 - Addition of MT101 and MT102 messages               *
     F*   149261 - Initialise century field for MEINCRPD.             *
     F*   CFT002 - Straight Through Processing Phase 1                *
      *   140532 - SWIFT98 fix                                        *
     F*            Cannot extract TRN no. for certain messages        *
     F*            e.g. MT515 and MT518 as it holds TRN no. info      *
     F*            in fld :20C: in the format :20C:cccc//trn no.....  *
     F*   124673 - Add Century fields for Year 2000.                  *
     F*   088608 - The pgm does not remove the LT ID from the         *
     F*            incoming SWIFT msgs and this caused inconsistency  *
     F*            between MSDL and IMM enquiry.                      *
     F*            For MSDL enq by sender, the pgm expects BIC+LT ID  *
     F*            For IMM enq, the pgm expects BIC only.             *
     F*            For IMM, construct the sender TID according to the *
     F*            amendment made in MS5030.                          *
     F*  CSW095 - S.W.I.F.T 1995 Message Changes.                     *
     F*           Increase arrays to handle a 10,000 character        *
     F*           message.                                            *
     F*  068251 - Fill MPPYAM with SWIFT Amount                       *
     F*  068104 - S: Block is Optinal, no error exit.                 *
     F*  S01435 - Incoming Message Management                         *
     F*                                                               *
     F*****************************************************************
     F*                                                               *
     F*  Indicator usage                                              *
     F*  ~~~~~~~~~~~~~~~                                              *
     F*                                                               *
     F*  50    First cycle                                            *
     F*  60    EOF on MSIXI2PD                                        *
     F*  61    EOF on MSMSI2PD                                        *
     F*  62    General work indicator                                 *
     F*  63    General work indicator                                 *
     F*  64    Shut down of job requested                             *
     F*  90    General Work Indicator                                 *
     F*                                                               *
     F*  U7/U8 Error Ocurred                                          *
     F*  LR    End program                                            *
     F*                                                               *
     F*****************************************************************
     FMSIXI2LDUF  E           K        DISK         KINFSR SRFILE     UC
     F                                              KCOMIT
      *
      *  Swift Messages - By Mor, select IMPF EQ ' '
      *
     FMSMSI2LAIF  E           K        DISK         KINFSR SRFILE     UC
      *                                                                                       CSW209
      ** Starting Message Tag in Sequence                                                     CSW209
      *                                                                                       CSW209
     FMESTGSL1IF  E           K        DISK                                                   CSW209
      *
      *  Swift Messages - By Mor, select ACNK NE 'A,N'
      *
     F/COPY WNCPYSRC,MS1900DFPG
      *
      *  /Copy point for File Definition
      *
     F***SDCURRLDIF  E           K        DISK                                         225169 230505
     F/EJECT
     E                    CPY@    1   1 80
      *
      *  Copyright table
      *
     E/COPY WNCPYSRC,MS1900DEPG
      *
      *  /Copy point for Arrays
      *
     E/COPY MECPYSRC,SRERRE
      *
      *  Copysource for error processing
      *
     E***********         SWD      2560  1                                CSW095
     E                    SWD      9999  1                                CSW095
      *
      *  Swift Data
      *
     E                    TTAG   10  60  3   TFMT    1
      *
      *  Value Date/Currency/Amount formats for tags 30 to 34
      *
     E************        STYP    1  20  3   STAG    3                    CFT002
     E                    STYP    1  22  3   STAG    3                    CFT002
      *
      *  Message Type/Tag no. that denotes start of a new Part No.
      *
     E************        RTYP    1   8  3   RTAG    3                    CFT002
     E                    RTYP    1  10  3   RTAG    3                    CFT002
      *                                                                   CFT006
      *  Message Type/Tag No. that denotes source of Transaction Ref.     CFT006
      *                                                                   CFT006
     E                    TREX    1   2  9                                CFT006
      *                                                                   CFT006
      *  Msg typ/Seq/Tag no. that are not start of new part number        CFT006
      *                                                                   CFT006
     E                    RFEX    1   2  9                                CFT006
      *                                                                   CFT006
      *  Msg typ/Seq/Tag no. amounts that are not used to fill the        CFT006
      *  part file                                                        CFT006
      *                                                                   CFT006
     E***********         AMEX    1   2  9                         CFT006 CFT014
     E**********          AMEX    1   3  9                                           CFT014 BUG26765
     E**********          AMEX    1   4  9                                           BUG26765 CSW212
     E                    AMEX    1   6  9                                                    CSW212
      *                                                                   CFT006
      *  Msg typ/Seq/Tag no. that are not reference  number               CFT006
      *                                                                   CFT006
     E                    DTEX    1   1  9                                CFT014
      *                                                                   CFT014
      *  Msg typ/Seq/Tag no. that will follow a special extraction        CFT014
      *  in SRBLK4 and in SRDAT4                                          CFT014
      *                                                                   CFT014
     E                    FLA        17  1               format field     068251
      *                                                                   068251
      *  Seventeen long field for substitution of "," for ","             068251
      *                                                                   068251
     E/EJECT
     I/COPY WNCPYSRC,MS1900DIPG
      *
      *  /Copy point for Input specifications
      *
      *
     ICPYR@#      DS
      *
      *  Data structure for compilation  - Copyright insertion
      *
     I                                        1  80 CPY@
     I                                        1  20 CPY@##
      *
     I/COPY MECPYSRC,SRERRI
      *
      *  End of Program Error Processing copysource
      *
     IRUNDTA    E DSRUNDAT
      *
      *  Define rundat data area
      *
     IINCR      E DSMEINCRPD
      *
      *  Define Incoming Message Control data structure
      *
     IINDT      E DSMEINDTPD
      *
      *  Define Incoming Message Detail data structure
      *
     IINMP      E DSMEINMPPD
      *
      *  Define Incoming Message Part Detail data structure
      *
     IINMC      E DSMEINMCPD
      *
      *  Define parameters to be passed for message checking
      *
     IIRFT      E DSMEIRFTPD                                                     CFT006
     I              MTPY                            RFMTPY                       CFT006
      *                                                                          CFT006
      *  Msg Management 101 and 102 Totals (amounts and transactions)            CFT006
      *                                                                          CFT006
     ISCSARD    E DSSCSARDPD                                                     CFT006
      *                                                                          CFT006
      * Switchable Features Descriptions *                                       CFT006
      *                                                                          CFT006
     ISDCURR    E DSSDCURRPD                                                     CFT006
      *                                                                          CFT006
      * Currency details                                                         CFT006
      *                                                                          CFT006
     IDSFDY     E DSDSFDY                                                        CFT006
     IDSSDY     E DSDSSDY                                                        CFT006
      *                                                                          CFT006
      * Data Structures used by Access Programs                                  CFT006
      *                                                                          CFT006
     IW1DATA      DS                            512
      *
      *  Define data structure used to pass file data structures
      *
     IDSSTID      DS
      *
      *  Breakdown of Incoming Message Sender field
      *
     I                                        1  12 STID
     I                                        1   8 STID1
     I                                        9   9 STID2
     I                                       10  12 STID3
     IDSSNDR      DS
      *
      *  Construct Sender field
      *
     I                                        1  20 SNDR
     I                                        1   8 SNDR1
     I                                        9  11 SNDR2
     I                                       12  20 SNDR3
      *
     IDSBLK2      DS
      *
      *  Breakdown of Block 2 data
      *
      *           Input/Output Identifier
     I                                        1   1 B2IO
      *           Message Type
     I                                        2   40B2TYP
      *           Input Time (sender)
     I                                        5   80B2INTI
      *           Mir/Input Date (sender)
     I                                        9  36 B2MIR
     I                                        9  14 B2INTD
      *           Output Date (receiver)
     I                                       37  420B2OUTD
      *           Output Time (receiver)
     I                                       43  460B2OUTT
      *           Message Priority
     I                                       47  47 B2PTY
      *
     IDSTAG       DS
      *
      *  Breakdown Tag details for message part processing
      *
     I                                        1   5 WKTAG
     I                                        1   3 PTAG
     I                                        2   4 PTAGP
     IDSCKTG      DS                                                      CFT006
      *                                                                   CFT006
      *  Breakdown Tag exception                                          CFT006
      *                                                                   CFT006
     I                                        1   9 WCKARG                CFT006
     I                                        1   3 WCKMTY                CFT006
     I                                        4   4 WCKSEQ                CFT006
     I                                        5   9 WCKTAG                CFT006
      *
     IDSMSG       DS
     I                                        1  25 DMSG
      *
      *  Breakdown message details for Date/Amount/Currency
      *  Format 1
      *
      *             Tag 30                } Date only
      *         and Tag 31 (all formats)  }
      *
      *             Tag 32 (A,C,D,P,R,S)  }
      *         and Tag 33 (A,C,D,P,R)    } Date/Currency/Amount
      *         and Tag 34 (A,C,D,P,R)    }
      *
      *             Tag 32 (T)            } Date (ISO form)/Ccy/Amt
      *
      *             Tag 32 (K)            } Maturity Period/Ccy/Amt
      *         and Tag 33 (K)            }
      *
     I                                        1   60D1DTE
     I                                        1   1 D1MTY
     I                                        2   40D1MNO
     I                                        5   6 D1MIN
      *
     I                                        7   9 D1CCY
     I                                       10  24 D1AMT
      *
      *  Format 2
      *
      *             Tag 32 (B,G,M)        }
      *         and Tag 33 (B,E,F,S,T,V)  }
      *         and Tag 33 (G)            } Currency/Amount
      *         and Tag 34 (B)            }
      *
      *             Tag 32 (E)            } Currency Only
      *
      *             Tag 32 (L)            } Currency/Amount (optional)
      *
      *             Tag 32 (F)            } Unit of metal or coin/Qty
      *
     I                                        1   3 D2CCY
     I                                        4  18 D2AMT
      *
      *  Format 3
      *
      *             Tag 32 (N)            } Negative Ind. (optional)
      *         and Tag 33 (N)            } plus Date/Currency/Amount.
      *         and Tag 34 (N)            } If no ind, use format A
      *
     I                                        1   1 D3NEG
     I                                        2   70D3DTE
     I                                        8  10 D3CCY
     I                                       11  25 D3AMT
     I                                        7   7 D3C7
      *
      *  Format 4
      *
      *             Tag 32 (H)            } Neg Ind. (optional) plus
      *         and Tag 34 (E)            } plus Currency/Amount
      *                                   } If no ind, use format B
      *
     I                                        1   1 D4NEG
     I                                        2   4 D4CCY
     I                                        5  19 D4AMT
     I                                        4   4 D4C4
      *
      *  Format 5
      *
      *             Tag 34 (G,H)          } No. of Days/Ccy/Amount
      *
     I                                        1   30D5DAY
     I                                        4   6 D5CCY
     I                                        7  21 D5AMT
     I                                        1   1 D5C1
      *
      *  Format 6
      *
      *             Tag 34 (F)            } Currency/DR,CR/Amount
      *
     I                                        1   3 D6CCY
     I                                        4   4 D6DC
     I                                        5  19 D6AMT
      *
     IDSDLIM      DS
      *
      *  To define carriage return delimiters for message scanning
      *
      *  Hex value  '  :'  = CRLF: Start of text/Field Separator
      *              027
      *              D5A
      *
     I                                        1   3 CRLFC
     I                                        1   1 BTA
     I                                        2   2 BTB
     I                                        3   3 CLN
      *                                                                   CFT006
      * Data structure used to memorize header and trailer sequence       CFT006
      *                                                                   CFT006
     IDSTGSQ      DS                        100                           CFT006
     I                                        1   1 MTGSQ                 CFT006
     I                                        2   6 MTGNM                 CFT006
     I                                        7   7 MFPID                 CFT006
     I                                        8 107 MTFLD                 CFT006
      *                                                                   CFT014
      *  Breakdown of Result retuned back by MS1910                       CFT014
      *                                                                   CFT014
     IDSRSLT      DS                                                      CFT014
     I                                        1 256 WRA256                CFT014
     I                                        1   50WRN05                 CFT014
      *                                                                   CSW095
      * Data structure used in scanning SWIFT message data                CSW095
      *                                                                   CSW095
     I***DSSWD*******DS                          12560                    CSW095
      ***********                                                         CSW095
      **Data*structure*used*in*scanning*SWIFT*messag**data*************   CSW095
      ***********                                                         CSW095
     I***********                             12560 SWD                   CSW095
     IDSSWD       DS                          19999                       CSW095
      *                                                                   CSW095
      * Data structure used in scanning SWIFT message data                CSW095
      *                                                                   CSW095
     I                                        19999 SWD                   CSW095
      *
      * Named Constant used to determine if a field contains numerics
      *
     I              '0123456789'          C         DIGITS
      *                                                                         CFT006
      * Relationships between message type, sequence, and part number           CFT006
      *                                                                         CFT006
     I              0                     C         SQ101A                      CFT006
     I              0                     C         SQ102A                      CFT006
     I              0                     C         SQ102C                      CFT006
      *                                                                         CFT006
      * Tags that indicate start of a sequence (other than B)                   CFT006
      *                                                                         CFT006
     I              ':20:'                C         BG101A                      CFT006
     I              ':20:'                C         BG102A                      CFT006
     I              ':32A:'               C         BG102C                      CFT006
     I/EJECT
      *****************************************************************
      *                 M A I N L I N E
      *****************************************************************
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'MAIN'    @STK,Q
      *
      *  Define entry parameters
      *
     C           *ENTRY    PLIST
     C                     PARM           W0RTN   7
      *
      *  Initialise program
      *
     C           *IN50     IFEQ '0'
     C                     EXSR SRINIT
     C                     END
      *
      * Read available SWIFT messages until EOF
      *
     C           *LOVAL    SETLLMSIXI2LD
     C                     READ MSIXI2LD                 60
     C                     MOVEL*BLANKS   W0PREF
     C                     MOVELMOR       W0PREF
      *
     C           *IN60     DOWEQ'0'
      *
      * Verify SWIFT message
      *
     C                     EXSR SRVALD
      *
      * If valid message to be used - extract SWIFT data and update
      * database
      *
     C           W1RTN     IFEQ 'MIN0090'
      *
     C                     EXSR SRSWFT
      *
      * Add Incoming Message Details
      *
     C                     EXSR SRDETL
      *
      * Add Incoming Message Control
      *
     C                     EXSR SRHEAD
      *
      * Call MT920 processing                                                                 CGL013
      *                                                                                       CGL013
     C           CGL013    IFEQ 'Y'                                                           CGL013
     C           MTPY      ANDEQ'920'                                                         CGL013
     C                     EXSR MT920                                                         CGL013
     C                     ENDIF                                                              CGL013
      *
      * Set Incoming Msg Processed Flag to 'P' on MSIXI2LD
      *
     C                     MOVEL'P'       IMPF
     C                     EXCPTMSIXI2
     C                     COMIT
      *
      *  Prompt FT Auto Generation
      *
     C                     EXSR SRAUTO
      *
     C*******              END                                                                CGL013
     C                     ELSE                                                               CGL013
      *                                                                                       CGL013
      * Call MT920 processing                                                                 CGL013
      *                                                                                       CGL013
     C           CGL013    IFEQ 'Y'                                                           CGL013
     C           MTPY      ANDEQ'920'                                                         CGL013
     C                     EXSR MT920                                                         CGL013
      *                                                                                       CGL013
      * Set Incoming Msg Processed Flag to 'P' on MSIXI2LD                                    CGL013
      *                                                                                       CGL013
     C                     MOVEL'P'       IMPF                                                CGL013
     C                     EXCPTMSIXI2                                                        CGL013
     C                     COMIT                                                              CGL013
     C                     ENDIF                                                              CGL013
     C                     ENDIF                                                              CGL013
      *
      * Get next available SWIFT record
      *
     C                     READ MSIXI2LD                 60
     C                     MOVEL*BLANKS   W0PREF
     C                     MOVELMOR       W0PREF
      *
      * Check for shut down / cancellation
      *
     C                     SHTDN                     64
      *
     C           *IN64     IFEQ '1'
     C                     MOVEL'1'       *INLR
     C                     RETRN
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     RETRN
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRVALD   : Validate SWIFT Message                            *
      *                                                               *
      *  CALLED BY: Main processing section                           *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *****************************************************************
     CSR         SRVALD    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRVALD'  @STK,Q
      *
      * Set up data structure to be passed as a parameter
      *
     C                     CLEARINMC
      *
     C                     Z-ADD0         MCMSGR
     C                     MOVELMTPY      MCMTPY
     C                     MOVELMIR       MCMIR
     C/COPY WNCPYSRC,MS1900C024
     C                     MOVEL'SWIFT'   MCNWRK
     C/COPY WNCPYSRC,MS1900C025
     C                     MOVELMOR       MCMOR
     C                     MOVEL'*ENTRY ' MCACPT
     C                     MOVELSNDR      MCSNDR
     C                     MOVEL##PGM     MCCPGM
      *
     C/COPY WNCPYSRC,MS1900C020
      * Verify SWIFT message
      *
     C                     MOVELINMC      W1DATA
      *
     C                     CALL 'ME1020'               90
     C                     PARM '*ADDMSG 'W1ACT   8
     C                     PARM           W1DATA
     C                     PARM *BLANKS   W1RTN   7
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W1RTN     OREQ '*ERROR*'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD1         W0ERNB           * DB ERROR 01 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  If return with invalid message,
      *  set Incoming Msg Processed Flag to 'I' Invalid, on MSIXI2LD
      *
      *  Or message is S.W.I.F.T. Specific
      *
     C           W1RTN     IFEQ 'MIN0091'
     C           MTPY      ORGE '000'
     C           MTPY      ANDLT'100'
     C/COPY WNCPYSRC,MS1900C023
     C           CGL013    IFEQ 'Y'                                                           CGL013
     C           MTPY      ANDNE'920'                                                         CGL013
     C           CGL013    ORNE 'Y'                                                           CGL013
     C                     MOVEL'MIN0091' W1RTN
     C                     MOVEL'I'       IMPF
     C                     EXCPTMSIXI2
     C                     COMIT
     C                     ENDIF                                                              CGL013
      *
      *  If return with valid message,
      *  set data structure with returned fields - unique msg ref.
      *
     C                     ELSE
     C                     MOVELW1DATA    INMC
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXVALD    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRSWFT   : Extract Data From SWIFT Message                   *
      *                                                               *
      *  CALLED BY: Main processing section                           *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *****************************************************************
     CSR         SRSWFT    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRSWFT'  @STK,Q
      *
      *  Initialise fields
      *
     C                     MOVEL*BLANKS   SWD
     C                     Z-ADD1         D
     C                     MOVEL'0'       *IN61
     C           CFT014    IFEQ 'Y'                                       CFT014
      * Clear big array                                                   CFT014
     C                     EXSR CLRARR                                    CFT014
     C                     Z-ADD32767     LENMAX                          CFT014
     C                     ELSE                                           CFT014
     C                     Z-ADD9999      LENMAX                          CFT014
     C                     ENDIF                                          CFT014
      *
      * Get all records for SWIFT message and place all associated
      * records into array. A maximum of 10 records is assumed.
      *
     C           MOR       SETLLMSMSI2LA
     C           MOR       READEMSMSI2LA                 61
      *
     C           *IN61     DOWEQ'0'
      *
      **IF*more*than*10*lines*of*data,*process*for*database*error******   CSW095
      * IF more than 9999 characters, process for database error          CSW095
      * ELSE move data to array
      *
     C***********D         IFGT 2560                                      CSW095
     C***********D         IFGT 9999                               CSW095 CFT014
     C           D         IFGT LENMAX                                    CFT014
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVELWKDATA    W0KEY            ***************
     C                     Z-ADD2         W0ERNB           * DB ERROR 02 *
     C**********           MOVEL'MIN0094' W0MSGD           ***************CSW095
     C                     MOVEL'MIN0251' W0MSGD                          CSW095
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
     C                     ELSE
     C           CFT014    IFEQ 'Y'                                       CFT014
      * Fill big array                                                    CFT014
     C                     MOVELMDTA      P@FCT1                          CFT014
     C                     Z-ADDD         P@LEN2                          CFT014
     C                     EXSR FILARR                                    CFT014
     C                     ELSE                                           CFT014
     C                     MOVEAMDTA      SWD,D
     C                     ENDIF                                          CFT014
     C                     END
      *
      *  Get next record. If it is for SWIFT message then determine
      *  where to fill array.
      *
     C           MOR       READEMSMSI2LA                 61
      *
     C                     ADD  256       D
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXSWFT    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRDETL   : Add Incoming Message Details                      *
      *                                                               *
      *  CALLED BY: Main processing section                           *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRDETL    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRDETL'  @STK,Q
      *
      *  Initialise message fields and work fields
      *
     C                     Z-ADD0         WKPART
     C                     Z-ADD0         WKSEQ
     C                     MOVEL*BLANKS   WSQANZ                          CFT006
     C                     MOVEL*BLANKS   WKSVDT
     C                     MOVEL*BLANKS   WKCYCD
     C                     MOVEL*BLANKS   WKAMTS
     C                     MOVEL*BLANKS   WKPDE
     C                     MOVEL*BLANKS   WKSPD
     C                     MOVEL*BLANKS   WKTAG
     C                     MOVEL*BLANKS   WKDATA
      *
     C                     MOVEL*BLANKS   L2INBK
     C                     MOVEL*BLANKS   L2ACIN
     C                     MOVEL*BLANKS   L2BENF
      *
      *  Clear Incoming Message Control file data structure
      *  (other data structures are cleared more frequently)
      *
     C                     CLEARINCR
      *                                                                   CFT006
      *  Same thing applies to MT101 MT102 specific control files         CFT006
     C                     CLEARIRFT                                      CFT006
      *
      *  Construct Sender Information from MSIXI2LD
      ** Move the Sender SWIFT address directly to the output field for   088608
      ** IMM database update access object                                088608
      *
     C***********          MOVELSTID1     SNDR1                           088608
     C***********          MOVELSTID3     SNDR2                           088608
     C***********          MOVEL*BLANKS   SNDR3                           088608
     C                     MOVEL*BLANK    SNDR                            088608
     C           ' '       SCAN STID      @LEN    20     99               176887
     C           *IN99     IFEQ '0'                                       176887
     C           @LEN      OREQ 9                                         176887
     C           STID1     CAT  STID3     SNDR                            176887
     C                     ELSE                                           176887
     C                     MOVELSTID      SNDR                            088608
     C                     END                                            176887
      * If MT101 :51A: is optional.                                       CFT006
      * In order to respect unicity of key in MEIRFTL0                    CFT006
      * put sender into sending institution                               CFT006
     C           MTPY      IFEQ '101'                                     CFT006
     C                     MOVELSNDR      SNDIST                          CFT006
     C                     ENDIF                                          CFT006
      *
      *  Determine which tag no. denotes the start of a new Part No.
      *  for the message type.
      *
      *  Look up a table and if the message type is not found then use
      *  tag :20 as the default.
      *
     C                     Z-ADD1         X
     C           MTPY      LOKUPSTYP,X                   63
      *
     C           *IN63     IFEQ '1'
     C                     MOVELSTAG,X    PSTAG   3
     C                     ELSE
     C                     MOVEL':20'     PSTAG
     C                     END
      *
      *  Determine which tag no. denotes the source of the Transaction
      *  Reference field for the message type.
      *
      *  Look up a table and if the message type is not found then use
      *  tag :20 as the default.
      *
     C                     Z-ADD1         X
     C           MTPY      LOKUPRTYP,X                   63
      *
     C           *IN63     IFEQ '1'
     C                     MOVELRTAG,X    TRTAG   3
     C                     ELSE
     C                     MOVEL':20'     TRTAG
     C                     END
      *
      *  /Copy point for User Specific Translation
      *
     C/COPY WNCPYSRC,MS1900DUSP
      *
      *  Process Block Identifier 1:
      *
     C                     EXSR SRBLK1
      *
      *  Process Block Identifier 2:
      *
     C                     EXSR SRBLK2
      *
      *  Process Block Identifier 3:
      *
     C                     EXSR SRBLK3
      *
      *  Process Block Identifier 4:
      *
     C/COPY WNCPYSRC,MS1900C014
     C                     EXSR SRBLK4
     C/COPY WNCPYSRC,MS1900C015
      *
      *  Process Block Identifier 5:
      *
     C                     EXSR SRBLK5
      *
      *  Process Block Identifier S:
      *
     C                     EXSR SRBLKS
      *
      *  Unwind subroutine stack name
      *
     C           EXDETL    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK1   : Process Block Identifier 1                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLK1    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLK1'  @STK,Q
      *
      * Extract Block I.D. and place in parameter data structure
      *
      * Search starts from the closing bracket of the previous block.
      * As this is the first block default the start posn to 1
      *
     C                     MOVEL'1:'      BLKID   2
     C                     Z-ADD1         C
     C                     EXSR SRBLOK
      *
      * If no Block 1: found process for database error
      *
     C           WKTAG     IFEQ *BLANKS
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVELWKDATA    W0KEY            ***************
     C                     Z-ADD3         W0ERNB           * DB ERROR 03 *
     C                     MOVEL'MIN0093' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      * Extract data string
      *
      * Setup start position - will always be the first character after
      * the end of the Block I.D.
      *
     C           E         ADD  1         S                Start Posn
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database. The block no. is used
      *  as the message tag.
      *
     C                     EXSR SRUPDT
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK1    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK2   : Process Block Identifier 2                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLK2    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLK2'  @STK,Q
      *
      * Extract Block I.D.
      *
     C                     MOVEL'2:'      BLKID
     C                     EXSR SRBLOK
      *
      * If no Block 2: found process for database error
      *
     C           WKTAG     IFEQ *BLANKS
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVELWKDATA    W0KEY            ***************
     C                     Z-ADD4         W0ERNB           * DB ERROR 04 *
     C                     MOVEL'MIN0093' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      * Extract data string
      *
      * Set up start posn - will always be the first character after
      * the end of the tag no.
      *
     C           E         ADD  1         S                Start Posn
     C                     EXSR SRDATA
      *
      *  The first character of the message data denotes whether it is
      *  an Incoming or Outgoing message.
      *
      *  If 'I' for Incoming, results in a database error as Incoming
      *  message processing is not catered for.
      *
      *  If 'O' for Outgoing, Sent date and time will be stored on the
      *  Incoming Message Control file.
      *
     C                     MOVELWKDATA    DSBLK2
      *
     C           B2IO      IFEQ 'I'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVELWKDATA    W0KEY            ***************
     C                     Z-ADD5         W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MIN0092' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database. Block No. is used as the
      *  tag no.
      *
     C                     EXSR SRUPDT
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK2    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK3   : Process Block Identifier 3                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLK3    BEGSR
      *
      *  Set up subroutine stack name
      *
     C           CSW209    IFEQ 'Y'                                                           CSW209
     C                     MOVEL*BLANKS   WKVALF  8                                           CSW209
     C                     ENDIF                                                              CSW209
     C                     ADD  1         Q
     C                     MOVEL'SRBLK3'  @STK,Q
     C/COPY WNCPYSRC,MS1900C005
      *
      *  Extract Block I.D.
      *
     C                     MOVEL'3:'      BLKID
     C                     EXSR SRBLOK
      *
      *  Only process if Block Identifier is found - add header tag
      *
     C           WKTAG     IFNE *BLANKS
     C                     MOVEL*BLANKS   WKDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
     C                     EXSR SRUPDT
     C/COPY WNCPYSRC,MS1900C006
      *
      *  Block Identifier 3 may have two different tags. Each tag
      *  is of the format {nnn:xxxxx}
      *
      *  May be in the order of {113: {108: or vice versa. To allow for
      *  this, commence the search of each tag from the end of the
      *  Block I.D.
      *
     C                     Z-ADDE         B
     C/COPY WNCPYSRC,MS1900C011
      *
      *              *****************************
      *
      *  Extract tag '113:'
      *
      *
      *  Clear message tag field
      *
      *  Determine Start position of tag - begin search from end of
      *  block identifier
      *
     C                     MOVEL*BLANKS   WKTAG
      *
     C                     MOVEL'{113:'   TAGID   5
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELTAGID     P@FCT1                          CFT014
     C                     Z-ADD5         P@LEN1                          CFT014
     C                     Z-ADDB         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     S                               CFT014
     C                     ELSE                                           CFT014
     C           TAGID:5   SCAN DSSWD:B   S
     C                     ENDIF                                          CFT014
      *
      *  If Tag found, extract data which exists between tag no. and
      *  next closing bracket
      *
      *  Beginning of tag no. is the position after the open bracket
      *
      *  End of the tag no. is the next colon, start search after
      *  start position of the tag reference
      *
     C           S         IFNE 0
     C                     MOVEL'113:'    WKTAG
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVEL':'       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     E                               CFT014
     C                     ELSE                                           CFT014
     C           ':':1     SCAN DSSWD:S   E
     C                     ENDIF                                          CFT014
      *
      *  Extract data string starting from position after end of tag
      *
     C           E         ADD  1         S
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
     C/COPY WNCPYSRC,MS1900C007
      *
     C                     END
      *
      *              *****************************
      *
      *  Extract tag '108:'
      *
      *  Clear message tag field
      *
      *  Determine Start position of tag - begin search from end of
      *  block identifier
      *
     C                     MOVEL*BLANKS   WKTAG
      *
     C                     MOVEL'{108:'   TAGID
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELTAGID     P@FCT1                          CFT014
     C                     Z-ADD5         P@LEN1                          CFT014
     C                     Z-ADDB         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     S                               CFT014
     C                     ELSE                                           CFT014
     C           TAGID:5   SCAN DSSWD:B   S
     C                     ENDIF                                          CFT014
      *
      *  If Tag found, extract data that exists between end of tag no.
      *  and next closing bracket
      *
      *  Beginning of tag no. is the position after the open bracket
      *
      *  End of the tag no. is the next colon, start search after
      *  start position of the tag reference
      *
     C           S         IFNE 0
     C                     MOVEL'108:'    WKTAG
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVEL':'       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     E                               CFT014
     C                     ELSE                                           CFT014
     C           ':':1     SCAN DSSWD:S   E
     C                     ENDIF                                          CFT014
      *
      *  Extract data string starting from position after end of tag
      *
     C           E         ADD  1         S
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
     C/COPY WNCPYSRC,MS1900C008
      *
     C                     END
     C/COPY WNCPYSRC,MS1900C004
      *                                                                                       CSW209
      ** Perform only if CSW209 is switch on                                                  CSW209
      *                                                                                       CSW209
     C           CSW209    IFEQ 'Y'                                                           CSW209
      *                                                                                       CSW209
      **             *****************************                                            CSW209
      **                                                                                      CSW209
      ** Extract tag '103:'                                                                   CSW209
      **                                                                                      CSW209
      **                                                                                      CSW209
      ** Clear message tag field                                                              CSW209
      **                                                                                      CSW209
      ** Determine Start position of tag - begin search from end of                           CSW209
      ** block identifier                                                                     CSW209
      *                                                                                       CSW209
     C                     MOVEL*BLANKS   WKTAG                                               CSW209
      *                                                                                       CSW209
     C                     MOVEL'{103:'   TAGID   5                                           CSW209
      *                                                                                       CSW209
     C           CFT014    IFEQ 'Y'                                                           CSW209
     C                     MOVELTAGID     P@FCT1                                              CSW209
     C                     Z-ADD5         P@LEN1                                              CSW209
     C                     Z-ADDB         P@LEN2                                              CSW209
     C                     EXSR SCNARR                                                        CSW209
     C                     Z-ADDWRN05     S                                                   CSW209
     C                     ELSE                                                               CSW209
     C           TAGID:5   SCAN DSSWD:B   S                                                   CSW209
     C                     ENDIF                                                              CSW209
      *                                                                                       CSW209
      ** If Tag found, extract data which exists between tag no. and                          CSW209
      ** next closing bracket                                                                 CSW209
      **                                                                                      CSW209
      ** Beginning of tag no. is the position after the open bracket                          CSW209
      **                                                                                      CSW209
      ** End of the tag no. is the next colon, start search after                             CSW209
      ** start position of the tag reference                                                  CSW209
      *                                                                                       CSW209
     C           S         IFNE 0                                                             CSW209
     C                     MOVEL'103:'    WKTAG                                               CSW209
      *                                                                                       CSW209
     C           CFT014    IFEQ 'Y'                                                           CSW209
     C                     MOVEL':'       P@FCT1                                              CSW209
     C                     Z-ADD1         P@LEN1                                              CSW209
     C                     Z-ADDS         P@LEN2                                              CSW209
     C                     EXSR SCNARR                                                        CSW209
     C                     Z-ADDWRN05     E                                                   CSW209
     C                     ELSE                                                               CSW209
     C           ':':1     SCAN DSSWD:S   E                                                   CSW209
     C                     ENDIF                                                              CSW209
      *                                                                                       CSW209
      ** Extract data string starting from position after end of tag                          CSW209
      *                                                                                       CSW209
     C           E         ADD  1         S                                                   CSW209
     C                     EXSR SRDATA                                                        CSW209
      *                                                                                       CSW209
      ** Set flag to denote first line of tag                                                 CSW209
      *                                                                                       CSW209
     C                     MOVEL'F'       WKFPID                                              CSW209
      *                                                                                       CSW209
      ** Add message line details to database                                                 CSW209
      *                                                                                       CSW209
     C                     EXSR SRUPDT                                                        CSW209
      *                                                                                       CSW209
     C                     END                                                                CSW209
      *                                                                                       CSW209
      *                                                                                       CSW209
      **             *****************************                                            CSW209
      **                                                                                      CSW209
      ** Extract tag '115:'                                                                   CSW209
      **                                                                                      CSW209
      **                                                                                      CSW209
      ** Clear message tag field                                                              CSW209
      **                                                                                      CSW209
      ** Determine Start position of tag - begin search from end of                           CSW209
      ** block identifier                                                                     CSW209
      *                                                                                       CSW209
     C                     MOVEL*BLANKS   WKTAG                                               CSW209
      *                                                                                       CSW209
     C                     MOVEL'{115:'   TAGID   5                                           CSW209
      *                                                                                       CSW209
     C           CFT014    IFEQ 'Y'                                                           CSW209
     C                     MOVELTAGID     P@FCT1                                              CSW209
     C                     Z-ADD5         P@LEN1                                              CSW209
     C                     Z-ADDB         P@LEN2                                              CSW209
     C                     EXSR SCNARR                                                        CSW209
     C                     Z-ADDWRN05     S                                                   CSW209
     C                     ELSE                                                               CSW209
     C           TAGID:5   SCAN DSSWD:B   S                                                   CSW209
     C                     ENDIF                                                              CSW209
      *                                                                                       CSW209
      ** If Tag found, extract data which exists between tag no. and                          CSW209
      ** next closing bracket                                                                 CSW209
      **                                                                                      CSW209
      ** Beginning of tag no. is the position after the open bracket                          CSW209
      **                                                                                      CSW209
      ** End of the tag no. is the next colon, start search after                             CSW209
      ** start position of the tag reference                                                  CSW209
      *                                                                                       CSW209
     C           S         IFNE 0                                                             CSW209
     C                     MOVEL'115:'    WKTAG                                               CSW209
      *                                                                                       CSW209
     C           CFT014    IFEQ 'Y'                                                           CSW209
     C                     MOVEL':'       P@FCT1                                              CSW209
     C                     Z-ADD1         P@LEN1                                              CSW209
     C                     Z-ADDS         P@LEN2                                              CSW209
     C                     EXSR SCNARR                                                        CSW209
     C                     Z-ADDWRN05     E                                                   CSW209
     C                     ELSE                                                               CSW209
     C           ':':1     SCAN DSSWD:S   E                                                   CSW209
     C                     ENDIF                                                              CSW209
      *                                                                                       CSW209
      ** Extract data string starting from position after end of tag                          CSW209
      *                                                                                       CSW209
     C           E         ADD  1         S                                                   CSW209
     C                     EXSR SRDATA                                                        CSW209
      *                                                                                       CSW209
      ** Set flag to denote first line of tag                                                 CSW209
      *                                                                                       CSW209
     C                     MOVEL'F'       WKFPID                                              CSW209
      *                                                                                       CSW209
      ** Add message line details to database                                                 CSW209
      *                                                                                       CSW209
     C                     EXSR SRUPDT                                                        CSW209
      *                                                                                       CSW209
     C                     END                                                                CSW209
      *                                                                                       CSW209
      **             *****************************                                            CSW209
      **                                                                                      CSW209
      ** Extract tag '119:'                                                                   CSW209
      **                                                                                      CSW209
      **                                                                                      CSW209
      ** Clear message tag field                                                              CSW209
      **                                                                                      CSW209
      ** Determine Start position of tag - begin search from end of                           CSW209
      ** block identifier                                                                     CSW209
      *                                                                                       CSW209
     C                     MOVEL*BLANKS   WKTAG                                               CSW209
      *                                                                                       CSW209
     C                     MOVEL'{119:'   TAGID   5                                           CSW209
      *                                                                                       CSW209
     C           CFT014    IFEQ 'Y'                                                           CSW209
     C                     MOVELTAGID     P@FCT1                                              CSW209
     C                     Z-ADD5         P@LEN1                                              CSW209
     C                     Z-ADDB         P@LEN2                                              CSW209
     C                     EXSR SCNARR                                                        CSW209
     C                     Z-ADDWRN05     S                                                   CSW209
     C                     ELSE                                                               CSW209
     C           TAGID:5   SCAN DSSWD:B   S                                                   CSW209
     C                     ENDIF                                                              CSW209
      *                                                                                       CSW209
      ** If Tag found, extract data which exists between tag no. and                          CSW209
      ** next closing bracket                                                                 CSW209
      **                                                                                      CSW209
      ** Beginning of tag no. is the position after the open bracket                          CSW209
      **                                                                                      CSW209
      ** End of the tag no. is the next colon, start search after                             CSW209
      ** start position of the tag reference                                                  CSW209
      *                                                                                       CSW209
     C           S         IFNE 0                                                             CSW209
     C                     MOVEL'119:'    WKTAG                                               CSW209
      *                                                                                       CSW209
     C           CFT014    IFEQ 'Y'                                                           CSW209
     C                     MOVEL':'       P@FCT1                                              CSW209
     C                     Z-ADD1         P@LEN1                                              CSW209
     C                     Z-ADDS         P@LEN2                                              CSW209
     C                     EXSR SCNARR                                                        CSW209
     C                     Z-ADDWRN05     E                                                   CSW209
     C                     ELSE                                                               CSW209
     C           ':':1     SCAN DSSWD:S   E                                                   CSW209
     C                     ENDIF                                                              CSW209
      *                                                                                       CSW209
      ** Extract data string starting from position after end of tag                          CSW209
      *                                                                                       CSW209
     C           E         ADD  1         S                                                   CSW209
     C                     EXSR SRDATA                                                        CSW209
      *                                                                                       CSW209
      ** Set flag to denote first line of tag                                                 CSW209
      *                                                                                       CSW209
     C                     MOVEL'F'       WKFPID                                              CSW209
      *                                                                                       CSW209
      ** Add message line details to database                                                 CSW209
      *                                                                                       CSW209
     C                     EXSR SRUPDT                                                        CSW209
      *                                                                                       CSW209
     C                     END                                                                CSW209
      *                                                                                       CSW209
     C                     MOVELWKDATA    WKVALF                                              CSW209
     C                     END                                                                CSW209
      *
      *              *****************************
      *
      *  After all tags are extracted, set E to be the position of the
      *  tag delimiter '}}' starting search from end of Block I.D
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVEL'}}'      P@FCT1                          CFT014
     C                     Z-ADD2         P@LEN1                          CFT014
     C                     Z-ADDB         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     E                               CFT014
     C                     ELSE                                           CFT014
     C           '}}':2    SCAN DSSWD:B   E
     C                     ENDIF                                          CFT014
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK3    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK4   : Process Block Identifier 4                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    : SRC2   - Find start of next line delimiter        *
      *                                                               *
      *****************************************************************
     CSR         SRBLK4    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLK4'  @STK,Q
      *                                                                   CFT002
      *  Reset 204 flag                                                   CFT002
      *                                                                   CFT002
     C                     MOVEL*BLANKS   ##204                           CFT002
      *
      *  Extract Block I.D.
      *
     C                     MOVEL'4:'      BLKID
     C                     EXSR SRBLOK
      *
      * If no Block 4: found process for database error
      *
     C           WKTAG     IFEQ *BLANKS
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVELWKDATA    W0KEY            ***************
     C                     Z-ADD6         W0ERNB           * DB ERROR 06 *
     C                     MOVEL'MIN0093' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message detail for header tag
      *
     C                     EXSR SRUPDT
      *                                                                                       CSW209
     C           CSW209    IFEQ 'Y'                                                           CSW209
     C           WKVALF    IFEQ 'COV'                                                         CSW209
     C                     MOVEL'A'       WKMSEQ  3                                           CSW209
     C                     ELSE                                                               CSW209
     C                     MOVEL*BLANKS   WKMSEQ                                              CSW209
     C                     ENDIF                                                              CSW209
     C                     ENDIF                                                              CSW209
      *
      *  Determine initial delimiter positions for the block
      *
      *  Search for delimiter FS2/3 - start of tag component
      *                       CS2   - start of next line for tag
      *                       FS4   - End of block
      *
      *  Begin search after end position of the Block Tag No.
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELFS3       P@FCT1                          CFT014
     C                     Z-ADD3         P@LEN1                          CFT014
     C                     Z-ADDE         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     F3                              CFT014
     C                     MOVELFS4       P@FCT1                          CFT014
     C                     Z-ADD3         P@LEN1                          CFT014
     C                     Z-ADDE         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     F4                              CFT014
     C                     ELSE                                           CFT014
     C           FS3:3     SCAN DSSWD:E   F3
     C           FS4:3     SCAN DSSWD:E   F4
     C                     ENDIF                                          CFT014
      *
     C                     Z-ADDE         F
     C                     EXSR SRC2
      *
      *  Set C with end block delimiter as this equates to the other
      *  block's closing bracket. C is used in SRBLOK as the position
      *  to commence searching for the start of the next block.
      *
     C                     Z-ADDF4        C
      *
      *            ***********************************
      *  WPSUP will be set to 'Y' to suppress output to MEINMPPD          140532
     C                     MOVEL*BLANKS   WPSUP   1                       140532
      *
      *  Extract the Block's data
      *
      *  Repeat process while the new tag delimiter FS3 is prior to
      *  the Block's End of text delimiter FS4
      *
     C           F3        DOWLTF4
      *
      *
      *  TAG PROCESSING
      *
      *  If new tag delimiter FS3 is less than new line delimiter CS2
      *  then process for new tag.
      *
     C           F3        DOWLTC2
      *
      *  Clear message tag field
      *
     C                     MOVEL*BLANKS   WKTAG
      *
      *  Extract tag no.
      *
      *  Beginning of tag no. is the colon of the delimiter so start
      *  search of tag from start position of delimiter
      *
      *  End of the tag no. is the next colon, start search after
      *  position of the first ':'
      *
      *  Determine length of tag - (End - Start + 1)
      *
      *  Extract tag no.
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVEL':'       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDF3        P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     S                               CFT014
     C                     ELSE                                           CFT014
     C           ':':1     SCAN DSSWD:F3  S
     C                     ENDIF                                          CFT014
      *
     C           S         ADD  1         T
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVEL':'       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDT         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     E                               CFT014
     C                     ELSE                                           CFT014
     C           ':':1     SCAN DSSWD:T   E
     C                     ENDIF                                          CFT014
      *
     C           E         SUB  S         L
     C                     ADD  1         L
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     Z-ADDL         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SUBARR                                    CFT014
     C                     MOVELP@RSLT    WKTAG                           CFT014
     C                     ELSE                                           CFT014
     C           L         SUBSTDSSWD:S   WKTAG
     C                     ENDIF                                          CFT014
      *                                                                   140532
      *  If MT515 or MT518, :20C: may occur twice in the message          140532
      *  so suppress output of part message.                              140532
     C           MTPY      IFEQ '515'                                     140532
     C           MTPY      OREQ '518'                                     140532
     C           MTPY      OREQ '370'                                                         CSW212
     C           PTAG      IFEQ PSTAG                                     140532
     C           WKTAG     ANDEQ':20C:'                                   140532
     C           WKDATA    ANDEQ'GENL'                                    140532
     C                     MOVEL'Y'       WPSUP                           140532
     C                     ENDIF                                          140532
     C                     ENDIF                                          140532
      *                                                                   CFT006
      *  Determine which sequence of message is being processed           CFT006
      *                                                                   CFT006
     C                     SELEC                                          CFT006
     C           MTPY      WHEQ '101'                                     CFT006
     C           WKTAG     ANDEQBG101A                                    CFT006
     C                     MOVEL'A'       WSQANZ                          CFT006
     C                     MOVE SQ101A    WKPART                          CFT006
     C                     Z-ADD0         WKPART                                              240754
      *                                                                   CFT006
     C           MTPY      WHEQ '102'                                     CFT006
     C           WKTAG     ANDEQBG102A                                    CFT006
     C                     MOVEL'A'       WSQANZ                          CFT006
     C                     MOVE SQ102A    WKPART                          CFT006
     C                     Z-ADD0         WKPART                                              240754
      *                                                                   CFT006
     C           MTPY      WHEQ '102'                                     CFT006
     C           WKTAG     ANDEQBG102C                                    CFT006
     C                     MOVEL'C'       WSQANZ                          CFT006
      *                                                                   CFT006
     C                     ENDSL                                          CFT006
      *
      *  If Tag No. is ':20:' it signifies a new part of the message.
      *
      *  If this is the first part of the msg i.e the current part no.
      *  is 0, then only increment the part no. and clear the record
      *  format data structure.
      *
      *  If the part no. is greater than 0 it means that a part has
      *  just been extracted and needs to be added to the database
      *  before processing for the current part commences.
      *
      *  Ensure there are no exceptions before                            CFT006
     C                     EXSR CKTREX                                    CFT006
      *                                                                   CFT006
     C           PTAG      IFEQ PSTAG
     C           WEXTRN    ANDNE'Y'                                       CFT006
      **or**02*and*sequence*C                                       CFT002CFT006
     C***********MTPY      OREQ '102'                               CFT002CFT006
     C***********WKTAG     ANDEQ':32A:'                             CFT002CFT006
     C***********MTPY      OREQ '101'                               CFT002CFT006
      *  If sequence C of MT102 is being analysed we force                CFT006
      *  the writing of part of the previous sequence B                   CFT006
      *  Note : no part is written for sequence C of MT102                CFT006
     C           WSQANZ    OREQ 'C'                                       CFT006
      *                                                                   CFT002
      * If 204 and first :20 then ignore and include in part zero         CFT002
      *
     C           MTPY      IFEQ '204'                                     CFT002
     C           WKPART    ANDEQ0                                         CFT002
     C           ##204     ANDEQ*BLANKS                                   CFT002
     C                     MOVEL'Y'       ##204   1                       CFT002
     C                     ELSE                                           CFT002
      *                                                                   CFT002
     C           WPSUP     IFNE 'Y'                                       140532
      *                                                                   140532
     C           WKPART    IFGT 0
     C                     EXSR SRPART
      *                                                                   CFT002
      * Clear flags relating to Account line analysis                     CFT002
      *                                                                   CFT002
     C                     MOVEL*BLANKS   L2BENF                          CFT002
     C                     MOVEL*BLANKS   L2INBK                          CFT002
     C                     MOVEL*BLANKS   L2ACIN                          CFT002
     C                     END
      *
     C                     CLEARINMP
      *                                                                   140532
     C                     ENDIF                                          140532
      *                                                                   140532
     C           WKDATA    IFNE 'LINK'                                    140532
     C           WKDATA    ANDNE'NETPOS'                                                      CSW212
     C                     ADD  1         WKPART
     C                     ENDIF                                          140532
     C           WSQANZ    IFEQ 'C'                                       CFT006
     C                     MOVE SQ102C    WKPART                          CFT006
     C                     Z-ADD0         WKPART                                              240754
     C                     ENDIF                                          CFT006
     C                     ENDIF                                          CFT002
      * Set sequence being processed to 'unknown'                         CFT006
     C                     MOVEL*BLANK    WSQANZ                          CFT006
      *                                                                   140532
     C                     END
      *                                                                   CFT002
      **If*102*and*sequence*C,*started*at*tag*:32A**                CFT002CFT006
      **set*part*to*zero**                                          CFT002CFT006
      *                                                             CFT002CFT006
     C***********MTPY      IFEQ '102'                               CFT002CFT006
     C***********WKTAG     ANDEQ':32A:'                             CFT002CFT006
     C*********************Z-ADD0         WKPART                    CFT002CFT006
     C*********************ENDIF                                    CFT002CFT006
      *
      *  Search for next FS3 delimiter starting from the tag no.
      *
      *  If no more FS3s for the block, the system sets the delimiter
      *  to '0' - in that case re-set it to the same value as the FS4
      *  delimiter otherwise the do loop will loop.
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELFS3       P@FCT1                          CFT014
     C                     Z-ADD3         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     F3                              CFT014
     C                     ELSE                                           CFT014
     C           FS3:3     SCAN DSSWD:S   F3
     C                     ENDIF                                          CFT014
      *
     C           F3        IFEQ 0
     C           F3        ORGT F4
     C                     Z-ADDF4        F3
     C                     END
      *
      *  Determine start position of data string. It will be the
      *  start position of the tag no. plus the length of the tag no.
      *
     C                     ADD  L         S
      *                                                                   CFT014
      *  Check wether this tag is to be extracted in a special way        CFT014
     C                     EXSR CKDTEX                                    CFT014
      *
      *  Extract data string
      *
     C                     EXSR SRDAT4
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *                                                                                       CSW209
      ** Access MESTGSL1                                                                      CSW209
      *                                                                                       CSW209
     C           CSW209    IFEQ 'Y'                                                           CSW209
     C           *LOVAL    SETLLMESTGSL1                                                      CSW209
     C           KLIST1    CHAINMESTGSL1             35                                       CSW209
     C           *IN35     IFEQ '0'                                                           CSW209
     C                     MOVELSTMSQN    WKMSEQ                                              CSW209
     C                     ENDIF                                                              CSW209
     C                     ENDIF                                                              CSW209
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
      *  Determine if the tag is one of those that holds data for the
      *  Incoming Message Part Detail record
      *
     C                     EXSR SREXPT
      *                                                                   CFT006
      *  Extract for various purposes datas coming from sequence          CFT006
      *  A, B, C of a message                                             CFT006
      *                                                                   CFT006
     C                     EXSR SREXSQ                                    CFT006
      *                                                                   CFT014
      *  Extract data from the special tag and leave this loop if         CFT014
      *  necessary                                                        CFT014
     C           WEXDAT    IFEQ 'Y'                                       CFT014
     C                     EXSR EXDTST                                    CFT014
     C           WEXLV     IFEQ 'Y'                                       CFT014
     C                     LEAVE                                          CFT014
     C                     ENDIF                                          CFT014
     C                     ENDIF                                          CFT014
      *
     C                     ENDDO
      *
      *
      *  LINE PROCESSING
      *
      *  If new line delimiter is less than new tag delimiter then
      *  add additional line details for the current tag no.
      *
     C           C2        DOWLTF3
      *
      *  Determine start position of the next line's data string. It
      *  will be the start position of the delimiter plus it's length
      *
     C           C2        ADD  2         S
      *
      *  Search for next CS2 delimiter commencing from start of the
      *  data string
      *
     C                     Z-ADDS         F
     C                     EXSR SRC2
      *
      *  Extract data string
      *
     C                     EXSR SRDAT4
      *
      *  Set flag to denote multiple line
      *
     C                     MOVEL*BLANKS   WKFPID
      *                                                                                       CSW209
      ** Access MESTGSL1                                                                      CSW209
      *                                                                                       CSW209
     C           CSW209    IFEQ 'Y'                                                           CSW209
     C           *LOVAL    SETLLMESTGSL1                                                      CSW209
     C           KLIST1    CHAINMESTGSL1             35                                       CSW209
     C           *IN35     IFEQ '0'                                                           CSW209
     C                     MOVELSTMSQN    WKMSEQ                                              CSW209
     C                     ENDIF                                                              CSW209
     C                     ENDIF                                                              CSW209
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
      *  If the line is for tag :56:, :57:, :58:, :59: then additional
      *  processing must be done to ensure that the details stored in
      *  the message part file for the Intermediary, Acct with Inst,
      *  and the Beneficiary do not commence with a '/'.
      *
      *  The above fields were extracted in subroutine SREXPT while
      *  processing the tag no. The field must be checked and if the
      *  first character is a '/' then the contents of the second line
      *  of the tag must be placed there instead.
      *
     C                     EXSR SREXC2
      *
     C                     ENDDO
      *
     C                     ENDDO
      *
      *          ******************************
      *
      *  If a message part has been processed, add last processed part
      *  to database and re-set part no. to 0. Parts only apply to Blk4
      *
     C           WKPART    IFGT 0
     C                     EXSR SRPART
     C                     Z-ADD0         WKPART
     C                     CLEARINMP
      * Set sequence being processed to 'unknown'                         CFT006
     C                     MOVEL*BLANK    WSQANZ                          CFT006
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK4    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *                                                                                       CSW209
     C           CSW209    IFEQ 'Y'                                                           CSW209
     C                     MOVEL*BLANKS   WKMSEQ                                              CSW209
     C                     ENDIF                                                              CSW209
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRC2     : Find Start of Next Line delimiter                 *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRC2      BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRC2  '  @STK,Q
      *
      *  The CS2 delimiter is the same as the first two characters of
      *  the FS3 and FS4 delimiters. Therefor the character after the
      *  delimiter must be checked. If it is a ':' then the delimiter
      *  is really an FS3, and if it is a '-' then the delimiter is FS4
      *
      *  Start scan
      *
     C                     MOVEL*BLANKS   FND     1
      *
     C           FND       DOWEQ*BLANKS
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELCS2       P@FCT1                          CFT014
     C                     Z-ADD2         P@LEN1                          CFT014
     C                     Z-ADDF         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     C2                              CFT014
     C                     ELSE                                           CFT014
     C           CS2:2     SCAN DSSWD:F   C2
     C                     ENDIF                                          CFT014
      *
      *  If no more CS2s for the block, the system sets the delimiter
      *  to '0' - in that case re-set it to the same value as the FS4
      *  delimiter to permit exiting from the SRBLK4 Do loop.
      *
     C           C2        IFEQ 0
     C           C2        ORGT F4
     C                     Z-ADDF4        C2
     C                     LEAVE
      *
     C                     ELSE
      *
      * Check if character after the delimiter denotes an FS3 or FS4.
      * If not, then a true C2 is found - no more checks
      *
     C           C2        ADD  2         F
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDF         P@LEN2                          CFT014
     C                     EXSR SUBARR                                    CFT014
     C           P@RSLT    IFNE ':'                                       CFT014
     C           P@RSLT    ANDNE'-'                                       CFT014
     C                     MOVEL'Y'       FND                             CFT014
     C                     ENDIF                                          CFT014
     C                     ELSE                                           CFT014
     C           SWD,F     IFNE ':'
     C           SWD,F     ANDNE'-'
     C                     MOVEL'Y'       FND
     C                     END
     C                     ENDIF                                          CFT014
      *
     C                     END
      *
     C                     ENDDO
      *
      *  Unwind subroutine stack name
      *
     C           EXSRC2    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK5   : Process Block Identifier 5                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLK5    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLK5'  @STK,Q
      *
      *  Extract Block I.D.
      *
     C                     MOVEL'5:'      BLKID
     C                     EXSR SRBLOK
      *
      * If no Block 1: found process for database error
      *
     C           WKTAG     IFEQ *BLANKS
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVELWKDATA    W0KEY            ***************
     C                     Z-ADD7         W0ERNB           * DB ERROR 07 *
     C                     MOVEL'MIN0093' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message detail for header tag
      *
     C                     EXSR SRUPDT
      *
      *  Determine initial delimiter positions for the block
      *
      *  Search for delimiter OPB - start of tag component '{'
      *                       ENB - end of block           '}}'
      *
      *  Begin search after end position of the Block Tag No.
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELOPB       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDE         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     OP                              CFT014
     C                     MOVELENB       P@FCT1                          CFT014
     C                     Z-ADD2         P@LEN1                          CFT014
     C                     Z-ADDE         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     EN                              CFT014
     C                     ELSE                                           CFT014
     C           OPB:1     SCAN DSSWD:E   OP
     C           ENB:2     SCAN DSSWD:E   EN
     C                     ENDIF                                          CFT014
      *
      *
      *  Extract the Block's data
      *
      *  Repeat process until the new tag delimiter OPB is after the
      *  Block's End of text delimiter ENB
      *
     C           OP        DOWLTEN
      *
      *  Clear message tag field
      *
     C                     MOVEL*BLANKS   WKTAG
      *
      *  Extract tag no.
      *
      *  Beginning of tag no. is position after the open bracket
      *
      *  End of the tag no. is the next colon, start search at the
      *  beginning of the tag
      *
      *  Determine length of tag - (End - Start + 1)
      *
     C           OP        ADD  1         S
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVEL':'       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     E                               CFT014
     C                     ELSE                                           CFT014
     C           ':':1     SCAN DSSWD:S   E
     C                     ENDIF                                          CFT014
      *
     C           E         SUB  S         L
     C                     ADD  1         L
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     Z-ADDL         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SUBARR                                    CFT014
     C                     MOVELP@RSLT    WKTAG                           CFT014
     C                     ELSE                                           CFT014
     C           L         SUBSTDSSWD:S   WKTAG
     C                     ENDIF                                          CFT014
     C/COPY WNCPYSRC,MS1900C001
     C/COPY OFCPYSRCZ,CFT135_017                                                              CFT135
      *
      *  Check if tag denotes a duplicate message
      *
     C                     SELEC
     C*
     C           WKTAG     WHEQ 'SAI:'
     C                     MOVEL'SAI'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDE:'
     C                     MOVEL'PDE'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDM:'
     C                     MOVEL'PDM'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDI:'
     C                     MOVEL'PDI'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDR:'
     C                     MOVEL'PDR'     WKPDE
     C*
     C           WKTAG     WHEQ 'DUP:'
     C                     MOVEL'DUP'     WKPDE
     C*
     C           WKTAG     WHEQ 'SPD:'
     C                     MOVEL'SPD'     WKSPD
     C*
     C                     ENDSL
      *
      *  Extract data string
      *
      *  Determine start position of data string. It will be the
      *  position after the end of the tag no.
      *
     C           E         ADD  1         S
      *
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
      *  Search for next open bracket starting from the end of the
      *  current data string
      *
      *  If no more open brackets, the system sets the delimiter
      *  to '0' - in that case re-set it to the same value as the end
      *  of block delimiter otherwise the do loop will loop.
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELOPB       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDE         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     OP                              CFT014
     C                     ELSE                                           CFT014
     C           OPB:1     SCAN DSSWD:E   OP
     C                     ENDIF                                          CFT014
      *
     C           OP        IFEQ 0
     C           OP        ORGT EN
     C                     Z-ADDEN        OP
     C                     END
      *
     C                     ENDDO
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK5    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLKS   : Process Block Identifier S                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLKS    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLKS'  @STK,Q
      *
      *  Extract Block I.D.
      *
     C                     MOVEL'S:'      BLKID
     C                     EXSR SRBLOK
      *
      * If no Block 1: found process for database error
      *
     C           WKTAG     IFEQ *BLANKS
      *                                                                   068104
      * No database error as S: block is optional.                        068104
      *                                                                   068104
     C                     GOTO EXBLKS                                    068104
     C***********          MOVEL'ME1020  'W0FILE                          068104
     C***********          MOVELWKDATA    W0KEY            ***************068104
     C***********          Z-ADD8         W0ERNB           * DB ERROR 08 *068104
     C***********          MOVEL'MIN0093' W0MSGD           ***************068104
     C***********          MOVEL'MEMSG  ' W0MSGF                          068104
     C***********          EXSR SRERR                                     068104
     C                     END
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message detail for header tag
      *
     C                     EXSR SRUPDT
      *
      *  Determine initial delimiter positions for the block
      *
      *  Search for delimiter OPB - start of tag component '{'
      *                       ENB - end of block           '}}'
      *
      *  Begin search after end position of the Block Tag No.
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELOPB       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDE         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     OP                              CFT014
     C                     MOVELENB       P@FCT1                          CFT014
     C                     Z-ADD2         P@LEN1                          CFT014
     C                     Z-ADDE         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     EN                              CFT014
     C                     ELSE                                           CFT014
     C           OPB:1     SCAN DSSWD:E   OP
     C           ENB:2     SCAN DSSWD:E   EN
     C                     ENDIF                                          CFT014
      *
      *
      *  Extract the Block's data
      *
      *  Repeat process until the new tag delimiter OPB is after the
      *  Block's End of text delimiter ENB
      *
     C           OP        DOWLTEN
      *
      *  Clear message tag field
      *
     C                     MOVEL*BLANKS   WKTAG
      *
      *  Extract tag no.
      *
      *  Beginning of tag no. is position after the open bracket
      *
      *  End of the tag no. is the next colon, start search at the
      *  beginning of the tag
      *
      *  Determine length of tag - (End - Start + 1)
      *
     C           OP        ADD  1         S
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVEL':'       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     E                               CFT014
     C                     ELSE                                           CFT014
     C           ':':1     SCAN DSSWD:S   E
     C                     ENDIF                                          CFT014
      *
     C           E         SUB  S         L
     C                     ADD  1         L
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     Z-ADDL         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SUBARR                                    CFT014
     C                     MOVELP@RSLT    WKTAG                           CFT014
     C                     ELSE                                           CFT014
     C           L         SUBSTDSSWD:S   WKTAG
     C                     ENDIF                                          CFT014
      *
      *  Check if tag denotes a duplicate message
      *
     C                     SELEC
     C*
     C           WKTAG     WHEQ 'SAI:'
     C                     MOVEL'SAI'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDE:'
     C                     MOVEL'PDE'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDI:'
     C                     MOVEL'PDI'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDR:'
     C                     MOVEL'PDR'     WKPDE
     C*
     C           WKTAG     WHEQ 'DUP:'
     C                     MOVEL'DUP'     WKPDE
     C*
     C           WKTAG     WHEQ 'SPD:'
     C                     MOVEL'SPD'     WKSPD
     C*
     C                     ENDSL
      *
      *  Extract data string
      *
      *  Determine start position of data string. It will be the
      *  position after the end of the tag no.
      *
     C           E         ADD  1         S
      *
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
      *  Search for next open bracket starting from the end of the
      *  current data string
      *
      *  If no more open brackets, the system sets the delimiter
      *  to '0' - in that case re-set it to the same value as the end
      *  of block delimiter otherwise the do loop will loop.
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELOPB       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDE         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     OP                              CFT014
     C                     ELSE                                           CFT014
     C           OPB:1     SCAN DSSWD:E   OP
     C                     ENDIF                                          CFT014
      *
     C           OP        IFEQ 0
     C           OP        ORGT EN
     C                     Z-ADDEN        OP
     C                     END
      *
     C                     ENDDO
      *
      *  Unwind subroutine stack name
      *
     C           EXBLKS    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLOK   : Search for position of next Block I.D             *
      *                                                               *
      *  CALLED BY: SRBLK1 - Process Block Identifier 1               *
      *             SRBLK2 - Process Block Identifier 2               *
      *             SRBLK3 - Process Block Identifier 3               *
      *             SRBLK4 - Process Block Identifier 4               *
      *             SRBLK5 - Process Block Identifier 5               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLOK    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLOK'  @STK,Q
      *
      *  Clear message tag field and message data field
      *
     C                     MOVEL*BLANKS   WKTAG
     C                     MOVEL*BLANKS   WKDATA
      *
      * Extract Block I.D
      *
      * Search for Start of Block. Begin search from the closing
      * bracket of the previous data string, field 'C'
      *
      * If substring found :-
      * Determine End position - start posn plus 2
      *
      * Determine Length - always 2
      *
      * Move data into parameter data structure
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVELBLKID     P@FCT1                          CFT014
     C                     Z-ADD2         P@LEN1                          CFT014
     C                     Z-ADDC         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     S                               CFT014
     C                     ELSE                                           CFT014
     C           BLKID:2   SCAN DSSWD:C   S                Start Posn
     C                     ENDIF                                          CFT014
      *
     C           S         IFGT 0
     C           S         ADD  1         E                End Posn
      *
     C                     Z-ADD2         L                Strng Lngth
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     Z-ADDL         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SUBARR                                    CFT014
     C                     MOVELP@RSLT    WKTAG                           CFT014
     C                     ELSE                                           CFT014
     C           L         SUBSTDSSWD:S   WKTAG
     C                     ENDIF                                          CFT014
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXBLOK    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRDATA   : Extract Data String Details                       *
      *                                                               *
      *  CALLED BY: SRBLK1 - Process Block Identifier 1               *
      *             SRBLK2 - Process Block Identifier 2               *
      *             SRBLK3 - Process Block Identifier 3               *
      *             SRBLK5 - Process Block Identifier 5               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRDATA    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRDATA'  @STK,Q
      *
      *  Clear message data field
      *
     C                     MOVEL*BLANKS   WKDATA
      *
      * Start position is set prior to execution of subroutine. It is
      * calculated as (End of tag no./block I.D. + 1)
      *
      * Search for closing bracket of string. As there is only 1 line
      * for the string it will be the first '}' found. Begin the search
      * from the End position of the Block I.D.
      *
      * Determine End position of the string. It is the character
      * before the closing bracket of the string.
      *
      * Then determine length of data string (End - Start + 1)
      * May be zero if tag has no data.
      *
      * Then move data string into data structure field that will be
      * passed to the access object ME1020. ('P' in posn 53 indicates
      * that the result field will be padded on the right with blanks
      * if factor 1 is shorter than the length of the result field)
      *
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     MOVEL'}'       P@FCT1                          CFT014
     C                     Z-ADD1         P@LEN1                          CFT014
     C                     Z-ADDE         P@LEN2                          CFT014
     C                     EXSR SCNARR                                    CFT014
     C                     Z-ADDWRN05     C                               CFT014
     C                     ELSE                                           CFT014
     C           '}':1     SCAN DSSWD:E   C                Close bracket
     C                     ENDIF                                          CFT014
      *
      * If no '}' found process for database error
      *
     C           C         IFEQ 0
      *
     C           Q         SUB  1         R       20
     C                     MOVEL@STK,R    W0FILE
     C                     MOVELE         W0KEY            ***************
     C                     Z-ADD9         W0ERNB           * DB ERROR 09 *
     C                     MOVEL'MIN0095' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
      *
     C                     ELSE
      *
     C           C         SUB  1         E                End of string
      *
     C           E         SUB  S         L
     C                     ADD  1         L                String lngth
      *
     C           L         IFGT 0
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     Z-ADDL         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SUBARR                                    CFT014
     C                     MOVELP@RSLT    WKDATA    P                     CFT014
     C                     ELSE                                           CFT014
     C           L         SUBSTDSSWD:S   WKDATA    P
     C                     ENDIF                                          CFT014
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXDATA    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRDAT4   : Extract Tag Message Line Data                     *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRDAT4    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRDAT4'  @STK,Q
      *
      *  Clear message data field
      *
     C                     MOVEL*BLANKS   WKDATA
      *
      *  Extract data string
      *
      *  Start position was determined in SRBLK4
      *
      *  Determine end position of data string. It will be prior to
      *  the position of the next delimiter.
      *
      *  Check which is the next delimiter
      *
     C           F3        IFLT C2
     C                     Z-ADDF3        NXT
     C                     ELSE
     C                     Z-ADDC2        NXT
     C                     END
      *
     C           F4        IFLT NXT
     C                     Z-ADDF4        NXT
     C                     END
      *                                                                   CFT014
      ** If it is a special tag extract the maximum allowed               CFT014
      ** e.g :77T: is 9000z => extract up to 100 chars                    CFT014
     C           WEXDAT    IFEQ 'Y'                                       CFT014
     C           S         ADD  100       LENTAG                          CFT014
     C           LENTAG    IFLT NXT                                       CFT014
     C                     Z-ADDLENTAG    NXT                             CFT014
     C                     ENDIF                                          CFT014
     C                     ENDIF                                          CFT014
      *
     C           NXT       SUB  1         E
      *
      * Determine length of data string (End - Start + 1)
      *
     C/COPY WNCPYSRC,MS1900C016
     C           E         SUB  S         L
     C                     ADD  1         L
     C/COPY WNCPYSRC,MS1900C017
      *
      * Then move data string into parameter data structure.
      * ('P' in posn 53 indicates that the result field will be padded
      * on the right with blanks if factor 1 is shorter than the
      * length of the result field)
      *
     C           L         IFGT 0
     C           CFT014    IFEQ 'Y'                                       CFT014
     C                     Z-ADDL         P@LEN1                          CFT014
     C                     Z-ADDS         P@LEN2                          CFT014
     C                     EXSR SUBARR                                    CFT014
     C                     MOVELP@RSLT    WKDATA    P                     CFT014
     C                     ELSE                                           CFT014
     C           L         SUBSTDSSWD:S   WKDATA    P
     C                     ENDIF                                          CFT014
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXDAT4    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************    CFT006
      *                                                               *    CFT006
      *  SREXSQ   : Extract for various purposes data  of a message   *    CFT006
      *             sequence                                          *    CFT006
      *                                                               *    CFT006
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *    CFT006
      *                                                               *    CFT006
      *  CALLS    :                                                   *    CFT006
      *                                                               *    CFT006
      *****************************************************************    CFT006
     CSR         SREXSQ    BEGSR                                           CFT006
      *                                                                    CFT006
      *  Set up subroutine stack name                                      CFT006
      *                                                                    CFT006
     C                     ADD  1         Q                                CFT006
     C                     MOVEL'SREXSQ'  @STK,Q                           CFT006
      *                                                                    CFT006
     C           MTPY      IFEQ '101'                                      CFT006
     C           MTPY      OREQ '102'                                      CFT006
      *                                                                    CFT006
     C                     SELEC                                           CFT006
      *                                                                    CFT006
      * <-- Put here extraction specific to sequence A                     CFT006
     C           WSQANZ    WHEQ 'A'                                        CFT006
      *                                                                    CFT006
      * Fill the fields of MEIRFTPD                                        CFT006
      * From sequence A get the sender ref                                 CFT006
      * If MT102 get the sending institution                               CFT006
     C           WKTAG     IFEQ ':20:'                                     CFT006
     C                     MOVELWKDATA    SNDREF                           CFT006
     C                     ENDIF                                           CFT006
     C           MTPY      IFEQ '102'                                      CFT006
     C           WKTAG     IFEQ ':51A:'                                    CFT006
     C                     MOVELWKDATA    SNDIST                           CFT006
     C                     ENDIF                                           CFT006
     C                     ENDIF                                           CFT006
      *                                                                    CFT006
      * <-- Put here extraction specific to sequence B(part number)        CFT006
     C           WSQANZ    WHEQ *BLANK                                     CFT006
      *                                                                    CFT006
      * <-- Put here extraction specific to sequence C                     CFT006
     C           WSQANZ    WHEQ 'C'                                        CFT006
     C                     ENDSL                                           CFT006
      *                                                                    CFT006
     C                     ENDIF                                           CFT006
      *                                                                    CFT006
      *  Unwind subroutine stack name                                      CFT006
      *                                                                    CFT006
     C           EXEXSQ    TAG                                             CFT006
     C                     MOVEA*BLANKS   @STK,Q                           CFT006
     C                     SUB  1         Q                                CFT006
      *                                                                    CFT006
     CSR                   ENDSR                                           CFT006
     C/EJECT                                                               CFT006
      *****************************************************************
      *                                                               *
      *  SREXPT   : Extract Part Details from the message             *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    : SREXAM - Extract Value Dtae/Ccy/Amount            *
      *                                                               *
      *****************************************************************
     CSR         SREXPT    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SREXPT'  @STK,Q
      *
      *  If an 800 series message use field 51 for Beneficiary
      *  if not already set
      *
     C                     MOVELMCMTPY    ##001   1
     C           PTAG      IFEQ ':51'
     C           MPBENF    ANDEQ*BLANKS
     C           ##001     ANDEQ'8'
     C                     MOVELWKDATA    MPBENF
     C                     END
      *
      *  If a 900 series message use field 25 for Beneficiary
      *
     C                     MOVELMCMTPY    ##001   1
     C           PTAG      IFEQ ':25'
     C           MPBENF    ANDEQ*BLANKS
     C           ##001     ANDEQ'9'
     C                     MOVELWKDATA    MPBENF
     C                     END
      *
      *  Extract data
      *
      *  Ensure there are no exceptions before                            CFT006
     C                     EXSR CKRFEX                                    CFT006
      *                                                                                       CSW212
     C           4         SUBSTWKDATA:2  WCODE   4                                           CSW212
     C                     SELEC
      *
      ***If*tag*:19:*extract*Sum*Of*Amounts                               CFT006
      *  If tag :19: extract Sum Of Amounts (other that MT102)            CFT006
      *
      *  This is only done if the tag occurs prior to the first :20:
      *  tag i.e. when the part no. is still 0.
      *
      *  It occurs ONLY on a message with multiple parts.
      *
      *  The amount is used for the Incoming Message Control record.
      *
     C           PTAG      WHEQ ':19'
     C           WKPART    ANDEQ0
     C                     MOVELWKDATA    CRAMTS
     C/COPY WNCPYSRC,MS1900C018
      *
      *  If tag :20: extract Transaction Reference
      *
     C           PTAG      WHEQ TRTAG
     C           WEXREF    ANDNE'Y'                                       CFT006
     C           4         SUBSTWKDATA:2  WCDWD   4                       140532
     C           WKTAG     IFEQ ':20C:'                                   140532
     C           WCDWD     IFEQ 'SEME'                                    140532
     C           16        SUBSTWKDATA:8  MPTRNO                          140532
     C                     ENDIF                                          140532
     C                     ELSE                                           140532
     C                     MOVELWKDATA    MPTRNO
     C                     ENDIF                                          140532
      *
      *  If tag :56: extract Intermediary
      *
     C           PTAG      WHEQ ':56'
     C                     MOVELWKDATA    MPINBK
      *                                                                                       CSW212
      ** If tag :95: and message code is INT1                                                 CSW212
      *                                                                                       CSW212
     C           PTAG      WHEQ ':95'                                                         CSW212
     C           WCODE     ANDEQ'INT1'                                                        CSW212
     C           35        SUBSTWKDATA:8  MPINBK                                              CSW212
      *
      *  If tag :57: extract Account With Institution
      *
     C           PTAG      WHEQ ':57'
     C                     MOVELWKDATA    MPACIN
      *                                                                                       CSW212
      ** If tag :95: and message code is ACCW                                                 CSW212
      *                                                                                       CSW212
     C           PTAG      WHEQ ':95'                                                         CSW212
     C           WCODE     ANDEQ'ACCW'                                                        CSW212
     C           35        SUBSTWKDATA:8  MPACIN                                              CSW212
      *
      *  If tag :58: or :59: extract Beneficiary
      *
     C           PTAG      WHEQ ':58'
     C           PTAG      OREQ ':59'
     C                     MOVELWKDATA    MPBENF
      *                                                                                       CSW212
      ** If tag :95: and message code is BENM                                                 CSW212
      *                                                                                       CSW212
     C           PTAG      WHEQ ':95'                                                         CSW212
     C           WCODE     ANDEQ'BENM'                                                        CSW212
     C           35        SUBSTWKDATA:8  MPBENF                                              CSW212
      *
      *  If tag is within the range of :30: to :34: extract Value Date,
      *  Currency and Amount
      *
     C           PTAG      WHEQ ':30'
     C           PTAG      OREQ ':31'
     C           PTAG      OREQ ':32'
     C           PTAG      OREQ ':33'
     C           PTAG      OREQ ':34'
      *  Check if the amount can be used to fill the part file            CFT006
     C                     EXSR CKAMEX                                    CFT006
     C           WEXAMT    IFNE 'Y'                                       CFT006
     C                     EXSR SREXAM
     C                     ENDIF                                          CFT006
      *
     C           MTPY      WHEQ '370'                                                         CSW212
      *                                                                                       CSW212
     C                     MOVELSVDT      MPSVDT                                              CSW212
     C                     MOVELSVDTC     MPSVDC                                              CSW212
     C                     MOVELAMTS      MPAMTS                                              CSW212
     C                     MOVELCCY       MPCYCD                                              CSW212
     C                     MOVELSVDT      CRSVDT                                              CSW212
     C                     MOVELSVDTC     CRSVDC                                              CSW212
     C                     MOVELAMTS      CRAMTS                                              CSW212
     C                     MOVELCCY       CRCYCD                                              CSW212
      *                                                                                       CSW212
      ** Format amount for Incoming Message Detail File                                       CSW212
      *                                                                                       CSW212
     C                     MOVELMPAMTS    ZFIELD                                              CSW212
     C                     EXSR SRFAMT                                                        CSW212
      *                                                                                       CSW212
     C                     ENDSL
      *
      *  Unwind subroutine stack name
      *
     C           EXEXPT    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SREXAM   : Extract Value Date/Currency/Amount details        *
      *                                                               *
      *  CALLED BY: SREXPT - Extract Part Details from message        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SREXAM    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SREXAM'  @STK,Q
      *
      *  Move data field to data structure for breakdown
      *
     C                     MOVELWKDATA    DMSG
      *
      *  Lokup table to determine in which format the info. is held.
      *
     C                     MOVEL*BLANKS   FMT     1
      *
     C                     Z-ADD1         X       30
     C           PTAGP     LOKUPTTAG,X                   63
      *
     C           *IN63     IFEQ '1'
     C                     MOVELTFMT,X    FMT
     C                     END
      *
      *  If format has an optional field that is not used then another
      *  format must be set.
      *
      *  Format 3
      *  If :32N:, :33N:, :34N: the negative amt indicator is optional.
      *
      *  If ind. is there, posn 7 will be the end of the date and so is
      *  numeric else it will be the start of the ccy and thus alpha.
      *
      *  If indicator is not there, replace with format 1
      *
     C                     SELEC
      *
     C           PTAGP     WHEQ '32N'
     C           PTAGP     OREQ '33N'
     C           PTAGP     OREQ '34N'
      *
     C           DIGITS    CHECKD3C7                     62
      *
     C           *IN62     IFEQ '1'                         Not numeric
     C                     MOVEL'1'       FMT
     C                     END
      *
      *  Format 4
      *  If :32H:, :34E: the negative amount indicator is optional.
      *
      *  If ind. is there, posn 4 will be the end of the ccy and so is
      *  alpha else it will be the start of the amt and thus numeric.
      *
      *  If indicator is not there, replace with format 2
      *
     C           PTAGP     WHEQ '32H'
     C           PTAGP     OREQ '34E'
      *
     C           DIGITS    CHECKD4C4                     62
      *
     C           *IN62     IFEQ '0'                         Numeric
     C***********          MOVEL'1'       FMT                             186724
     C                     MOVEL'2'       FMT                             186724
     C                     END
      *
      *  Format 5
      *  If :34G:, :34H: the No. Of days field is optional.
      *
      *  If Days is there, posn 1 will be the start of the days and so
      *  numeric else it will be the start of the ccy and thus alpha.
      *
      *  If indicator is not there, replace with format 2
      *
     C           PTAGP     WHEQ '34G'
     C           PTAGP     OREQ '34H'
      *
     C           DIGITS    CHECKD5C1                     62
      *
     C           *IN62     IFEQ '1'                         Not numeric
     C                     MOVEL'2'       FMT
     C                     END
      *
      *  Format 6
      *  If :34F: the Debit/Credit indicator is optional.
      *
      *  If Ind. is there, posn 4 will be the indicator and so alpha
      *  else it will be the start of the amt and thus numeric.
      *
      *  If indicator is not there, replace with format 2
      *
     C           PTAGP     WHEQ '34F'
      *
     C           D6DC      IFNE 'D'
     C           D6DC      ANDNE'C'
     C                     MOVEL'2'       FMT
     C                     END
      *
     C                     ENDSL
      *
      *  Move format fields to file fields
      *
     C                     SELEC
      *
      *  Format 1 - Date/Currency/Amount
      *
     C           FMT       WHEQ '1'
     C                     MOVELD1DTE     MPSVDT
     C                     MOVELD1CCY     MPCYCD
     C                     MOVELD1AMT     MPAMTS
      *
      *  Format 2 - Currency/Amount
      *
     C           FMT       WHEQ '2'
     C                     MOVELD2CCY     MPCYCD
     C                     MOVELD2AMT     MPAMTS
      *
      *  Format 3 - Negative Indicator/Date/Currency/Amount
      *
     C           FMT       WHEQ '3'
     C                     MOVELD3DTE     MPSVDT
     C                     MOVELD3CCY     MPCYCD
     C                     MOVELD3AMT     MPAMTS
      *
      *  Format 4 - Negative Indicator/Currency/Amount
      *
     C           FMT       WHEQ '4'
     C                     MOVELD4CCY     MPCYCD
     C                     MOVELD4AMT     MPAMTS
      *
      *  Format 5 - Days/Currency/Amount
      *
     C           FMT       WHEQ '5'
     C                     MOVELD5DAY     MPSVDT
     C                     MOVELD5CCY     MPCYCD
     C                     MOVELD5AMT     MPAMTS
      *
      *  Format 6 - Currency/DR,CR Indicator/Amount
      *
     C           FMT       WHEQ '6'
     C                     MOVELD6CCY     MPCYCD
     C                     MOVELD6AMT     MPAMTS
      *
      *  Format 7 - Date only
      *
     C           FMT       WHEQ '7'
     C                     MOVELD1DTE     MPSVDT
      *
     C                     ENDSL
      *
      *  If the currency,value date details are extracted prior to the
      *  occurrence of :20, i.e. when the part no. is 0, then the data
      *  must be used for the Incoming Message Control record -
      *
      *  BUT, only if the control fields have not yet been set up
      *  when processing the Tag :19 in subroutine SREXPT
      *
      *  This happens ONLY if the message has multiple parts
      *
     C           WKPART    IFEQ 0
      *
     C           CRSVDT    IFEQ *BLANKS
     C                     MOVELMPSVDT    CRSVDT
     C                     END
      *
     C           CRCYCD    IFEQ *BLANKS
     C                     MOVELMPCYCD    CRCYCD
     C                     END
      *
     C           CRAMTS    IFEQ *BLANKS
     C                     MOVELMPAMTS    CRAMTS
     C                     END
      *
     C                     END
      *                                                                   068251
      *  Extract SWIFT Amount into MPPYAM amount field 18,3               068251
      *                                                                   068251
     C                     MOVELMPAMTS    ZFIELD                          068251
      *                                                                   068251
      *  Replace "," with "." for conversion                              068251
      *                                                                   068251
     C                     MOVEAZFIELD    FLA                             068251
     C                     Z-ADD1         A       50                      068251
     C           ','       LOKUPFLA,A                    90               068251
     C           *IN90     IFEQ '1'                                       068251
     C                     MOVE '.'       FLA,A                           068251
     C                     END                                            068251
      *                                                                   188036
      **  Remove leading zeros before amounts                             188036
     C                     Z-ADD1         A                               188036
     C           FLA,A     DOWEQ'0'                                       188036
     C           FLA,A     OREQ ' '                                       188036
     C           A         ANDLT17                                        188036
     C           FLA,A     IFEQ '0'                                       188036
     C                     MOVE ' '       FLA,A                           188036
     C                     END                                            188036
     C                     ADD  1         A                               188036
     C                     END                                            188036
      *                                                                   188036
     C                     MOVEAFLA       ZFIELD                          068251
     C           *LIKE     DEFN ZFIELD    WTFAMA                          CFT006
     C                     MOVEAFLA       WTFAMA                          CFT006
      *                                                                   068251
     C                     CALL 'ZALIGN'                                  068251
     C                     PARM *BLANKS   ZRTN    7        B:Return Code  068251
     C                     PARM           ZFIELD 16        B:Check Field  068251
     C                     PARM 3         ZADEC   10       I:No Of Decs   068251
     C                     PARM 12        ZADIG   20       I:No Of Digits 068251
     C                     PARM           ZAFLD  16        O:Check Field  068251
      *                                                                   068251
     C                     Z-ADD0         MPPYAM                          068251
     C           ZRTN      IFEQ *BLANKS                                   068251
     C                     MOVE ZAFLD     ZNUM15 150                      068251
     C           ZNUM15    DIV  1000      MPPYAM                          068251
     C                     END                                            068251
      *                                                                   CFT006
      ***Format*the amount for MEIRFTPD according to the currency         CFT006              230505
     C***********CFT006    IFEQ 'Y'                                       CFT006              230505
     C***********MPCYCD    IFNE *BLANK                                    CFT006              230505
     C***********          Z-ADD0         WTFAMT 150                      CFT006              230505
      ***********                                                         CFT006              230505
     C***********          CALL 'AOCURRR0'             9090               CFT006              230505
     C***********          PARM *BLANKS   P@RTCD                          CFT006              230505
     C***********          PARM '*KEY   ' P@OPTN                          CFT006              230505
     C***********          PARM MPCYCD    P@K101  3                       CFT006              230505
     C***********SDCURR    PARM *BLANKS   DSSDY                           CFT006              230505
      ***********                                                         CFT006              230505
     C************IN90     IFEQ '1'                                       CFT006              230505
     C***********P@RTCD    ORNE *BLANK                                    CFT006              230505
      ***********                                                                      225169 230505
      ***Access*SDCURRLD keyed by SWIFT currency code, in case this is                 225169 230505
      ***different from Midas currency code.                                           225169 230505
      ***********                                                                      225169 230505
     C***********MPCYCD    CHAINSDCURRLD             88                                225169 230505
     C************IN88     IFEQ *ON                                                    225169 230505
     C***********          MOVEL'AOCURRR0'W0FILE           ***************CFT006              230505
     C***********          MOVELP@K101    W0KEY            * DB ERROR 16 *CFT006              230505
     C***********          Z-ADD16        W0ERNB           ***************CFT006              230505
     C***********          MOVEL'MEM5003' W0MSGD                          CFT006              230505
     C***********          MOVEL'MIDAS  ' W0MSGF                          CFT006              230505
     C***********          EXSR SRERR                                     CFT006              230505
     C***********          ENDIF                                                       225169 230505
     C***********          ENDIF                                          CFT006              230505
      ***********                                                         CFT006              230505
     C***********          MOVELWTFAMA    ZFIELD                          CFT006              230505
     C***********          Z-ADDA6NBDP    ZADEC                           CFT006              230505
     C***********15        SUB  A6NBDP    ZADIG                           CFT006              230505
     C***********          CALL 'ZALIGN'                                  CFT006              230505
     C***********          PARM *BLANKS   ZRTN    7                       CFT006              230505
     C***********          PARM           ZFIELD 16                       CFT006              230505
     C***********          PARM           ZADEC   10                      CFT006              230505
     C***********          PARM           ZADIG   20                      CFT006              230505
     C***********          PARM           ZAFLD  16                       CFT006              230505
      ***********                                                         CFT006              230505
     C***********ZRTN      IFNE *BLANKS                                   CFT006              230505
     C***********          MOVEL'ZALIGN  'W0FILE           ***************CFT006              230505
     C***********          MOVELZFIELD    W0KEY            * DB ERROR 17 *CFT006              230505
     C***********          Z-ADD17        W0ERNB           ***************CFT006              230505
     C***********          MOVEL'MEM5001' W0MSGD                          CFT006              230505
     C***********          MOVEL'MIDAS  ' W0MSGF                          CFT006              230505
     C***********          EXSR SRERR                                     CFT006              230505
     C***********          ENDIF                                          CFT006              230505
      ***********                                                         CFT006              230505
     C***********          MOVE ZAFLD     WTFAMT 150                      CFT006              230505
      ***********                                                         CFT006              230505
     C***********          ENDIF                                          CFT006              230505
      ***********                                                         CFT006              230505
     C***********          ENDIF                                          CFT006              230505
      *
      *  Unwind subroutine stack name
      *
     C           EXEXAM    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SREXC2   : Extract 2nd line of tag details                   *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SREXC2    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SREXPT'  @STK,Q
      *
      *  If the line is for tag :56:, :57:, :58:, :59: then additional
      *  processing must be done to ensure that the details stored in
      *  the message part file for the Intermediary, Acct with Inst,
      *  and the Beneficiary do not commence with a '/'.
      *
      *  The above fields were extracted in subroutine SREXPT while
      *  processing the tag no. The field must be checked and if the
      *  first character is a '/' then the contents of the second line
      *  of the tag must be placed there IF the first character of that
      *  line is NOT '/'.
      *
      *  This processing is ONLY performed for the first line after the
      *  tag no. initial processing. A flag is set to condition the
      *  processing.
      *
      *  If tag :56: extract Intermediary
      *
     C                     SELEC
      *
     C           PTAG      WHEQ ':56'
     C           L2INBK    ANDEQ*BLANKS
     C                     MOVEL'Y'       L2INBK  1
     C                     MOVELMPINBK    CHAR1   1
     C                     MOVELWKDATA    CHAR2   1
      *
     C           CHAR1     IFEQ '/'
     C           CHAR2     ANDNE'/'
     C                     MOVELWKDATA    MPINBK
     C                     END
      *
      *  If tag :57: extract Account With Institution
      *
     C           PTAG      WHEQ ':57'
     C           L2ACIN    ANDEQ*BLANKS
     C                     MOVEL'Y'       L2ACIN  1
     C                     MOVELMPACIN    CHAR1
     C                     MOVELWKDATA    CHAR2   1
      *
     C           CHAR1     IFEQ '/'
     C           CHAR2     ANDNE'/'
     C                     MOVELWKDATA    MPACIN
     C                     END
      *
      *  If tag :58: or :59: extract Beneficiary
      *
     C           PTAG      WHEQ ':58'
     C           L2BENF    ANDEQ*BLANKS
      *
     C           PTAG      OREQ ':59'
     C           L2BENF    ANDEQ*BLANKS
     C                     MOVEL'Y'       L2BENF  1
     C                     MOVELMPBENF    CHAR1
     C                     MOVELWKDATA    CHAR2   1
      *
     C           CHAR1     IFEQ '/'
     C           CHAR2     ANDNE'/'
     C                     MOVELWKDATA    MPBENF
     C                     END
      *
     C                     ENDSL
      *
      *  Unwind subroutine stack name
      *
     C           EXEXC2    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRUPDT   : Add Incoming Message Detail Line To Database      *
      *                                                               *
      *  CALLED BY: SRBLK1 - Process Block Identifier 1               *
      *             SRBLK2 - Process Block Identifier 2               *
      *             SRBLK3 - Process Block Identifier 3               *
      *             SRBLK4 - Process Block Identifier 4               *
      *             SRBLK5 - Process Block Identifier 5               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRUPDT    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRUPDT'  @STK,Q
      *
      * Increment tag message line sequence no.
      *
     C                     ADD  1         WKSEQ
      *
      * Move data to record format data structure
      *
     C                     CLEARINDT
     C                     CLEARW1DATA
      *
     C                     MOVELMCMSGR    DTMSGR
     C                     Z-ADDWKSEQ     DTSEQN
     C                     MOVELWKTAG     DTMTG
     C                     MOVELWKFPID    DTFPID
     C                     Z-ADDWKPART    DTPART
     C                     MOVELWKDATA    DTMFLD
      *                                                                                       CSW209
     C           CSW209    IFEQ 'Y'                                                           CSW209
     C                     MOVELWKMSEQ    DTMSEQ                                              CSW209
     C                     ENDIF                                                              CSW209
      *
      * Add Incoming Message Line
      *
     C                     MOVELINDT      W1DATA
      *
     C                     CALL 'ME1020'               90
     C                     PARM '*MSGDATA'W1ACT   8
     C                     PARM           W1DATA
     C                     PARM *BLANKS   W1RTN   7
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W1RTN     OREQ '*ERROR*'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD10        W0ERNB           * DB ERROR 10 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Set flag to denote one of multiple lines for tag
      *
     C                     MOVEL*BLANKS   WKFPID
      *
      *  Unwind subroutine stack name
      *
     C           EXUPDT    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRPART   : Add Incoming Message Midas Transaction Control    *
      *             Record To Database                                *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRPART    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRPART'  @STK,Q
      *
      *  Set up Incoming Message Part Detail record
      *
      *  The majority of the fields were set in subr SREXPT during the
      *  extraction of the message tags.
      *
      *  The initial clearing of the record format data structure occur
      *  in subr SRBLK4 when a new part is being processed
      *
      *  If the Part's value date field is blank then use the value
      *  date that has been stored in the Control record date field
      *  in subroutine SREXAM
      *
     C           MPSVDT    IFEQ *BLANKS
     C                     MOVELCRSVDT    MPSVDT           Value Date
     C                     END
      *                                                                   124673
     C           MPSVDT    IFNE *BLANKS                                   149261
     C                     MOVELMPSVDT    MPSVDC                          124673
     C           MPSVDC    IFLT '72'                                      124673
     C                     MOVE '20'      MPSVDC                          124673
     C                     ELSE                                           124673
     C                     MOVE '19'      MPSVDC                          124673
     C                     ENDIF                                          124673
     C                     ENDIF                                          149261
      *
     C                     Z-ADDMCMSGR    MPMSGR           Uniq Ref.
     C                     Z-ADDWKPART    MPKPRT           Part No.Key
      *
      *  Add Incoming Message Midas Transaction Control
      *
     C                     CLEARW1DATA
     C                     MOVELINMP      W1DATA
      *
     C                     CALL 'ME1020'               90
     C                     PARM '*MSGPART'W1ACT   8
     C                     PARM           W1DATA
     C                     PARM *BLANKS   W1RTN   7
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W1RTN     OREQ '*ERROR*'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD11        W0ERNB           * DB ERROR 11 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Store last used part no. in control field - used for updating
      *
     C                     Z-ADDWKPART    CRNPRT           No. Of Parts
      *
      *  Store last used part info that will be used for updating the
      *  Control file IF only one part exists.
      *
     C                     MOVELMPSVDT    WKSVDT           Value date
     C                     MOVELMPCYCD    WKCYCD           Currency
     C                     MOVELMPAMTS    WKAMTS           Amount
      *                                                                   CFT006
     C           MTPY      IFEQ '101'                                     CFT006
     C           MTPY      OREQ '102'                                     CFT006
      * Fill the fields of MEIRFTPD                                       CFT006
      * From sequence B cumulate amounts and increment total of           CFT006
      * transactions processed                                            CFT006
     C                     ADD  1         NUMTRN                          CFT006
     C                     ADD  MPPYAM    SUMAMT                          CFT006
      *                                                                   CFT006
     C                     ENDIF                                          CFT006
      *
      *  Unwind subroutine stack name
      *
     C           EXPART    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRHEAD   : Add Incoming Message Control Record               *
      *                                                               *
      *  CALLED BY: Main processing section                           *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRHEAD    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRHEAD'  @STK,Q
      *
      *  Extract data from the SWIFT message and place in the data
      *  structure fields of the record format
      *
     C                     CLEARW1DATA
      *
      *  The Unique Reference No. is accessed from a data area once the
      *  message is verified.
      *
     C                     MOVELMCMSGR    CRMSGR           Unique Ref.
      *
      *  The following fields are available on MSIXI2PD
      *
     C                     MOVEL*BLANKS   CRSYTM           System
     C/COPY WNCPYSRC,MS1900C002
     C/COPY OFCPYSRCZ,CFT135_018                                                              CFT135
     C                     MOVEL'SWIFT'   CRNWRK           Network
     C/COPY WNCPYSRC,MS1900C003
     C/COPY OFCPYSRCZ,CFT135_019                                                              CFT135
     C                     MOVELSNDR      CRSNDR           Sender
     C                     MOVELMIR       CRMIR            MIR
     C                     MOVELMOR       CRMOR            MOR
     C                     MOVELMTPY      CRMTPY           Msg Type
     C                     MOVELMPRY      CRMPRY           Priority
     C                     MOVELMODE      CRMODE           Received Date
     C                     MOVELMOTM      CRMOTM           Received Time
     C                     MOVELBRCA      CRBRCA           Branch
     C/COPY WNCPYSRC,MS1900C009
      *                                                                   124673
     C                     MOVELCRMODE    CRMDEC                          124673
     C           CRMDEC    IFLT '72'                                      124673
     C                     MOVE '20'      CRMDEC                          124673
     C                     ELSE                                           124673
     C                     MOVE '19'      CRMDEC                          124673
     C                     ENDIF                                          124673
      *                                                                   124673
      *
      *  Check if the Duplication Flag is found in Block Identifier 5
      *  or Block Identifier S.
      *
     C           WKPDE     IFNE *BLANKS
     C                     MOVELWKPDE     CRDUPF           Duplication
     C                     ELSE
      *
     C           WKSPD     IFNE *BLANKS
     C                     MOVELWKSPD     CRDUPF
     C                     END
      *
     C                     END
      *
      *  The following Sent date/time fields are found within Block 2
      *  Output record - extract info using a data structure
      *
     C                     MOVELB2INTD    CRSNTD           Sent Date
     C                     MOVELB2INTI    CRSNTT           Sent Time
      *                                                                   124673
     C                     MOVELCRSNTD    CRSTDC                          124673
     C           CRSTDC    IFLT '72'                                      124673
     C                     MOVE '20'      CRSTDC                          124673
     C                     ELSE                                           124673
     C                     MOVE '19'      CRSTDC                          124673
     C                     ENDIF                                          124673
      *                                                                   124673
      *
      *  The No. of Parts is accumulated in the SRPART subroutine
      *
      *  If there is only one part for the message then use the saved
      *  values from that part to fill the Ccy/Date Amount fields.
      *
      *  If a multiple message, the fields were filled in the SREXPT &
      *  SREXAM subroutines if the relevant tag nos occured prior to
      *  the message's first Start of Part tag.
      *
     C           CRNPRT    IFEQ 1
     C                     MOVELWKSVDT    CRSVDT           Value date
     C                     MOVELWKCYCD    CRCYCD           Currency
     C                     MOVELWKAMTS    CRAMTS           Amount
     C                     END
      *                                                                   124673
     C***********          MOVELCRSVDT    CRSTDC                   124673 149261
     C***********CRSTDC    IFLT '72'                               124673 149261
     C***********          MOVE '20'      CRSTDC                   124673 149261
     C***********          ELSE                                    124673 149261
     C***********          MOVE '19'      CRSTDC                   124673 149261
     C***********          ENDIF                                   124673 149261
      *                                                                   149261
      ** Initialisation of Value Date century field in MEINCRPD           149261
      *                                                                   149261
     C           CRSVDT    IFNE *BLANKS                                   149261
     C                     MOVELCRSVDT    CRSVDC                          149261
     C           CRSVDC    IFLT '72'                                      149261
     C                     MOVE '20'      CRSVDC                          149261
     C                     ELSE                                           149261
     C                     MOVE '19'      CRSVDC                          149261
     C                     ENDIF                                          149261
     C                     ENDIF                                          149261
      *                                                                   124673
      *
      *  N.B. Audit stamp is setup in access object
      *
     C/COPY WNCPYSRC,MS1900C021
      *  Add Incoming Message Control
      *
     C                     MOVELINCR      W1DATA
      *
     C                     CALL 'ME1020'               90
     C                     PARM '*MSGHEAD'W1ACT   8
     C                     PARM           W1DATA
     C                     PARM *BLANKS   W1RTN   7
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W1RTN     OREQ '*ERROR*'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD12        W0ERNB           * DB ERROR 12 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
     C/COPY WNCPYSRC,MS1900C012
      *                                                                   CFT006
      *  Add MT101/MT102 specific control file                            CFT006
      *                                                                   CFT006
     C           CFT006    IFEQ 'Y'                                       CFT006
     C           MTPY      IFEQ '101'                                     CFT006
     C           MTPY      OREQ '102'                                     CFT006
      *                                                                   CFT006
     C                     CLEARW1DATA                                    CFT006
     C                     MOVELMTPY      RFMTPY                          CFT006
     C                     MOVELMIR       SWIFTR                          CFT006
     C                     MOVELIRFT      W1DATA                          CFT006
      *                                                                   CFT006
     C                     CALL 'ME1020'               90                 CFT006
     C                     PARM '*RFTCTRL'W1ACT   8                       CFT006
     C                     PARM           W1DATA                          CFT006
     C                     PARM *BLANKS   W1RTN   7                       CFT006
      *                                                                   CFT006
      *  If return with an error (LR seton in called program) then        CFT006
      *  process for database error.                                      CFT006
      *                                                                   CFT006
     C           *IN90     IFEQ '1'                                       CFT006
     C           W1RTN     OREQ '*ERROR*'                                 CFT006
     C                     MOVEL'ME1020  'W0FILE                          CFT006
     C                     MOVEL'*CALL'   W0KEY            ***************CFT006
     C                     Z-ADD16        W0ERNB           * DB ERROR 16 *CFT006
     C                     MOVEL'MEM5003' W0MSGD           ***************CFT006
     C                     MOVEL'MIDAS  ' W0MSGF                          CFT006
     C                     EXSR SRERR                                     CFT006
     C                     ENDIF                                          CFT006
      *                                                                   CFT006
     C                     ENDIF                                          CFT006
      *                                                                   CFT006
     C                     ENDIF                                          CFT006
      *
      *  Unwind subroutine stack name
      *
     C           EXHEAD    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************   CGL013
      *                                                               *   CGL013
      *  MT920    : Call MT920 processing                             *   CGL013
      *                                                               *   CGL013
      *  CALLED BY: Main processing section                           *   CGL013
      *                                                               *   CGL013
      *  CALLS    :                                                   *   CGL013
      *                                                               *   CGL013
      *****************************************************************   CGL013
     CSR         MT920     BEGSR                                          CGL013
      *                                                                   CGL013
      *  Set up subroutine stack name                                     CGL013
      *                                                                   CGL013
     C                     ADD  1         Q                               CGL013
     C                     MOVEL'MT920 '  @STK,Q                          CGL013
      *                                                                   CGL013
     C                     CALL 'ME000060'             90                 CGL013
     C                     PARM *BLANKS   W1RTNC  7                       CGL013
     C                     PARM TRNO      W1TRNO 16                       CGL013
      *                                                                   CGL013
      *  If return with an error (LR seton in called program) then        CGL013
      *  process for database error.                                      CGL013
      *                                                                   CGL013
     C           *IN90     IFEQ '1'                                       CGL013
     C           W1RTNC    ORNE *BLANKS                                   CGL013
     C                     MOVEL'ME000060'W0FILE                          CGL013
     C                     MOVEL'*CALL'   W0KEY            ***************CGL013
     C                     Z-ADD13        W0ERNB           * DB ERROR 13 *CGL013
     C                     MOVEL'MEM5003' W0MSGD           ***************CGL013
     C                     MOVEL'MIDAS  ' W0MSGF                          CGL013
     C                     EXSR SRERR                                     CGL013
     C                     END                                            CGL013
      *                                                                   CGL013
      *  Unwind subroutine stack name                                     CGL013
      *                                                                   CGL013
     C           EXM920    TAG                                            CGL013
     C                     MOVEA*BLANKS   @STK,Q                          CGL013
     C                     SUB  1         Q                               CGL013
      *                                                                   CGL013
     CSR                   ENDSR                                          CGL013
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRAUTO   : Prompt FT Auto Generation                         *
      *                                                               *
      *  CALLED BY: Main processing                                   *
      *                                                               *
      *****************************************************************
     CSR         SRAUTO    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q       50
     C                     MOVEL'SRAUTO'  @STK,Q
      *
      *  /Copy point for Auto Generation
      *
     C/COPY WNCPYSRC,MS1900DAUT
      *
      *  Set up parameters
      *
     C                     CLEARINMC                       Input Data Str.
      *
     C                     MOVELCRNWRK    MCNWRK
     C                     MOVELCRMTPY    MCMTPY
     C                     MOVELCRSNDR    MCSNDR
     C                     MOVEL'*AUTO  ' MCACPT
     C                     MOVEL##PGM     MCCPGM
      *
      * Move passed parameter data to relevant data structure
      * and on to called program's data structure
      *
     C                     MOVELINMC      W1DATA
      *
      * Verify message
      *
     C                     CALL 'ME1030'               90
     C                     PARM '*AUTO   'W1ACT
     C                     PARM           W1DATA
     C                     PARM *BLANKS   W1RTN
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W1RTN     OREQ '*ERROR*'
     C                     MOVEL'ME1030  'W0FILE           ***************
     C                     MOVEL'*CALL'   W0KEY            * DB ERROR 14 *
     C                     Z-ADD14        W0ERNB           ***************
     C                     MOVEL'MEM5003' W0MSGD
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Process for invalid message if return code is 'MIN0091'
      *
     C           W1RTN     IFEQ 'MIN0091'
     C                     GOTO EXAUTO
     C                     END
      *
      *  Set up parameters for prompt
      *
     C                     MOVELCRMSGR    O#MSGR
     C                     MOVEL*BLANKS   O#PRTY
     C           CRMPRY    IFEQ 'U'
     C                     MOVEL'HIGH'    O#PRTY
     C                     ELSE
     C                     MOVEL'NORMAL'  O#PRTY
     C                     END
      *
      *  Prompt FT Auto Generation
      *
     C                     CALL 'MEC1304'              90
     C                     PARM *BLANKS   W2RTN   7
     C                     PARM           O#MSGR  8
     C                     PARM           O#PRTY 10
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W2RTN     ORNE *BLANKS
     C           W2RTN     ANDNE'MIN0222'
     C                     MOVEL'MEC1304 'W0FILE           ***************
     C                     MOVEL'*CALL'   W0KEY            * DB ERROR 15 *
     C                     Z-ADD15        W0ERNB           ***************
     C                     MOVEL'MEM5003' W0MSGD
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXAUTO    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRINIT   : Initialise and define fields                      *
      *                                                               *
      *  CALLED BY: Main processing                                   *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRINIT    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q       50
     C                     MOVEL'SRINIT'  @STK,Q
      *
      *  Set up copyright statement
      *
     C                     MOVEACPY@      BIS@   80
      *
      *  Define fields
      *
     C           *LIKE     DEFN DTPART    WKPART
     C           *LIKE     DEFN DTFPID    WKFPID
     C           *LIKE     DEFN DTSEQN    WKSEQ
     C           *LIKE     DEFN DTMFLD    WKDATA
      *
     C           *LIKE     DEFN CRSVDT    WKSVDT
     C           *LIKE     DEFN CRCYCD    WKCYCD
     C           *LIKE     DEFN CRAMTS    WKAMTS
     C           *LIKE     DEFN CRDUPF    WKPDE
     C           *LIKE     DEFN CRDUPF    WKSPD
      *
     C                     Z-ADD0         B       50
     C           *LIKE     DEFN B         C
     C           *LIKE     DEFN B         D
     C           *LIKE     DEFN B         E
     C           *LIKE     DEFN B         F
     C           *LIKE     DEFN B         L
     C           *LIKE     DEFN B         S
     C           *LIKE     DEFN B         T
     C           *LIKE     DEFN B         F3
     C           *LIKE     DEFN B         F4
     C           *LIKE     DEFN B         C2
     C           *LIKE     DEFN B         OP
     C           *LIKE     DEFN B         EN
     C           *LIKE     DEFN B         NXT
     C           *LIKE     DEFN B         LENMAX                          CFT014
     C           *LIKE     DEFN B         LENTAG                          CFT014
      *                                                                   CFT006
      * To force creation of message part                                 CFT006
      *                                                                   CFT006
     C                     MOVEL*BLANK    WSQANZ  1                       CFT006
      *
      *  Set up error processing message defaults
      *
     C                     MOVEL*BLANKS   W0MSGD
     C                     MOVEL'MEMSG   'W0MSGF
      *                                                                   CFT006
      *  Access SAR details file to see if CFT006 is installed.           CFT006
      *                                                                   CFT006
     C                     CALL 'AOSARDR0'             90                 CFT006
     C                     PARM *BLANKS   P@RTCD  7                       CFT006
     C                     PARM '*VERIFY' P@OPTN  7                       CFT006
     C                     PARM 'CFT006'  @SARD   6                       CFT006
     C           SCSARD    PARM *BLANKS   DSFDY                           CFT006
      *                                                                   CFT006
      *  Allow Batch Authorisation processing                             CFT006
      *                                                                   CFT006
     C           P@RTCD    IFEQ *BLANKS                                   CFT006
     C           *IN90     ANDEQ'0'                                       CFT006
     C                     MOVEL'Y'       CFT006                          CFT006
     C                     ELSE                                           CFT006
     C                     MOVEL'N'       CFT006  1                       CFT006
     C                     ENDIF                                          CFT006
      *                                                                   CFT014
      *  Access SAR details file to see if CFT014 is installed.           CFT014
      *                                                                   CFT014
     C                     CALL 'AOSARDR0'             90                 CFT014
     C                     PARM *BLANKS   P@RTCD  7                       CFT014
     C                     PARM '*VERIFY' P@OPTN  7                       CFT014
     C                     PARM 'CFT014'  @SARD   6                       CFT014
     C           SCSARD    PARM *BLANKS   DSFDY                           CFT014
      *                                                                   CFT014
      *  Allow MT103 processing                                           CFT014
      *                                                                   CFT014
     C           P@RTCD    IFEQ *BLANKS                                   CFT014
     C           *IN90     ANDEQ'0'                                       CFT014
     C                     MOVEL'Y'       CFT014                          CFT014
     C                     ELSE                                           CFT014
     C                     MOVEL'N'       CFT014  1                       CFT014
     C                     ENDIF                                          CFT014
      *                                                                   CGL013
      *  Access SAR details file to see if CGL013 is installed.           CGL013
      *                                                                   CGL013
     C                     CALL 'AOSARDR0'             90                 CGL013
     C                     PARM *BLANKS   P@RTCD  7                       CGL013
     C                     PARM '*VERIFY' P@OPTN  7                       CGL013
     C                     PARM 'CGL013'  @SARD   6                       CGL013
     C           SCSARD    PARM *BLANKS   DSFDY                           CGL013
      *                                                                   CGL013
      *  Allow MT920 processing                                           CGL013
      *                                                                   CGL013
     C           P@RTCD    IFEQ *BLANKS                                   CGL013
     C           *IN90     ANDEQ'0'                                       CGL013
     C                     MOVEL'Y'       CGL013                          CGL013
     C                     ELSE                                           CGL013
     C                     MOVEL'N'       CGL013  1                       CGL013
     C                     ENDIF                                          CGL013
      /COPY OFCPYSRCZ,CFT135_020                                                              CFT135
      *
      * Open Files
      *
     C                     OPEN MSIXI2LD
     C                     OPEN MSMSI2LA
      *
      *  Get Rundate information
      *
     C           *NAMVAR   DEFN RUNDAT    RUNDTA
     C                     IN   RUNDTA
     C                     MOVE AGMRDT    WUMRDT  7        Midas Run date
     C                     MOVE AGRDNB    WURDNB  50       Run day number
     C                     MOVE AGSUC     WUSUC   1        Set up complete
     C                     MOVE AGDFF     WUDFF   1        Date Format
     C                     MOVE AGMBIN    WUMBIN  1        Multi Branched
      *
     C/COPY WNCPYSRC,MS1900C022
      * Setup field for 'CRLF', used in SCAN checking to determine
      * delimiters for Block data strings
      *
     C                     BITOF'01236'   BTA
     C                     BITON'457'     BTA
     C                     BITOF'01346'   BTB
     C                     BITON'257'     BTB
      *
      * Setup Block 4 delimiters
      *
      * Setup delimiter FS2/FS3 - start of tag within message block
      *
     C                     MOVE ':'       CLN
     C                     MOVELCRLFC     FS3     3
      *
      * Setup delimiter CS2 - start of new line within tag
      *
     C                     MOVELCRLFC     CS2     2
      *
      * Setup delimiter FS4 - end of Block 4:
      *
     C                     MOVE '-'       CLN
     C                     MOVELCRLFC     FS4     3
      *
      * Setup Block 5 delimiters
      *
     C                     MOVE '{'       OPB     1
     C                     MOVE '}}'      ENB     2
     C/COPY WNCPYSRC,MS1900C010
      *                                                                                       CSW209
      ** See if SWIFT 2009 Active                                                             CSW209
      *                                                                                       CSW209
     C                     CALL 'SWIF2009'                                                    CSW209
     C                     PARM           P@RTCD                                              CSW209
     C           P@RTCD    IFEQ 'CSW2009'                                                     CSW209
     C                     MOVE 'Y'       CSW209  1                                           CSW209
     C                     ELSE                                                               CSW209
     C                     MOVE 'N'       CSW209                                              CSW209
     C                     ENDIF                                                              CSW209
      *                                                                                       CSW209
      ** Define Key List for MESTGSL1                                                         CSW209
      *                                                                                       CSW209
     C           KLIST1    KLIST                                                              CSW209
     C                     KFLD           MTPY                                                CSW209
     C                     KFLD           WKTAG                                               CSW209
     C                     KFLD           WKVALF                                              CSW209
      *
      *  Indicate that set up is complete
      *
     C                     SETON                     50
      *
      *  Unwind subroutine stack name
      *
     C           EXINIT    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
     C/COPY WNCPYSRC,MS1900C019
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************   CFT006
      *                                                               *   CFT006
      *  CKTREX   : Check there are no exceptions                     *   CFT006
      *                                                               *   CFT006
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *   CFT006
      *                                                               *   CFT006
      *  CALLS    :                                                   *   CFT006
      *                                                               *   CFT006
      *****************************************************************   CFT006
     CSR         CKTREX    BEGSR                                          CFT006
      *                                                                   CFT006
      *  Set up subroutine stack name                                     CFT006
      *                                                                   CFT006
     C                     ADD  1         Q       50                      CFT006
     C                     MOVEL'CKTREX'  @STK,Q                          CFT006
      *                                                                   CFT006
     C                     MOVELMTPY      WCKMTY                          CFT006
     C                     MOVELWKTAG     WCKTAG                          CFT006
     C                     MOVELWSQANZ    WCKSEQ                          CFT006
     C           WCKARG    LOKUPTREX                     63               CFT006
      *                                                                   CFT006
     C           *IN63     IFEQ '1'                                       CFT006
     C                     MOVEL'Y'       WEXTRN  1                       CFT006
     C                     ELSE                                           CFT006
     C                     MOVEL'N'       WEXTRN                          CFT006
     C                     ENDIF                                          CFT006
      *                                                                   CFT006
      *  Unwind subroutine stack name                                     CFT006
      *                                                                   CFT006
     C           EXTREX    TAG                                            CFT006
     C                     MOVEA*BLANKS   @STK,Q                          CFT006
     C                     SUB  1         Q                               CFT006
      *                                                                   CFT006
     CSR                   ENDSR                                          CFT006
     C/EJECT                                                              CFT006
      *****************************************************************   CFT006
      *                                                               *   CFT006
      *  CKRFEX   : Check there are no exceptions                     *   CFT006
      *                                                               *   CFT006
      *  CALLED BY: SREXPT - Extract Part Details from the message    *   CFT006
      *                                                               *   CFT006
      *  CALLS    :                                                   *   CFT006
      *                                                               *   CFT006
      *****************************************************************   CFT006
     CSR         CKRFEX    BEGSR                                          CFT006
      *                                                                   CFT006
      *  Set up subroutine stack name                                     CFT006
      *                                                                   CFT006
     C                     ADD  1         Q       50                      CFT006
     C                     MOVEL'CKRFEX'  @STK,Q                          CFT006
      *                                                                   CFT006
     C                     MOVELMTPY      WCKMTY                          CFT006
     C                     MOVELWKTAG     WCKTAG                          CFT006
     C                     MOVELWSQANZ    WCKSEQ                          CFT006
     C           WCKARG    LOKUPRFEX                     63               CFT006
      *                                                                   CFT006
     C           *IN63     IFEQ '1'                                       CFT006
     C                     MOVEL'Y'       WEXREF  1                       CFT006
     C                     ELSE                                           CFT006
     C                     MOVEL'N'       WEXREF                          CFT006
     C                     ENDIF                                          CFT006
      *                                                                   CFT006
      *  Unwind subroutine stack name                                     CFT006
      *                                                                   CFT006
     C           EXRFEX    TAG                                            CFT006
     C                     MOVEA*BLANKS   @STK,Q                          CFT006
     C                     SUB  1         Q                               CFT006
      *                                                                   CFT006
     CSR                   ENDSR                                          CFT006
     C/EJECT                                                              CFT006
      *****************************************************************   CFT006
      *                                                               *   CFT006
      *  CKAMEX   : Check there are no exceptions in the amounts      *   CFT006
      *                                                               *   CFT006
      *  CALLED BY: SREXPT - Extract Part Details from the message    *   CFT006
      *                                                               *   CFT006
      *  CALLS    :                                                   *   CFT006
      *                                                               *   CFT006
      *****************************************************************   CFT006
     CSR         CKAMEX    BEGSR                                          CFT006
      *                                                                   CFT006
      *  Set up subroutine stack name                                     CFT006
      *                                                                   CFT006
     C                     ADD  1         Q       50                      CFT006
     C                     MOVEL'CKAMEX'  @STK,Q                          CFT006
      *                                                                   CFT006
     C                     MOVELMTPY      WCKMTY                          CFT006
     C                     MOVELWKTAG     WCKTAG                          CFT006
     C                     MOVELWSQANZ    WCKSEQ                          CFT006
     C           WCKARG    LOKUPAMEX                     63               CFT006
      *                                                                   CFT006
     C           *IN63     IFEQ '1'                                       CFT006
     C                     MOVEL'Y'       WEXAMT  1                       CFT006
     C                     ELSE                                           CFT006
     C                     MOVEL'N'       WEXAMT                          CFT006
     C                     ENDIF                                          CFT006
      *                                                                   CFT006
      *  Unwind subroutine stack name                                     CFT006
      *                                                                   CFT006
     C           EXAMEX    TAG                                            CFT006
     C                     MOVEA*BLANKS   @STK,Q                          CFT006
     C                     SUB  1         Q                               CFT006
      *                                                                   CFT006
     CSR                   ENDSR                                          CFT006
      *****************************************************************   CFT014
      *                                                               *   CFT014
      *  CKDTEX   : Check there are no exceptions in the tag's data   *   CFT014
      *                                                               *   CFT014
      *  CALLED BY: SRBLK4 - Process Block Identifier                 *   CFT014
      *                                                               *   CFT014
      *  CALLS    :                                                   *   CFT014
      *                                                               *   CFT014
      *****************************************************************   CFT014
     CSR         CKDTEX    BEGSR                                          CFT014
      *                                                                   CFT014
      *  Set up subroutine stack name                                     CFT014
      *                                                                   CFT014
     C                     ADD  1         Q       50                      CFT014
     C                     MOVEL'CKDTEX'  @STK,Q                          CFT014
      *                                                                   CFT014
     C                     MOVELMTPY      WCKMTY                          CFT014
     C                     MOVELWKTAG     WCKTAG                          CFT014
     C                     MOVELWSQANZ    WCKSEQ                          CFT014
     C           WCKARG    LOKUPDTEX                     63               CFT014
      *                                                                   CFT014
     C           *IN63     IFEQ '1'                                       CFT014
     C                     MOVEL'Y'       WEXDAT  1                       CFT014
     C                     ELSE                                           CFT014
     C                     MOVEL'N'       WEXDAT                          CFT014
     C                     ENDIF                                          CFT014
      *                                                                   CFT014
      *  Unwind subroutine stack name                                     CFT014
      *                                                                   CFT014
     C           EXDTEX    TAG                                            CFT014
     C                     MOVEA*BLANKS   @STK,Q                          CFT014
     C                     SUB  1         Q                               CFT014
      *                                                                   CFT014
     CSR                   ENDSR                                          CFT014
      *****************************************************************   CFT014
      *                                                               *   CFT014
      *  EXDTST   : Extract data from special tag                     *   CFT014
      *                                                               *   CFT014
      *  CALLED BY: SRBLK4 - Process Block Identifier                 *   CFT014
      *                                                               *   CFT014
      *  CALLS    :                                                   *   CFT014
      *                                                               *   CFT014
      *****************************************************************   CFT014
     CSR         EXDTST    BEGSR                                          CFT014
      *                                                                   CFT014
      *  Set up subroutine stack name                                     CFT014
      *                                                                   CFT014
     C                     ADD  1         Q       50                      CFT014
     C                     MOVEL'EXDTEX'  @STK,Q                          CFT014
      *                                                                   CFT014
      **  Flag to indicate whether we can leave the loop in SRBLK4        CFT014
     C                     MOVEL'N'       WEXLV   1                       CFT014
      *                                                                   CFT014
     C                     SELEC                                          CFT014
      **  Extract data from tag :77T: of MT103                            CFT014
     C           WKTAG     WHEQ ':77T:'                                   CFT014
     C           MTPY      ANDEQ'103'                                     CFT014
     C                     EXSR TG77T                                     CFT014
     C                     MOVEL'Y'       WEXLV                           CFT014
     C                     OTHER                                          CFT014
     C                     ENDSL                                          CFT014
      *                                                                   CFT014
      *  Unwind subroutine stack name                                     CFT014
      *                                                                   CFT014
     C           EXEDTS    TAG                                            CFT014
     C                     MOVEA*BLANKS   @STK,Q                          CFT014
     C                     SUB  1         Q                               CFT014
      *                                                                   CFT014
     CSR                   ENDSR                                          CFT014
      *****************************************************************   CFT014
      *                                                               *   CFT014
      *  TG77T    : Extract data from :77T:                           *   CFT014
      *                                                               *   CFT014
      *  CALLED BY: EXDTST - Extract data from special tag            *   CFT014
      *                                                               *   CFT014
      *  CALLS    :                                                   *   CFT014
      *                                                               *   CFT014
      *****************************************************************   CFT014
     CSR         TG77T     BEGSR                                          CFT014
      *                                                                   CFT014
      *  Set up subroutine stack name                                     CFT014
      *                                                                   CFT014
     C                     ADD  1         Q       50                      CFT014
     C                     MOVEL'TG77T '  @STK,Q                          CFT014
      * Start of extraction = former start + length extracted.            CFT014
     C                     ADD  L         S                               CFT014
      *                                                                                     AR845802
      ** If the new line delimiter is less than the new tag                                 AR845802
      ** tag delimiter, then extract data only until C2.                                    AR845802
      ** Else, extract until F3.                                                            AR845802
      *                                                                                     AR845802
     C           F3        IFLT C2                                                          AR845802
      *                                                                                     AR845802
     C           S         DOWLTF3                                        CFT014
     C                     EXSR SRDAT4                                    CFT014
     C                     EXSR SRUPDT                                    CFT014
     C                     ADD  L         S                               CFT014
     C                     ENDDO                                          CFT014
      *                                                                                     AR845802
     C                     ELSE                                                             AR845802
      *                                                                                     AR845802
     C           S         DOWLTC2                                                          AR845802
     C                     EXSR SRDAT4                                                      AR845802
     C                     EXSR SRUPDT                                                      AR845802
     C                     ADD  L         S                                                 AR845802
     C                     ENDDO                                                            AR845802
      *                                                                                     AR845802
     C                     ENDIF                                                            AR845802
      *                                                                   CFT014
     C           EXTG77    TAG                                            CFT014
     C                     MOVEA*BLANKS   @STK,Q                          CFT014
     C                     SUB  1         Q                               CFT014
      *                                                                   CFT014
     CSR                   ENDSR                                          CFT014
      *****************************************************************   CFT014
      *                                                               *   CFT014
      *  CLRARR   : Clear the big array                               *   CFT014
      *                                                               *   CFT014
      *  CALLED BY: SRSWFT - Extract Data From SWIFT Message          *   CFT014
      *                                                               *   CFT014
      *  CALLS    :                                                   *   CFT014
      *                                                               *   CFT014
      *****************************************************************   CFT014
     CSR         CLRARR    BEGSR                                          CFT014
      *                                                                   CFT014
      *  Set up subroutine stack name                                     CFT014
      *                                                                   CFT014
     C                     ADD  1         Q       50                      CFT014
     C                     MOVEL'CLRARR'  @STK,Q                          CFT014
      *                                                                   CFT014
     C                     CALL 'MS1910'               90                 CFT014
     C                     PARM *BLANK    P@FCT1256                       CFT014
     C                     PARM 0         P@LEN1 150                      CFT014
     C                     PARM '*CLEAR_A'P@OPCD 10                       CFT014
     C                     PARM *BLANK    P@FCT2256                       CFT014
     C                     PARM 0         P@LEN2 150                      CFT014
     C           DSRSLT    PARM *BLANK    P@RSLT256                       CFT014
     C                     PARM *BLANK    P@RTCD  7                       CFT014
      *                                                                   CFT014
     C           *IN90     IFEQ '1'                                       CFT014
     C           P@RTCD    ORNE *BLANK                                    CFT014
     C                     MOVEL'MS1910  'W0FILE           ***************CFT014
     C                     MOVEL'*CLEAR'  W0KEY            * DB ERROR 19 *CFT014
     C                     Z-ADD19        W0ERNB           ***************CFT014
     C                     MOVEL'MEM5003' W0MSGD                          CFT014
     C                     MOVEL'MIDAS  ' W0MSGF                          CFT014
     C                     EXSR SRERR                                     CFT014
     C                     ENDIF                                          CFT014
      *                                                                   CFT014
      *  Unwind subroutine stack name                                     CFT014
      *                                                                   CFT014
     C           EXCLAR    TAG                                            CFT014
     C                     MOVEA*BLANKS   @STK,Q                          CFT014
     C                     SUB  1         Q                               CFT014
      *                                                                   CFT014
     CSR                   ENDSR                                          CFT014
      *****************************************************************   CFT014
      *                                                               *   CFT014
      *  FILARR   : Fill  the big array                               *   CFT014
      *                                                               *   CFT014
      *  CALLED BY: SRSWFT - Extract Data From SWIFT Message          *   CFT014
      *                                                               *   CFT014
      *  CALLS    :                                                   *   CFT014
      *                                                               *   CFT014
      *****************************************************************   CFT014
     CSR         FILARR    BEGSR                                          CFT014
      *                                                                   CFT014
      *  Set up subroutine stack name                                     CFT014
      *                                                                   CFT014
     C                     ADD  1         Q       50                      CFT014
     C                     MOVEL'FILARR'  @STK,Q                          CFT014
      *                                                                   CFT014
     C                     CALL 'MS1910'               90                 CFT014
     C                     PARM           P@FCT1256                       CFT014
     C                     PARM 0         P@LEN1 150                      CFT014
     C                     PARM '*FILL   'P@OPCD 10                       CFT014
     C                     PARM *BLANK    P@FCT2256                       CFT014
     C                     PARM           P@LEN2 150                      CFT014
     C           DSRSLT    PARM *BLANK    P@RSLT256                       CFT014
     C                     PARM *BLANK    P@RTCD  7                       CFT014
      *                                                                   CFT014
     C           *IN90     IFEQ '1'                                       CFT014
     C           P@RTCD    ORNE *BLANK                                    CFT014
     C                     MOVEL'MS1910  'W0FILE           ***************CFT014
     C                     MOVEL'*FILL'   W0KEY            * DB ERROR 20 *CFT014
     C                     Z-ADD20        W0ERNB           ***************CFT014
     C                     MOVEL'MEM5003' W0MSGD                          CFT014
     C                     MOVEL'MIDAS  ' W0MSGF                          CFT014
     C                     EXSR SRERR                                     CFT014
     C                     ENDIF                                          CFT014
      *                                                                   CFT014
      *  Unwind subroutine stack name                                     CFT014
      *                                                                   CFT014
     C           EXFIAR    TAG                                            CFT014
     C                     MOVEA*BLANKS   @STK,Q                          CFT014
     C                     SUB  1         Q                               CFT014
      *                                                                   CFT014
     CSR                   ENDSR                                          CFT014
      *****************************************************************   CFT014
      *                                                               *   CFT014
      *  SCNARR   : Scan  the big array                               *   CFT014
      *                                                               *   CFT014
      *  CALLED BY: SRSWFT - Extract Data From SWIFT Message          *   CFT014
      *                                                               *   CFT014
      *  CALLS    :                                                   *   CFT014
      *                                                               *   CFT014
      *****************************************************************   CFT014
     CSR         SCNARR    BEGSR                                          CFT014
      *                                                                   CFT014
      *  Set up subroutine stack name                                     CFT014
      *                                                                   CFT014
     C                     ADD  1         Q       50                      CFT014
     C                     MOVEL'SCNARR'  @STK,Q                          CFT014
      *                                                                   CFT014
     C                     CALL 'MS1910'               90                 CFT014
     C                     PARM           P@FCT1256                       CFT014
     C                     PARM           P@LEN1 150                      CFT014
     C                     PARM '*SCAN   'P@OPCD 10                       CFT014
     C                     PARM *BLANK    P@FCT2256                       CFT014
     C                     PARM           P@LEN2 150                      CFT014
     C           DSRSLT    PARM *BLANK    P@RSLT256                       CFT014
     C                     PARM *BLANK    P@RTCD  7                       CFT014
      *                                                                   CFT014
     C           *IN90     IFEQ '1'                                       CFT014
     C           P@RTCD    ORNE *BLANK                                    CFT014
     C                     MOVEL'MS1910  'W0FILE           ***************CFT014
     C                     MOVEL'*SCAN'   W0KEY            * DB ERROR 21 *CFT014
     C                     Z-ADD21        W0ERNB           ***************CFT014
     C                     MOVEL'MEM5003' W0MSGD                          CFT014
     C                     MOVEL'MIDAS  ' W0MSGF                          CFT014
     C                     EXSR SRERR                                     CFT014
     C                     ENDIF                                          CFT014
      *                                                                   CFT014
      *  Unwind subroutine stack name                                     CFT014
      *                                                                   CFT014
     C           EXSCAR    TAG                                            CFT014
     C                     MOVEA*BLANKS   @STK,Q                          CFT014
     C                     SUB  1         Q                               CFT014
      *                                                                   CFT014
     CSR                   ENDSR                                          CFT014
      *****************************************************************   CFT014
      *                                                               *   CFT014
      *  SUBARR   : Extract a string from the big array               *   CFT014
      *                                                               *   CFT014
      *  CALLED BY: SRSWFT - Extract Data From SWIFT Message          *   CFT014
      *                                                               *   CFT014
      *  CALLS    :                                                   *   CFT014
      *                                                               *   CFT014
      *****************************************************************   CFT014
     CSR         SUBARR    BEGSR                                          CFT014
      *                                                                   CFT014
      *  Set up subroutine stack name                                     CFT014
      *                                                                   CFT014
     C                     ADD  1         Q       50                      CFT014
     C                     MOVEL'SUBARR'  @STK,Q                          CFT014
      *                                                                   CFT014
     C                     CALL 'MS1910'               90                 CFT014
     C                     PARM *BLANK    P@FCT1256                       CFT014
     C                     PARM           P@LEN1 150                      CFT014
     C                     PARM '*SUBST  'P@OPCD 10                       CFT014
     C                     PARM *BLANK    P@FCT2256                       CFT014
     C                     PARM           P@LEN2 150                      CFT014
     C           DSRSLT    PARM *BLANK    P@RSLT256                       CFT014
     C                     PARM *BLANK    P@RTCD  7                       CFT014
      *                                                                   CFT014
     C           *IN90     IFEQ '1'                                       CFT014
     C           P@RTCD    ORNE *BLANK                                    CFT014
     C                     MOVEL'MS1910  'W0FILE           ***************CFT014
     C                     MOVEL'*SUBST'  W0KEY            * DB ERROR 22 *CFT014
     C                     Z-ADD22        W0ERNB           ***************CFT014
     C                     MOVEL'MEM5003' W0MSGD                          CFT014
     C                     MOVEL'MIDAS  ' W0MSGF                          CFT014
     C                     EXSR SRERR                                     CFT014
     C                     ENDIF                                          CFT014
      *                                                                   CFT014
      *  Unwind subroutine stack name                                     CFT014
      *                                                                   CFT014
     C           EXSUAR    TAG                                            CFT014
     C                     MOVEA*BLANKS   @STK,Q                          CFT014
     C                     SUB  1         Q                               CFT014
      *                                                                   CFT014
     CSR                   ENDSR                                          CFT014
     C/EJECT                                                              CFT006
      *****************************************************************                       CSW212
      *                                                               *                       CSW212
      *  SRFAMT   : Format amount for Message Type 370                *                       CSW212
      *                                                               *                       CSW212
      *  Called By: SREXPT - Extract Part Details from the message    *                       CSW212
      *                                                               *                       CSW212
      *                                                               *                       CSW212
      *****************************************************************                       CSW212
     C           SRFAMT    BEGSR                                                              CSW212
      *                                                                                       CSW212
      **  Replace "," with "." for conversion                                                 CSW212
      *                                                                                       CSW212
     C                     MOVEAZFIELD    FLA                                                 CSW212
     C                     Z-ADD1         A                                                   CSW212
     C           ','       LOKUPFLA,A                    90                                   CSW212
     C           *IN90     IFEQ '1'                                                           CSW212
     C                     MOVE '.'       FLA,A                                               CSW212
     C                     ENDIF                                                              CSW212
      *                                                                                       CSW212
      **  Remove leading zeros before amounts                                                 CSW212
      *                                                                                       CSW212
     C                     Z-ADD1         A                                                   CSW212
     C           FLA,A     DOWEQ'0'                                                           CSW212
     C           FLA,A     OREQ ' '                                                           CSW212
     C           A         ANDLT17                                                            CSW212
     C           FLA,A     IFEQ '0'                                                           CSW212
     C                     MOVE ' '       FLA,A                                               CSW212
     C                     ENDIF                                                              CSW212
     C                     ADD  1         A                                                   CSW212
     C                     ENDDO                                                              CSW212
      *                                                                                       CSW212
     C                     MOVEAFLA       ZFIELD                                              CSW212
     C                     MOVEAFLA       WTFAMA                                              CSW212
      *                                                                                       CSW212
     C                     CALL 'ZALIGN'                                                      CSW212
     C                     PARM *BLANKS   ZRTN                                                CSW212
     C                     PARM           ZFIELD                                              CSW212
     C                     PARM 3         ZADEC                                               CSW212
     C                     PARM 12        ZADIG                                               CSW212
     C                     PARM           ZAFLD                                               CSW212
      *                                                                                       CSW212
     C                     Z-ADD0         MPPYAM                                              CSW212
     C           ZRTN      IFEQ *BLANKS                                                       CSW212
     C                     MOVE ZAFLD     ZNUM15                                              CSW212
     C           ZNUM15    DIV  1000      MPPYAM                                              CSW212
     C                     ENDIF                                                              CSW212
      *                                                                                       CSW212
     C                     ENDSR                                                              CSW212
      *****************************************************************                       CSW212
     C/EJECT                                                                                  CSW212
     C/COPY WNCPYSRC,MS1900DCPG
      *
      *  /Copy point for Calculations
      *
     C/EJECT
      *
      * File and Program Error Processing
     C/COPY MECPYSRC,SRERRC
     C/EJECT
     C/COPY WNCPYSRC,MS1900DOPG
      *
      *  /Copy point for Outputs
      *
     C/EJECT
      *****************************************************************
      * Update MSIXI2D0 Swift Messages
      *****************************************************************
      *
     OMSIXI2D0E                MSIXI2
     O                         IMPF
      *
      ** Remove 32F2 from TTAG/TFMT as this will never be related to                          CSW212
      ** valid currency. Move other tags to complete the table entry.                         CSW212
      *                                                                                       CSW212
**  CPY@ table
(c) Finastra International Limited 2001
**  TTAG/TFMT Tag no.(3) - Format type (1) for date/ccy/amount
30:731B731C731D731E731F731G731H731J731L7
31P731R731S731T731X732A132B232C132D132E2
32E232G232H432K132L232M232N332P132R132S1                                                      CSW212
32T133A133B233C133D133E233F233G233K133N3                                                      CSW212
33P133R133S233T233V234A134B234C134D134E4                                                      CSW212
34F634G534H534N334P134R1                                                                      CSW212
**  STYP/STAG Message Type (3) - Tag (3) for start of Part No.
101:21                                                                    CFT002
102:21                                                                    CFT002
210:21
571:28
572:28
573:28
574:28
577:28
579:27
580:23
700:27
701:27
705:40
710:27
711:27
720:27
721:27
760:27
767:27
800:23
801:51
802:23
**  RTYP/RTAG Message Type (3) - Tag (3) for Transaction Reference
101:21                                                                    CFT002
102:21                                                                    CFT002
210:21
710:21
711:21
720:21
721:21
742:21
800:23
802:23
**  TREX Tag exceptions for those found in STAG                                 CFT006
101A:21R:                                                                       CFT006
101 :21F:                                                                       CFT006
**  RFEX Tag exceptions for those found in RTAG                                 CFT006
101A:21R:                                                                       CFT006
101 :21F:                                                                       CFT006
**  AMEX Tag exceptions for those found in TTAG                                 CFT006
101 :33B:                                                                       CFT006
102 :33B:                                                                       CFT006
103 :33B:                                                                       CFT014
202 :33B:                                                                                   BUG26765
600 :30:                                                                                      CSW212
600 :33G:                                                                                     CSW212
**  DTEX Tag exceptions for max length used in SRDAT4                           CFT014
103 :77T:                                                                       CFT014
