/********************************************************************
 *STD *  CM_REPN
 ********************************************************************
 *
 *       (c) Finastra International Limited 2021
 *
 *       Last Amend No. MD058809  *CREATE  Date 16Dec21
 *
 ********************************************************************
 *
 *       MD058809 - After installation of MQ9 compatibility patch and
 *                  restart of the Meridian Replication subsystem
 *                  REPMIDASPT, the job MPT1PBSIN ended in MSGW.
 *
 ********************************************************************
 */
#include <stdlib.h>
#include <string.h>

#include "kmdifh.h"
#include "kmdboh.h"
#include "kmduth.h"

/*  This program allows CLP/OPM programs to link through X7PF  */

void main(int argc, char * argv[])
{
    int i;

    if (memcmp(argv[1],"INITBO   ",6) == 0)
    {
        Init_BO(argv[2]);
        return;
    }
    if (memcmp(argv[1],"GETUNIT   ",7) == 0)
    {
        GETUNIT(argv[2]);
        return;
    }
    if (memcmp(argv[1],"INITUNIT  ",8) == 0)
    {
        INITUNIT(argv[2]);
        return;
    }
    if (memcmp(argv[1],"PGMLIB    ",6) == 0)
    {
        PGMLIB(argv[2],argv[3]);
        return;
    }
    if (memcmp(argv[1],"FILLIB    ",6) == 0)
    {
        FILLIB(argv[2],argv[3]);
        return;
    }
    if (memcmp(argv[1],"INPLIB    ",6) == 0)
    {
        INPLIB(argv[2],argv[3]);
        return;
    }
    if (memcmp(argv[1],"WRKLIB    ",6) == 0)
    {
        WRKLIB(argv[2],argv[3]);
        return;
    }
    if ((i = memcmp(argv[1],"BASELIB   ",7)) == 0)
    {
        BASELIB(argv[2]);
        return;
    }
    if (memcmp(argv[1],"MDBALIB    ",7) == 0)
    {
        MDBALIB(argv[2]);
        return;
    }
    if (memcmp(argv[1],"SBSNAME    ",7) == 0)
    {
        SBSNAME(argv[2]);
        return;
    }
    if (memcmp(argv[1],"EQUATION   ",8) == 0)
    {
        if (is_EQUATION()) *argv[2] = 'Y';
        else *argv[2] = 'N';
        return;
    }
    if (memcmp(argv[1],"PRODUCT   ",7) == 0)
    {
        memmove(argv[2],PRODUCT(),10);
        return;
    }
    if (memcmp(argv[1],"ENVOWNER  ",8) == 0)
    {
        memset(argv[3], ' ', 10);
        memmove(argv[3],unit_owner(argv[2]),strlen(unit_owner(argv[2])));
        return;
    }
}

