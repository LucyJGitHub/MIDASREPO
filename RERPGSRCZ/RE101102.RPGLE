     H DEBUG
     H COPYRIGHT('(c) Misys International Banking Systems Ltd. 2002')
      *****************************************************************
/*STD *  RPGBASEMOD                                                   *
/*EXI *  TEXT('Midas RE Zero Balancing Stops Maintenance')            *
      *****************************************************************
      *                                                               *
      *  Midas - Retail Module                                        *
      *                                                               *
      *  RE101102 - Zero Balancing Stops Maintenance                  *
      *                                                               *
      *  Function: This module allows display and maintenance of      *
      *            zero balancing stops generated by the system.      *
      *                                                               *
      *  (c) Misys International Banking Systems Ltd. 2002            *
      *                                                               *
      *  Last Amend No. CER059             Date 19Jul10               *
      *  Prev Amend No. CER043             Date 19May08               *
      *                 BUG28077           Date 26Aug10               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      *                 CSD031             Date 10Apr06               *
      *                 CSD027             Date 09Dec05               *
      *                 BUG6979            Date 03May05               *
      *                 CGL029             Date 01Sep03               *
      *                 211210             Date 11Dec02               *
      *                 CRE008  *CREATE    Date 19Feb02               *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *  CER059 - German Feature Upgrade to Delhi                     *
      *  CER043 - German Features LF041-00 New Fields and Defaulting  *
      *           (Recompile)                                         *
      *  BUG28077 - Parent account code field was not updated to 10S. *
      *  CSD031 - Enhanced Centralised Static Data (Recompile)        *
      *  CSD027 - Conversion Of Customer Number to Alpha              *
      *  BUG6979 - Ensure ZMUSER is re-checked on every call,         *
      *            move out of *INZSR.                                *
      *  CGL029 - Increase Account Code to 10 digits                  *
      *  211210 - Various action code errors                          *
      *  CRE008 - Cash Management                                     *
      *                                                               *
      *****************************************************************
      *                                                               *
      *  Use of indicators.                                           *
      *                                                               *
      *    26         Main/Details Screen                             *
      *    27         Enquire                                         *
      *    28         Delete                                          *
      *    29         Release                                         *
      *    30         Invalid Action Code                             *
      *    31         Rollup/Rolldown (Main subfile)                  *
      *    51         SFLEND ('STOP...' subfile)                      *
      *    52         SFLCLR ('STOP...' subfile)                      *
      *    53         SFLEND ('ORIG...' subfile)                      *
      *    54         SFLCLR ('ORIG...' subfile)                      *
      *    80         SFLCLR (Main subfile)                           *
      *    81         SFLDSP (Main subfile)                           *
      *    82         Rollup (Main subfile)                           *
      *    84         SFLNXTCHG (Main subfile)                        *
      *    86         READC indicator                                 *
      *                                                               *
      *****************************************************************
      *                                                               *
      *  S U B R O U T I N E  I N D E X                               *
      *                                                               *
      *  SRBuild       -  Build main subfile (screen 1)               *
      *  SRLoad        -  Load subfile page                           *
      *  SRDisplay     -  Display screen                              *
      *  SRProcess     -  Process screen input                        *
      *  SRVAction     -  Validate action code                        *
      *  SRDetsSfl     -  Build details subfile                       *
      *  SREnquire     -  Enquire                                     *
      *  SRDelReq      -  Process delete request                      *
      *  SRDelete      -  Flag record as deleted                      *
      *  SRRefresh     -  Refresh subfile                             *
      *  SRRetrieve    -  Retrieve record details                     *
      *  SRChildAcct   -  Process child account details               *
      *  SRParentAcct  -  Process parent account details              *
      *  SRRelReq      -  Process release request                     *
      *  SRRelease     -  Flag record as released                     *
      *  SRShadow      -  Shadow post released stopped entries        *
      *  SRVDelRel     -  Validate Deletion/Releasing of record       *
      *  SRSndMsg      -  Message handling subroutine                 *
      *  SREnd         -  End program                                 *
      *                                                               *
      *  *PSSR - Error processing                                     *
      *  *INZSR - Initialise                                          *
      *                                                               *
      *    The *INZSR subroutine will only get called automatically   *
      *    on entry to the module the first time it is run            *
      *    (unless you end the program with LR on).  Similarly        *
      *    D-spec initialisation only happens the first time.  Use    *
      *    RESET for subsequent passes.                               *
      *                                                               *
      *****************************************************************
 
      ** +--------------------------------------+
      ** ¦ F-specs                              ¦
      ** ¦ =======                              ¦
      ** +--------------------------------------+
 
     FRE101102DFCF   E             WORKSTN INFSR(*PSSR)
     F                                     SFILE(RE101102S0:#0RLRN)
     F                                     SFILE(RE101102S1:#1RLRN)
     F                                     SFILE(RE101102S2:#2RLRN)
      ** Midas RE Zero Balancing Stops Maintenance Display File
 
     FREZSTIL0  IF   E           K DISK    INFSR(*PSSR)
      ** Midas RE Cash Management Zero-Balancing Stops - Items
 
     FREZSTDL3  IF   E           K DISK    INFSR(*PSSR)
     F                                     RENAME(REZSTDD0:@3ZSTDD0)
      ** Midas RE Cash Management Zero-Balancing Stops - PRCD,HISN,LINK,STPN
 
     FREZSTDL0  UF   E           K DISK    INFSR(*PSSR)
     F                                     COMMIT
      ** Midas RE Cash Management Zero-Balancing Stops - Details
 
     FRECMHDL0  IF   E           K DISK    INFSR(*PSSR)
      ** Midas RE Cash Management Hierarachy Details
 
     FGLPSTTL0  IF   E           K DISK    INFSR(*PSSR)
     F                                     PREFIX(GL_)
      ** Midas GL Postings in Transit
 
     FGLPSTZSL0 IF   E           K DISK    INFSR(*PSSR)
     F                                     PREFIX(EX_)
      ** Midas GL Postings in Transit - Zero Bal/Sweep Exts
 
     FACCNT     IF   E           K DISK    INFSR(*PSSR)
     F                                     INCLUDE(ACCNTABF)
     F                                     PREFIX(AC_)
      ** Midas GL Accounts Master file
 
     FAPOST     IF   E           K DISK    INFSR(*PSSR)
     F                                     RENAME(APOSTPDF:APOSTD0)
     F                                     IGNORE(APOSTRAF)
     F                                     PREFIX(AP_)
      ** Midas GL Postings by BRCA CNUM CCY ACOD ACSQ PSTD DRCR
 
      *****************************************************************
      /SPACE 5
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ D-specs                              ¦
      ** ¦ =======                              ¦
      ** +--------------------------------------+
 
      ** Standard D specifications
     D/COPY ZACPYSRC,RECMSTDD
 
      ** The following /COPY line includes all the defined fields in the
      ** PSDS.  They have meaningful names, prefixed by 'PS'.
     D/COPY ZACPYSRC,PSDS
 
      ** +--------------------------------------+
      ** ¦ Named constants                      ¦
      ** ¦ ===============                      ¦
      ** +--------------------------------------+
 
 
      ** +--------------------------------------+
      ** ¦ Arrays and Data Structures           ¦
      ** ¦ ==========================           ¦
      ** +--------------------------------------+
                                                                                211210
     D ZMUSER          DS            17                                         211210
     D  BRC                   11     13                                         211210
 
      ** External data structure for Bank Details
     D SDBANK        E DS                  EXTNAME(SDBANKPD)
 
      ** External data structure for Currency Details
     D SDCURR        E DS                  EXTNAME(SDCURRPD)
 
      ** Short Data Structure
     D DSFDY         E DS                  EXTNAME(DSFDY)
 
      ** Second DS for access programs, long data structure
     D DSSDY         E DS                  EXTNAME(DSSDY)
 
      ** Input data for Shadow Posting
     D I_DATA        E DS                  EXTNAME(GLPSTTL0)
     D                                     PREFIX(GL_)
 
      ** +--------------------------------------+
      ** ¦ Declared variables                   ¦
      ** ¦ ==================                   ¦
      ** +--------------------------------------+
 
     D PRtrnCode       S              7
     D POption         S              7
     D PSard           S              6
     D PDayNum         S              5  0
     D PFormat         S              1
     D PDDMMYY         S              6  0
     D PDDMMMYY        S              7
     D PZMsgFile       S             10
     D PZMsgID         S             10
 
     D WReload         S              1
     D WLastRec        S              4  0
     D WError          S              1
     D WProcess        S              1
     D WRecPag         S              5  0
     D WSflPag         S              3  0
     D WrkCNUM         S              6
     D*WrkACOD**       S              4                                                       CGL029
     D WrkACOD         S             10                                                       CGL029
     D WrkACSQ         S              2
 
      *****************************************************************
      /SPACE 5
      *****************************************************************
 
      ** +--- Start of Main processing --------------------------------+
      ** ¦                                                             ¦
      ** ¦ Initial processing is performed automatically: the *INZSR is¦
      ** ¦ executed at program activation.                             ¦
      ** ¦                                                             ¦
      ** +-------------------------------------------------------------+
 
      *****************************************************************
      * MAIN PROCEDURE                                                *
      *****************************************************************
 
      ** Main Program
 
      **  GET ZMUSER to access default branch.                                             BUG6979
      *                                                                                    BUG6979
     C     *DTAARA       DEFINE                  ZMUSER                                    BUG6979
     C                   IN        ZMUSER                                                  BUG6979
     C                   UNLOCK    ZMUSER                                                  BUG6979
      *                                                                                    BUG6979
      ** Initialise subfile control                                                        BUG6979
      *                                                                                    BUG6979
     C                   EVAL      #0WSID = PSJobName                                      BUG6979
     C                   EVAL      #0USER = PSUser                                         BUG6979
     C                   EVAL      #1PGMQ = PSProcName                                     BUG6979
                                                                                           BUG6979
     C                   DO        *HIVAL
 
      ** Initialise and load subfile page
 
     C                   EXSR      SRBuild
 
     C                   EVAL      WReload = 'N'
 
      ** Display screen until reload requested
 
     C     WReload       DOWEQ     'N'
 
      ** Display screen
 
     C                   EXSR      SRDisplay
 
      ** Process response
 
     C     *IN03         CASEQ     '1'           SREnd
 
     C     *IN05         CASEQ     '1'           SRRefresh
 
     C     *IN31         CASEQ     '1'           SRLoad
 
     C                   CAS                     SRProcess
     C                   ENDCS
 
     C                   ENDDO
 
     C                   ENDDO
 
     C                   EVAL      *INLR = '1'
 
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRBuild - Build main subfile (screen 1)                      *
      *****************************************************************
     C     SRBuild       BEGSR
 
      ** Initialise & load subfile page
 
     C                   EVAL      *IN80 = '1'
     C                   WRITE     RE101102C0
     C                   EVAL      *IN80 = '0'
     C                   EVAL      *IN81 = '1'
     C                   EVAL      *IN82 = '0'
     C                   EVAL      *IN26 = '1'
 
      ** Reset Number of Records in Subfile
 
     C                   Z-ADD     0             WLastRec
 
      ** Position file
 
     C                   EVAL      ZDPRCD = *HIVAL
 
      ** Setup key
 
     C     ZDPRCD        SETLL     REZSTDL3
     C                   READ      REZSTDL3
 
      ** Load subfile page
 
     C                   EXSR      SRLoad
 
      ** If no records found, display error message
 
     C                   IF        %EOF(REZSTDL3)  AND  #0RLRN = 0
     C                   EVAL      *IN81 = '0'
     C                   EVAL      *IN82 = '1'
     C                   EVAL      PZMsgID = 'RE74041'
     C                   EXSR      SRSndMsg
     C                   ENDIF
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRLoad - Load Subfile Page                                   *
      *****************************************************************
     C     SRLoad        BEGSR
 
      ** Start at previous highest record in SFL
 
     C                   Z-ADD     WLastRec      #0RLRN
     C                   Z-ADD     1             WRecPag
 
      ** Load next subfile page
 
     C                   DOW       NOT %EOF(REZSTDL3)  AND  WRecPag <= WSflPag
 
     C                   EVAL      #0ACTN = *BLANK
 
      ** Retrieve subfile fields
 
     C                   EXSR      SRRetrieve
 
      ** Output to subfile
 
     C                   ADD       1             #0RLRN
     C                   ADD       1             WRecPag
 
     C                   WRITE     RE101102S0
 
     C                   READ      REZSTDL3
     C                   ENDDO
 
     C                   Z-ADD     #0RLRN        WLastRec
 
      ** Disable Rollup if all records are written to subfile.
 
     C                   IF        %EOF(REZSTDL3)
     C                   EVAL      *IN82 = '1'
     C                   ENDIF
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRDisplay - Display Subfile                                  *
      *****************************************************************
     C     SRDisplay     BEGSR
 
      ** Condition footer accordingly.
 
     C                   SELECT
     C                   WHEN      #0ACTN = 'E'
     C                   EVAL      *IN27 = '1'
 
     C                   WHEN      #0ACTN = 'D'
     C                   EVAL      *IN28 = '1'
 
     C                   WHEN      #0ACTN = 'R'
     C                   EVAL      *IN29 = '1'
     C                   ENDSL
 
      ** Display screen
 
     C                   TIME                    #0TIME
     C                   WRITE     RE101102F0
     C                   WRITE     RE101102F2
     C                   WRITE     RE101102C3
 
     C                   IF        *IN26 = '1'
     C                   EXFMT     RE101102C0
     C                   ELSE
     C                   WRITE     RE101102C1
     C                   EXFMT     RE101102C2
     C                   ENDIF
 
      ** Reset screen indicators.
 
     C                   MOVEA     '0000'        *IN(27)
 
      ** Clear program message queue.
 
     C                   CALL      'ZA0250'
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRProcess - Process Screen Input                             *
      *****************************************************************
     C     SRProcess     BEGSR
 
      ** If there are no records, continue displaying 'No Data to Display'.
 
     C                   IF        *IN82 = '1'  AND  #0RLRN = 0
     C                   EVAL      *IN81 = '0'
     C                   EVAL      PZMsgID = 'RE74041'
     C                   EXSR      SRSndMsg
 
     C                   ELSE
 
      ** Validate action codes.
 
     C                   EVAL      WError = 'N'
     C                   EVAL      WProcess = 'N'
     C                   EXSR      SRVAction
 
      ** If no error, process details according to action code.
 
     C                   IF        WError = 'N'  AND  WProcess = 'Y'
 
     C                   EVAL      *IN26 = '0'
     C                   EVAL      WReload = 'Y'
 
      ** Process all modified subfile records
 
     C                   READC     RE101102S0                             86
 
     C                   DOW       *IN86 = '0'
 
      ** Retrieve record details and fill detail subfiles.
 
     C                   IF        #0ACTN <> *BLANK
     C                   EXSR      SRRetrieve
     C                   EXSR      SRDetsSfl
 
     C                   SELECT
 
      ** Enquiry
 
     C                   WHEN      #0ACTN = 'E'
     C                   EXSR      SREnquire
 
      ** Delete
 
     C                   WHEN      #0ACTN = 'D'
     C                   EXSR      SRDelReq
 
      ** Release
 
     C                   WHEN      #0ACTN = 'R'
     C                   EXSR      SRRelReq
 
     C                   ENDSL
 
     C                   EVAL      #0ACTN = *BLANK
     C                   UPDATE    RE101102S0
     C                   ENDIF
 
     C                   READC     RE101102S0                             86
     C                   ENDDO
 
     C                   ENDIF
     C                   ENDIF
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRVAction - Validate Action Codes                            *
      *****************************************************************
     C     SRVAction     BEGSR
 
      ** Process modified subfile record
 
     C                   READC     RE101102S0                             86
 
     C                   DOW       *IN86 = '0'
 
     C                   EVAL      *IN30 = '0'
 
      ** Validate Action
 
     C                   IF        #0ACTN <> 'E'  AND  #0ACTN <> 'D'  AND
     C                             #0ACTN <> 'R'  AND  #0ACTN <> *BLANKS
     C                   EVAL      *IN30 = '1'
     C                   EVAL      WError = 'Y'
     C                   EVAL      PZMsgID = 'RE74042'
     C                   EXSR      SRSndMsg
 
     C                   ELSE
                                                                                211210
      * Check for user authority to action code                                 211210
                                                                                211210
     C                   CALL      'ZVACTBU'                                    211210
     C                   PARM      #0ACTN        @ZACTN            1            211210
     C                   PARM      BRC           @ZBR              3            211210
     C                   PARM      *ZERO         @ERR              1 0          211210
                                                                                211210
     C                   IF        @ERR = 2                                     211210
     C                   EVAL      *IN30 = '1'                                  211210
     C                   EVAL      WError = 'Y'                                 211210
     C                   EVAL      PZMsgID = 'RE74080'                          211210
     C                   EXSR      SRSndMsg                                     211210
     C                   ELSE                                                   211210
 
     C                   IF        #0ACTN = 'E'
     C                   EVAL      WProcess = 'Y'
     C                   ENDIF
 
     C                   IF        #0ACTN = 'D'  OR  #0ACTN = 'R'
     C                   IF        #0STAT <> *BLANKS
     C                   EVAL      *IN30 = '1'
     C                   EVAL      WError = 'Y'
     C                   EVAL      PZMsgID = 'RE74043'
     C                   EXSR      SRSndMsg
     C                   ELSE
     C                   EVAL      WProcess = 'Y'
     C                   ENDIF
     C                   ENDIF
     C                   ENDIF                                                  211210
     C                   ENDIF
 
     C                   EVAL      *IN84 = '1'
     C                   UPDATE    RE101102S0
     C                   EVAL      *IN84 = '0'
 
     C                   READC     RE101102S0                             86
     C                   ENDDO
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRDetsSfl - Build 'STOPPED' and 'ORIGINATING' entries subfile*
      *****************************************************************
     C     SRDetsSfl     BEGSR
 
      ** Clear both subfiles and initialise relative record number.
 
     C                   EVAL      *IN52 = '1'
     C                   EVAL      *IN54 = '1'
     C                   WRITE     RE101102C1
     C                   WRITE     RE101102C2
     C                   MOVEA     '0000'        *IN(51)
     C                   EVAL      #1RLRN = 0
     C                   EVAL      #2RLRN = 0
 
      ** Get all STOPPED ENTRIES for the stop number selected               .
      ** ====================================================
 
     C     KREZST        SETLL     REZSTIL0
 
     C     KREZST        READE     REZSTIL0
 
     C                   DOW       NOT %EOF(REZSTIL0)
     C                   EVAL      GL_XRFI = 'ZS '
     C                   EVAL      GL_XRFN = ZIXRFN
 
      ** Get entry details from Postings in Transit file GLPSTTL0.
 
     C     KGLPSTT       CHAIN     GLPSTTL0
 
     C                   IF        NOT %FOUND(GLPSTTL0)
     C                   EVAL      X_ERMS = 'MISSING POSTING FROM ' +
     C                                      'GLPSTTPD'
     C                   EXSR      *PSSR
     C                   ENDIF
 
      ** Convert Value Date to DDMMMYY format.
 
     C                   CALLB     'ZDATE2'
     C                   PARM      GL_VALD       PDayNum
     C                   PARM      *BLANK        PFormat
     C                   PARM      *ZEROS        PDDMMYY
     C                   PARM      *BLANKS       PDDMMMYY
 
     C                   EVAL      #1VALD = PDDMMMYY
     C                   EVAL      #1PNAR = GL_PNAR
 
      ** Access posting currency
 
     C                   MOVE      GL_CCY        CCY
     C                   EXSR      ACS_CURR
 
      ** Edit posting amount
 
     C                   MOVE      *ZERO         ZFIELD
     C                   MOVE      GL_PSTA       ZFIELD
     C                   EXSR      ZEDIT
     C                   MOVE      ZFIELD        #1PSTA
 
      ** Set 'DR'/'CR' narrative accordingly.
 
     C                   IF        GL_DRCR = 0
     C                   EVAL      #1DRCR = 'DR'
     C                   ELSE
     C                   EVAL      #1DRCR = 'CR'
     C                   ENDIF
 
      ** Set a/c Id
 
     C                   MOVE      GL_CNUM       WrkCNUM
     C                   MOVE      GL_ACOD       WrkACOD
     C                   MOVE      GL_ACSQ       WrkACSQ
     C                   EVAL      #1ACCT = GL_BRCA  +  '-'  +  WrkCNUM  +  '-'
     C                                      +  GL_CCY  +  '-'  +  WrkACOD  +
     C                                      '-'  +  WrkACSQ
 
      ** Add record to 'STOPPED ENTRIES' subfile.
 
     C                   ADD       1             #1RLRN               51
     C                   WRITE     RE101102S1
 
     C     KREZST        READE     REZSTIL0
     C                   ENDDO
 
 
      ** Get all ORIGINATING ENTRIES for the child a/c of the stop          .
      ** on the processing date
      ** =========================================================
 
     C                   EVAL      AP_BRCA = ZDCBRC
     C                   EVAL      AP_CNUM = ZDCCUS
     C                   EVAL      AP_CCY  = ZDCCCY
     C                   EVAL      AP_ACOD = ZDCACD
     C                   EVAL      AP_ACSQ = ZDCASN
     C                   EVAL      AP_PSTD = ZDPRCD
 
      ** Access posting currency
 
     C                   MOVE      AP_CCY        CCY
     C                   EXSR      ACS_CURR
 
     C     K1APOST       SETLL     APOST
 
     C     K1APOST       READE     APOST
 
     C                   DOW       NOT %EOF(APOST)
 
      ** Convert Value Date to DDMMMYY format.
 
     C                   CALLB     'ZDATE2'
     C                   PARM      AP_VALD       PDayNum
     C                   PARM      *BLANK        PFormat
     C                   PARM      *ZEROS        PDDMMYY
     C                   PARM      *BLANKS       PDDMMMYY
 
     C                   EVAL      #2VALD = PDDMMMYY
     C                   EVAL      #2PNAR = AP_PNAR
 
      ** Edit posting amount
 
     C                   MOVE      *ZERO         ZFIELD
     C                   MOVE      AP_PSTA       ZFIELD
     C                   EXSR      ZEDIT
     C                   MOVE      ZFIELD        #2PSTA
 
      ** Set 'DR'/'CR' narrative accordingly.
 
     C                   IF        AP_DRCR = 0
     C                   EVAL      #2DRCR = 'DR'
     C                   ELSE
     C                   EVAL      #2DRCR = 'CR'
     C                   ENDIF
 
      ** Set a/c Id
 
     C                   MOVE      AP_CNUM       WrkCNUM
     C                   MOVE      AP_ACOD       WrkACOD
     C                   MOVE      AP_ACSQ       WrkACSQ
     C                   EVAL      #2ACCT = AP_BRCA  +  '-'  +  WrkCNUM  +  '-'
     C                                      +  AP_CCY  +  '-'  +  WrkACOD  +
     C                                      '-'  +  WrkACSQ
 
      ** Add record to 'ORIGINATING ENTRIES' subfile.
 
     C                   ADD       1             #2RLRN               53
     C                   WRITE     RE101102S2
 
     C     K1APOST       READE     APOST
     C                   ENDDO
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SREnquire - Enquiry                                          *
      *****************************************************************
     C     SREnquire     BEGSR
 
     C                   EXSR      SRDisplay
 
     C                   IF        *IN03 = '1'
     C                   EXSR      SREnd
     C                   ENDIF
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRDelReq - Process Delete Request                            *
      *****************************************************************
     C     SRDelReq      BEGSR
 
     C                   EVAL      *IN10 = '0'
     C                   EVAL      *IN12 = '0'
 
     C                   DOW       *IN03 = '0'  AND  *IN10 = '0'  AND
     C                             *IN12 = '0'
 
     C                   EXSR      SRDisplay
 
      ** Process response
 
     C     *IN03         CASEQ     '1'           SREnd
 
     C     *IN10         CASEQ     '1'           SRDelete
 
     C                   ENDCS
 
      ** Enter key is pressed.
 
     C                   IF        *IN10 = '0'  AND  *IN12 = '0'
     C                   EVAL      PZMsgID = 'RE74044'
     C                   EXSR      SRSndMsg
     C                   ENDIF
 
     C                   ENDDO
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRDelete - Flag record as deleted                            *
      *****************************************************************
     C     SRDelete      BEGSR
 
     C                   EXSR      SRVDelRel
 
      ** If no error, flag record as 'DELETED'.
 
     C                   IF        WError = 'N'
     C                   EVAL      ZDDELD = 'Y'
     C                   EXCEPT    UREZSTD
 
     C                   COMMIT
 
      ** Delete unsuccessful.
 
     C                   ELSE
     C                   EVAL      *IN10 = '0'
     C                   ENDIF
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRRefresh - Refresh subfile                                  *
      *****************************************************************
     C     SRRefresh     BEGSR
 
     C                   EVAL      #0ACTN = *BLANKS
     C                   EVAL      WReload = 'Y'
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      * SRRetrieve - Retrieve file details                            *
      *****************************************************************
     C     SRRetrieve    BEGSR
 
      ** Move file fields to subfile (first screen)
 
     C                   IF        *IN26 = '1'
     C                   EVAL      #0PRCD = ZDPRCD
     C                   CALLB     'ZDATE2'
     C                   PARM      ZDPRCD        PDayNum
     C                   PARM      *BLANK        PFormat
     C                   PARM      *ZEROS        PDDMMYY
     C                   PARM      *BLANKS       PDDMMMYY
     C                   EVAL      #0PRC1 = PDDMMMYY
     C                   EVAL      #0HIER = ZDHIER
     C                   EVAL      #0HISN = ZDHISN
     C                   MOVE      ZDSTPN        #0STPN
     C                   MOVE      ZDLINK        #0LINK
 
     C                   SELECT
     C                   WHEN      ZDRELD = 'Y'
     C                   EVAL      #0STAT = 'RELEASED'
 
     C                   WHEN      ZDDELD = 'Y'
     C                   EVAL      #0STAT = 'DELETED'
 
     C                   OTHER
     C                   EVAL      #0STAT = *BLANKS
     C                   ENDSL
 
     C                   ELSE
 
      ** Move file fields to screen/subfile fields (details screen)
 
     C                   MOVE      #0HIER        ZDHIER
     C                   MOVE      #0LINK        ZDLINK
     C                   MOVE      #0STPN        ZDSTPN
     C                   MOVE      #0PRCD        ZDPRCD
 
     C     KREZST        CHAIN     REZSTDL0
     C                   IF        %FOUND(REZSTDL0)
     C                   UNLOCK    REZSTDL0
     C                   EXSR      SRChildAcct
     C                   EXSR      SRParentAcct
 
      ** Access CHILD currency
 
     C                   MOVE      ZDCCCY        CCY
     C                   EXSR      ACS_CURR
 
      ** Move file fields to details screen
 
     C                   MOVE      ZDSTPN        #1STPN
     C                   MOVE      ZDLINK        #1LINK
     C                   EVAL      #1HISN = ZDHISN
 
      ** Edit amounts
 
     C                   MOVE      *ZERO         ZFIELD
     C                   MOVE      ZDMDVD        ZFIELD
     C                   EXSR      ZEDIT
     C                   MOVE      ZFIELD        #1MDVD
 
     C                   MOVE      *ZERO         ZFIELD
     C                   MOVE      ZDTVDR        ZFIELD
     C                   EXSR      ZEDIT
     C                   MOVE      ZFIELD        #1TVDR
 
     C                   MOVE      ZDMDCD        #1MDCD
     C                   MOVE      ZDTCDR        #1TCDR
 
      ** Convert Processing Date to DDMMMYY format.
 
     C                   CALLB     'ZDATE2'
     C                   PARM      ZDPRCD        PDayNum
     C                   PARM      *BLANK        PFormat
     C                   PARM      *ZEROS        PDDMMYY
     C                   PARM      *BLANKS       PDDMMMYY
 
     C                   EVAL      #1PRCD = PDDMMMYY
     C                   EVAL      #1PRC1 = PDDMMMYY
     C                   EVAL      #1PRC2 = PDDMMMYY
 
      ** Released or Deleted?
 
     C                   EVAL      #1RELD = 'NO'
     C                   EVAL      #1DELD = 'NO'
 
     C                   IF        ZDRELD = 'Y'
     C                   EVAL      #1RELD = 'YES'
     C                   ELSE
     C                   IF        ZDDELD = 'Y'
     C                   EVAL      #1DELD = 'YES'
     C                   ENDIF
     C                   ENDIF
 
      ** Retrieve Hierarchy Description
 
     C     ZDHIER        CHAIN     RECMHDL0
 
     C                   IF        %FOUND(RECMHDL0)
     C                   EVAL      #1DESC = CDDESC
     C                   ENDIF
     C                   ENDIF
 
     C                   ENDIF
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRChildAcct - Process Child Account details                  *
      *****************************************************************
     C     SRChildAcct   BEGSR
 
      ** Access account
 
     C                   EVAL      AC_BRCA = ZDCBRC
     C                   EVAL      AC_CNUM = ZDCCUS
     C                   EVAL      AC_CCY  = ZDCCCY
     C                   EVAL      AC_ACOD = ZDCACD
     C                   EVAL      AC_ACSQ = ZDCASN
 
     C     K1ACCNT       CHAIN     ACCNT
 
     C                   IF        NOT %FOUND(ACCNT)
     C                   EVAL      X_ERMS = 'MISSING ACCOUNT ON ACCNTAB'
     C                   EXSR      *PSSR
     C                   ENDIF
 
     C                   MOVE      AC_CNUM       WrkCNUM
     C                   MOVE      AC_ACOD       WrkACOD
     C                   MOVE      AC_ACSQ       WrkACSQ
 
      ** Set child account.
 
     C                   EVAL      #1CHAC = AC_BRCA  +  '-'  +  WrkCNUM  +  '-'
     C                                      +  AC_CCY  +  '-'  +  WrkACOD  +
     C                                      '-'  +  WrkACSQ
 
      ** Set Retail Account Number.
 
     C                   MOVE      AC_ACNO       #1CHRE
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRParentAcct - Process Parent Account details                *
      *****************************************************************
     C     SRParentAcct  BEGSR
 
      ** Access account
 
     C                   EVAL      AC_BRCA = ZDPBRC
     C                   EVAL      AC_CNUM = ZDPCUS
     C                   EVAL      AC_CCY  = ZDPCCY
     C**********         EVAL      AC_ACOD = ZDPACD                                         BUG28077
     C                   EVAL      AC_ACOD = ZDPA10                                         BUG28077
     C                   EVAL      AC_ACSQ = ZDPASN
 
     C     K1ACCNT       CHAIN     ACCNT
 
     C                   IF        NOT %FOUND(ACCNT)
     C                   EVAL      X_ERMS = 'MISSING ACCOUNT ON ACCNTAB'
     C                   EXSR      *PSSR
     C                   ENDIF
 
     C                   MOVE      AC_CNUM       WrkCNUM
     C                   MOVE      AC_ACOD       WrkACOD
     C                   MOVE      AC_ACSQ       WrkACSQ
 
      ** Set parent account.
 
     C                   EVAL      #1PAAC = AC_BRCA  +  '-'  +  WrkCNUM  +  '-'
     C                                      +  AC_CCY  +  '-'  +  WrkACOD  +
     C                                      '-'  +  WrkACSQ
 
      ** Set Retail Account Number.
 
     C                   MOVE      AC_ACNO       #1PARE
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRRelReq - Process Release request                           *
      *****************************************************************
     C     SRRelReq      BEGSR
 
     C                   EVAL      *IN12 = '0'
     C                   EVAL      *IN16 = '0'
 
     C                   DOW       *IN03 = '0'  AND  *IN12 = '0'  AND
     C                             *IN16 = '0'
 
     C                   EXSR      SRDisplay
 
      ** Process response
 
     C     *IN03         CASEQ     '1'           SREnd
 
     C     *IN16         CASEQ     '1'           SRRelease
 
     C                   ENDCS
 
      ** Enter key is pressed.
 
     C                   IF        *IN12 = '0'  AND  *IN16 = '0'
     C                   EVAL      PZMsgID = 'RE74045'
     C                   EXSR      SRSndMsg
     C                   ENDIF
 
     C                   ENDDO
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRRelease - Flag record as released                          *
      *****************************************************************
     C     SRRelease     BEGSR
 
     C                   EXSR      SRVDelRel
 
      ** If no error,
      ** Shadow post the 'STOPPED ENTRIES' to RSACMTPD and MEMOS.
 
     C                   IF        WError = 'N'
     C                   EXSR      SRShadow
 
      ** Flag record as 'RELEASED'.
 
     C                   EVAL      ZDRELD = 'Y'
     C                   EXCEPT    UREZSTD
 
     C                   COMMIT
 
      ** Release unsuccessful
 
     C                   ELSE
     C                   EVAL      *IN16 = '0'
     C                   ENDIF
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRShadow - Shadow post the 'released' stopped entries to     *
      *             RSACMTPD and MEMOS                                *
      *****************************************************************
     C     SRShadow      BEGSR
 
      ** Process all zero-balancing stop items for the stop number released.
 
     C     KREZST        SETLL     REZSTIL0
 
     C                   IF        NOT %EQUAL(REZSTIL0)
     C                   EVAL      X_ERMS = 'MISSING ZERO-BALANCING STOP ITEMS'
     C                   EXSR      *PSSR
     C                   ENDIF
 
     C     KREZST        READE     REZSTIL0
 
     C                   DOW       NOT %EOF(REZSTIL0)
 
      ** Set up key fields for LF/GLPSTTL0.
 
     C                   EVAL      GL_XRFI = 'ZS '
     C                   EVAL      GL_XRFN = ZIXRFN
 
      ** Shadow post corresponding entries in GLPSTTL0.
 
     C     KGLPSTT       CHAIN     GLPSTTL0
 
     C                   IF        NOT %FOUND(GLPSTTL0)
     C                   EVAL      X_ERMS = 'MISSING POSTING IN ' +
     C                                      'GLPSTTPD'
     C                   EXSR      *PSSR
     C                   ENDIF
 
      * Access zero balancing/sweeping extension record
 
     C     KGLPSTT       CHAIN     GLPSTZSL0
     C                   IF        NOT %FOUND(GLPSTZSL0)
     C                   EVAL      X_ERMS = 'MISSING EXTENSION IN ' +
     C                                      'GLPSTZSPD'
     C                   EXSR      *PSSR
     C                   ENDIF
 
      * If it is the destination account that is defined on the extension
      * this is the source entry and it should be ignored in zero balancing
 
     C     EX_AZASDA     IFEQ      'D'
     C                   EVAL      GL_OTRF = IgnoreEveryRun
     C                   ENDIF
 
      ** Call module 'Shadow post an entry in transit'.
 
     C                   CALLB     'RE100605'
     C                   PARM      *BLANKS       X_RTCD
     C                   PARM      *BLANKS       X_ERMS
     C                   PARM                    I_DATA
 
      ** Called module ended abnormally.
 
     C                   IF        X_RTCD = '*ERROR '
     C                   EVAL      X_ERMS = 'MODULE RE100605 ENDED ABNORMALLY'
     C                   EXSR      *PSSR
     C                   ENDIF
 
     C     KREZST        READE     REZSTIL0
     C                   ENDDO
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRVDelRel - Validate Deletion/Releasing of record            *
      *****************************************************************
     C     SRVDelRel     BEGSR
 
     C                   EVAL      WError = 'Y'
     C                   EVAL      ZDHIER = #0HIER
     C                   MOVE      #0LINK        ZDLINK
     C                   MOVE      #0STPN        ZDSTPN
 
     C     KREZST        CHAIN(E)  REZSTDL0
 
     C                   SELECT
 
      ** Verify if record exists.
 
     C                   WHEN      NOT %FOUND(REZSTDL0)
     C                   EVAL      PZMsgID = 'RE74046'
     C                   EXSR      SRSndMsg
 
      ** Check if record is being accessed by another user.
 
     C                   WHEN      %ERROR
     C                   EVAL      PZMsgID = 'RE74047'
     C                   EXSR      SRSndMsg
 
      ** Check if record has been deleted/released by another user.
 
     C                   WHEN      %FOUND(REZSTDL0)  AND
     C                             (ZDRELD = 'Y'  OR  ZDDELD = 'Y')
     C                   UNLOCK    REZSTDL0
     C                   EVAL      PZMsgID = 'RE74048'
     C                   EXSR      SRSndMsg
 
      ** Deletion/Releasing of record is valid.
 
     C                   OTHER
     C                   EVAL      WError = 'N'
 
     C                   ENDSL
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SRSndMsg - Send message                                      *
      *****************************************************************
     C     SRSndMsg      BEGSR
 
     C                   CALL      'ZA0340'
     C                   PARM                    PZMsgFile
     C                   PARM                    PZMsgID
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      *  SREnd - End Program                                          *
      *****************************************************************
     C     SREnd         BEGSR
 
      ** Terminate program
 
     C                   EVAL      *INLR = '1'
     C                   RETURN
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      *****************************************************************
      * Access a currency
      *****************************************************************
     C     ACS_CURR      BEGSR
 
     C                   CALLB     'ZAACSCURR'
     C                   PARM                    CCY               3
     C                   PARM                    SDCURR
 
      * Database error if currency not found
 
     C     A6CYCD        IFEQ      *BLANK
     C                   EVAL      X_ERMS = 'BAD CCY CODE:' + CCY
     C                   EXSR      *PSSR
     C                   ENDIF
 
     C                   ENDSR
      *****************************************************************
      /SPACE 5
      ********************************************************************
      * Edit an amount
      ********************************************************************
     C     ZEDIT         BEGSR
     C                   CALLB     'ZEDIT'
     C                   PARM                    ZFIELD           16
     C                   PARM      A6NBDP        ZADEC             1 0
     C                   ENDSR
      *********************************************************************
      /SPACE 5
      *****************************************************************
      *  *INZSR - Program Initialisation Routine                      *
      *****************************************************************
     C     *INZSR        BEGSR
      **********                                                                    211210 BUG6979
      ****GET*ZMUSER*to*access*default*branch.                                      211210 BUG6979
      **********                                                                    211210 BUG6979
     C******DTAARA       DEFINE                  ZMUSER                             211210 BUG6979
     C**********         IN        ZMUSER                                           211210 BUG6979
     C**********         UNLOCK    ZMUSER                                           211210 BUG6979
 
      ** Call Access Program for Bank Details
 
     C                   CALL      'AOBANKR0'
     C                   PARM      *BLANKS       PRtrnCode
     C                   PARM      '*FIRST '     POption
     C     SDBANK        PARM      SDBANK        DSSDY
 
     C                   IF        PRtrnCode <> *BLANKS
     C                   EVAL      X_ERMS = 'Database error in file SDBANKPD'
     C                   EXSR      *PSSR
     C                   ENDIF
 
      ** Initialise subfile control
 
     C                   EVAL      #0RUNA = BJMRDT
     C**********         EVAL      #0WSID = PSJobName                                      BUG6979
     C**********         EVAL      #0USER = PSUser                                         BUG6979
     C**********         EVAL      #1PGMQ = PSProcName                                     BUG6979
     C                   EVAL      PZMsgFile = 'REUSRMSG'
 
     C                   Z-ADD     14            WSflPag
 
      * Ignore every run code
 
     C                   MOVEL     *BLANK        IgnoreEveryRun   15
     C                   EVAL      IgnoreEveryRun = '*IGNORE'
 
     C     KREZST        KLIST
     C                   KFLD                    ZDHIER
     C                   KFLD                    ZDLINK
     C                   KFLD                    ZDPRCD
     C                   KFLD                    ZDSTPN
 
     C     KGLPSTT       KLIST
     C                   KFLD                    GL_XRFI
     C                   KFLD                    GL_XRFN
 
     C     K1ACCNT       KLIST
     C                   KFLD                    AC_CNUM
     C                   KFLD                    AC_CCY
     C                   KFLD                    AC_ACOD
     C                   KFLD                    AC_ACSQ
     C                   KFLD                    AC_BRCA
 
     C     K1APOST       KLIST
     C                   KFLD                    AP_BRCA
     C                   KFLD                    AP_CNUM
     C                   KFLD                    AP_CCY
     C                   KFLD                    AP_ACOD
     C                   KFLD                    AP_ACSQ
     C                   KFLD                    AP_PSTD
 
     C                   ENDSR
 
      *****************************************************************
      /SPACE 5
      /COPY ZACPYSRC,RECMPSSR
     OREZSTDD0  E            UREZSTD
     O                       ZDDELD
     O                       ZDRELD
