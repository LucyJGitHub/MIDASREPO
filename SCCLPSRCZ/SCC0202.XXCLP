/*********************************************************************/
/*S*D****CLPBASE******************************************************/                   /*CCB020*/
/*********************************************************************/
/*                                                                   */
/*       Midas - System Control Module                               */
/*                                                                   */
/*       SCC0202 - Entry to Midas System Processing                  */
/*                                                                   */
/*       (c) Misys International Banking Systems Ltd. 2003           */
/*                                                                   */
/*       Last Amend No. CCB020 *REDUNDANT  Date 06Aug12              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/*       Prev Amend No. BUG9619            Date 01Feb06              */
/*                      BUG1832            Date 19Feb02              */
/*                      TDA024             Date 23Mar04              */
/*                      CAP084             Date 04Feb04              */
/*                      CSC023             Date 02Feb04              */
/*                      CPK017             Date 28Oct03              */
/*                      CAAA02 *CREATE     Date 06Sep03              */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*                                                                   */
/*       CCB020 - COB Restructure - Secondary COB Infrastructure     */
/*       BUG9619 - Close of business components run long if journal  */
/*                 cache is enabled                                  */
/*       BUG1832- Projected Account Movements Enquiry Problems       */
/*       TDA024 - Extend lengthy of EMSDS data area from 161 to 167. */
/*       CAP084 - API wrapper project                                */
/*                Call to AOMMODR0, followed by RCLRSC results in    */
/*                end-of-file error.  Remove all redundant code.     */
/*       CSC023 - MidasPlus additional packaging.  SBMJOB change.    */
/*                OUTQ must always be *JOBD.                         */
/*       CPK017 - Midas Plus packaging.                              */
/*                Comment out the send of 'MIDAS' to MSTATUS and     */
/*                the first remove of msg from MSTATUS.              */
/*       CAAA02 - Webfacing Enhancement (Replaces SCC0102)           */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&PARM1 &PARM2 &PARM3 &PARM4 &PARM5)
 
             DCL        VAR(&CPYFLD) TYPE(*CHAR) LEN(64) VALUE('(c) +
                          Misys International Banking Systems Ltd. +
                          2003')
             DCL        VAR(&TSTATUS) TYPE(*CHAR) LEN(8)
             DCL        VAR(&MPHAS) TYPE(*CHAR) LEN(1)
             DCL        VAR(&MBIN) TYPE(*CHAR) LEN(1)
             DCL        VAR(&SPECMSG) TYPE(*CHAR) LEN(6)
             DCL        VAR(&JOB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&STATMSG) TYPE(*CHAR) LEN(5)
             DCL        VAR(&CMTTXT) TYPE(*CHAR) LEN(460)
             DCL        VAR(&WSID) TYPE(*CHAR) LEN(3)
             DCL        VAR(&WSTI) TYPE(*CHAR) LEN(10)
             DCL        VAR(&USRID) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TIME) TYPE(*CHAR) LEN(6)
             DCL        VAR(&BLNK338) TYPE(*CHAR) LEN(338) +
                        VALUE(' ')
             DCL        VAR(&ERRDTA) TYPE(*CHAR) LEN(50)
             DCL        VAR(&MESSAGE) TYPE(*CHAR) LEN(50)
             DCL        VAR(&GROUP) TYPE(*CHAR) LEN(50)
             DCL        VAR(&USER) TYPE(*CHAR) LEN(25)
             DCL        VAR(&SLEVEL) TYPE(*DEC) LEN(4)
             DCL        VAR(&TIMEO) TYPE(*DEC) LEN(5)
             DCL        VAR(&ERRORC) TYPE(*DEC) LEN(1)
/************DCL        VAR(&TIMEOA) TYPE(*CHAR) LEN(5)                                   /*CAP084*/
             DCL        VAR(&RTCD) TYPE(*CHAR) LEN(7) VALUE(' ')
             DCL        VAR(&OPTN) TYPE(*CHAR) LEN(7) VALUE('*FIRST +
                          ')
             DCL        VAR(&SAR) TYPE(*CHAR) LEN(6)
             DCL        VAR(&SCSARD) TYPE(*CHAR) LEN(200)
             DCL        VAR(&RETCDE) TYPE(*CHAR) LEN(10) VALUE(' ')
             DCL        VAR(&CBSTS)  TYPE(*CHAR) LEN(1)
/************DCL        VAR(&FMT) TYPE(*CHAR) LEN(200)                                    /*CAP084*/
/************DCL        VAR(&DSSDY) TYPE(*CHAR) LEN(800)                                  /*CAP084*/
             DCL        VAR(&PARM1) TYPE(*CHAR) LEN(200)
             DCL        VAR(&PARM2) TYPE(*CHAR) LEN(200)
             DCL        VAR(&PARM3) TYPE(*CHAR) LEN(200)
             DCL        VAR(&PARM4) TYPE(*CHAR) LEN(200)
             DCL        VAR(&PARM5) TYPE(*CHAR) LEN(200)
             DCL        VAR(&MODUPDATE) TYPE(*CHAR) LEN(1)
             DCL        VAR(&RTNCDE) TYPE(*CHAR) LEN(1)
/************DCL        VAR(&PCINM) TYPE(*CHAR) LEN(8)                                    /*CAP084*/
/************DCL        VAR(&SECLVLC) TYPE(*CHAR) LEN(4)                                  /*CAP084*/
/************DCL        VAR(&S01420) TYPE(*CHAR) LEN(1) VALUE('N')                        /*CAP084*/
             DCL        VAR(&RTNC) TYPE(*CHAR) LEN(1) VALUE(' ')
             DCL        VAR(&NOREPLY) TYPE(*CHAR) LEN(1)
             DCL        VAR(&CAP002) TYPE(*CHAR) LEN(1) VALUE('N' )
             DCL        VAR(&CSC011) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&APIBKJOB) TYPE(*CHAR) LEN(1) VALUE('Y')
             DCL        VAR(&CURR) TYPE(*CHAR) LEN(2)
             DCL        VAR(&SUPP) TYPE(*CHAR) LEN(2)
             DCL        VAR(&MMODE) TYPE(*CHAR) LEN(1)
             DCL        VAR(&MAIN) TYPE(*CHAR) LEN(2)
             DCL        VAR(&SOVR) TYPE(*CHAR) LEN(1)
             DCL        VAR(&CMTRTN) TYPE(*CHAR) LEN(10)
 
             DCLF       FILE(SDBANKPD)
 
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000) EXEC(GOTO +
                          CMDLBL(ABNOR))
 
/* Retrieve job information */
 
             RTVJOBA JOB(&JOB) USER(&USRID)
 
/** Check if 24x7 Midas Availability Feature is on */
 
             CHGVAR     VAR(&RTCD) VALUE('       ')
             CHGVAR     VAR(&SAR) VALUE('CSC011')
             CHGVAR     VAR(&OPTN) VALUE('*VERIFY')
             CALL       PGM(AOSARDR0) PARM(&RTCD &OPTN &SAR &SCSARD)
 
             IF         COND(&RTCD *EQ '       ') THEN(DO)
                CHGVAR     VAR(&CSC011) VALUE('Y')
             ENDDO
 
/*  Check if the API Switchable Feature is on                         */
             CHGVAR     VAR(&SAR) VALUE('CAP002')
             CHGVAR     VAR(&OPTN) VALUE('*VERIFY')
             CALL      PGM(AOSARDR0) PARM(&RTCD &OPTN &SAR &SCSARD)
             IF         COND(&RTCD *EQ '       ') THEN(CHGVAR +
                          VAR(&CAP002) VALUE('Y'))
/* */
/*   Call SC1021 to check the integrity of the run date held on       */
/*   PF/SDBANKPD, PF/TABTB10 and DTAARA/RUNDAT                        */
/* */
             CALL       PGM(SC1021) PARM(&RTNC)
             IF         COND(&RTNC *EQ 'E') THEN(DO)
/* */
/*  Call SCC0010 to inform the User that the run date held on SDBANKPD */
/*  TABTB10 and RUNDAT do not match                                    */
/* */
                RTVMSG     MSGID(SCM0161) MSGF(GBMIDASMSG) +
                             MSG(&MESSAGE)
                CHGDTAARA  DTAARA(MIDASMSG (251 50)) VALUE(&MESSAGE)
                RTVMSG     MSGID(SCM0162) MSGF(GBMIDASMSG) +
                             MSG(&MESSAGE)
                CHGDTAARA  DTAARA(MIDASMSG (351 50)) VALUE(&MESSAGE)
                CHGDTAARA  DTAARA(MIDASMSG (18 1)) VALUE('1')
                CALL       PGM(SCC0010) PARM('MIPGM' 'ENTER' +
                             &NOREPLY)
                SIGNOFF    LOG(*LIST)
             ENDDO
 
             CALL       PGM(SCC0001) PARM('04')
/* Convert input parameters into fields */
 
             CHGVAR     VAR(&TIMEO) VALUE(%SST(&PARM1 1 5))
             CHGVAR     VAR(&GROUP) VALUE(%SST(&PARM1 6 50))
             CHGVAR     VAR(&USER) VALUE(%SST(&PARM1 56 25))
             CHGVAR     VAR(&SLEVEL) VALUE(%SST(&PARM1 81 4))
             CHGVAR     VAR(&ERRORC) VALUE(%SST(&PARM1 85 1))
 
/* Run SDMMIDPD update processing if required */
 
             RTVDTAARA  DTAARA(MODUPDATE (1 1)) RTNVAR(&MODUPDATE)
 
             IF         COND(&MODUPDATE *EQ 'Y') THEN(DO)
                CALL       PGM(SD9010X) PARM(&RTNCDE)
                IF         COND(&RTNCDE *EQ ' ') THEN(DO)
                   CALL       PGM(SDC9011) PARM('N')
                ENDDO
                IF         COND(&RTNCDE *NE ' ') THEN(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
             ENDDO
 
/* Retrieve the multibranch indicator */
 
             RTVDTAARA  DTAARA(RUNDAT (13 1)) RTNVAR(&MBIN)
 
/* If multibranching is on then create and initialise SPF data areas  */
 
             IF         COND(&MBIN *EQ 'Y') THEN(CALL PGM(SFC0400))
 
/* Create the SPF QTEMP data areas */
 
             CALL       PGM(SFC0401)
 
/* Check to see if CoB Enhancement feature is ON */
 
             CHGVAR     VAR(&RTCD) VALUE('       ')
             CHGVAR     VAR(&OPTN) VALUE('*VERIFY')
             CHGVAR     VAR(&SAR) VALUE('S01420')
             CALL       PGM(AOSARDR0) PARM(&RTCD &OPTN &SAR &SCSARD)
             IF         COND(&RTCD *EQ '      ') THEN(DO)
                RTVDTAARA  DTAARA(MPHAS (1 1)) RTNVAR(&MPHAS)
                IF         COND((&MPHAS *EQ 'A') *OR (&MPHAS *EQ +
                             'X')) THEN(GOTO CMDLBL(S01420))
                TFRCTL     PGM(CBRUN)
             ENDDO
S01420:
/************                                                                             /*CAP084*/
/**Access*PF/SDMMODPD to determine which modules are live */                              /*CAP084*/
/************                                                                             /*CAP084*/
/************CALL       PGM(AOMMODR0) PARM(&RTCD '*FIRST' &FMT)                           /*CAP084*/
/************                                                                             /*CAP084*/
/***Database*error handling  */                                                           /*CAP084*/
/************                                                                             /*CAP084*/
/************IF         COND(&RTCD *NE '       ') THEN(DO)                                /*CAP084*/
/************   SNDPGMMSG  MSG('Database error on Midas modules +                         /*CAP084*/
/************                file') TOMSGQ(MOPERQ MRUNQ)                                  /*CAP084*/
/************                                                                             /*CAP084*/
/**Call*SCC0010 to inform user that an error has occurred */                              /*CAP084*/
/************                                                                             /*CAP084*/
/************   RTVMSG     MSGID(SCM0074) MSGF(MIDASMSG) +                                /*CAP084*/
/************                MSG(&MESSAGE)                                                /*CAP084*/
/************   CHGDTAARA  DTAARA(MIDASMSG (251 50)) VALUE(&MESSAGE)                      /*CAP084*/
/************   RTVMSG     MSGID(SCM0075) MSGF(MIDASMSG) +                                /*CAP084*/
/************                MSG(&MESSAGE)                                                /*CAP084*/
/************   CHGDTAARA  DTAARA(MIDASMSG (301 50)) VALUE(&MESSAGE)                      /*CAP084*/
/************   CHGDTAARA  DTAARA(MIDASMSG (18 1)) VALUE('1')                             /*CAP084*/
/************   CALL       PGM(SCC0010) PARM('SCC0102' 'ENTER' ' ')                       /*CAP084*/
/************   GOTO       CMDLBL(ABNOR)                                                  /*CAP084*/
/************ENDDO                                                                        /*CAP084*/
 
/* Alter message queue status */
 
             CALL       PGM(SCC2451)
 
/* Create data area for use in Treasury Management enquiries */
 
/**********  CRTDTAARA  DTAARA(QTEMP/DLSDS) TYPE(*CHAR) LEN(161) +
                          TEXT('Midas TM Treasury +
                          management enquiries')                     */                  /*BUG1832*/
             CRTDTAARA  DTAARA(QTEMP/DLSDS) TYPE(*CHAR) LEN(167) +
                          TEXT('Midas TM Treasury +
                          management enquiries')                                         /*BUG1832*/
             MONMSG     MSGID(CPF1023)
 
/* Create data area for use in Exposure Management enquiries */
 
/**********  CRTDTAARA  DTAARA(QTEMP/EMSDS) TYPE(*CHAR) LEN(161) +                     */ /*TDA024*/
/**********               TEXT('Midas EM Exposure +                                    */ /*TDA024*/
/**********               Management enquiries')                                       */ /*TDA024*/
             CRTDTAARA  DTAARA(QTEMP/EMSDS) TYPE(*CHAR) LEN(167) +
                          TEXT('Midas EM Exposure +
                          Management enquiries')                                          /*TDA024*/
             MONMSG     MSGID(CPF1023)
 
/* If APIs SF is on, create the API DUMP information data area.    */
 
             IF        COND(&CAP002 *EQ 'Y') THEN(DO)
                CALL       PGM(APCCRTQTO) PARM(&RETCDE)
             ENDDO
 
/* Create a temporary file for directory ID and address processing */
 
             DSPDIRE    USER(&USRID) OUTPUT(*OUTFILE) +
                          OUTFILE(QTEMP/TEMP)
             MONMSG     MSGID(CPF9006)
 
/* Enforce password change if password change indicator is on */
 
             RCVF
 
             IF         COND(&BJPCFU *EQ 'Y') THEN(CALL PGM(SF0060))
 
/* If unable to allocate record, signon not allowed */
 
             IF         COND(%SWITCH(XXXXXXX1)) THEN(DO)
               RTVMSG     MSGID(SCM0086) MSGF(MIDASMSG) MSG(&MESSAGE)
               CHGDTAARA  DTAARA(MIDASMSG (251 50)) VALUE(&MESSAGE)
               RTVMSG     MSGID(SCM0037) MSGF(MIDASMSG) MSG(&MESSAGE)
               CHGDTAARA  DTAARA(MIDASMSG (351 50)) VALUE(&MESSAGE)
               GOTO       CMDLBL(SNDMSG)
               ENDDO
 
             RCVF
             MONMSG     MSGID(CPF0000)
 
             DLCOBJ     OBJ((SDBANKPD *FILE *SHRRD *FIRST))
             RCLRSC
 
/* Reset message queue MSPECIAL */
 
             CHGMSGQ    MSGQ(MSPECIAL) RESET(*YES)
 
/* If MSPECIAL is allocated to another job then send message and end */
 
             MONMSG     MSGID(CPF2451) EXEC(DO)
/* */
/** Free the SCSARDPD file                                        */
/* */
                CHGVAR     VAR(&OPTN) VALUE('*FREE')
 
                CALL       PGM(AOSARDR0) PARM(&RTCD &OPTN &SAR &SCSARD)
 
/* Call SCC0010 to inform user that the job cannot be run now */
 
                RTVMSG     MSGID(SCM0026) MSGF(MIDASMSG) MSG(&MESSAGE)
                CHGDTAARA  DTAARA(MIDASMSG (301 50)) VALUE(&MESSAGE)
SNDMSG:
                CHGDTAARA  DTAARA(MIDASMSG (10 1)) VALUE('1')
                CALL       PGM(SCC0010) PARM('SCC0102' 'ENTER' ' ')
 
                SIGNOFF    LOG(*LIST)
             ENDDO
 
/* Reset message queue MSTATUS */
 
             CHGMSGQ    MSGQ(MSTATUS) RESET(*YES)
 
/* Check if this is a restart after a machine failure */
 
/* If DTAARA/CBSTAT position 45 is 'Y' and 'EOD' is on       */
/* MSGQ/MSPECIAL then there must have been a machine failure */
 
             RTVDTAARA  DTAARA(CBSTAT (45 1)) RTNVAR(&CBSTS)
 
             IF         COND(&CBSTS *NE 'Y') THEN(GOTO CMDLBL(RCVMSG))
             RCVMSG     MSGQ(MSPECIAL) RMV(*NO) MSG(&SPECMSG)
             CHGMSGQ    MSGQ(MSPECIAL) RESET(*YES)
 
             IF         COND(&SPECMSG *EQ 'EOD') THEN(DO)
                RCVMSG     MSGQ(MSPECIAL) RMV(*YES)
                CHGMSGQ    MSGQ(MSPECIAL) RESET(*YES)
             ENDDO
 
             DLCOBJ     OBJ((CBCHK *DTAARA *EXCL))
 
/* Examine the contents of the message queue MSPECIAL */
 
 RCVMSG:
             RCVMSG     MSGQ(MSPECIAL) RMV(*NO) MSG(&SPECMSG)
 
/* This code assumes that the message is blank */
 
             IF         COND(&SPECMSG *EQ '      ') THEN(DO)
 
/************   SNDPGMMSG  MSG('MIDAS') TOMSGQ(MSTATUS)                                */ /*CPK017*/
 
/* If the phase is 'A' or 'X' then try to allocate TSTATUS *SHRRD */
/* to see if another job is running one of the recovery functions */
 
                RTVDTAARA  DTAARA(MPHAS) RTNVAR(&MPHAS)
 
                IF         COND((&MPHAS *EQ 'A') *OR (&MPHAS *EQ +
                             'X')) THEN(DO)
                   ALCOBJ     OBJ((TSTATUS *DTAARA *SHRRD)) WAIT(10)
                   MONMSG     MSGID(CPF1002) EXEC(DO)
                      SNDBRKMSG  MSG('Job cannot be run at this +
                          time') TOMSGQ(&JOB)
                      SIGNOFF    LOG(*LIST)
                   ENDDO
                ENDDO
 
                RTVDTAARA  DTAARA(TSTATUS) RTNVAR(&TSTATUS)
 
                IF         COND(&TSTATUS *EQ 'RECOVERY') THEN(DO)
                   SNDBRKMSG  MSG('Recovery must be run before +
                                normal input can continue') +
                                TOMSGQ(&JOB)
/************      STRCMTCTL  LCKLVL(*CHG) NFYOBJ(MNTYF (*FILE)) +                        /*CAP084*/
/************             CMTSCOPE(*JOB)                                                  /*CAP084*/
 
/* Start commitment control */
 
                   CALL       PGM(SCCMTCTL) PARM('S' &CMTRTN)
 
                   CALL       PGM(RRMENUN)
                ENDDO
 
                IF         COND((&TSTATUS *NE 'DRSRECOV') *AND +
                             (&TSTATUS *NE 'RECOVERY')) THEN(DO)
 
 
                   CHGDTAARA  DTAARA(TSTATUS) VALUE('        ')
                   RTVDTAARA  DTAARA(MPHAS) RTNVAR(&MPHAS)
 
/* If the phase is Input Cycle */
 
                   IF         COND(&MPHAS *EQ 'A') THEN(DO)
/************        STRCMTCTL  LCKLVL(*CHG) NFYOBJ(MNTYF (*FILE)) +                      /*CAP084*/
/************               CMTSCOPE(*JOB)                                                /*CAP084*/
/**********          SNDJRNE    JRN(ICJRN) TYPE('BJ') */                                 /*BUG9619*/
                     SNDJRNE    JRN(ICJRN) TYPE('BJ') FORCE(*YES)                        /*BUG9619*/
 
/* Start commitment control */
 
                     CALL       PGM(SCCMTCTL) PARM('S' &CMTRTN)
 
                     CHGVAR     VAR(&WSID) VALUE(&JOB)
                     CHGVAR     VAR(&WSTI) VALUE(&JOB)
                     RTVSYSVAL  SYSVAL(QTIME) RTNVAR(&TIME)
                     CHGVAR     VAR(&CMTTXT) VALUE('       +
                                   MIDAS   ' *CAT &WSID *CAT +
                                   &TIME *CAT ' ' *CAT &USRID *CAT +
                                   '               MIDAS Initial +
                                   Program - No committed +
                                   transactions for this job' +
                                   *CAT &BLNK338 *CAT &WSTI)
                     OPNDBF     FILE(SDBANKPD) OPTION(*INP) +
                                  COMMIT(*YES)
                     MONMSG     MSGID(CPF4125) EXEC(DO)
 
/* Call SCC0010 to inform user that an error has occurred */
 
                     RTVMSG     MSGID(SCM0076) MSGF(MIDASMSG) +
                                  MSG(&MESSAGE)
                     CHGDTAARA  DTAARA(MIDASMSG (251 50)) +
                                  VALUE(&MESSAGE)
                     RTVMSG     MSGID(SCM0077) MSGF(MIDASMSG) +
                                  MSG(&MESSAGE)
                     CHGDTAARA  DTAARA(MIDASMSG (351 50)) +
                                  VALUE(&MESSAGE)
                     RTVMSG     MSGID(SCM0078) MSGF(MIDASMSG) +
                                  MSG(&MESSAGE)
                     CHGDTAARA  DTAARA(MIDASMSG (451 50)) +
                                  VALUE(&MESSAGE)
                     CHGDTAARA  DTAARA(MIDASMSG (18 1)) VALUE('1')
                     CALL       PGM(SCC0010) PARM('SCC0102' +
                                  'ENTER' ' ')
                     GOTO       CMDLBL(ABNOR)
                   ENDDO
 
                   COMMIT     CMTID(&CMTTXT)
 
                   CLOF       OPNID(SDBANKPD)
 
/************SBMJOB     JOB(SCC0204) JOBD(MBATCH) JOBQ(INTERFACE) +                       /*CSC023*/
/************             PRTDEV(*CURRENT) USER(*JOBD) +                                  /*CSC023*/
/************             RTGDTA(*JOBD) RQSDTA('CALL SCC0204')                            /*CSC023*/
 
             SBMJOB     JOB(SCC0204) JOBD(MBATCH) JOBQ(INTERFACE) +
                          PRTDEV(*CURRENT) USER(*JOBD) +
                          RTGDTA(*JOBD) RQSDTA('CALL SCC0204') OUTQ(*JOBD)                /*CSC023*/
 
/*  If the SF is on, start API background functions                   */
 
                   IF        COND(&CAP002 *EQ 'Y') THEN(DO)
 
/** If 24x7 Midas Availability Feature is on  */
 
                      IF         COND(&CSC011 *EQ 'Y') THEN(DO)
                         RTVDTAARA  DTAARA(SDSTAT (6 2)) RTNVAR(&CURR)
                         RTVDTAARA  DTAARA(SC24X7 (1 2)) RTNVAR(&MAIN)
                         RTVDTAARA  DTAARA(SC24X7 (3 2)) RTNVAR(&SUPP)
                         RTVDTAARA  DTAARA(SC24X7 (11 1)) +
                                       RTNVAR(&MMODE)
                         RTVDTAARA  DTAARA(SC24X7 (10 1)) RTNVAR(&SOVR)
 
/** If 24x7 Midas availability is on, API background jobs in        */
/** the support system should not be started unless the support sys */
/** is ready to accept data from Meridian (i.e. API pgms in the     */
/** support sys are in maintenance mode already.)                   */
 
                         IF      COND(((&CURR *EQ &SUPP) *AND (&MMODE *EQ +
                                 'E')) *OR ((&SOVR *EQ 'S')  *AND (&CURR +
                                 *EQ &MAIN))) +
                                 THEN(CHGVAR VAR(&APIBKJOB) VALUE('N'))
                      ENDDO
 
                      IF         COND(&APIBKJOB *EQ 'Y') THEN(DO)
/************            SBMJOB     CMD(CALL PGM(MLC0000) PARM('APC0410' &PARM1 +         /*CSC023*/
/************                         &PARM2 &PARM3 &PARM4 &PARM5)) +                     /*CSC023*/
/************                         JOB(APSTRDBU) JOBD(MBATCH) +                        /*CSC023*/
/************                         JOBQ(INTERFACE) USER(*JOBD) LOG(4 0 +               /*CSC023*/
/************                         *SECLVL) LOGCLPGM(*YES)                             /*CSC023*/
                         SBMJOB     CMD(CALL PGM(MLC0000) PARM('APC0410' &PARM1 +
                                      &PARM2 &PARM3 &PARM4 &PARM5)) +
                                      JOB(APSTRDBU) JOBD(MBATCH) +
                                      JOBQ(INTERFACE) USER(*JOBD) LOG(4 0 +
                                      *SECLVL) LOGCLPGM(*YES) OUTQ(*JOBD)                 /*CSC023*/
                      ENDDO
                   ENDDO
 
                   CALL       PGM(GPC000200)
 
                   IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                     RTVDTAARA  DTAARA(LDA (134 45)) RTNVAR(&ERRDTA)
                     SNDPGMMSG  MSGID(MEM0001) MSGF(MIDAS) MSGDTA(&ERRDTA) +
                                  TOPGMQ(*EXT)
                   ENDDO
 
                   IF         COND(&ERRORC *EQ 1) THEN(DO)
                     SNDPGMMSG  MSG('Midas users +
                                  generated menu program +
                                  terminated abnormally') +
                                  TOMSGQ(MOPERQ MRUNQ)
 
/* Call SCC0010 to inform user that an error has occurred */
 
                     RTVMSG     MSGID(SCM0079) MSGF(MIDASMSG) +
                                  MSG(&MESSAGE)
                     CHGDTAARA  DTAARA(MIDASMSG (251 50)) +
                                  VALUE(&MESSAGE)
                     RTVMSG     MSGID(SCM0022) MSGF(MIDASMSG) +
                                  MSG(&MESSAGE)
                     CHGDTAARA  DTAARA(MIDASMSG (351 50)) +
                                  VALUE(&MESSAGE)
                     CHGDTAARA  DTAARA(MIDASMSG (18 1)) VALUE('1')
                     CALL       PGM(SCC0010) PARM('SCC0102' +
                                  'ENTER' ' ')
                     GOTO       CMDLBL(ABNOR)
                   ENDDO
                ENDDO
 
/* Add 'EOD' to MSGQ/MSPECIAL, reset MSTATUS and restart COB */
/* by calling CBRUN                                          */
 
                ELSE       CMD(IF COND((&MPHAS *EQ 'B') *OR (&MPHAS *EQ +
                             'C') *OR (&MPHAS *EQ 'D') *OR (&MPHAS *EQ +
                             'E') *OR (&MPHAS *EQ 'F')) THEN(DO))
                   RRTJOB     RTGDTA(EODRST)
                ENDDO
 
                ELSE       CMD(DO)
                  SNDBRKMSG  MSG('Job cannot be run at this time') +
                               TOMSGQ(&JOB)
                  SIGNOFF    LOG(*LIST)
                ENDDO
             ENDDO
 
/* Processing on return from application called */
 
             ALCOBJ     OBJ((MSTATUS *MSGQ *EXCL)) WAIT(9999)
 
             CHGMSGQ    MSGQ(MSTATUS) RESET(*YES)
 
/************RCVMSG     MSGQ(MSTATUS) RMV(*YES)                                        */ /*CPK017*/
 
             RCLACTGRP  ACTGRP(*ELIGIBLE)
 
             ENDCMTCTL
             MONMSG     MSGID(CPF8350)
 
             RTVDTAARA  DTAARA(MPHAS) RTNVAR(&MPHAS)
 
/* If the system is in Input Cycle */
 
             IF         COND(&MPHAS *EQ 'A') THEN(DO)
 
/* Check to see if both queues are empty                          */
/* Allocation MSPECIAL during phase A processing to prevent other */
/* users signing on                                               */
 
                ALCOBJ     OBJ((MSPECIAL *MSGQ *EXCL)) WAIT(9999)
 
                CHGMSGQ    MSGQ(MSPECIAL) RESET(*YES)
 
                RCVMSG     MSGQ(MSTATUS) RMV(*NO) MSG(&STATMSG)
 
                RCVMSG     MSGQ(MSPECIAL) RMV(*NO) MSG(&SPECMSG)
 
                IF         COND((&STATMSG *EQ '     ') *AND +
                             (&SPECMSG *EQ '      ')) THEN(DO)
                   RCLRSC
                      CHGDTAARA  DTAARA(TSTATUS) VALUE('NORMAL  ')
                      DLCOBJ     OBJ((TSTATUS *DTAARA *SHRRD))
                   ENDDO
 
                   DLCOBJ     OBJ((MSPECIAL *MSGQ *EXCL))
                ENDDO
 
                DLCOBJ     OBJ((MSTATUS *MSGQ *EXCL))
 
 SOFF:
                SIGNOFF    LOG(*NOLIST)
             ENDDO
 
/* If the system is in close of business */
 
             ELSE       CMD(IF COND(&SPECMSG *EQ 'EOD   ') THEN(DO))
                DLCOBJ     OBJ((MSPECIAL *MSGQ *EXCL))
                CALL       PGM(CBC0015B)
                SIGNOFF    LOG(*NOLIST)
             ENDDO
 
/* If the system is not in close of business */
 
             ELSE       CMD(DO)
                DLCOBJ     OBJ((MSPECIAL *MSGQ *EXCL))
                SNDBRKMSG  MSG('Job cannot be run at this time') +
                             TOMSGQ(&JOB)
                SIGNOFF    LOG(*LIST)
             ENDDO
 
             GOTO       CMDLBL(END)
 
 ABNOR:
             SNDPGMMSG  MSG('Entry to Midas system processing +
                          terminated abnormally') TOMSGQ(MOPERQ)
             MONMSG     MSGID(CPF0000 MCH0000)
 
/* Call SCC0010 to inform the user that an error has occurred */
 
             RTVMSG     MSGID(SCM0084) MSGF(MIDASMSG) MSG(&MESSAGE)
             MONMSG     MSGID(CPF0000 MCH0000)
 
             CHGDTAARA  DTAARA(MIDASMSG (251 50)) VALUE(&MESSAGE)
             MONMSG     MSGID(CPF0000 MCH0000)
 
             RTVMSG     MSGID(SCM0022) MSGF(MIDASMSG) MSG(&MESSAGE)
             MONMSG     MSGID(CPF0000 MCH0000)
 
             CHGDTAARA  DTAARA(MIDASMSG (351 50)) VALUE(&MESSAGE)
             MONMSG     MSGID(CPF0000 MCH0000)
 
             CALL       PGM(SCC0010) PARM('SCC0102' 'ENTER' ' ')
             MONMSG     MSGID(CPF0000 MCH0000)
 
             SIGNOFF    LOG(*LIST)
             MONMSG     MSGID(CPF0000 MCH0000)
 
END:
             CHGVAR     VAR(&CPYFLD) VALUE('(c) +
                          Misys International Banking Systems Ltd.')
 
             ENDPGM
