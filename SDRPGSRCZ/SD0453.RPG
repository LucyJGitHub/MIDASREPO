     H        1
      *****************************************************************
/*STD *  RPGBASE                                                      *
/*EXI *  TEXT('Midas ER Customer Limits - LU Window')
      *****************************************************************
      *                                                               *
      *  Midas - Standing Data                                        *
      *                                                               *
      *  SD0453 - Customer Limits                                     *
      *                                                               *
      *  Function:  This program maintains Standing Data extension    *
      *             file                                              *
      *                                                               *
      *  Called By: SD0452E - (Customer Limits Inquiry)               *
      *             SD0452R - (Customer Limits Maintenance)           *
      *                                                               *
      *  (c) Misys International Banking Systems Ltd. 2005            *
      *                                                               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      *  Last Amend No. CSD027A            Date 11May06               *
      *  Prev Amend No. CER001  *Create    Date 25Apr05               *
      *                                                               *
      *****************************************************************
      *  CSD027A - Conversion Of Customer Number to Alpha             *
      *  CER001 - LUX Upgrade to MidasPlus                            *
      *****************************************************************
      *
     FDLLMX1L0IF  E           K        DISK
     F            LIMITBF6                          KRENAMERTVIDX
      *
      ** Extended Deal Sub-type          Retrieval index   Prefix VH.
      *
     FDLLMX1PDUF  E           K        DISK         KCOMIT       A    UC  ER_R10
     F            LIMITBF6                          KRENAMEUPDIDX
      *
      ** Extended Deal Sub-type          Update index      Prefix VH.
      *
     FSD0453DFCF  E                    WORKSTN
     F            SD0453F6                          KRENAMESCREEN
      *
      **                               Display file      Prefix #0.
      *
     E                    ZA1        16  1
     E                    ZA2        16  1
     E                    @F         16  1
      *
      ** input array for SR/ZA0840
      *
     E                    @G         16  1
      *
      ** array of powers of ten
      *
     E                    CPY@    1   1 80
      *
      ** output array for SR/ZA0840
      *
     E                    @H      1  15 15 0
      *
      ** Array containing Copyright statement
      *
      /EJECT
      *----------------------------------------------------------------
     I           SDS
      *
      ** Get program name from PSDS
      *
     I                                     *PROGRAM PGM
     I                                      244 253 WSID
     I                                      254 263 USER
      /EJECT
      *----------------------------------------------------------------
     IDLDA        DS                            256
      *
      ** Data structure for data-base processing
      *
     I                                      132 141 DBFILE
     I                                      142 170 DBKEY
     I                                      171 180 DBPGM
     I                                      181 1830DBASE
      /EJECT
      *----------------------------------------------------------------
     IDSFDY     E DSDSFDY
      *
      ** FIRST DS FOR ACCESS PROGRAMS, SHORT DATA STRUCTURE
      *
     I@MMOD     E DSSDMMODPD
      *
      ** DUMMY RECORD FORMATS FOR ACCESS TO MIDAS MODULES DETAILS
      *
     INWRCD     E DSDLLMX1PD
      *
      ** External DS for Bank Details
      *
     ISDBANK    E DSSDBANKPD
      *
      ** Current/previous master file fields
      *
      /EJECT
      *----------------------------------------------------------------
     ISVRCD       DS                             23
      *
      ** Stored master file fields
      *
     IA@CPY       DS
      *
      ** Copyright array
      *
     I                                        1  80 CPY@
      /EJECT
      *----------------------------------------------------------------
      *                                                               *
      * Get the data structure passed from calling program            *
      *                                                               *
      *----------------------------------------------------------------
      /COPY QWINDSRC,DL0080DTA
     IDATALX      DS                           1024
     I                                        1   6 #1CUST
     I                                        7   7 #1LEVL
     I                                        8  10 #1BCCD
     I**********                              1   60P1CNUM                                   CSD027A
     I                                        1   6 P1CNUM                                   CSD027A
      /EJECT
      *----------------------------------------------------------------
      * Main processing                                               *
      *----------------------------------------------------------------
      * Execute initial routine
     C                     EXSR SRINIT
      *
      ** Execute specific routine depending on action
      *
     C           ACTION    CASEQ'I'       SRINS
     C           ACTION    CASEQ'D'       SRDEL
     C                     ENDCS
      *
     C           ACTION    CASEQ'A'       SRAMD
     C           ACTION    CASEQ'E'       SRENQ
     C                     ENDCS
      *
      ** Execute routine to setup return code and exit program
      *
     C                     EXSR SRRTRN
      /EJECT
      *----------------------------------------------------------------
      * SRINS - Routine to handle 'INSERT' action                     *
      *----------------------------------------------------------------
     C           SRINS     BEGSR
      *
      ** Check whether record exists
      *
     C                     EXSR SRREC
      *
      ** If record found,
      *
     C           *IN89     IFEQ '0'
      *
      ** In case of 'Insert over Deleted Record'
      ** Save before image
      *
     C                     EXSR SRSAVE
     C                     ENDIF
      *
      ** Initialize fields
      *
     C                     EXSR SRINZ
      *
      ** Display and handle screen until no more errors or F12
      *
     C           *IN75     DOUEQ'0'
     C           *INKL     OREQ '1'
     C                     EXSR SRSCRN
      *
      ** Bypass any further validation if previous DB error or F12
      *
     C           *IN69     IFEQ '0'
     C           *INKL     ANDEQ'0'
      *
      ** Clear messages for redisplay
      *
     C                     EXSR SRCMSG
      *
      ** Validate input
      *
     C                     EXSR SRVAL
      *
      ** No errors
      *
     C           *IN75     IFEQ '0'
      *
      ** In case of 'Insert over Deleted Record'
      *
     C           *IN89     IFEQ '0'
      *
      ** Allocate record via update index
      *
     C                     EXSR SRALOC
      *
      ** If record on file and allocated, compare record images,
      ** else, screen will be redisplayed
      *
     C           *IN60     IFEQ '0'
     C           *IN61     ANDEQ'0'
     C                     EXSR SRCOMP
      *
      ** If images do not match, screen will be redisplayed with
      ** relevant message
      *
     C           WWMTCH    IFEQ 'Y'
      *
      ** Images match, move screen values to file fields
      *
     C                     EXSR SRSTOF
      *
      ** Update record
      *
     C                     EXSR SRUPD
     C                     ENDIF
     C                     ENDIF
     C                     ELSE
      *
      ** Move screen fields to file fields
      *
     C                     EXSR SRSTOF
      *
      ** Write new record
      *
     C                     EXSR SRWRT
     C                     ENDIF
     C                     ENDIF
     C                     ENDIF
     C                     ENDDO
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRAMD - Routine to handle 'AMEND' action
      *----------------------------------------------------------------
     C           SRAMD     BEGSR
      *
      ** Check whether record exists
      *
     C                     EXSR SRREC
      *
      ** If record not found,
      ** set DB error indicator, setup message, display screen, exit
      *
     C           *IN89     IFEQ '1'
     C                     MOVE '1'       *IN69
     C                     MOVEL'ER99920' ZAMSID
     C                     EXSR SRSMSG
      *
      ** Protect fields for display
      *
     C                     MOVE '1'       *IN15
      *
      ** Display screen
      *
     C                     EXSR SRSCRN
      *
      ** Execute DB error routine
      *
     C                     MOVELWWEXTF    WWBFIL
     C                     Z-ADD2         WWBASE
     C                     MOVELKCNUM     WWBKEY
     C                     EXSR SRDBER
     C                     ELSE
      *
      ** Record found,
      ** set file fields to screen fields and save before image
      *
     C                     EXSR SRFTOS
     C                     EXSR SRSAVE
      *
      ** Display and handle screen until record can be allocated and
      ** record on file and no errors left or F12 pressed
      *
     C           *IN61     DOUEQ'0'
     C           *IN60     ANDEQ'0'
     C           *IN75     ANDEQ'0'
     C           *INKL     OREQ '1'
     C                     EXSR SRSCRN
      *
      ** Bypass any further validation if previous DB error or F12
      *
     C           *IN69     IFEQ '0'
     C           *INKL     ANDEQ'0'
      *
      ** Clear messages for redisplay
      *
     C                     EXSR SRCMSG
      *
      ** Validate input
      *
     C                     EXSR SRVAL
      *
      ** No errors
      *
     C           *IN75     IFEQ '0'
      *
      ** Allocate record via update index
      *
     C                     EXSR SRALOC
      *
      ** If record on file and allocated, compare record images,
      ** else, screen will be redisplayed
      *
     C           *IN60     IFEQ '0'
     C           *IN61     ANDEQ'0'
     C                     EXSR SRCOMP
      *
      ** If images do not match, screen will be redisplayed with
      ** relevant message
      *
     C           WWMTCH    IFEQ 'Y'
      *
      ** Images match, move screen values to file fields
      *
     C                     EXSR SRSTOF
      *
      ** Update record
      *
     C                     EXSR SRUPD
     C                     ENDIF
     C                     ENDIF
     C                     ENDIF
     C                     ENDIF
     C                     ENDDO
     C                     ENDIF
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRDEL - Routine to handle 'DELETE' action                     *
      *----------------------------------------------------------------
     C           SRDEL     BEGSR
      *
      ** Set indicators on for 'DELETE' mode to protect fields
      *
     C                     MOVE '1'       *IN15
      *
      ** Check whether record exists
      *
     C                     EXSR SRREC
      *
      ** If record not found,
      ** set DB error indicator, setup message, display screen, exit
      *
     C           *IN89     IFEQ '1'
     C                     MOVE '1'       *IN69
     C                     MOVEL'ER99916' ZAMSID
     C                     EXSR SRSMSG
      *
      ** Execute DB error routine
      *
     C                     MOVELWWEXTF    WWBFIL
     C                     Z-ADD3         WWBASE
     C                     MOVELKCNUM     WWBKEY
     C                     EXSR SRDBER
     C                     ELSE
      *
      ** Record found,
      ** save before image
      *
     C                     EXSR SRSAVE
      *
      ** Allocate record via update index
      *
     C                     EXSR SRALOC
      *
      ** If record on file and allocated, compare record images,
      ** else, screen will be redisplayed
      *
     C           *IN60     IFEQ '0'
     C           *IN61     ANDEQ'0'
     C                     EXSR SRCOMP
      *
      ** If images do not match, screen will be redisplayed with
      ** relevant message
      *
     C                     ENDIF
     C                     ENDIF
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRENQ - Routine to handle 'ENQUIRY' action                    *
      *----------------------------------------------------------------
     C           SRENQ     BEGSR
      *
      ** Set indicators on for 'ENQUIRY' mode to protect fields
      *
     C                     MOVE '1'       *IN15
      *
      ** Check whether record exists
      *
     C                     EXSR SRREC
      *
      ** If record not found,
      ** set DB error indicator, setup message, display screen, exit
      *
     C           *IN89     IFEQ '1'
     C                     MOVE '1'       *IN69
     C                     MOVEL'ER99917' ZAMSID
     C                     EXSR SRSMSG
      *
      ** Display screen
      *
     C                     EXSR SRSCRN
      *
      ** Execute DB error routine
      *
     C                     MOVELWWEXTF    WWBFIL
     C                     Z-ADD4         WWBASE
     C                     MOVELKCNUM     WWBKEY
     C                     EXSR SRDBER
     C                     ELSE
      *
      ** Record found, set file fields to screen fields
      *
     C                     EXSR SRFTOS
      *
      ** Display and handle screen
      *
     C                     EXSR SRSCRN
     C                     ENDIF
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRSMSG - Routine to send messages to message subfile.         *
      *----------------------------------------------------------------
     C           SRSMSG    BEGSR
     C           ZAMSGF    IFEQ *BLANKS
     C                     MOVEL'SDUSRMSG'ZAMSGF
     C                     ENDIF
     C                     CALL 'SNDERMSG'
     C                     PARM PGM       ZAPGM  10
     C                     PARM           ZAPGRL  5
     C                     PARM           ZAMSID  7
     C                     PARM           ZAMSGF 10
     C                     PARM           ZAMSDA132
     C                     PARM           ZAMSTP  7
      *
      ** Clear all fields for default mechanism next time.
      *
     C                     MOVEL*BLANK    ZAPGRL
     C                     MOVEL*BLANK    ZAMSID
     C                     MOVEL*BLANK    ZAMSDA
     C                     MOVEL*BLANK    ZAMSTP
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRCMSG - Routine to clear program's message queue.            *
      *----------------------------------------------------------------
     C           SRCMSG    BEGSR
     C                     CALL 'CLRERMSG'
     C                     PARM PGM       ZAPGM
     C                     PARM '*SAME'   ZAPGRL
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRREC - Routine to access file via retrieve index             *
      *----------------------------------------------------------------
     C           SRREC     BEGSR
     C           KCNUM     CHAINRTVIDX               89
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRALOC - Routine to access record via update index            *
      *----------------------------------------------------------------
     C           SRALOC    BEGSR
     C           KCNUM     CHAINUPDIDX               6061
      *
      ** If record not on file, setup message 'Record deleted'
      *
     C           *IN60     IFEQ '1'
     C                     MOVEL'ER99918' ZAMSID
     C                     EXSR SRSMSG
     C                     ENDIF
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRUPD - Routine to update file.                               *
      *----------------------------------------------------------------
     C           SRUPD     BEGSR
     C                     UPDATUPDIDX                 68
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRWRT - Routine to write a new record to the file.            *
      *----------------------------------------------------------------
     C           SRWRT     BEGSR
     C                     WRITEUPDIDX                 68
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRCOMP - Routine to compare before/after image of records     *
      *----------------------------------------------------------------
     C           SRCOMP    BEGSR
     C           SVRCD     IFEQ NWRCD
     C                     MOVE 'Y'       WWMTCH  1
     C                     ELSE
     C                     MOVE 'N'       WWMTCH
     C                     MOVEL'ER99919' ZAMSID
     C                     EXSR SRSMSG
      *
      ** Use SETLL to release record lock
      *
     C           KCNUM     SETLLUPDIDX
      *
      ** Set condition to redisplay screen
      *
     C                     MOVE '1'       *IN60
     C                     ENDIF
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRSAVE - Routine to save before image of record via DS        *
      *----------------------------------------------------------------
     C           SRSAVE    BEGSR
     C                     MOVELNWRCD     SVRCD
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRRTRN - Routine to set up return code for calling program    *
      *----------------------------------------------------------------
     C           SRRTRN    BEGSR
      *
      ** DBF update error
      *
     C           *IN69     IFEQ '1'
     C                     MOVE 'Y2U0004' W0RTN
     C                     ELSE
      *
      ** Database / Window error
      *
     C           *IN68     IFEQ '1'
     C                     MOVE 'USR0563' W0RTN
     C                     ELSE
      *
      ** F12 pressed
      *
     C           *INKL     IFEQ '1'
     C                     MOVE 'USR0790' W0RTN
     C                     ELSE
      *
      ** No errors
      *
     C                     MOVE *BLANKS   W0RTN
     C                     ENDIF
     C                     ENDIF
     C                     ENDIF
     C                     CLOSEDLLMX1PD               99
      *
      ** Exit program
      *
     C                     MOVE '1'       *INLR
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRDBER - Routine to handle database errors                    *
      *----------------------------------------------------------------
     C           SRDBER    BEGSR
      *
      ** Update data area LDA
      *
     C           *NAMVAR   DEFN LDA       DLDA
     C           *LOCK     IN   DLDA
     C                     MOVEL'DL0080W6'DBPGM
     C                     MOVE WWBFIL    DBFILE
     C                     MOVE WWBKEY    DBKEY
     C                     MOVE WWBASE    DBASE
     C                     OUT  DLDA
      *
      ** Set on data-base error indicators
      *
     C                     MOVE '1'       *INU7
     C                     MOVE '1'       *INU8
     C                     MOVE '1'       *IN69
      *
      ** Call standard DB error handler
      *
     C                     EXSR *PSSR
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRSCRN - Routine to handle screen and validation              *
      *----------------------------------------------------------------
     C           SRSCRN    BEGSR
      *
      ** Display messages
      *
     C                     WRITE#MSGCTL
      *
      ** Display main screen
      *
     C                     EXFMTSCREEN
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRVAL - Routine to control validation of each field.          *
      *----------------------------------------------------------------
     C           SRVAL     BEGSR
      *
      ** Initialize error condition indicators
      *
     C                     MOVE '0'       *IN75
     C                     MOVEA'00'      *IN,23
     C                     EXSR SRCRRI
     C                     EXSR SRCRRA
     C                     ENDSR
      *----------------------------------------------------------------
      * SRCRRI - Routine to validate CREDIT RECEIVED INDICATOR        *
      *----------------------------------------------------------------
     C           SRCRRI    BEGSR
      *
      ** Validate field
      *
     C           #0CRRI    IFEQ *BLANKS
     C                     MOVE 'N'       #0CRRI
     C                     ENDIF
     C           #0CRRI    IFNE 'Y'
     C           #0CRRI    ANDNE'N'
     C                     MOVE '1'       *IN75
     C                     MOVE '1'       *IN23
     C                     MOVE 'ERD8001' ZAMSID
     C                     EXSR SRSMSG
     C                     ENDIF
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRCRRA - Routine to validate CREDIT RECEIVED AMOUNT           *
      *----------------------------------------------------------------
     C           SRCRRA    BEGSR
      *
      ** Validate field
      *
     C           #0CRRI    IFNE 'Y'
     C           #0CRRA    ANDNE*BLANK
     C                     MOVE '1'       *IN75
     C                     MOVE '1'       *IN24
     C                     MOVEL'ERD8002' ZAMSID
     C                     EXSR SRSMSG
     C                     ENDIF
     C                     MOVE #0CRRA    KKCRRA  90
     C           #0CRRI    IFEQ 'Y'
     C           #0CRRA    IFEQ *BLANK
     C           KKCRRA    OREQ *ZEROS
     C                     MOVE '1'       *IN75
     C                     MOVE '1'       *IN24
     C                     MOVEL'ERD8003' ZAMSID
     C                     EXSR SRSMSG
     C                     ENDIF
     C                     ENDIF
      *
      ** Using SR/ZA0840 subroutine to validate and align amount
      *
     C                     MOVE #0CRRA    @@ALPH
     C                     Z-ADD0         @@IDP
     C                     Z-ADD9         @@IINT
     C                     MOVE *BLANK    @@ERCD
     C                     EXSR ZA0840
     C           @@ERCD    IFEQ 1
     C           @@ERCD    OREQ 2
     C                     MOVE '1'       *IN75
     C                     MOVE '1'       *IN24
     C                     MOVEL'ERD8004' ZAMSID
     C                     EXSR SRSMSG
     C                     ENDIF
      *
      ** If the amount returned by the subroutine is negative
      ** sending a mesage
      *
     C           @@AMT     IFLT *ZEROS
     C                     MOVE '1'       *IN75
     C                     MOVE '1'       *IN24
     C                     MOVEL'ERD8005' ZAMSID
     C                     EXSR SRSMSG
     C                     ENDIF
      *
      ** If the amount returned by the subroutine is valid
      ** moving the amount in a work field
      *
     C           #0CRRA    IFNE *BLANKS
     C           *IN75     ANDEQ'0'
     C           *IN24     ANDEQ'0'
     C                     MOVE @@ALPH    #0CRRA
     C                     ENDIF
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRINZ - Routine to initialize screen fields with defaults     *
      *----------------------------------------------------------------
     C           SRINZ     BEGSR
     C                     MOVE *BLANKS   #0CRRI
     C                     MOVE *BLANKS   #0CRRA
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRFTOS - Routine to move file fields to screen fields
      *----------------------------------------------------------------
     C           SRFTOS    BEGSR
     C                     MOVE VJCRRI    #0CRRI
      *
      ** Use the SR/ZEDIT to format the file amount
      *
     C                     MOVE *BLANKS   ZFIELD
     C                     MOVE VJCRRA    ZFIELD
     C                     Z-ADD0         ZADEC
     C                     EXSR ZEDIT
     C                     MOVE ZFIELD    #0CRRA
     C           VJCRRA    IFEQ 0
     C                     MOVE *BLANKS   #0CRRA
     C                     ENDIF
     C                     MOVE *BLANKS   ZFIELD
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRSTOF - Routine to move screen fields to file fields
      *----------------------------------------------------------------
     C           SRSTOF    BEGSR
      *
      ** Move key field to file field
      *
     C**********           Z-ADDKCNUM     VJCNUM                                             CSD027A
     C                     MOVE KCNUM     VJCNUM                                             CSD027A
      *
      ** Move data fields to file fields
      *
     C                     MOVE #0CRRI    VJCRRI
     C                     MOVE @@AMT     VJCRRA
     C                     ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SRINIT - Routine to handle initial processing                 *
      *----------------------------------------------------------------
     C           SRINIT    BEGSR
      *
      ** Get parameters from calling program
      *
     C           *ENTRY    PLIST
     C                     PARM           RTNCDE 10
     C                     PARM           ACTION  1
     C                     PARM           DATALX
     C                     PARM           W0RTN   7
      *
      ** Setup key values using transaction data passed from caller
      *
     C**********           Z-ADDP1CNUM    KCNUM   60                                         CSD027A
     C                     MOVE P1CNUM    KCNUM   6                                          CSD027A
      *
      ** Redefine data-base error fields for program
      *
     C           *LIKE     DEFN DBFILE    WWBFIL
     C           *LIKE     DEFN DBKEY     WWBKEY
     C           *LIKE     DEFN DBASE     WWBASE
      *
      ** Setup file value used in database error during access to
      ** retrieval index
      *
     C           *LIKE     DEFN DBFILE    WWEXTF
     C                     MOVEL'DLLMX1PD'WWEXTF
      *
      ** Initialise error indicators
      *
     C                     MOVEA'000'     *IN,23
     C                     MOVE '0'       *IN75
     C                     MOVE '0'       *IN24
      *
      ** CALL ACCESS PROGRAM FOR MIDAS MODULES DETAILS
      *
     C                     CALL 'AOMMODR0'
     C                     PARM '*MSG    '@RTCD   7
     C                     PARM '*FIRST  '@OPTN   7
     C           @MMOD     PARM @MMOD     DSFDY
     C           @RTCD     IFNE *BLANK
     C                     MOVEL'SDMMODPD'WWBFIL
     C                     MOVEL'99'      WWBASE
     C                     MOVEL@OPTN     WWBKEY
     C                     EXSR SRDBER
     C                     ENDIF
     C           BGLRIN    IFNE 'Y'
     C                     MOVE *BLANKS   W0RTN
     C                     MOVE '1'       *INLR
     C                     RETRN
     C                     ELSE
     C                     OPEN DLLMX1PD
     C                     ENDIF
      *
      ** Access Bank Details
      *
     C                     CALL 'AOBANKR0'
     C                     PARM '*DBERR ' @RTCD   7
     C                     PARM '*FIRST ' @OPTN   7
     C           SDBANK    PARM SDBANK    DSFDY
      *
      ** Database error
      *
     C           @RTCD     IFNE *BLANKS
     C                     MOVEL'SDBANKPD'DBFILE
     C                     MOVEL'901'     DBASE
     C                     MOVEL@OPTN     DBKEY
     C                     EXSR *PSSR
     C                     ENDIF
     C                     ENDSR
      *----------------------------------------------------------------
     C           ZA0840    BEGSR                                      *
      *----------------------------------------------------------------
      *
      ** initialize the fields and the arrays
      *
     C                     MOVE '0'       *IN81
     C                     MOVE '0'       *IN82
     C                     Z-ADD0         @@ERCD  10
     C                     Z-ADD0         @@AMT  150
     C                     MOVEA*BLANKS   @G
     C                     MOVEA@@ALPH    @F
     C                     MOVE *BLANKS   @@ALPH 16
     C                     Z-ADD0         @@WK7   10
     C                     Z-ADD0         @@CADP  30
     C                     Z-ADD0         @@CINT  30
     C                     Z-ADD0         @@PIDP  30
     C                     Z-ADD0         @@PODP  30
     C                     Z-ADD0         @@C     20
     C                     Z-ADD0         @@D     20
     C                     Z-ADD0         @@E     20
      *
      **   define the input fields
      *
     C           *LIKE     DEFN @@CADP    @@IDP
     C           *LIKE     DEFN @@CINT    @@IINT
      *
      ** first check that the number input will not produce a number
      ** output with more than 15 figures.
      *
     C           @@IDP     ADD  @@IINT    @@WK2   20
     C           @@WK2     IFGT 15
     C                     Z-ADD2         @@ERCD
     C                     GOTO ZA0849
     C                     ENDIF
      *
      ** work through input array, ignoring leading zeros and blanks,
      ** also blanking the leading zeros in the input array.
      *
     C                     MOVE '0'       *IN83
     C                     ADD  1         @@C
     C           @@C       DOWLE16
     C           *IN83     ANDEQ'0'
     C           @F,@@C    IFNE ' '
     C           @F,@@C    ANDNE'0'
     C                     MOVE '1'       *IN83
     C                     SUB  1         @@C
     C                     ENDIF
     C                     ADD  1         @@C
     C                     ENDDO
      *
      ** check the integer part of the number for valid characters.
      *
     C           @@C       DOWLE16
     C           @F,@@C    ANDNE'.'
     C           @F,@@C    ANDNE' '
      *
      ** check for non numeric characters
      *
     C           @F,@@C    IFGT '9'
     C           @F,@@C    ORLT '0'
     C                     Z-ADD0         @@AMT
     C                     Z-ADD1         @@ERCD
     C                     GOTO ZA0849
     C                     ELSE
     C                     ADD  1         @@CINT
      *
      ** check number of integers is not greater than that required
      *
     C           @@CINT    IFGT @@IINT
     C                     Z-ADD0         @@AMT
     C                     Z-ADD2         @@ERCD
     C                     GOTO ZA0849
     C                     ENDIF
      *
      ** multiply the output amount by 10 then add the number in
      ** the input array element being processed.
      *
     C           @@AMT     MULT 10        @@AMT
     C                     MOVE @F,@@C    @@WK7
     C           @@AMT     ADD  @@WK7     @@AMT
     C                     ENDIF
      *
      ** increase array index
      *
     C                     ADD  1         @@C
     C                     ENDDO
      *
      ** set up position of decimal point in input array
     C                     Z-ADD@@C       @@PIDP
      *
      ** if the character pointed to is a decimal point add 1 to the
      ** index
      *
     C           @@C       IFLE 16
     C           @F,@@C    ANDEQ'.'
     C                     ADD  1         @@C
     C                     MOVE '1'       *IN82
     C                     ENDIF
      *
      ** now validate the decimal part of the number
      *
     C           @@C       DOWLE16
      *
      ** if a blank is found set on the blank input indicator
      *
     C           @F,@@C    IFEQ ' '
     C                     MOVE '1'       *IN81
     C                     ENDIF
      *
      ** if the figure is numeric, check that the number of decimal
      ** places does not exceed that specified, and that no blanks
      ** have been entered.
      *
     C           @F,@@C    IFGE '0'
     C           @F,@@C    ANDLE'9'
     C                     ADD  1         @@CADP
     C           @@CADP    IFGT @@IDP
     C                     Z-ADD0         @@AMT
     C                     Z-ADD2         @@ERCD
     C                     GOTO ZA0849
     C                     ENDIF
     C           *IN81     IFEQ '1'
     C                     Z-ADD0         @@AMT
     C                     Z-ADD1         @@ERCD
     C                     GOTO ZA0849
     C                     ENDIF
      *
      ** update output amount
      *
     C           @@AMT     MULT 10        @@AMT
     C                     MOVE @F,@@C    @@WK7
     C                     ADD  @@WK7     @@AMT
     C                     ELSE
      *
      ** if the character is not numeric and not a blank then it is
      ** invalid
      *
     C           @F,@@C    IFNE ' '
     C                     Z-ADD0         @@AMT
     C                     Z-ADD1         @@ERCD
     C                     GOTO ZA0849
     C                     ENDIF
     C                     ENDIF
      *
      ** increase index
      *
     C                     ADD  1         @@C
     C                     ENDDO
      *
      ** correct the output number for any decimal places not input
      ** in the alpha field.
      *
     C           @@IDP     SUB  @@CADP    @@E
      *
      ** increase the index by one to get correct array entry
      *
     C                     ADD  1         @@E
     C           @@AMT     MULT @H,@@E    @@AMT
      *
      ** now format the output alpha field, first calculate where
      ** the decimal point goes
      *
     C           16        SUB  @@IDP     @@PODP
     C           @@PODP    SUB  1         @@PIDP
      *
      ** if there are no decimal points set the position to 17
      *
     C           @@IDP     IFEQ 0
     C                     Z-ADD17        @@PODP
     C                     ENDIF
      *
      ** move the output number into the input array
      *
     C                     MOVEA*BLANKS   @F
     C                     MOVE @@AMT     @@AMTA 15
     C                     MOVEA@@AMTA    @F
      *
      ** set up indexes
      *
     C                     Z-ADD1         @@C
     C                     Z-ADD1         @@D
     C                     MOVE '0'       *IN80
      *
      ** now fill up the output array
      *
     C           @@D       DOWLE16
      *
      ** insert decimal point if the position is found
      *
     C           @@D       IFEQ @@PODP
     C                     MOVE '.'       @G,@@D
     C                     ADD  1         @@D
     C                     ENDIF
      *
      ** insert the zero before the decimal point
      *
     C           *IN80     IFEQ '0'
     C           @@D       ANDEQ@@PIDP
     C           @F,@@C    ANDEQ'0'
     C                     MOVE '1'       *IN80
     C                     MOVE '0'       @G,@@D
     C                     ENDIF
      *
      ** blank leading zeros
      *
     C           *IN80     IFEQ '0'
     C           @F,@@C    ANDEQ'0'
     C                     MOVE ' '       @G,@@D
     C                     ENDIF
      *
      ** move a normal character
      *
     C           @F,@@C    IFGE '1'
     C           @F,@@C    ANDLE'9'
     C                     MOVE @F,@@C    @G,@@D
     C                     MOVE '1'       *IN80
     C                     ENDIF
      *
      ** non blanked zero
      *
     C           @F,@@C    IFEQ '0'
     C           *IN80     ANDEQ'1'
     C                     MOVE '0'       @G,@@D
     C                     ENDIF
     C                     ADD  1         @@C
     C                     ADD  1         @@D
     C                     ENDDO
      *
      ** put output array into output amount
      *
     C                     MOVEA@G        @@ALPH
      *
      ** align figure with zero decimal places.
      *
     C           @@IDP     IFEQ 0
     C                     MOVE *BLANKS   @@ALP1 17
     C                     MOVE @@ALPH    @@ALP1
     C                     MOVEL@@ALP1    @@ALPH
     C                     ENDIF
     C           ZA0849    ENDSR
      *----------------------------------------------------------------
      **                                                              *
      **  ZEDIT SUBROUTINE TO INSERT A DEC POINT INTO A NUMERIC FIELD *
      **  AND TO BLANK OUT LEADING ZEROES.                            *
      **      INPUT FIELDS:   ZFIELD 16/                              *
      **                      ZADEC                                   *
      **                      ZADIG - NOT ACTUALLY USED               *
      **                                                              *
      **      ARRAYS ZA1 ,ZA2 BOTH 16 ELEMENTS, EACH ONE BYTE LONG.   *
      **                                                              *
      **      OUTPUT FIELD   ZFIELD                                   *
      **                                                              *
      *----------------------------------------------------------------
     C           ZEDIT     BEGSR
      *
      **   CALCULATION TO DEFINE NUMBER STRUCTURE CONTROL FIELDS.
      *
     C                     Z-ADDZADIG     ZADIG   20
     C                     Z-ADDZADEC     ZADEC   10
      *
      **      SET UP WORK FIELDS
      *
     C                     MOVEA' '       ZA1
     C                     MOVEA' '       ZA2
     C                     Z-ADD16        Z1      20
     C                     Z-ADD16        Z2      20
     C           16        SUB  ZADEC     ZADEC2  20
     C                     MOVEAZFIELD    ZA1
      *
      ** CHECK TO SEE IF THERE ARE ANY DECIMAL PLACES
      *
     C           ZADEC     COMP 0                        91
     C   91                GOTO ZT20
     C           ZT10      TAG
      *
      ** SET UP DECIMALS
      *
     C                     MOVE ZA1,Z1    ZA2,Z2
     C           Z1        SUB  1         Z1
     C           Z2        SUB  1         Z2
     C           Z2        COMP 0                        90
     C   90                GOTO ZT30
      *
      ** CHECK IF END OF DECIMALS
      *
     C           Z2        COMP ZADEC2               90
     C   90                GOTO ZT10
      *
      ** PUT IN DECIMAL PLACE
      *
     C                     MOVE '.'       ZA2,Z2
     C           Z2        SUB  1         Z2
     C           ZT20      TAG
      *
      ** SET UP INTEGERS
      *
     C                     MOVE ZA1,Z1    ZA2,Z2
     C           Z1        SUB  1         Z1
     C           Z2        SUB  1         Z2
     C           Z2        COMP 0                    90
     C   90                GOTO ZT20
      *
      ** PUT IN LEADING BLANKS
      *
     C           ZT30      TAG
     C                     Z-ADD1         Z2
     C           ZT40      TAG
     C           ZA2,Z2    COMP '0'                  9090
     C   90      ZA2,Z2    COMP ' '                  9090
     C   90                GOTO ZT50
     C                     MOVE ' '       ZA2,Z2
     C           Z2        ADD  1         Z2
     C           Z2        COMP 16                     90
     C   90                GOTO ZT40
      *
      ** IF NO INTEGERS PUT IN LEADING ZERO
      *
     C           ZT50      TAG
     C                     Z-ADDZADEC2    Z2
     C  N91      Z2        SUB  1         Z2
     C           ZA2,Z2    COMP ' '                      90
     C   90                MOVE '0'       ZA2,Z2
      *
      **      SET UP OUTPUT FIELD
      *
     C           ZT60      TAG
     C                     MOVEAZA2       ZFIELD 16
     CSR         ZEND      ENDSR
      *----------------------------------------------------------------
      *                                                               *
      * *PSSR  - Program exception error routine                      *
      *          Called automatically if a program error occurs,      *
      *          or directly by the program code using EXSR.          *
      *          This subroutine DUMPs the program just once.         *
      *                                                               *
      * Called by: SRINIT                                             *
      *                                                               *
      * Calls:     CALL DBERRCTL IF INTERACTIVE PROGRAM               *
      *                                                               *
      *----------------------------------------------------------------
     C           *PSSR     BEGSR
     C           @RUN      IFEQ *BLANK
     C                     MOVE 'Y'       @RUN    1
     C                     DUMP
      *
      ** CALL DBERRCTL IF INTERACTIVE PROGRAM
      *
     C                     CALL 'DBERRCTL'
     C                     ENDIF
      *
      ** END PROGRAM IF DBERRCTL NOT CALLED
      *
     C                     SETON                     U7U8LR
     C                     RETRN
     C                     ENDSR
**  CPY@
(c) Misys International Banking Systems Ltd. 2005
** array of powers of 10 from 0 to 8
000000000000001
000000000000010
000000000000100
000000000001000
000000000010000
000000000100000
000000001000000
000000010000000
000000100000000
000001000000000
000010000000000
000100000000000
001000000000000
010000000000000
100000000000000
