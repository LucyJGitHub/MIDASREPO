     H DEBUG
     H COPYRIGHT('(c) Finastra International Limited 2007')
      *****************************************************************
/*STD *  RPGBASEMOD                                                   *
      *****************************************************************
      *                                                               *
      *  Midas - Module name   ILE Module                             *
      *                                                               *
      *  SKFfffBRW - FUNCTION DESCR.   DETAILS BROWSE                 *
      *                                                               *
      *  Function:  This module runs in two modes:                    *
      *             One display a list of FUNCTION DESCRIPT. details  *
      *             for selection , the other picks off the           *
      *             selection made.                                   *
      *                                                               *
      *  (c) Finastra International Limited 2007                      *
      *                                                               *
      *  Last Amend No. CAP0nn  *CREATE    Date ddMmmyy               *
      *  Prev Amend No. xxxxxx                                        *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *  CAP0nn - Conversion of MM inputs into modular structure to   *
      *           use as APIs.                                        *
      *                                                               *
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ F-specs                              ¦
      ** ¦ =======                              ¦
      ** +--------------------------------------+
 
     FSKFfffBDF CF   E             WORKSTN
     F                                     SFILE(SKFfffS1:@@RRN)
     F                                     SFILE(SKFfffS3:@@RRN)
 
      * FUNCTION Transaction Details File - by Transaction number
     FSKTRANFLLRIF   E           K DISK    INFSR(*PSSR)
     F                                     RENAME(Format:FILETRNN)
 
      ** Transaction file - by Front Office Id.
     FSKTRANFLLXIF   E           K DISK    INFSR(*PSSR)
     F                                     RENAME(Format:FILEFOID)
 
      ** Table of field numbers and names
     FZAFLDNPD  IT   F   15        DISK    INFSR(*pssr)
 
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ Automatically included D-specs       ¦
      ** ¦ ==============================       ¦
      ** +--------------------------------------+
      **
      **------------------------------------------------------------------
      ** The following /COPY line includes (among others) the LDA layout
      ** and the copyright array definition:
     D/COPY ZACPYSRC,STD_D_SPEC
      **------------------------------------------------------------------
 
      **------------------------------------------------------------------
      ** The following /COPY includes the MM standard declares:
     D/COPY ZACPYSRC,STDDECLARE
      **------------------------------------------------------------------
 
      **------------------------------------------------------------------
      ** The following /COPY line includes all the defined fields in the
      ** Program Status Data Structures.  They have meaningful
      ** names, prefixed by 'PS'.
     D/COPY ZACPYSRC,PSDS
      **------------------------------------------------------------------
 
      **------------------------------------------------------------------
      ** The following /COPY line includes the definitions for error and
      ** warning message arrays.
     D/COPY ZACPYSRC,ERR_ARRAYS
      **------------------------------------------------------------------
 
      **------------------------------------------------------------------
      ** The following /COPY line includes all the definitions of the error
      ** arrays, including the named constant giving the size of the
      ** arrays.  Note that it uses #MsgID and *MsgData, and so requires
      ** STD_D_SPEC.
     D/COPY ZACPYSRC,FVAL_ARRAY
      **------------------------------------------------------------------
 
      **------------------------------------------------------------------
      ** The following /COPY line includes the definitions for error and
      ** warning message arrays.
     D/COPY ZACPYSRC,APICTLARR
      **------------------------------------------------------------------
 
      **------------------------------------------------------------------
      ** The following /COPY line includes the definitions for fields
      ** required by the message handler.
     D/COPY ZACPYSRC,MSGHNDDCL
      **------------------------------------------------------------------
 
 
      ** +--------------------------------------+
      ** ¦ End of automatically included D-specs¦
      ** ¦ =====================================¦
      ** +--------------------------------------+
 
      *****************************************************************
      /EJECT
      *****************************************************************
 
      ** +--------------------------------------+
      ** ¦ Manually included D-specs            ¦
      ** ¦ =========================            ¦
      ** +--------------------------------------+
 
      ** +--------------------------------------+
      ** ¦ Named constants                      ¦
      ** ¦ ===============                      ¦
      ** +--------------------------------------+
 
      ** +--------------------------------------+
      ** ¦ Arrays and Data Structures           ¦
      ** ¦ ==========================           ¦
      ** +--------------------------------------+
 
      ** EXTERNAL DS FOR BANK DETAILS
     D SDBANK        E DS                  EXTNAME(SDBANKPD)
 
      ** FIRST DS FOR ACCESS PROGRAMS, SHORT DATA STRUCTURE
     D DSFDY         E DS                  EXTNAME(DSFDY)
 
      **  Long DS for access programs
     D DSSDY         E DS                  EXTNAME(DSSDY)
 
      ** +--------------------------------------+
      ** ¦ Declared variables                   ¦
      ** ¦ ==================                   ¦
      ** +--------------------------------------+
 
      ** +--------------------------------------+
      ** ¦ End of D-specs                       ¦
      ** ¦ ==============                       ¦
      ** +--------------------------------------+
      *****************************************************************
      /EJECT
      *****************************************************************
     C
      ** +--- Start of Main processing -----------------------------------+
      ** ¦                                                                ¦
      ** ¦ Initial processing is performed automatically: the *INZSR is   ¦
      ** ¦ executed at program activation.                                ¦
      ** ¦                                                                ¦
      ** +----------------------------------------------------------------+
      *
      ** Set up the transaction reference to be used by the message handler
     C                   EVAL      TranRef = DDTRNN
     C                   EVAL      ActionCode = DDACTN
 
      **------------------------------------------------------------------
      ** The following /COPY line includes processing for the error and
      ** warning messages.
     D/COPY ZACPYSRC,MSGHNDDSP1
      **------------------------------------------------------------------
 
      ** Initialisation
     C                   EXSR      INIT
 
      ** BUILD Sub-file
     C                   IF        @BDSFL = 'Y'
      *
      **  If First time in or subfile by Midas transaction number was previously
      **  being run, then build subfile keyed on Midas transaction number.
      **  Stay in loop while F11 toggle key is used.
     C                   IF        WTrnK <> 'F' and
     C                             WTrnK <> 'S'
 
     C                   MOVE      'B'           WTrnK
      *
     C                   ENDIF
      *
     C                   DOU       *INKK = '0'
      *
      ** On F11, initialise position/select fields
      *
     C                   IF        *INKK = '1'
      *
     C                   EVAL      DDTRNN = *BLANK
     C                   EVAL      SBTRNN = *BLANK
     C                   EVAL      SBFLD1 = *BLANK
     C                   EVAL      SBFLD2 = *BLANK
     C                   EVAL      SBFLD3 = *BLANK
 
      ** Clear program message queue
     C                   CALL      'ZA0250'
 
     C                   ENDIF
 
     C     WTrnK         CASEQ     'B'           BLDSFL
     C     WTrnK         CASEQ     'F'           BLDSFL2
     C                   ENDCS
     C                   ENDDO
 
     C                   ENDIF
 
      ** READ Subfile Record
     C                   IF        @RDSFL = 'Y' and
     C                             WTrnK <> *BLANK
 
     C                   EXSR      RDSFLR
 
     C                   ENDIF
 
     C                   RETURN
 
      ********************************************************************
      /EJECT
      *****************************************************************
      * INIT - Initialisation
      *****************************************************************
     C     INIT          BEGSR
      *
      * Clear outputs
     C                   EVAL      @ERRMS = *BLANK
     C                   EVAL      @OPSEL = *BLANK
     C                   EVAL      @TRSEL = *BLANK
     C                   EVAL      @INKC  = '0'
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * *INZSR - Initial processing
      *****************************************************************
     C     *INZSR        BEGSR
      *
      * Parameters
     C     *ENTRY        PLIST
      *
      * Input Parameters :
      * Return Code
     C                   PARM                    RetCodeIn
      * Action Code
     C                   PARM                    DDACTN            1
 
      * Transaction Reference Pointer
     C                   PARM                    DDTRNN            6
 
      * Build Subfile
     C                   PARM                    @BDSFL            1
 
      * Read Subfile Record
     C                   PARM                    @RDSFL            1
     C                   PARM                    FldNameArr
     C                   PARM                    MsgIdArr
     C                   PARM                    MsgDtaArr
      *
      * Output Parameters:
      * Error Message
      * Option Selected
      * Transaction Reference selected
     C                   PARM                    @ERRMS            7
     C                   PARM                    @OPSEL            1
     C                   PARM                    @TRSEL            6
 
      * Command Keys
     C                   PARM                    @INKC             1
     C                   PARM                    @INKI             1
      *
      ** Initialise program name
     C                   EVAL      DBPGM = 'SKFfffBRW'
      *
      ** Move workstation ID to screen field.
     C                   EVAL      DDWID = PsJobName
     C                   EVAL      DDUSER = PsUser
      *
     C                   EVAL      *IN94 = *ON
     C                   EVAL      DDPGMQ = '*'
      *
      ** Access Bank Details
     C                   CALL      'AOBANKR0'
     C                   PARM      '*DBERR '     @RTCD             7
     C                   PARM      '*FIRST '     @OPTN             7
     C     SDBANK        PARM      SDBANK        DSFDY
      *
      * Database Error
     C                   IF        @RTCD <> *BLANKS
     C                   EVAL      DBFILE = 'SDBANKPD'
     C                   EVAL      DBASE = '901'
     C                   EVAL      DBKEY = @OPTN
     C                   EXSR      *PSSR
     C                   ENDIF
      *
      **---------------------------------------------------------------
      ** The following /COPY line sets up the fixed data for SD *DSP
      ** Functions for the message handler, ZAMSGHNDLE.
     D/COPY SDCPYSRC,MSGHNDDATA
      **---------------------------------------------------------------
 
      ** Program, module and procedure names for dbase error processing
      ** ==============================================================
      ** The following /COPY sets these values.
      /COPY ZACPYSRC,DBFIELDS
 
     C                   ENDSR
      *****************************************************************
      *
      /EJECT
      ** The following /COPY line includes the ProcMsgs subroutine
      ** to process error and warning messages.
     D/COPY ZACPYSRC,MSGHNDDSP2
      **---------------------------------------------------------------
 
      /EJECT
      ********************************************************************
      * BLDSFL - BUILD SUBFILE
      ********************************************************************
     C     BLDSFL        BEGSR
      *
      ** Check for user Authority to Browse IF NOT MULTI-BRANCHING
     C                   IF        BJSBRC <> *BLANK
     C                   EXSR      CHAUTN
     C                   END
      *
      ** Validate Transaction Reference (FOR POINTER)
     C                   EXSR      VALTran
      *
      **  Initialise subfile relative record number.
     C                   Z-ADD     0             @@RRN             5 0
      *
      **  Clear subfile before refilling by writing control record
      **  with SFLCLR active.
     C                   EVAL      *IN97 = *ON
     C                   WRITE     SKFfffS0
     C                   EVAL      *IN97 = *OFF
      *
      **  Set file pointer on key displayed on screen.
     C     @@TRNN        SETLL     SKTRANFLLR
      *
      **  Read a Valid Transaction
     C                   EXSR      RDTran
      *
      **  set up message 'no data to display'
     C                   EVAL      *IN80 = *OFF
     C                   IF        @@EOF = 'Y'
     C                   EVAL      *IN80 = *ON
     C                   ENDIF
      *
      **  Set on ROLLUP indicator to drive initial loop.
     C                   EVAL      *IN98 = *ON
      *
      **  Read records from the file into the subfile until a page has
      **  been filled or there are no more records.
      **  Repeat the process until either the end of file, ROLLUP
      **  has not been entered or F3 or F12 is input.
     C                   DOW       *IN98 = *ON
      *
      **  Initialise count of records written to subfile page.
     C                   Z-ADD     0             @@CNT             3 0
      *
      **  For each record read, write it to the subfile.
      **  Do this until end of file or the subfile page is full.
     C                   DOW       @@EOF <> 'Y' and
     C                             @@CNT < 14
      *
      **  Increment the subfile record no. and records written fields.
     C                   ADD       1             @@RRN
     C                   ADD       1             @@CNT
      *
      **  Format transaction fields for output
     C                   EXSR      FMTtran
      *
      **  Write the transaction to the subfile.
      *
      **  If action code or Transaction number selected is invalid
      **  the subfile postions on the error record and rebuilds
     C                   EVAL      *IN92 = *OFF
     C                   IF        @@RRN <> 1
     C                   EVAL      DDOPT = *BLANK
     C                   ELSE
     C     'DDACTN    '  LOOKUP    FldNameArr                             99
     C     'DDTRNN    '  LOOKUP    FldNameArr                             98
     C                   IF        *IN99 <> '1' and
     C                             *IN98 <> '1'
     C                   EVAL      DDOPT = *BLANK
     C                   ELSE
     C                   EVAL      *IN92 = *ON
     C                   ENDIF
     C                   ENDIF
      *
     C                   Z-ADD     @@RRN         DDSFRN
     C                   WRITE     SKFfffS1
      *
      **  Read a valid Transaction
     C                   EXSR      RDTran
     C                   ENDDO
      *
      **  Set up footer toggle text and write the footer
     C                   WRITE     SKFfffF1
      *
      **  Write the message subfile
     C                   WRITE     SKFfffM0
      *
      **  If there is no data to display, set on SFLCLR condition and
      **  write the subfile control record
     C                   IF        @@CNT = 0
     C                   EVAL      *IN97 = *ON
     C                   WRITE     SKFfffS0
     C                   EVAL      *IN97 = *OFF
     C                   EVAL      @@RRN = 1
     C                   EVAL      DDSFRN = 1
      *
      **  write to the subfile with non-display set on
     C                   EVAL      *IN93 = *ON
     C                   WRITE     SKFfffS1
     C                   EVAL      *IN93 = *OFF
     C                   WRITE     SKFfffS0
     C                   ELSE
      *
      **  Write the subfile control record to the screen to display
      **  the subfile.
     C                   WRITE     SKFfffS0
     C                   ENDIF
      *
      **  Read the subfile control record to determine whether records
      **  have been selected or whether ROLLUP is required.
     C                   READ      SKFfffS0                               99
      *
      ** Clear any messages before processing user input
     C                   EVAL      FldNameArr = *BLANKS
     C                   EVAL      MsgIdArr   = *BLANKS
     C                   EVAL      MsgDtaArr  = *BLANKS
      *
      **  If F3, bypass further processing.
     C                   IF        *INKC = *ON
     C                   EVAL      @INKC = '1'
     C                   SETON                                        LR
     C                   RETURN
     C                   END
      *
      **  If F9, bypass further processing.
     C                   IF        *INKI = *ON
     C                   EVAL      @OPSEL = 'I'
     C                   SETON                                        LR
     C                   RETURN
     C                   END
      *
     C                   END
      *
      * Set indicator ans flag for Midas Front Office I.D. browse key used
     C                   IF        *INKK = *ON
     C                   MOVE      'F'           WTrnK             1
     C                   END
      *
     C                   ENDSR
      ********************************************************************
      /EJECT
      ********************************************************************
      * BLDSFL2 - BUILD SUBFILE by FRONT OFFICE ID.
      ********************************************************************
 
     C     BLDSFL2       BEGSR
      *
      ** Check for user Authority to Browse IF NOT MULTI-BRANCHING
     C                   IF        BJSBRC <> *BLANK
     C                   EXSR      CHAUTN
     C                   ENDIF
      *
      * Validate Transaction N(FOR POINTER)
     C                   EXSR      VALTran
      *
      **  Get Front Office Transaction Reference
     C     @@TRNN        CHAIN     SKTRANFLLR                         89
     C                   MOVE      FLFRNT        @@FOID           20
     C                   IF        *IN89 = *ON
     C                   EVAL      @@FOID = *BLANKS
     C                   ENDIF
      *
      **  Initialise subfile relative record number.
     C                   EVAL      @@RRN = 0
      *
      **  Clear subfile before refilling by writing control record
      **  with SFLCLR active.
     C                   EVAL      *IN97 = *ON
     C                   WRITE     SKFfffS2
     C                   EVAL      *IN97 = *OFF
      *
      **  Set file pointer on key displayed on screen.
     C     @@FOID        SETLL     SKTRANFLDX
      *
      ** Read a Valid Trade
      *
     C                   EXSR      RDTran
      *
      **  set up message 'no data to display'
     C                   EVAL      *IN80 = *OFF
     C                   IF        @@EOF = 'Y'
     C                   EVAL      *IN80 = *ON
     C                   ENDIF
      *
      **  Set on ROLLUP indicator to drive initial loop.
     C                   EVAL      *IN98 = *ON
      *
      **  Read records from the file into the subfile until a page has
      **  been filled or there are no more records.
      **  Repeat the process until either the end of file, ROLLUP
      **  has not been entered or F3 or F12 is input.
     C                   DOW       *IN98 = *ON
      *
      **  Initialise count of records written to subfile page.
     C                   EVAL      @@CNT = 0
      *
      **  For each record read, write it to the subfile.
      **  Do this until end of file or the subfile page is full.
     C                   DOW       @@EOF <> 'Y' and
     C                             @@CNT <  14
      *
      **  Increment the subfile record no. and records written fields.
     C                   ADD       1             @@RRN
     C                   ADD       1             @@CNT
      *
      ** Format custom fields for output
     C                   EXSR      FMTtran
      *
      **  Write the customer to the subfile.
      *
      **  If action code or Transaction number selected is invalid,
      **  the subfile postions on the error record and rebuilds
     C                   EVAL      *IN92 = *OFF
     C                   IF        @@RRN <> 1
     C                   EVAL      DDOPT = *BLANKS
     C                   ELSE
     C     'DDACTN    '  LOOKUP    FldNameArr                             99
     C     'DDTRNN    '  LOOKUP    FldNameArr                             98
     C                   IF        *IN99 <> *ON and
     C                             *IN98 <> *ON
     C                   EVAL      DDOPT = *BLANKS
     C                   ELSE
     C                   EVAL      *IN92 = *ON
     C                   ENDIF
     C                   ENDIF
      *
     C                   EVAL      DDSFRN = @@RRN
     C                   WRITE     SKFfffS3
      *
      ** Read a valid Transaction
     C                   EXSR      RDTran
     C                   ENDDO
      *
      **  Set up footer toggle text and write the footer
     C                   WRITE     SKFfffF1
      *
      **  Write the message subfile
     C                   WRITE     SKFfffM0
      *
      **  If there is no data to display, set on SFLCLR condition and
      **  write the subfile control record
     C                   IF        @@CNT = 0
     C                   EVAL      *IN97 = *ON
     C                   WRITE     SKFfffS2
     C                   EVAL      *IN97 = *OFF
     C                   EVAL      @@RRN = 1
     C                   EVAL      DDSFRN = 1
      *
      **  write to the subfile with non-display set on
     C                   EVAL      *IN93 = *ON
     C                   WRITE     SKFfffS3
     C                   EVAL      *IN93 = *OFF
     C                   WRITE     SKFfffS2
     C                   ELSE
      *
      **  Write the subfile control record to the screen to display
      **  the subfile.
     C                   WRITE     SKFfffS2
     C                   ENDIF
      *
      **  Read the subfile control record to determine whether records
      **  have been selected or whether ROLLUP is required.
     C                   READ      SKFfffS2                               99
      *
      ** Clear any messages before processing user input
     C                   EVAL      FldNameArr = *BLANKS
     C                   EVAL      MsgIdArr   = *BLANKS
     C                   EVAL      MsgDtaArr  = *BLANKS
      *
      **  If F3, bypass further processing.
     C                   IF        *INKC = *ON
     C                   EVAL      @INKC = '1'
     C                   SETON                                        LR
     C                   RETURN
     C                   ENDIF
      *
      **  If F9, bypass further processing.
     C                   IF        *INKI = *ON
     C                   EVAL      @OPSEL = 'I'
     C                   SETON                                        LR
     C                   RETURN
     C                   ENDIF
      *
     C                   ENDDO
      *
      * Set indicator and flag for Midas (back) office Transaction number key
     C                   IF        *INKK = *ON
     C                   EVAL      WTrnK = 'B'
     C                   ENDIF
      *
     C                   ENDSR
      ********************************************************************
      /EJECT
      ********************************************************************
      * RDSFLR - READ SUBFILE RECORD
      ********************************************************************
     C     RDSFLR        BEGSR
      *
      **  Read the subfile for selected records
      **  Only process those for which the option field is blank.
     C                   DOU       *IN99 = *ON or
     C                             DDOPT <> *BLANK
 
     C                   IF        WTrnK = 'B'
     C                   READC     SKFfffS1                               99
     C                   ENDIF
     C                   IF        WTrnK = 'F'
     C                   READC     SKFfffS3                               99
     C                   ENDIF
 
     C                   ENDDO
      *
      **  Return the selected transaction reference and option
     C                   IF        *IN99 <> '1' and
     C                             DDOPT <> *BLANK
      *
     C                   IF        DDOPT = 'A' or
     C                             DDOPT = 'D'
     C                   EVAL      @OPSEL = DDOPT
     C                   ELSE
     C                   EVAL      @OPSEL = 'E'
     C                   ENDIF
      *
     C                   EVAL      @TRSEL = DDTRN
      *
     C                   ENDIF
      *
     C     EBLDSF        ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * FMTtran - FORMAT TRANSACTION FOR OUTPUT
      ******************************************************************
     C     FMTTRN        BEGSR
 
      * Transaction reference
     C                   EVAL      DDTRN  = FLTRNN
     C                   EVAL      DDFLD1 = FLFLD1
     C                   EVAL      DDFLD2 = FLFLD2
     C                   EVAL      DDFLD3 = FLFLD3
 
     C                   ENDSR
      ******************************************************************
      /EJECT
      *****************************************************************
      * RDTran - READ A TRANSACTION
      *****************************************************************
     C     RDTran        BEGSR
      *
      **  Reset End of File and skip record indicator
     C                   MOVE      *BLANK        @@EOF             1
      *
      **  Read the file initially - if @@EOF is set on then the end of
      **  the file has been reached.  Read until a valid record is
      **  found or until no more records exist.
     C                   DOU       @@EOF = 'Y' or
     C                             FLTRNN <> *BLANKS and
     C                             @@ERR = *ZERO and
     C                             FLTYLC <> 'D'
      *
      **  Read the file
      *
      **  Position according to Transaction number
     C                   IF        WTrnK = 'B'
     C                   READ      FILETRNN                               96
     C                   ENDIF
      *
      **  Position according to Front Office Id
     C                   IF        WTrnk = 'F'
     C                   READ      FILEFOID                               96
     C                   ENDIF
      *
      ** Select according to customer shortname mask
     C                   IF        SBFLD1 <> *BLANK
     C                   CALL      'QCLSCAN'
     C                   PARM                    BBCSSN
     C                   PARM      10            LENGTH1           3 0
     C                   PARM      1             START             3 0
     C                   PARM                    SBFLD1
     C                   PARM      10            LENGTH2           3 0
     C                   PARM      '1'           TRANSLATE         1
     C                   PARM      '1'           TRIM              1
     C                   PARM      '?'           WILD              1
     C                   PARM                    RESULT            3 0
     C                   IF        RESULT < 1
     C                   EVAL      BFCUST = *BLANKS
     C                   ENDIF
     C                   ENDIF
      *
      ** Select according to customer report name mask
     C                   IF        SBFLD2 <> *BLANK
     C                   CALL      'QCLSCAN'
     C                   PARM                    BBCRNM
     C                   PARM      20            LENGTH1
     C                   PARM      1             START
     C                   PARM                    SBFLD2
     C                   PARM      20            LENGTH2
     C                   PARM      '1'           TRANSLATE
     C                   PARM      '1'           TRIM
     C                   PARM      '?'           WILD
     C                   PARM                    RESULT
     C                   IF        RESULT < 1
     C                   EVAL      BFCUST = *BLANK
     C                   ENDIF
     C                   ENDIF
      *
      ** Select according to customer report town mask
     C                   IF        SBFLD3 <> *BLANK
     C                   CALL      'QCLSCAN'
     C                   PARM                    BBCRTN
     C                   PARM      10            LENGTH1
     C                   PARM      1             START
     C                   PARM                    SBFLD3
     C                   PARM      10            LENGTH2
     C                   PARM      '1'           TRANSLATE
     C                   PARM      '1'           TRIM
     C                   PARM      '?'           WILD
     C                   PARM                    RESULT
     C                   IF        RESULT < 1
     C                   EVAL      BFCUST = *BLANK
     C                   ENDIF
     C                   ENDIF
      *
      * End of File
     C                   IF        *IN96 = *ON
     C                   EVAL      @@EOF = 'Y'
     C                   ENDIF
      *
     C                   ENDDO
      *
     C     ERDCUST       ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * CHAUTN - CHECK FOR USER AUTHORITY IF NOT MULTI-BRANCHING
      *****************************************************************
     C     CHAUTN        BEGSR
      *
     C                   CALL      'ZVACTU'
     C                   PARM      'E'           ZACTN             1
     C                   PARM                    @@ERR             1 0
      *
      * RETURN ERROR MESSAGE
     C                   IF        @@ERR = 1
     C                   EVAL      @ERRMS = 'FXM0292'
     C                   RETURN
     C                   ENDIF
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * VALTran - VALIDATE TRANSACTION REFERENCE POINTER
      *****************************************************************
     C     VALTran       BEGSR
      *
      **  Validate that the transaction reference is numeric or blank.
     C                   TESTN                   DDTRNN               98
     C                   MOVE      DDTRNN        @@TEST            1
     C                   TESTZ                   @@TEST                   99
     C                   IF        DDTRNN = *BLANKS or
     C                             *IN98 = '1' and
     C                             *IN99 = '1'
     C                   MOVE      DDTRNN        @@TRNN            6
      *
      * RETURN ERROR MESSAGE
     C                   ELSE
     C                   EVAL      @ERRMS = 'MMA0087'
     C                   RETURN
     C                   ENDIF
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * *PSSR  - Program exception error routine                      *
      *          Called automatically if a program error occurs,      *
      *          or directly by the program code using EXSR.          *
      *          This subroutine DUMPs the program, and performs      *
      *          a ROLLBACK.                                          *
      *                                                               *
      *****************************************************************
      ** The following /COPY contains the standard program status
      ** subroutine, including a bound call to the DBERRCTL module.
     C/COPY ZACPYSRC,PSSR_ILE
 
         Note: if non-standard processing required, use the PSSR_ILENE
         subroutine
      ****************************************************************
