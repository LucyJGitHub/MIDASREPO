     H DEBUG
     H COPYRIGHT('(c) Misys International Banking Systems Ltd. 2007')
      *****************************************************************
/*STD *  RPGBASEMOD                                                   *
      *****************************************************************
      *                                                               *
      *  Midas - Module name   ILE Module                             *
      *                                                               *
      *  SKFfffRPB - Invalid xxxxxx transactions Browse               *
      *                                                               *
      *  Function:  This module runs in two modes:                    *
      *          One display a list of invalid transactions for       *
      *          selection, the other picks off the selection made.   *
      *                                                               *
      *  (c) Misys International Banking Systems Ltd. 2007            *
      *                                                               *
      *  Last Amend No. CAP0nn  *CREATE    Date ddMmmyy               *
      *  Prev Amend No. xxxxxx             Date ddMmmyy               *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *  CAP0nn - Conversion of Midas inputs to modular API structure *
      *                                                               *
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ F-specs                              ¦
      ** ¦ =======                              ¦
      ** +--------------------------------------+
     FSKFfffRDF CF   E             WORKSTN
     F                                     SFILE(SKFfffS1:@@RRN)
     FSKIFfffL0 IF   E           K DISK    INFSR(*PSSR)
     F                                     RENAME(SKIFfffD0:SKIFfffX0)
     FSKIFfffL1 UF   E           K DISK    INFSR(*PSSR)
     F                                     COMMIT
 
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ Automatically included D-specs       ¦
      ** ¦ ==============================       ¦
      ** +--------------------------------------+
      **
      ** Standard D-specs
      ** ================
      **
      ** The following /COPY line includes the LDA layout,
      ** the copyright array definition,
      ** and the following named constants:
      **    True       logical = *on (for indicator processing)
      **    False      logical = *off (for indicator processing)
      **    DBErrCtl   10A     = 'DBERRCTL' (the name of the database error
      **                                    handler)
      ** and the following variables:
      **    RunBefore  1A (for the PSSR)
 
     D/COPY ZACPYSRC,STD_D_SPEC
 
      ** Include the MM standard declares
     D/COPY ZACPYSRC,STDDECLARE
 
      ** Program Status Data Structure
      ** =============================
      ** The following /COPY line includes all the defined fields in the
      ** PSDS.  They have meaningful names, prefixed by 'PS'.
 
     D/COPY ZACPYSRC,PSDS
 
      ** +--------------------------------------+
      ** ¦ End of automatically included D-specs¦
      ** ¦ =====================================¦
      ** +--------------------------------------+
 
      *****************************************************************
      /EJECT
      *****************************************************************
 
      ** +--------------------------------------+
      ** ¦ Manually included D-specs            ¦
      ** ¦ =========================            ¦
      ** +--------------------------------------+
 
      ** +--------------------------------------+
      ** ¦ Named constants                      ¦
      ** ¦ ===============                      ¦
      ** +--------------------------------------+
 
      ** +--------------------------------------+
      ** ¦ Arrays and Data Structures           ¦
      ** ¦ ==========================           ¦
      ** +--------------------------------------+
 
     D/COPY WNCPYSRC,SKFfffBD01
 
     D InvSk         E DS                  EXTNAME(SKIFfffPD)
 
     D SDBANK        E DS                  EXTNAME(SDBANKPD)
      ** External DS for Bank Details
 
     D SDCUST        E DS                  EXTNAME(SDCUSTPD)
      ** External DS for Customer Details
 
     D DSFDY         E DS                  EXTNAME(DSFDY)
      ** First DS for Access Programs, Short Data Structure
 
     D DSSDY         E DS                  EXTNAME(DSSDY)
      ** Second DS for Access Programs, Long Data Structure
 
     D ErrorText       S             52    DIM(1) CTDATA PERRCD(1)
      ** Array containing messages
 
      ** +--------------------------------------+
      ** ¦ Declared variables                   ¦
      ** ¦ ==================                   ¦
      ** +--------------------------------------+
 
      **   Timestamp selected
     D @TMESTPSEL      S             26Z
 
 
      ** +--------------------------------------+
      ** ¦ End of D-specs                       ¦
      ** ¦ ==============                       ¦
      ** +--------------------------------------+
      *****************************************************************
      /EJECT
      *****************************************************************
     C
      ** +--- Start of Main processing -----------------------------------+
      ** ¦                                                                ¦
      ** ¦ Initial processing is performed automatically: the *INZSR is   ¦
      ** ¦ executed at program activation.                                ¦
      ** ¦                                                                ¦
      ** +----------------------------------------------------------------+
      *
      * Initialisation
     C                   EXSR      INIT
      *
      * Build Sub-file
     C                   IF        @BDSFL = 'Y'
     C                   EXSR      BLDSFL
     C                   ENDIF
      *
      * Read Subfile Record
     C                   IF        @RDSFL = 'Y'
     C                   EXSR      RDSFLR
     C                   ENDIF
      *
      * Return
     C                   RETURN
      *
      ********************************************************************
      /EJECT
      ********************************************************************
      * BLDSFL - BUILD SUBFILE
      ********************************************************************
     C     BLDSFL        BEGSR
      *
      * CHECK FOR USER AUTHORITY TO BROWSE IF NOT MULTI-BRANCHING
      *
     C                   IF        BJSBRC <> *BLANK
     C                   EXSR      CHAUTN
     C                   ENDIF
      *
      **  Initialise subfile relative record number.
     C                   Z-ADD     0             @@RRN             5 0
      *
      **  Clear subfile before refilling by writing control record
      **  with SFLCLR active.
     C                   EVAL      *IN97 = *ON
     C                   WRITE     SKFfffS0
     C                   EVAL      *IN97 = *OFF
      *
      **  If previous transaction was not successful due to deal being
      **  updated by another workstation then display message on screen
     C                   IF        @ERRUP = 'Y'
     C                   EVAL      ERRORMSG = ErrorText(1)
     C                   ELSE
     C                   EVAL      ERRORMSG = *BLANKS
     C                   ENDIF
      *
      **  Write the select screen footer to the screen.
     C                   WRITE     SKFfffF1
      *
      **  Set file pointer to start of file
     C     *LOVAL        SETLL     SKIFfffL0
      *
      * Read an invalid transaction
     C                   EXSR      RDITRAN
      *
      **  If no records exist - set up an error message.
      **  Display a message 'No invalid transactions present'
      **  then terminate
     C                   IF        @@EOF = 'Y'
     C                   EVAL      @ERRMS = 'FXM1007'
     C                   EXFMT     SKFfffEND
     C                   SETON                                        LR
     C                   RETURN
     C                   ENDIF
      *
      **  Set on ROLLUP indicator to drive initial loop.
     C                   EVAL      *IN98 = *ON
      *
      **  Read records from the file into the subfile until a page has
      **  been filled or there are no more records.
      **  Repeat the process until either the end of file, ROLLUP
      **  has not been entered or F3 or F12 is input.
     C                   DOW       @@EOF <> 'Y' AND
     C                             *IN98 = *ON
      *
      **  Initialise count of records written to subfile page.
     C                   Z-ADD     0             @@CNT             3 0
      *
      **  For each record read, write it to the subfile.
      **  Do this until end of file or the subfile page is full.
     C                   DOW       @@EOF <> 'Y' AND
     C                             @@CNT < 14
      *
      **  Increment the subfile record no. and records written fields.
     C                   EVAL      @@RRN = 1 + @@RRN
     C                   EVAL      @@CNT = 1 + @@CNT
      *
      **  Write the invalid transaction to the subfile.
     C                   EVAL      DDOPT = *BLANK
     C                   EVAL      DDSFRN = @@RRN
     C                   MOVE      DDTMESTMP     D@TMESTMP
     C                   WRITE     SKFfffS1
      *
      * Read an invalid transaction
     C                   EXSR      RDITRAN
     C                   ENDDO
      *
      *
      **  Write the subfile control record to the screen to display
      **  the subfile.
     C                   WRITE     SKFFFFS0
      *
      **  Read the subfile control record to determine whether records
      **  have been selected or whether ROLLUP is required.
     C                   READ      SKFfffS0                               99
      *
      **  If F3, bypass further processing.
     C                   IF        *INKC = *ON
     C                   EVAL      @INKC = '1'
     C                   SETON                                        LR
     C                   RETURN
     C                   ENDIF
      *
      **  If F12, bypass further processing.
     C                   IF        *INKL = *ON
     C                   EVAL      @INKL = '1'
     C                   RETURN
     C                   ENDIF
      *
     C                   ENDDO
      *
     C                   ENDSR
      ********************************************************************
      /EJECT
      ********************************************************************
      * RDSFLR - READ SUBFILE RECORD
      ********************************************************************
     C     RDSFLR        BEGSR
      *
      **  Read the subfile for selected records
      **  Only process those for which the option field is blank.
     C                   DOU       *IN99 = *ON OR
     C                             DDOPT <> *BLANK
     C                   READC     SKFfffS1                               99
      *
      * Validate repair option code
     C                   IF        *IN99 = *OFF
     C                   EXSR      VALID_ROPT
     C                   ENDIF
      *
      ** If 'E' is input, enquire upon invalid transaction
     C                   IF        *IN99 = *OFF AND
     C                             DDOPT = 'E'
     C                   MOVE      D@TMESTMP     @TMESTPSEL
     C                   EXSR      ENQ_INV
     C                   EVAL      DDOPT = *BLANK
     C                   ENDIF
      *
      ** If 'Q' is input, prompt for deletion of invalid transaction
     C                   IF        *IN99 = *OFF AND
     C                             DDOPT = 'Q'
     C                   EXSR      PROM_DELT
     C                   EVAL      DDOPT = *BLANK
     C                   ENDIF
     C                   ENDDO
      *
      **  Return the selected option, action, front office transaction ID
      **  and front office associated transaction ID
     C                   IF        *IN99 <> *ON AND
     C                             DDOPT <> *BLANK
      *
     C                   EVAL      @OPSEL = DDOPT
     C                   EVAL      @ACSEL = DDACTN
     C                   EVAL      @TRNN  = DDTRNN
     C                   EVAL      @FOTRANSEL = DDFOTRANID
     C                   EVAL      @TMESTPSEL = D@TMESTMP
      *
     C                   ENDIF
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * VALID_ROPT - VALIDATE REPAIR OPTION CODE
      *****************************************************************
     C     VALID_ROPT    BEGSR
      *
     C                   CALLB     'ZAROPTVAL'
 
      * Inputs
 
      * Return Code
     C                   PARM      *BLANK        RetCodeOut
      * Option code
      * Front Office ID
      * Booking Branch
     C                   PARM                    DDOPT
     C                   PARM                    DDFOTRANID
     C                   PARM                    DDBRSN
 
      * ICD Single branch code
     C                   PARM                    BJSBRC
 
      * Outputs
 
      * Function Keys
     C                   PARM      '0'           @INKC
     C                   PARM      '0'           @INKL
      *
      **  If F3, bypass further processing.
      *
     C                   IF        @INKC = '1'
     C                   SETON                                        LR
     C                   RETURN
     C                   ENDIF
      *
      **  If F12, continue with next option
      *
     C                   IF        @INKL = '1'
     C                   EVAL      DDOPT = *BLANK
     C                   ENDIF
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * ENQ_INV - ENQUIRE ON INVALID TRANSACTION
      *****************************************************************
     C     ENQ_INV       BEGSR
 
      * Pass the invalid transaction details to the enquiry
 
     C     ZATRNKX0      CHAIN     SKIFfffX0                          99
      *
     C                   CALLB     'ZAINVTRENQ'
 
      * Inputs
 
      * Return Code
     C                   PARM      *BLANK        RetCodeOut
      * Action code
      * Front Office ID
      * Associated Front Office ID
      * Timestamp
     C                   PARM                    DDACTN
     C                   PARM                    DDFOTRANID
     C                   PARM                    DDFOASOCID
     C                   PARM                    D@TMESTMP
 
      * Invalid file names
     C                   PARM      'SKIFfffPD'   InvFile1         10
     C                   PARM      '         '   InvFile2         10
     C                   PARM      '         '   InvFile3         10
     C                   PARM      '         '   InvFile4         10
 
      * Invalid file data
     C                   PARM      InvSk         InvFDta1       4000
     C                   PARM      *BLANKS       InvFDta2       4000
     C                   PARM      *BLANKS       InvFDta3       5000
     C                   PARM      *BLANKS       InvFDta4       5000
 
      * Outputs
 
      * Function Keys
     C                   PARM      '0'           @INKC
     C                   PARM      '0'           @INKL
      *
      **  If F3, bypass further processing.
      *
     C                   IF        @INKC = '1'
     C                   SETON                                        LR
     C                   RETURN
     C                   ENDIF
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * PROM_DELT - PROMPT FOR DELETION
      *****************************************************************
     C     PROM_DELT     BEGSR
      *
     C                   CALLB     'ZAINVTRDEL'
      *
      * Inputs
      *
      * Return Code
     C                   PARM      *BLANK        RetCodeOut
      *
      * Action code
     C                   PARM                    DDACTN
      *
      * Front Office Trans ID & Front Office Associated Trans ID
     C                   PARM                    DDFOTRANID
     C                   PARM                    DDFOASOCID       20
      *
      * Timestamp
     C                   PARM                    D@TMESTMP
      *
      * Narrative & Field Content 1 - 9
     C                   PARM                    DDNAR1           30
     C                   PARM      DDCLAS        DDFLD1           35
     C                   PARM                    DDNAR2           30
     C                   PARM      DDPCYC        DDFLD2           35
     C                   PARM                    DDNAR3           30
     C                   PARM      DDCYCD        DDFLD3           35
     C                   PARM                    DDNAR4           30
     C                   PARM      DDACCD        DDFLD4           35
     C                   PARM                    DDNAR5           30
     C                   PARM      DDACSN        DDFLD5           35
     C                   PARM                    DDNAR6           30
     C                   PARM      DDSTFQ        DDFLD6           35
     C                   PARM                    DDNAR7           30
     C                   PARM      DDSNSD        DDFLD7           35
     C                   PARM                    DDNAR8           30
     C                   PARM      DDSBDM        DDFLD8           35
     C                   PARM                    DDNAR9           30
     C                   PARM      DDADCD        DDFLD9           35
      *
      * Outputs
      *
      * Function Keys
     C                   PARM      '0'           @INKC             1
     C                   PARM      '0'           @INKJ             1
     C                   PARM      '0'           @INKL             1
      *
      **  If F3, bypass further processing.
      *
     C                   IF        @INKC = '1'
     C                   SETON                                        LR
     C                   RETURN
     C                   ENDIF
      *
      **  If F10, delete invalid transaction
      *
     C                   IF        @INKJ = '1'
     C                   MOVE      D@TMESTMP     @TMESTPSEL
     C     ZATRNKD0      CHAIN     SKIFfffD0                          99
     C  N99              DELETE    SKIFfffD0
     C                   COMMIT
     C                   ENDIF
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * RDITRAN - READ AN INVALID TRANSACTION
      *****************************************************************
     C     RDITRAN       BEGSR
      *
      **  Reset End of File indicator
      *
     C                   MOVE      *BLANK        @@EOF             1
      *
      **  Read the file.
      *
     C                   READ      SKIFfffL0                              96
 
      **  Get Transaction Details
     C                   CLEAR                   DDCSSN
     C                   CLEAR                   DDCRNM
     C                   CALL      'AOCUSTR0'
     C                   PARM      *blanks       @RTCD
     C                   PARM      '*KEY   '     @OPTN
     C                   PARM      DDTRNN        @TRNN            10
     C                   PARM      *BLANKS       @CNST             7
     C     SDCUST        PARM      SDCUST        DSSDY
     C                   IF        @RTCD = *blanks
     C                   EVAL      DDCSSN    =   BBCSSN
     C                   EVAL      DDCRNM    =   BBCRNM
     C                   ENDIF
      *
      *
      * End of File
     C                   IF        *IN96 = *ON
     C                   EVAL      @@EOF = 'Y'
     C                   ENDIF
      *
     C     ERDDEL        ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * CHAUTN - CHECK FOR USER AUTHORITY IF NOT MULTI-BRANCHING
      *****************************************************************
     C     CHAUTN        BEGSR
      *
     C                   CALL      'ZVACTU'
     C                   PARM      'E'           ZACTN             1
     C                   PARM                    @@ERR             1 0
      *
      * Return error message
     C                   IF        @@ERR = 1
     C                   EVAL      @ERRMS = 'FXM0292'
     C                   RETURN
     C                   ENDIF
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * RTVTXT - RETRIEVE TEXT
      *****************************************************************
     C     RTVTXT        BEGSR
     C                   CALL      'SDRTVTXT'
     C                   PARM                    MSGDNB            7
     C                   PARM      'ZZGBMSGF  '  MSGNM            10
     C                   PARM      *BLANK        MSGTXT           80
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * INIT - Initialisation
      *****************************************************************
     C     INIT          BEGSR
      *
      * Clear outputs
     C                   EVAL      @ERRMS = *BLANK
     C                   EVAL      @OPSEL = *BLANK
     C                   EVAL      @ACSEL = *BLANK
     C                   EVAL      @TRNN  = *BLANK
     C                   EVAL      @FOTRANSEL = *BLANK
     C                   CLEAR                   @TMESTPSEL
     C                   EVAL      @INKC = '0'
     C                   EVAL      @INKL = '0'
      *
     C                   ENDSR
      ********************************************************************
      /EJECT
      *****************************************************************
      * *INZSR - INITIAL PROCESSING
      *****************************************************************
     C     *INZSR        BEGSR
      *
      * Parameters
      *
     C     *ENTRY        PLIST
      *
      * Input parameters
      *
      * Return code
     C                   PARM                    RetCodeIn
      *
      * Build sub-file
     C                   PARM                    @BDSFL            1
      *
      * Read subfile record
     C                   PARM                    @RDSFL            1
      *
      * Error in update of previous deal
     C                   PARM                    @ERRUP            1
      *
      * Output parameters
      *
      * Error message
     C                   PARM                    @ERRMS            7
      *
      * Option selected
     C                   PARM                    @OPSEL            1
      *
      * Action selected
     C                   PARM                    @ACSEL            1
      *
      * FO Transaction ID selected
     C                   PARM                    @FOTRANSEL       20
      *
      * Transaction Number
     C                   PARM                    @TRNN
      *
      * Timestamp of Transaction selected
     C                   PARM                    @TMESTPSEL
      *
      * Command Keys
     C                   PARM                    @INKC
     C                   PARM                    @INKL
      *
      ** Initialise program name
      *
     C                   EVAL      DBPGM = 'SKFfffRPB'
      *
      ** Move workstation ID to screen field.
     C                   EVAL      DDUSER = PsUser
     C                   EVAL      DDWID = PsJobName
      *
      ** Access bank details
     C                   CALL      'AOBANKR0'
     C                   PARM      '*DBERR '     @RTCD             7
     C                   PARM      '*FIRST '     @OPTN             7
     C     SDBANK        PARM      SDBANK        DSFDY
      *
      * Database error
     C                   IF        @RTCD <> *BLANKS
     C                   EVAL      DBFILE = 'SDBANKPD'
     C                   EVAL      DBASE = '901'
     C                   EVAL      DBKEY = @OPTN
     C                   EXSR      *PSSR
     C                   ENDIF
 
      ** Program, module and procedure names for dbase error processing
      ** ==============================================================
      ** The following /COPY sets these values.
      /COPY ZACPYSRC,DBFIELDS
      *
      * Key Lists
     C     ZATRNKD0      KLIST
     C                   KFLD                    DDFOTRANID
     C                   KFLD                    @TMESTPSEL
     C     ZATRNKX0      KLIST
     C                   KFLD                    @TMESTPSEL
     C                   KFLD                    DDFOTRANID
      *
      * Format text for invalid transaction deletion function
     C                   EVAL      MSGDNB = 'ZZM2822'
     C                   EXSR      RTVTXT
     C                   EVAL      DDNAR1 = MSGTXT
     C                   EVAL      MSGDNB = 'ZZM2823'
     C                   EXSR      RTVTXT
     C                   EVAL      DDNAR2 = MSGTXT
     C                   EVAL      MSGDNB = 'ZZM2824'
     C                   EXSR      RTVTXT
     C                   EVAL      DDNAR3 = MSGTXT
     C                   EVAL      MSGDNB = 'ZZM2825'
     C                   EXSR      RTVTXT
     C                   EVAL      DDNAR4 = MSGTXT
     C                   EVAL      MSGDNB = 'ZZM2825'
     C                   EXSR      RTVTXT
     C                   EVAL      DDNAR5 = MSGTXT
     C                   EVAL      MSGDNB = 'ZZM3641'
     C                   EXSR      RTVTXT
     C                   EVAL      DDNAR6 = MSGTXT
     C                   EVAL      MSGDNB = 'ZZM2826'
     C                   EXSR      RTVTXT
     C                   EVAL      DDNAR7 =  MSGTXT
     C                   EVAL      MSGDNB =  'ZZM2827'
     C                   EXSR      RTVTXT
     C                   EVAL      DDNAR8 =  MSGTXT
     C                   EVAL      MSGDNB =  'ZZM2828'
     C                   EXSR      RTVTXT
     C                   EVAL      DDNAR9 =  MSGTXT
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * *PSSR  - Program exception error routine                      *
      *          Called automatically if a program error occurs,      *
      *          or directly by the program code using EXSR.          *
      *          This subroutine DUMPs the program, and performs      *
      *          a ROLLBACK.                                          *
      *                                                               *
      *****************************************************************
      ** The following /COPY contains the standard program status
      ** subroutine, including a bound call to the DBERRCTL module.
     C/COPY ZACPYSRC,PSSR_ILE
 
         Note: if non-standard processing required, use the PSSR_ILENE
         subroutine
      ****************************************************************
      /EJECT
      ****************************************************************
**  Array of error messages - ErrorText
The last transaction was not applied to the database
