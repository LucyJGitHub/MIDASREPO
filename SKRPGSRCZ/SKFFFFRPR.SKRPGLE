     H DEBUG
     H COPYRIGHT('(c) Finastra International Limited 2007')
      *****************************************************************
/*STD *  RPGBASEMOD                                                   *
      *****************************************************************
      *                                                               *
      *  Midas - Module name   ILE Module                             *
      *                                                               *
      *  SKFfffRPR - INVALID xxxxxxxxxxxxxxxxx DETAILS                *
      *              REPAIR FUNCTION                                  *
      *                                                               *
      *  Function:  This function allows invalid xxxxxxxx details to  *
      *             be 'repaired' and applied to the Midas database.  *
      *                                                               *
      *  (c) Finastra International Limited 2007                      *
      *                                                               *
      *  Last Amend No. CAP0nn  *CREATE    Date ddMmmyy               *
      *  Prev Amend No. xxxxxx             Date ddMmmyy               *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *  CAP0nn - Conversion of Mm inputs into modular structure to   *
      *           use as APIs.                                        *
      *                                                               *
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ F-specs                              ¦
      ** ¦ =======                              ¦
      ** +--------------------------------------+
 
     FZATRNERRL0IF   E           K DISK    INFSR(*PSSR)
 
     FSKIFfffL0 IF   E           K DISK    INFSR(*PSSR)
     F                                     RENAME(SKIFfffD0:SKIFfffX0)
     FSKIFfffL1 UF   E           K DISK    INFSR(*PSSR)
     F                                     COMMIT
 
      * Hook to enable non-core files to be included
      /COPY WNCPYSRC,SKFfffR001
 
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ Automatically included D-specs       ¦
      ** ¦ ==============================       ¦
      ** +--------------------------------------+
      **
      **------------------------------------------------------------------
      ** The following /COPY line includes (among others) the LDA layout
      ** and the copyright array definition:
     D/COPY ZACPYSRC,STD_D_SPEC
      **------------------------------------------------------------------
 
      **------------------------------------------------------------------
      ** The following /COPY includes the MM standard declares:
     D/COPY ZACPYSRC,STDDECLARE
      **------------------------------------------------------------------
 
      **------------------------------------------------------------------
      ** The following /COPY line includes all the defined fields in the
      ** Program Status Data Structures.  They have meaningful
      ** names, prefixed by 'PS'.
     D/COPY ZACPYSRC,PSDS
      **------------------------------------------------------------------
 
      **------------------------------------------------------------------
      ** The following /COPY line includes the definitions for error and
      ** warning message arrays.
     D/COPY ZACPYSRC,ERR_ARRAYS
      **------------------------------------------------------------------
 
      ** +--------------------------------------+
      ** ¦ End of automatically included D-specs¦
      ** ¦ =====================================¦
      ** +--------------------------------------+
 
      *****************************************************************
      /EJECT
      *****************************************************************
 
      ** +--------------------------------------+
      ** ¦ Manually included D-specs            ¦
      ** ¦ =========================            ¦
      ** +--------------------------------------+
 
      ** +--------------------------------------+
      ** ¦ Named constants                      ¦
      ** ¦ ===============                      ¦
      ** +--------------------------------------+
 
      ** +--------------------------------------+
      ** ¦ Arrays and Data Structures           ¦
      ** ¦ ==========================           ¦
      ** +--------------------------------------+
 
     D @EI             S              1    DIM(60)
 
      ** Array of Fields in error, temporary store
     D TmpFldNmAr      S             10A   DIM(ArrayMax)
      ** Array of error message IDs, temporary store
     D TmpMsgIdAr      S                   DIM(ArrayMax)
     D                                     LIKE(#MsgID)
 
      * Current xxxxx Transaction in File Format
     D CrTrFilFmt    E DS                  EXTNAME(SKTranFlPD)
     D                                     PREFIX(C_)
 
      * Current xxxxx Transaction in Screen Format
     D CurTrScrn     E DS                  EXTNAME(SKFFFFPD)
     D                                     PREFIX(@)
 
      * New xxxxx Transaction in File Format
     D NwTrFilFmt    E DS                  EXTNAME(SKVFFFFPD)
 
      * New xxxxx Transaction in Screen Format
     D NewTrScrn     E DS                  EXTNAME(SKFFFFPD)
 
      * Previous xxxxx Transaction in Screen Format
     D PrvTrScrn     E DS                  EXTNAME(SKFFFFPD)
     D                                     PREFIX(@P)
 
      * Error indicators
     D OKTrFfff      E DS                  EXTNAME(SKEFfffPD)
 
     D SDBANK        E DS                  EXTNAME(SDBANKPD)
      ** External DS for Bank Details
 
     D SDMMOD        E DS                  EXTNAME(SDMMODPD)
      ** External DS for Midas Modules Details
 
     D SCSARD        E DS                  EXTNAME(SCSARDPD)
     D SCA_LCD       E                     EXTFLD(LCD)
      ** External DS for SAR Details
 
     D SDAPI         E DS                  EXTNAME(SDAPIPD)
      ** External DS for API ICD
 
     D DSFDY         E DS                  EXTNAME(DSFDY)
      ** First DS for Access Programs, Short Data Structure
 
     D DSSDY         E DS                  EXTNAME(DSSDY)
      ** Second DS for Access Programs, Long Data Structure
 
     D ExtData       E DS                  EXTNAME(SKFfEXPD)
      * Mm Transaction Extra Data - File (D/B) format
 
      ** Changed Party Names Array
     D ChgNamArr       S              1    DIM(5)
 
      ** +--------------------------------------+
      ** ¦ Declared variables                   ¦
      ** ¦ ==================                   ¦
      ** +--------------------------------------+
 
      **   Timestamp selected
     D @TMESTPSEL      S             26Z
 
      ** Response Mode, passed as a constant parameter to the VAL module
      ** This is always 'S' for Synchronous
     D RespMode        S              1A   INZ('S')
 
      ** Transaction Number / Reference
     D DDTRNN          S              6A
 
      ** -----------------------------------------------------------------
      ** Fields for getting the starting field number from file (parameters
      ** to ZACGTFLDNO, plus the offset to the requested field).
     D FormatA         S             10A   INZ('SKFfffPD')
 
     D FieldA          S             10A   INZ('DDFLD1')
 
     D FldOffsetA      S              5P 0
 
     D FieldNo         S              5P 0
 
      ** End of fields for getting starting field number
 
      ** -----------------------------------------------------------------
 
     D WKTRNN          S                   LIKE(DDTRNN)
 
      ** Flags to indicate whether substitution is required in
      ** each of the various parts the transaction
     D RepFfff         S              1A   inz('N')
      ** -----------------------------------------------------------------
 
      ** +--------------------------------------+
      ** ¦ End of D-specs                       ¦
      ** ¦ ==============                       ¦
      ** +--------------------------------------+
 
      ** +----------------------------------------+
      ** ¦ Hook for non-core D-specs (all types)  ¦
      ** ¦ also any I-specs (if necessary)        ¦
      ** ¦ =====================================  ¦
      ** +----------------------------------------+
      /COPY WNCPYSRC,SKFfffR002
 
      *****************************************************************
      /EJECT
      *****************************************************************
     C
      ** +--- Start of Main processing -----------------------------------+
      ** ¦                                                                ¦
      ** ¦ Initial processing is performed automatically: the *INZSR is   ¦
      ** ¦ executed at program activation.                                ¦
      ** ¦                                                                ¦
      ** +----------------------------------------------------------------+
      *
      /COPY WNCPYSRC,SKFfffR003
      *
      * Issue rollback to clear any possible updates in window functions
     C                   IF        @INKL = '1'
     C                   ROLBK
     C                   ENDIF
      *
      /COPY WNCPYSRC,SKFfffR004
      *
      * DO Screen: Browse Invalid Inputs
     C                   IF        @SCRN = 'I'
     C                   EXSR      SCRN@I
     C                   ENDIF
      *
      /COPY WNCPYSRC,SKFfffR005
      *
      ** Read next browse subfile record
     C                   IF        @SCRN = 'R'
     C                   EXSR      RDNBRW
     C                   ENDIF
      *
      /COPY WNCPYSRC,SKFfffR006
      *
      ** DO WHILE screen
     C                   EXSR      SNDM@A
     C                   Z-ADD     *ZERO         WIdx              3 0
     C                   DOW       @SCRN = 'A'
     C                   EXSR      SCRN@A
     C                   ENDDO
      *
      /COPY WNCPYSRC,SKFfffR011
      *
      ** Do File updates
     C                   IF        @SCRN = 'U'
     C                   EXSR      UPDATS
     C                   ENDIF
      *
      /COPY WNCPYSRC,SKFfffR012
      *
      ** Terminate program
     C                   IF        @SCRN = 'T'
     C                   EVAL      *INLR = *ON
     C                   ENDIF
 
      * Hook to enable non-core subroutines to be included
      /COPY WNCPYSRC,SKFfffR013
 
      /EJECT
      *****************************************************************
      * SCRN@I - BROWSE INVALID TRANSACTIONS
      *****************************************************************
     C     SCRN@I        BEGSR
      *
      * Reset read next browse Subfile Record
     C                   MOVEL     *BLANK        @RDNB             1
      *
      * Build Browse Subfile
     C                   CALLB     'SKFfffRPB'
      *
      * Input Parameters
      * Return Code
     C                   PARM      *BLANK        RetCodeOut
      *
      * Build Sub-File
     C                   PARM      'Y'           @BDSFL            1
      *
      * Read Subfile Record
     C                   PARM      *BLANK        @RDSFL            1
      *
      * Error in update of previous deal
     C                   PARM                    @ERRUP            1
      *
      * Output Parameters
      *
      * Error Message
     C                   PARM      *BLANK        @ERRMS            7
      *
      * Option Selected
     C                   PARM                    @OPSEL            1
      *
      * Action Selected
     C                   PARM                    @ACSEL            1
      *
      * FO Transaction ID Selected
     C                   PARM                    @FOTRANSEL       20
      *
      * Midas Transaction Number
     C                   PARM      *blanks       DDTRNN
      *
      * Timestamp of Transaction Selected
     C                   PARM                    @TMESTPSEL
      *
      * Command Keys
     C                   PARM      '0'           @INKC             1
     C                   PARM      '0'           @INKL             1
      *
      * If error set on external switches
     C                   IF        @ERRMS <> *BLANK
     C                   EVAL      *INU6 = *ON
     C                   ENDIF
      *
      * If CK/3 or CK/12 taken in browse, or error message
      * End program
     C                   IF        @INKC = '1' OR
     C                             @INKL = '1' OR
     C                             @ERRMS <> *BLANK
     C                   EXSR      ENDA
     C                   GOTO      ESCRN@I
     C                   ENDIF
      *
      * Read next browse subfile record
     C                   EVAL      @RDNB = 'Y'
     C                   EVAL      @SCRN = 'R'
      *
     C     ESCRN@I       ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * RDNBRW - READ NEXT BROWSE SUBFILE RECORD
      *****************************************************************
     C     RDNBRW        BEGSR
      *
      * Read Next Subfile Record
     C                   CALLB     'SKFfffRPB'
      *
      * Input Parameters
      *
      * Return Code
     C                   PARM      *BLANK        RetCodeOut
      *
      * Build Sub-File
     C                   PARM      *BLANK        @BDSFL
      *
      * Read Subfile Record
     C                   PARM      'Y'           @RDSFL
      *
      * Error in update of previous deal
     C                   PARM                    @ERRUP
      *
      * Output Parameters
      *
      * Error Message
     C                   PARM      *BLANK        @ERRMS
      *
      * Option Selected
     C                   PARM      *BLANK        @OPSEL
      *
      * Action Selected
     C                   PARM      *BLANK        @ACSEL
      *
      * FO Transaction ID Selected
     C                   PARM      *BLANK        @FOTRANSEL
      *
      * Midas Transaction Number
     C                   PARM      *BLANK        DDTRNN
      *
      * Timestamp of Transaction Selected
     C                   PARM                    @TMESTPSEL
      *
      * Command Keys
     C                   PARM      '0'           @INKC
     C                   PARM      '0'           @INKL
      *
      * If CK/3 taken within invalid transaction deletion function,
      * End program
     C                   IF        @INKC = '1'
     C                   EXSR      ENDA
     C                   GOTO      ERDNBRW
     C                   ENDIF
      *
      * If invalid customer read from subfile
     C                   IF        @OPSEL <> *BLANK
      *
      * Clear file formats
     C                   CLEAR                   NwTrFilFmt
      *
      * Blank the Screens
     C                   Eval      WKTRNN = DDTRNN
     C                   CLEAR                   NewTrScrn
      *
      * Reset Errors
     C                   MOVE      *ALL'Y'       OKTrFfff
     C                   EVAL      FldNameArr = *BLANK
     C                   EVAL      MsgIdArr = *BLANK
     C                   EVAL      MsgDtaArr = *BLANK
     C                   Z-ADD     0             Idx
     C                   EVAL      WFldNamArr = *BLANK
     C                   EVAL      WMsgIdArr = *BLANK
     C                   EVAL      WMsgDtaArr = *BLANK
     C                   Z-ADD     0             WIdx
      *
      * Retrieve Transaction details
     C                   EVAL      DDTRNN =WKTRNN
     C                   EVAL      DDACTN = @ACSEL
     C                   EVAL      SEFRNT = @FOTRANSEL
      *
      * Make sure Invalid transaction's  details are passed to 'Retrieve'
      * module for SPF checking .
     C     ZATRNKX0      CHAIN     SKIFfffX0                          99
      *
     C                   EXSR      RTVTRN
      *
      * If xxxxx Transaction details were retrieved
      * Convert to screen format.
      *
     C                   IF        C_FLTRNN <> *BLANK AND
     C                             DDACTN <> 'I'
     C                   EXSR      CVTTRN
     C                   MOVEL     CrTrFilFmt    NwTrFilFmt
     C                   ENDIF
      *
      * Now overwite the fields on the main details screen with those
      * on the invalid Transactions file (except for the Midas Transaction
      * reference retrieved above using the front office transaction ID).
      * Access invalid transaction with timestamp and front office transaction ID.
      *
      * Transaction details:
     C                   MOVEL     DDTRNN        ##DDTRNN          6
     C     ZATRNKX0      CHAIN     SKIFfffX0                          99
      *
      * If Transaction details were retrieved and this is an amendment
      *
     C                   IF        C_BFTRNN <> *BLANK AND
     C                             DDACTN = 'A'
 
      * Data Substitution - Transaction Details
 
     C                   IF        GHSUBS <> *BLANK
 
     C     GHSUBS        SCAN      NewTrScrn                              99
     C                   IF        *IN99 = *ON
     C                   EVAL      RepFfff = 'Y'
     C                   ENDIF
 
      ** If any of the flags set above is true, do the data
      ** substitution subroutine.
     C                   IF        RepFfff = 'Y'
     C                   EXSR      TDtDtaSubs
     C                   ENDIF
 
     C                   ENDIF
 
 
     C                   ENDIF
      *
      * If action code, or Transaction reference were NOT OK
      * blank out action code so that the input cannot proceed
      *
     C                   IF        DDACTNOK = 'N' OR
     C                             DDTRNNOK = 'N'
     C                   EVAL      DDACTN = *BLANK
     C                   ENDIF
      *
      * Send the Transactions error messages to the details screen
      * and GO TO DETAILS SCREEN
      *
     C                   EXSR      SNDM@A
     C                   EVAL      @SCRN = 'A'
 
      * Else if No Invalid Transaction Read from Subfile
      *
     C                   ELSE
      *
      * Go to browse screen
      *
     C                   EVAL      @SCRN = 'I'
     C                   ENDIF
      *
     C     ERDNBRW       ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * SNDM@A - SEND A MESSAGE TO DETAILS SCREEN
      *****************************************************************
     C     SNDM@A        BEGSR
 
     C                   Z-ADD     Idx           E                 3 0
      *
      ** If there are fundamental errors in this transaction
      ** Identify this fact.
      *
     C                   IF        DDACTNOK = 'N' OR
     C                             DDTRNNOK = 'N'
     C                   ADD       1             E
      *
      * Ensure that the message 'TRANSACTION CANNOT PROCEED' is seen
      * first by the user
      *
     C                   EVAL      TmpfldNmAr = *BLANKS
     C                   EVAL      TmpMsgIdAr = *BLANKS
     C                   MOVEA     FldNameArr    TmpFldNmAr
     C                   MOVE      *BLANKS       FldNameArr(1)
     C                   MOVEA     TmpFldNmAr    FldNameArr(2)
     C                   MOVEA     MsgIdArr      TmpMsgIdAr
     C                   MOVE      *BLANKS       MsgIdArr(1)
     C                   MOVEA     TmpMsgIdAr    MsgIdArr(2)
     C                   MOVEL     '*ANY'        FldNameArr(1)
     C                   MOVEL     'APM0110'     MsgIdArr(1)
     C                   ENDIF
      *
      ** Initialise error indicators
      *
     C                   MOVEA     OKTrFfff      @EI
      *
      ** Read error messages for Transactions
      *
     C     ZATRNKD0      SETLL     ZATRNERRD0
     C     ZATRNKD0      READE     ZATRNERRD0                             99
      *
      ** Add error message to array passed to detail screen
      ** and set OK flag for field to 'N'
      *
     C                   DOW       *IN99 = '0'
 
     C                   CALLB     'ZACGTFLDNO'
     C                   PARM      *BLANK        ReturnCode
     C                   PARM                    FormatA
     C                   PARM                    ABFIELDNAM
     C                   PARM      *ZERO         FieldNo
 
     C                   IF        ReturnCode = *blank
     C                   ADD       1             E
     C                   MOVEL     ABFIELDNAM    FldNameArr(E)
     C                   MOVEL     ABMSGID       MsgIdArr(E)
     C                   Z-ADD     ABFIELDID     F                 3 0
     C                   SUB       FldOffsetA    F
     C                   IF        F < 1 OR
     C                             F > 60
     C                   EVAL      F = 1
     C                   ENDIF
     C                   MOVE      'N'           @EI(F)
     C                   ENDIF
 
     C     ZATRNKD0      READE     ZATRNERRD0                             99
     C                   ENDDO
      *
     C                   MOVEA     @EI           OKTrFfff
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * SCRN@A - PROCESS SCREEN
      *****************************************************************
     C     SCRN@A        BEGSR
      *
      * Enable/disable detail fields on primary details screen
      * if changes to the data are allowed
      * (key fields = action code & Transaction reference; detail fields = rest)
      * (Action code can only be 'I', 'A', 'D', or 'E')
      *
     C                   IF        DDACTN = 'I' AND
     C                             @OPSEL = 'U' OR
     C                             DDACTN = 'A' AND
     C                             @OPSEL = 'U'
     C                   EVAL      @EDTFD = 'Y'
     C                   ELSE
     C                   EVAL      @EDTFD = 'N'
     C                   ENDIF
      *
      * KJ = COMMAND KEY 10 = CONFIRM DELETE
     C                   IF        DDACTN = 'D'
     C                   EVAL      @EINKJ = 'Y'
     C                   ELSE
     C                   EVAL      @EINKJ = 'N'
     C                   ENDIF
 
      * Update 'previous' screen
     C                   EVAL      PrvTrScrn = NewTrScrn
      *
      * Set function key status on PRIMARY screen
     C                   EXSR      SFKEYS
      *
      ** WRITE/READ DISPLAY SCREEN
      *
     C                   CALLB     'SKFfffDSP'
      *                  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
      * Input Parameters :
      * Return code
     C                   PARM      *BLANK        RetCodeOut
      *
      * Transaction (IN SCREEN FORMAT - Primary)
     C                   PARM                    NewTrScrn
      *
      * Fields in error
     C                   PARM                    OKTrFfff
 
      ** Transaction Shortname
     C                   PARM                    DDCSSN
 
      ** Customer Report Name
     C                   PARM                    DDCRNM
 
      ** Customer Report Town
     C                   PARM                    DDCRTN
 
      ** Depot Shortnames Array
     C                   PARM                    DepotSn
 
      *
      * Errors
     C                   PARM                    FldNameArr
     C                   PARM                    MsgIdArr
     C                   PARM                    MsgDtaArr
      *
      * Warnings
     C                   PARM                    WFldNamArr
     C                   PARM                    WMsgIdArr
     C                   PARM                    WMsgDtaArr
      *
      * Enabled Key & Detail Fields
      *
     C                   PARM      'N'           @EKYFD            1
     C                   PARM                    @EDTFD            1
      *
      *
      * Enabled Function Keys
      * KG = Command Key 07 = Read Previous
      * KH = Command Key 08 = Read Next
      * KX = Command Key 23 = Further Details
     C                   PARM                    @EINKJ            1
      *
      * Output Parameters :
      * Function Keys
     C                   PARM      '0'           @INKC
     C                   PARM      '0'           @INKG             1
     C                   PARM      '0'           @INKH             1
     C                   PARM      '0'           @INKJ             1
     C                   PARM      '0'           @INKL             1
      *
      * Reset Errors ....
      *
     C                   MOVE      *ALL'Y'       OKTrFfff
     C                   EVAL      FldNameArr =  *BLANK
     C                   EVAL      MsgIdArr   =  *BLANK
     C                   EVAL      MsgDtaArr  =  *BLANK
     C                   EVAL      WFldNamArr =  *BLANK
     C                   EVAL      WMsgIdArr  =  *BLANK
     C                   EVAL      WMsgDtaArr =  *BLANK
      *
      * F3 - End Program
     C     @INKC         CASEQ     '1'           ENDA
      *
      * F12 - Cancel on Screen
     C     @INKL         CASEQ     '1'           CANC@A
      *
      * Validate input to screen
     C                   CAS                     VAL@A
     C                   ENDCS
 
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * VAL@A  - VALIDATE INPUT TO DETAILS SCREEN
      *****************************************************************
     C     VAL@A         BEGSR
      *
      * Retrieve xxxxx Transaction details
      *
     C                   EXSR      RTVTRN
      *
      * If action code, or Transaction reference are NOT OK
      * Re-output screen with error messages on it
      *
     C                   IF        DDACTNOK = 'N' OR
     C                             DDTRNNOK = 'N'
     C                   GOTO      EndVAL@A
     C                   ENDIF
      *
      *----------------------------------------------------------------
      * If Delete
      *
     C                   IF        DDACTN = 'D'
      *
      * If CK/10 Taken, Go Onto Updates
      *
     C                   IF        @EINKJ = 'Y'
     C                   EVAL      @SCRN = 'U'
     C                   ENDIF
     C                   GOTO      EndVAL@A
     C                   ENDIF
      *
      *----------------------------------------------------------------
      * Prior to validation, initialise error indicators as 'OK'
      * and clear Transaction in File Format
      *
     C                   Z-ADD     *ZERO         Idx               3 0
     C                   MOVE      *ALL'Y'       OKTrFfff
     C                   CLEAR                   NwTrFilFmt
      *
      * Store current number of warnings
 
     C                   Z-ADD     WIdx          PrvN_Warn         3 0
 
      *
      * Validate xxxxx Transaction details
      *
     C                   CALLB     'SKFfffVAL'
      *                  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
      * INPUTS :
 
      * Response mode
     C                   PARM                    RespMode
 
      ** Transaction Primary Details
     C                   PARM                    NewTrScrn
 
      * Outputs:
 
      ** Transaction Primary Details OK inds
     C                   PARM                    OKTrFfff
 
      * Error fields/message IDs/message data (arrays) from/to caller
     C                   PARM                    FldNameArr
     C                   PARM                    MsgIDArr
     C                   PARM                    MsgDtaArr
      * Array index (3P0) from/to caller
     C                   PARM                    Idx
 
      * Warning fields/message IDs/message data (arrays) from/to caller
     C                   PARM                    WFldNamArr
     C                   PARM                    WMsgIDArr
     C                   PARM                    WMsgDtaArr
 
      * Array index (3P0) from/to caller
     C                   PARM                    WIdx
 
      * Valid Transaction layout (DS) from/to caller
     C                   PARM                    NwTrFilFmt
      *
      * If errors returned
     C                   IF        Idx <> 0
     C                   GOTO      EndVAL@A
     C                   ENDIF
      *
      *
      * If any screen defaulting or reformatting has occurred in validation
      * or if the number of warnings has changed, re-display the screen
      *
     C                   IF        NewTrScrn <> PrvTrScrn OR
     C                             WIdx <> PrvN_Warn
     C                   GOTO      EndVAL@A
     C                   ENDIF
      *
      * Clear any warning messages
      *
     C                   MOVE      *ALL'Y'       OKTrFfff
     C                   EVAL      @SCRN = 'U'
      *
     C     EndVAL@A      ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * RTVTRN - RETRIEVE Transaction
      *****************************************************************
     C     RTVTRN        BEGSR
      *
      * Retrieve Transaction
      *
     C                   CALLB     'SKFfffRTV'
      *                  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
      * Inputs :
      * Return code
     C                   PARM      *BLANK        RetCodeOut
      *
      * Mode = '*FRONT' (FRONT OFFICE TRANSACTION INTERFACE)
      * MODE = '      ' (NOT FRONT OFFICE TRANSACTION INTERFACE)
     C                   PARM                    @@MODE            6
      *
      * Response mode
     C                   PARM      'S'           @@RSMD            1
      *
      * Action Code
     C                   PARM                    DDACTN
      *
      * Front Office Transaction ID
     C                   PARM      @FOTRANSEL    SEFRNT
      *
      * (Midas) Transaction number
     C                   PARM                    DDTRNN            6
      *
      * Key Screen customer number / shortname entry
     C                   PARM                    DDCSST           10
      *
      * Outputs :
      * (Current) Transaction in file format
     C                   PARM                    CrTrFilFmt
      *
      * OK - Action code
     C                   PARM      *BLANK        DDACTNOK
      *
      * OK - Transaction Reference
     C                   PARM      *BLANK        DDTRNNOK
      *
      ** Customer Shortname
     C                   PARM                    DDCSSN
 
      ** Customer Report Name
     C                   PARM                    DDCRNM
 
      ** Customer Report Town
     C                   PARM                    DDCRTN
      ** Depot Shortnames Array
     C                   PARM                    DepotSn
      *
      * Error fields/message IDs/message data (arrays) from/to caller
     C                   PARM                    FldNameArr
     C                   PARM                    MsgIdArr
     C                   PARM                    MsgDtaArr
      *
      * Array index (3P0) from/to caller
     C                   PARM      *ZERO         Idx
      *
     C     EndRTVTRN     ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * CVTTRN - PUT A Transaction ON THE SCREEN
      *****************************************************************
     C     CVTTRN        BEGSR
      *
      * Call program to fill screen fields with data
      *
     C                   CALLB     'SKFFFFCVT'
      *
      * Inputs :
      * Return Code
      * Transaction in file format
     C                   PARM      *BLANK        RetCodeOut
     C                   PARM                    CrTrFilFmt
      * Outputs
      * Transaction - screen formats
     C                   PARM                    NewTrScrn
 
      *
      * Update 'Current' Transaction with Transaction in Screen Format
      *
     C                   MOVEL     NewTrScrn     CurTrScrn
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * CANC@A - CANCEL ON DETAILS SCREEN
      *****************************************************************
     C     CANC@A        BEGSR
      *
      * If Records are still to be read from the subfile, read them
      *
     C                   IF        @RDNB = 'Y'
     C                   EVAL      @SCRN = 'R'
     C                   ELSE
      *
      * Else, return to the browse screen
      *
     C                   EVAL      @SCRN = 'I'
     C                   ENDIF
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * UPDATS - UPDATES
      *****************************************************************
     C     UPDATS        BEGSR
      *
      * Update valid transaction: transaction reference
      *
     C                   EVAL      SETRNN = DDTRNN
     C                   EVAL      SETYLC = DDACTN
      *
      ** Carry forward file data to valid file
     C                   EVAL      SESRCD = @DDSRCD
     C                   EVAL      SENARR = @DDNARR
      *
     C                   IF        DDACTN = 'A'
      ** Carry forward number of trades value to valid file field
     C                   EVAL      SENTFC = C_FlNTFC
 
     C                   ELSE
 
     C                   IF        DDACTN = 'I'
 
      ** Initialise number of trades field for Insert
     C                   EVAL      SENTFC = 0
     C                   ENDIF
     C                   ENDIF
     C                   EVAL      @RTCD = *BLANK
      *
      * xxxxxxxxx Transaction details updates
      *
     C                   CALLB     'SKFfffUPD'
     C                   PARM      *BLANKS       @RTCD
     C                   PARM                    NwTrFilFmt
      *
      *
      * If there were any errors in the update functions, rollback any
      * updates and end this program.
      * Otherwise delete the invalid trancsaction actioned & commit the updates.
      *
     C                   IF        @RTCD <> *BLANK AND
     C                             @RTCD <> '*RECUPD'
     C                   ROLBK
     C                   EXSR      *PSSR
     C                   ELSE
     C     ZATRNKD0      CHAIN     SKIFfffD0                          99
     C  N99              DELETE    SKIFfffD0
     C                   COMMIT
     C                   ENDIF
      *
      * If error occurred in updating last transaction set on flag to
      * display message on 'browse' screen.
     C                   IF        @RTCD = '*RECUPD'
     C                   EVAL      @ERRUP = 'Y'
     C                   ELSE
     C                   EVAL      @ERRUP = 'N'
     C                   ENDIF
     C
      * If records are still to be read from the subfile, read them
      *
     C                   IF        @RDNB = 'Y'
     C                   EVAL      @SCRN = 'R'
     C                   ELSE
      *
      * Else, return to the browse screen
      *
     C                   EVAL      @SCRN = 'I'
     C                   ENDIF
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * SFKEYS - SET FUNCTION KEY STATUS ON SCREEN
      *****************************************************************
     C     SFKEYS        BEGSR
      *
      * Enable/disable function keys
      *
      * KG = COMMAND KEY 07 = READ PREVIOUS TRANSACTION
      * KH = COMMAND KEY 08 = READ NEXT TRANSACTION
      *
     C                   EVAL      @INKG = '0'
     C                   EVAL      @INKH = '0'
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * ENDA - End Program
      *****************************************************************
     C     ENDA          BEGSR
      *
     C                   EVAL      @SCRN = 'T'
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * TDtDtaSubs - Transaction Details Data Substitution            *
      *                                                               *
      *****************************************************************
 
     C     TDtDtaSubs    BEGSR
 
      ** Substitute the data for the various parts of the transaction,
      ** dependent on the flags that were set earlier.
 
     C                   IF        RepFfff = 'Y'
 
     C                   RESET                   ReturnCode
     C                   CLEAR                   IncData
     C                   CLEAR                   CurData
     C                   CALLB     'APDTASUBS'
 
      * Return Code
     C                   PARM                    ReturnCode       10
      * Substitution character
     C                   PARM      GHSUBS        SubsChar          1
      * Incoming Data
     C                   PARM      NewTrScrn     IncDATA        2000
      * Current Data
     C                   PARM      CurTrScrn     CurDATA        2000
 
     C                   MOVEL     IncDATA       NewTrScrn
 
     C                   ENDIF
 
 
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * INITIAL Go To Initial Screen
      *****************************************************************
     C     INITIAL       BEGSR
      *
      * Go to primary screen
     C                   EVAL      @SCRN = 'A'
      *
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      * *INZSR - INITIAL PROCESSING
      *****************************************************************
     C     *INZSR        BEGSR
      *
      *
      * Parameters if Repair program needs to be called from a CL pgm
      * which passes parameters.  If not, remove parameter list.
     C     *ENTRY        PLIST
      *
      * Inputs
      *
      * xxxxxx Transaction NUMBER
     C                   PARM                    DUMMY1            6
      *
      * Action Code
     C                   PARM                    DUMMY2            1
      *
      ** Initialise program name
     C                   EVAL      DBPGM = 'SKFfffRPR'
      *
      ** Access bank details
     C                   CALLB     'AOBANKR0'
     C                   PARM      *BLANKS       @RTCD             7
     C                   PARM      '*FIRST '     @OPTN             7
     C     SDBANK        PARM      SDBANK        DSFDY
      *
      * Database error
     C                   IF        @RTCD <> *BLANKS
     C                   EVAL      DBFILE = 'SDBANKPD'
     C                   EVAL      DBASE = '901'
     C                   EVAL      DBKEY = @OPTN
     C                   EXSR      *PSSR
     C                   ENDIF
      *
      ** Access SAR details file to determine if CAP050
      ** (Midas/ToF Interface) is on.
     C                   CALLB     'AOSARDR0'
     C                   PARM      *BLANKS       @RTCD
     C                   PARM      '*VERIFY'     @OPTN
     C                   PARM      'CAP050'      @SARD
     C     SCSARD        PARM      SCSARD        DSFDY
      *
      * Database Error
     C                   IF        @RTCD <> *BLANKS AND
     C                             @RTCD <> '*NRF   '
     C                   MOVEL     'SCSARDPD'    DBFILE
     C                   MOVEL     '909'         DBASE
     C                   MOVEL     'CAP050'      DBKEY
     C                   EXSR      *PSSR
     C                   ENDIF
      *
     C                   IF        @RTCD = *BLANK
     C                   MOVEL     'Y'           CAP050            1
     C                   ELSE
     C                   MOVEL     'N'           CAP050
     C                   ENDIF
      *
      * Set retrieve mode to '*FRONT' (Access using Front Office ID)
      *  if insert
      *  if not insert and Midas transaction ID is not present
      * Otherwise
      *  Set retrieve mode to blank  (Access using Midas transaction ID).
     C                   IF        DDACTN = 'I'
     C                   EVAL      @@MODE = '*FRONT'
     C                   ELSE
     C                   IF        DDTRNN = *BLANK
     C                   EVAL      @@MODE = '*FRONT'
     C                   ELSE
     C                   EVAL      @@MODE = '      '
     C                   ENDIF
     C                   ENDIF
 
      ** Program, module and procedure names for dbase error processing
      ** ==============================================================
      ** The following /COPY sets these values.
      /COPY ZACPYSRC,DBFIELDS
      *
      * Key Lists
     C     ZATRNKD0      KLIST
     C                   KFLD                    @FOTRANSEL
     C                   KFLD                    @TMESTPSEL
     C     ZATRNKX0      KLIST
     C                   KFLD                    @TMESTPSEL
     C                   KFLD                    @FOTRANSEL
 
 
      ** Get the field number for the action code field; the primary
      ** screen fields start from that number.  Subtract one from it to
      ** give the value to subtract from each field's number.
     C                   CALLB     'ZACGTFLDNO'
     C                   PARM                    ReturnCode
     C                   PARM                    FormatA
     C                   PARM                    FieldA
     C                   PARM      *ZERO         FieldNo
 
     C                   IF        ReturnCode = *blank
     C                   EVAL      FldOffsetA = FieldNo - 3
     C                   ENDIF
      *
      * Start on Browse Screen
     C                   MOVEL     'I'           @SCRN             1
      *
 
      *  Hook to enable non-core initial processing to be included
      /COPY WNCPYSRC,SKFfffR014
 
     C                   ENDSR
      *****************************************************************
      /EJECT
      *****************************************************************
      *                                                               *
      * *PSSR  - Program exception error routine                      *
      *          Called automatically if a program error occurs,      *
      *          or directly by the program code using EXSR.          *
      *          This subroutine DUMPs the program, and performs      *
      *          a ROLLBACK.                                          *
      *                                                               *
      *****************************************************************
      ** The following /COPY contains the standard program status
      ** subroutine, including a bound call to the DBERRCTL module.
     C/COPY ZACPYSRC,PSSR_ILE
 
         Note: if non-standard processing required, use the PSSR_ILENE
         subroutine
      ****************************************************************
