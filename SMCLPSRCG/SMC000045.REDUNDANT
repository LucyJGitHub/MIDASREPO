/*********************************************************************/
/*S*D****CLPBASEBND***************************************************/
/*********************************************************************/
/*                                                                   */
/*       Midas - Implementation module                               */
/*                                                                   */
/*       SMC000045 - Copy data for submitted job                     */
/*                                                                   */
/*       (c) Misys International Banking Systems Ltd. 2007           */
/*                                                                   */
/*-------------------------------------------------------------------*/
/* This program monitors for a large and specific set of messages    */
/* which may be generated by the CPYF commands.  If this monitoring  */
/* is amended in any way the following programs may also need to be  */
/* changed:                                                          */
/*             SMC000037                                             */
/*             SMC000038                                             */
/*             UPC0245                                               */
/*             UPC0246                                               */
/*             UPC0259                                               */
/*             UPC0263                                               */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*                                                                   */
/*       Last Amend No. CUP003  *REDUNDANT Date 02Aug10              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/*       Prev Amend No. CUP038  *CREATE    Date 13Sep07              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       CUP003 - Made redundant by multi-stream migration.          */
/*       CUP038 - Reorganisation of migration tools.                 */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&LIBF &LIBT &ODOBNM &ODOBTP &ODOBAT +
                          &CRT &MODE)
 
             DCL        VAR(&LIBF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ODOBNM) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ODOBTP) TYPE(*CHAR) LEN(8)
             DCL        VAR(&ODOBAT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CRT) TYPE(*CHAR) LEN(4)
             DCL        VAR(&MODE) TYPE(*CHAR) LEN(14)
 
             DCL        VAR(&RERUN) TYPE(*CHAR) LEN(4) VALUE('*YES')
             DCL        VAR(&SINGLE) TYPE(*CHAR) LEN(1) VALUE('Y')
             DCL        VAR(&ERRORMSG) TYPE(*CHAR) LEN(100)
             DCL        VAR(&SM40RTN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)
             DCL        VAR(&IN01) TYPE(*LGL)
 
             COPYRIGHT TEXT('(c) Misys International Banking Systems Ltd. +
                          2007')
 
/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))
 
/* Create temporary file to hold error messages for report. */
             DLTF       FILE(QTEMP/UPERRMQT)
             MONMSG     MSGID(CPF2105)
             CRTPF      FILE(QTEMP/UPERRMQT) RCDLEN(100) +
                          TEXT('Temporary file for holding error +
                          messages')
 
/* Create and rename temporary source file for RUNSQLSTM. */
             IF         COND(&MODE *EQ '*PREALPHACUST') THEN(DO)
                DLTF       FILE(QTEMP/RUNSQLSTM)
                MONMSG     MSGID(CPF0000)
                DLTF       FILE(QTEMP/RUNSQL)
                MONMSG     MSGID(CPF0000)
                CRTSRCPF   FILE(QTEMP/RUNSQLSTM) RCDLEN(112) +
                             MBR(RUNSQLSTM) TEXT('Temporary source +
                             file for SMC000259')
                RNMOBJ     OBJ(QTEMP/RUNSQLSTM) OBJTYPE(*FILE) +
                             NEWOBJ(RUNSQL)
             ENDDO
 
             IF         COND(%SST(&ODOBAT 1 2) *EQ 'PF') THEN(DO)
 
/* Before attempting copy check if file exists in both libraries */
/*  and that members match.                                      */
                CALL       PGM(UPC0262) PARM(&ODOBNM &LIBF &LIBT)
                IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
 
/* To avoid clashes with the main migration program create temporary copies */
/*  of the DSPFFD and DSPFD *MBRLIST outfiles.                              */
                IF         COND(&MODE *EQ '*PREALPHACUST') THEN(DO)
                   CRTDUPOBJ  OBJ(UPFFDSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                                TOLIB(QTEMP)
                   CRTDUPOBJ  OBJ(UPMBRLTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                                TOLIB(QTEMP)
                   RMVLIBLE   LIB(QTEMP)
                   MONMSG     MSGID(CPF0000)
                   ADDLIBLE   LIB(QTEMP)
 
/* Call program to check if file has been affected by Customer Number */
/*  change.  If it has then the migration will be handled by          */
/*  SMC000040.  Otherwise a CPYF will be attempted.                   */
                   OVRDBF     FILE(UPFFDSTPD) TOFILE(QTEMP/UPFFDSTPD)
                   OVRDBF     FILE(UPMBRLTPD) TOFILE(QTEMP/UPMBRLTPD)
                   CALL       PGM(SM000040) PARM(&ODOBNM &ODOBTP &LIBF +
                                &LIBT &RERUN &SINGLE &SM40RTN)
                   DLTOVR     FILE(UPFFDSTPD UPMBRLTPD)
                   IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                         CHGVAR     VAR(&ERRORMSG) VALUE('Unexpected error in +
                                      SM000040.  Check dump.')
                         CALL       PGM(UP008010) PARM('*WRITE ' 'SMC000045 ' +
                                      &ERRORMSG)
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                   IF         COND(&SM40RTN *EQ '*ERROR') THEN(DO)
                      CHGVAR     VAR(&ERRORMSG) VALUE(&ODOBNM *TCAT ', type' +
                                   *BCAT &ODOBTP *BCAT 'failed when updating +
                                   Customer Number.')
                      CALL       PGM(UP008010) PARM('*WRITE ' 'SMC000045 ' +
                                   &ERRORMSG)
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                   IF         COND(&SM40RTN *EQ '*NOTFOUND') THEN(DO)
                      GOTO       CMDLBL(CPYDTA)
                   ENDDO
                   IF         COND(&SM40RTN *EQ ' ') THEN(DO)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                ENDDO
 
CPYDTA:
                CHGVAR     VAR(&MSGID) VALUE(' ')
 
                CPYF       FROMFILE(&LIBF/&ODOBNM) +
                           TOFILE(&LIBT/&ODOBNM) FROMMBR(*ALL) +
                           TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                           CRTFILE(&CRT) FMTOPT(*NONE)
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NONE) - Category 1        */
/*                                                                   */
/* First category of monitored messages are critical errors and will */
/* be flagged as failed without attempting other types of CPYF as    */
/* they would also fail.                                             */
/*********************************************************************/
/* If to-file does not exist then end. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2861) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
/* If from-file does not exist */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2802) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If insufficient authority to either from-file or to-file. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2864) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2862) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If from-file has more fields than to-file, treat as error. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2965) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If, because of overrides, utility thinks it is copying to itself. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2874) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If from-file or to-file is locked, or to-file is in use. */
                MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If to-file has insufficient allowed number of members. */
                MONMSG     MSGID(CPF2888) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If from-file not found; this error may be caused by an existing */
/*  override.                                                      */
                MONMSG     MSGID(CPF2875) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If error in writing to 'to' member then it is unable to work    */
/*  out why; therefore flag as failure.                            */
                MONMSG     MSGID(CPF2972) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NONE) - Category 2        */
/*                                                                   */
/* Second category of monitored messages are non-critical errors and */
/* will be flagged as completed without attempting other types of    */
/* as they would also fail.                                          */
/*********************************************************************/
/* If from-file has no members or its only member is empty */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
                   RMVM       FILE(&LIBT/&ODOBNM) MBR(*ALL)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NONE) - Category 3        */
/*                                                                   */
/* Third category of monitored messages are for possibly critical    */
/* errors but further CPYFs should be attempted.                     */
/*********************************************************************/
/* If different FMTOPT required. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2969) EXEC(DO)
                   GOTO       CMDLBL(TAG02)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2963) EXEC(DO)
                   GOTO       CMDLBL(TAG02)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2962) EXEC(DO)
                   GOTO       CMDLBL(TAG02)
                ENDDO
 
/* If CPYF worked then read next record. */
                GOTO       CMDLBL(ENDPGM)
 TAG02:
                CPYF       FROMFILE(&LIBF/&ODOBNM) +
                           TOFILE(&LIBT/&ODOBNM) FROMMBR(*ALL) +
                           TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                           CRTFILE(&CRT) FMTOPT(*MAP *DROP)
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*MAP *DROP) - Category 1   */
/*                                                                   */
/* It is possible that a message from the 3rd category for the first */
/* CPYF was received first; therefore, some category 1 errors must   */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file or to-file is locked, or to-file is in use. */
                MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If to-file has insufficient allowed number of members. */
                MONMSG     MSGID(CPF2888) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If to-file has incorrect data in any fields. */
                MONMSG     MSGID(CPF2972) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*MAP *DROP) - Category 2   */
/*                                                                   */
/* It is possible that a message from the 3rd category for the first */
/* CPYF was received first; therefore, some category 2 errors must   */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file has no members or its only member is empty. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*MAP *DROP) - Category 3   */
/*                                                                   */
/* Third category of monitored messages are for possibly critical    */
/* errors but further CPYFs should be attempted.                     */
/*********************************************************************/
/* If different FMTOPT required */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2963) EXEC(DO)
                   GOTO       CMDLBL(TAG03)
                ENDDO
 
/* If CPYF worked then read next record */
                GOTO       CMDLBL(ENDPGM)
 TAG03:
                CPYF       FROMFILE(&LIBF/&ODOBNM) +
                           TOFILE(&LIBT/&ODOBNM) FROMMBR(*ALL) +
                           TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                           CRTFILE(&CRT) FMTOPT(*NOCHK)
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NOCHK) - Category 1       */
/*                                                                   */
/* It is possible that a message from the 3rd category for the       */
/* second CPYF was received first; therefore, some category 1 errors */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file or to-file is locked, or to-file is in use. */
                MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If to-file has insufficient allowed number of members. */
                MONMSG     MSGID(CPF2888) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NOCHK) - Category 2       */
/*                                                                   */
/* It is possible that a message from the 3rd category for the       */
/* second CPYF was received first; therefore, some category 2 errors */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file has no members or its only member is empty */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
 
             ENDDO
 
             IF         COND(&ODOBTP *EQ *DTAARA) THEN(DO)
/* Check if it exists in 'to' library; if it doesn't then copy rec. */
                CHKOBJ     OBJ(&LIBT/&ODOBNM) OBJTYPE(*DTAARA)
                MONMSG     MSGID(CPF9801) EXEC(DO)
                   IF         COND(&CRT *EQ '*NO') THEN(DO)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                   IF         COND(&CRT *EQ '*YES') THEN(DO)
                      CRTDUPOBJ  OBJ(&ODOBNM) FROMLIB(&LIBF) OBJTYPE(*DTAARA) +
                                   TOLIB(&LIBT)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                ENDDO
 
/* Call program to check if data area has been affected by Customer */
/*  Number change.  If it has then the migration will be handled by */
/*  SM000040.  Otherwise a CPYDTAARA will be attempted.             */
                IF         COND(&MODE *EQ '*PREALPHACUST') THEN(DO)
                   CALL       PGM(SM000040) PARM(&ODOBNM &ODOBTP &LIBF +
                                &LIBT &RERUN &SINGLE &SM40RTN)
                   IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                      CHGVAR     VAR(&ERRORMSG) VALUE('Unexpected error in +
                                   SM000040.  Check dump.')
                      CALL       PGM(UP008010) PARM('*WRITE ' 'SMC000045 ' +
                                   &ERRORMSG)
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                   IF         COND(&SM40RTN *EQ '*ERROR') THEN(DO)
                      CHGVAR     VAR(&ERRORMSG) VALUE(&ODOBNM *TCAT ', type' +
                                   *BCAT &ODOBTP *BCAT 'failed when updating +
                                   Customer Number.')
                      CALL       PGM(UP008010) PARM('*WRITE ' 'SMC000045 ' +
                                   &ERRORMSG)
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                   IF         COND(&SM40RTN *EQ '*NOTFOUND') THEN(DO)
                      GOTO       CMDLBL(CPYDTAARA)
                   ENDDO
                   IF         COND(&SM40RTN *EQ ' ') THEN(DO)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                ENDDO
CPYDTAARA:
                CPYDTAARA FMDTAARA(&LIBF/&ODOBNM) +
                                  TODTAARA(&LIBT/&ODOBNM)
                MONMSG     MSGID(CPF0000) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
             ENDDO
 
             IF         COND(&ODOBTP *EQ *DTAQ) THEN(DO)
/* Check if it exists in 'to' library; if it doesn't then copy rec. */
                CHKOBJ     OBJ(&LIBT/&ODOBNM) OBJTYPE(*DTAQ)
                MONMSG     MSGID(CPF9801) EXEC(DO)
                   IF         COND(&CRT *EQ '*NO') THEN(DO)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                   IF         COND(&CRT *EQ '*YES') THEN(DO)
                      CPYDTAQ    FMDTAQ(&LIBF/&ODOBNM) TODTAQ(&LIBT/&ODOBNM) +
                                   CRTDTAQ(*YES)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                ENDDO
                CPYDTAQ    FMDTAQ(&LIBF/&ODOBNM) TODTAQ(&LIBT/&ODOBNM)
                MONMSG     MSGID(CPF0000 RPG0000 MCH0000) EXEC(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
             ENDDO
 
             GOTO       CMDLBL(ENDPGM)
 
ERROR:
/* Recursive error */
             IF         COND(&IN01) THEN(DO)
                SNDPGMMSG  MSGID(CPF9898) MSGF(*LIBL/QCPFMSG) +
                             MSGDTA('Recursive error in pgm +
                             SMC000045') MSGTYPE(*ESCAPE)
             ENDDO
 
             CHGVAR     VAR(&IN01) VALUE('1')
ERROR2:
/* Receive escape error message. */
             RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                          MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
/* Pass it back to calling program. */
             SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                          MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
 
ENDPGM:
             CALL       PGM(UP008010) PARM('*REPORT' 'SMC000045' ' ')
 
             ENDPGM
