/*********************************************************************/
/*XBI    OVRDBF FILE(SMC000054F) TOFILE(UPFDBATPD)                   */
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas SM CPP for CHGCCSIDSM')                         */
/*********************************************************************/
/*                                                                   */
/*       Midas - Implementation                                      */
/*                                                                   */
/*       SMC000054 - CPP for CHGCCSIDSM command.                     */
/*                                                                   */
/*       (c) Misys International Banking Systems Ltd. 2008           */
/*                                                                   */
/*       Last Amend No. MD020013           Date 11Apr13              */
/*       Prev Amend No. A1084804           Date 28Jan13              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/*                      256038  *REWRITE   Date 06Aug08              */
/*                      BG18582  *CREATE   Date 10Apr08              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD020013 - Change the way that the job is submitted.        */
/*                - Monitor for the libraries not existing.          */
/*       A1084804 - Monitor for more problems.  Hnadle BF schemas    */
/*                  too.                                             */
/*       256038 - Rewrite of utility to change CCSIDs for database.  */
/*       BG18582 - Enhancements to changing CCSIDs.                  */
/*                                                                   */
/*********************************************************************/
/**********  PGM        PARM(&LAYER &PREFIX &CCSID &SBMJOB &JOBD)                    */ /*MD020013*/
             PGM        PARM(&LAYER &PREFIX &CCSID)                                     /*MD020013*/
 
             DCL        VAR(&LAYER) TYPE(*CHAR) LEN(7)
             DCL        VAR(&PREFIX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&CCSID) TYPE(*CHAR) LEN(5)
/**********  DCL        VAR(&SBMJOB) TYPE(*CHAR) LEN(4)                              */ /*MD020013*/
/**********  DCL        VAR(&JOBD) TYPE(*CHAR) LEN(10)                               */ /*MD020013*/
 
             DCL        VAR(&TYPE) TYPE(*CHAR) LEN(1)
             DCL        VAR(&NO_RESTORE) TYPE(*CHAR) LEN(1)
             DCL        VAR(&COUNT) TYPE(*DEC) LEN(1 0) VALUE(0)
             DCL        VAR(&MLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&PLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ZLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&BFLIB) TYPE(*CHAR) LEN(10)                                 /*A1084804*/
             DCL        VAR(&CBSLIB) TYPE(*CHAR) LEN(10)                                /*A1084804*/
             DCL        VAR(&CBALIB) TYPE(*CHAR) LEN(10)                                /*A1084804*/
             DCL        VAR(&SVAL1) TYPE(*CHAR) LEN(200)                                /*A1084804*/
             DCL        VAR(&GPFX) TYPE(*CHAR) LEN(2)                                   /*A1084804*/
             DCL        VAR(&ERRMSG) TYPE(*CHAR) LEN(100)
             DCL        VAR(&BF) TYPE(*CHAR) LEN(1)                                     /*MD020013*/
             DCL        VAR(&CBA) TYPE(*CHAR) LEN(1)                                    /*MD020013*/
             DCL        VAR(&CBS) TYPE(*CHAR) LEN(1)                                    /*MD020013*/
 
             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) VALUE(N)
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)
 
             DCLF       FILE(SMC000054F)
 
             COPYRIGHT TEXT('(c) Misys International Banking Systems Ltd. +
                          2008')
 
/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))
 
/* Check if job is to be submitted byt only if this job is interactive. */
             RTVJOBA    TYPE(&TYPE)
/**********  IF         COND(&TYPE *EQ '1') THEN(DO)                                 */ /*MD020013*/
/**********     IF         COND(&SBMJOB *EQ '*YES') THEN(DO)                         */ /*MD020013*/
/**...*and*submit*job.**/ /*                                                         */ /*MD020013*/
/**********        SBMJOB     CMD(CALL PGM(SMC000054) PARM(&LAYER &PREFIX +          */ /*MD020013*/
/**********                     &CCSID &SBMJOB &JOBD)) JOB(CHGCCSIDS) +              */ /*MD020013*/
/**********                     JOBD(&JOBD) OUTQ(*JOBD)                              */ /*MD020013*/
/**********        GOTO       CMDLBL(ENDPGM)                                         */ /*MD020013*/
/**********     ENDDO                                                                */ /*MD020013*/
/**********  ENDDO                                                                   */ /*MD020013*/
 
/* Create temporary file to hold error messages. */
             DLTF       FILE(QTEMP/UPERRMQT)
             MONMSG     MSGID(CPF2105)
             CRTPF      FILE(QTEMP/UPERRMQT) RCDLEN(100) +
                          TEXT('Temporary file for holding error +
                          messages')
 
/* Build list of files built over file. */
             DLTF       FILE(QTEMP/SMC000054F)
             MONMSG     MSGID(CPF0000)
             DLTF       FILE(QTEMP/FDBA)
             MONMSG     MSGID(CPF0000)
             CRTDUPOBJ  OBJ(UPFDBATPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(SMC000054F)
 
/* Set up master outfile for database relations. */
             DLTF       FILE(QTEMP/SMC100057F)
             MONMSG     MSGID(CPF0000)
             CRTDUPOBJ  OBJ(UPDBRLTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(SMC100057F)
 
/* Set up library names. */
             IF         COND(&LAYER *EQ '*ZONE  ') THEN(DO)
                CHGVAR     VAR(&MLIB) VALUE(&PREFIX *TCAT 'DMLIB')
                CHGVAR     VAR(&PLIB) VALUE(&PREFIX *TCAT 'DPLIB')
                CHGVAR     VAR(&TLIB) VALUE(&PREFIX *TCAT 'DTALIB')
                CHGVAR     VAR(&ZLIB) VALUE(&PREFIX *TCAT 'DZLIB')
/* Get global prefix. */                                                                /*A1084804*/
                CALL       PGM(AOSVALR0) PARM(' ' +
                             'BrgMidasGlobalPrefix' &SVAL1 ' ' ' ' ' ' +
                             ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' +
                             ' ' ' ' ' ' ' ' ')                                         /*A1084804*/
                IF         COND(%SST(&SVAL1 1 4) *EQ '*NRF') THEN(DO)                   /*A1084804*/
                   GOTO       CMDLBL(ERROR)                                             /*A1084804*/
                ENDDO                                                                   /*A1084804*/
                CHGVAR     VAR(&GPFX) VALUE(%SST(&SVAL1 1 2))                           /*A1084804*/
                CHGVAR     VAR(&BFLIB) VALUE(&PREFIX *TCAT &GPFX *TCAT +
                             'BFLIB')                                                   /*A1084804*/
                CHGVAR     VAR(&CBALIB) VALUE(&PREFIX *TCAT &GPFX *TCAT +
                             'CBALIB')                                                  /*A1084804*/
                CHGVAR     VAR(&CBSLIB) VALUE(&PREFIX *TCAT &GPFX *TCAT +
                             'CBSLIB')                                                  /*A1084804*/
             ENDDO
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
                CHGVAR     VAR(&MLIB) VALUE(&PREFIX *TCAT 'GMLIB')
                CHGVAR     VAR(&PLIB) VALUE(&PREFIX *TCAT 'GPLIB')
                CHGVAR     VAR(&TLIB) VALUE(&PREFIX *TCAT 'GTALIB')
                CHGVAR     VAR(&BFLIB) VALUE(&PREFIX *TCAT 'BFLIB')                     /*A1084804*/
                CHGVAR     VAR(&CBALIB) VALUE(&PREFIX *TCAT 'CBALIB')                   /*A1084804*/
                CHGVAR     VAR(&CBSLIB) VALUE(&PREFIX *TCAT 'CBSLIB')                   /*A1084804*/
             ENDDO
 
/* Build up list of physical files in database. */
             DSPFD      FILE(&MLIB/*ALL) TYPE(*BASATR) +
                          OUTPUT(*OUTFILE) FILEATR(*PF) +
                          OUTFILE(QTEMP/FDBA) OUTMBR(*FIRST *ADD)
             MONMSG     MSGID(CPF3012 CPF3020)
             DSPFD      FILE(&PLIB/*ALL) TYPE(*BASATR) +
                          OUTPUT(*OUTFILE) FILEATR(*PF) +
                          OUTFILE(QTEMP/FDBA) OUTMBR(*FIRST *ADD)
             MONMSG     MSGID(CPF3012 CPF3020)
             DSPFD      FILE(&TLIB/*ALL) TYPE(*BASATR) +
                          OUTPUT(*OUTFILE) FILEATR(*PF) +
                          OUTFILE(QTEMP/FDBA) OUTMBR(*FIRST *ADD)
             MONMSG     MSGID(CPF3012 CPF3020)
             DSPFD      FILE(&BFLIB/*ALL) TYPE(*BASATR) +
                          OUTPUT(*OUTFILE) FILEATR(*PF) +
                          OUTFILE(QTEMP/FDBA) OUTMBR(*FIRST *ADD)                       /*A1084804*/
             MONMSG     MSGID(CPF3064 CPF3012) EXEC(DO)                                 /*MD020013*/
                CHGVAR     VAR(&BF) VALUE('N')                                          /*MD020013*/
             ENDDO                                                                      /*MD020013*/
             MONMSG     MSGID(CPF3012 CPF3020)
             DSPFD      FILE(&CBALIB/*ALL) TYPE(*BASATR) +
                          OUTPUT(*OUTFILE) FILEATR(*PF) +
                          OUTFILE(QTEMP/FDBA) OUTMBR(*FIRST *ADD)                       /*A1084804*/
             MONMSG     MSGID(CPF3064 CPF3012) EXEC(DO)                                 /*MD020013*/
                CHGVAR     VAR(&CBA) VALUE('N')                                         /*MD020013*/
             ENDDO                                                                      /*MD020013*/
             MONMSG     MSGID(CPF3012 CPF3020)
             DSPFD      FILE(&CBSLIB/*ALL) TYPE(*BASATR) +
                          OUTPUT(*OUTFILE) FILEATR(*PF) +
                          OUTFILE(QTEMP/FDBA) OUTMBR(*FIRST *ADD)                       /*A1084804*/
             MONMSG     MSGID(CPF3064 CPF3012) EXEC(DO)                                 /*MD020013*/
                CHGVAR     VAR(&CBS) VALUE('N')                                         /*MD020013*/
             ENDDO                                                                      /*MD020013*/
             IF         COND(&LAYER *EQ '*ZONE  ') THEN(DO)
                DSPFD      FILE(&ZLIB/*ALL) TYPE(*BASATR) +
                             OUTPUT(*OUTFILE) FILEATR(*PF) +
                             OUTFILE(QTEMP/FDBA) OUTMBR(*FIRST *ADD)
                MONMSG     MSGID(CPF3012 CPF3020)
             ENDDO
 
/* If there are any physical files then copy to driving file. */
             CHKOBJ     OBJ(QTEMP/FDBA) OBJTYPE(*FILE)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                CHGVAR     VAR(&ERRMSG) VALUE('There are no physical +
                          files to change.')
                CALL       PGM(UP008010) PARM('*WRITE ' 'SMC000054 ' +
                             &ERRMSG)
                GOTO       CMDLBL(REPORT)
             ENDDO
             CPYF       FROMFILE(QTEMP/FDBA) +
                          TOFILE(QTEMP/SMC000054F) MBROPT(*REPLACE) +
                          FMTOPT(*MAP *DROP)
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2869)
 
/* Call program to remove records from driving file for those files that have */
/*  set CCSIDs.                                                               */
             CALL       PGM(SM000005)
 
/* Set up overrides for calls to UTC000002. */
             DLTF       FILE(QTEMP/MCST)
             MONMSG     MSGID(CPF0000)
             DLTF       FILE(QTEMP/PCST)
             MONMSG     MSGID(CPF0000)
             DLTF       FILE(QTEMP/TCST)
             MONMSG     MSGID(CPF0000)
             DLTF       FILE(QTEMP/BCST)                                                /*A1084804*/
             MONMSG     MSGID(CPF0000)                                                  /*A1084804*/
             DLTF       FILE(QTEMP/ACST)                                                /*A1084804*/
             MONMSG     MSGID(CPF0000)                                                  /*A1084804*/
             DLTF       FILE(QTEMP/SCST)                                                /*A1084804*/
             MONMSG     MSGID(CPF0000)                                                  /*A1084804*/
             DLTF       FILE(QTEMP/ZCST)
             MONMSG     MSGID(CPF0000)
             CRTDUPOBJ  OBJ(UPFDCSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(MCST)
             CRTDUPOBJ  OBJ(UPFDCSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(PCST)
             CRTDUPOBJ  OBJ(UPFDCSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(TCST)
             CRTDUPOBJ  OBJ(UPFDCSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(BCST)                                     /*A1084804*/
             CRTDUPOBJ  OBJ(UPFDCSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(ACST)                                     /*A1084804*/
             CRTDUPOBJ  OBJ(UPFDCSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(SCST)                                     /*A1084804*/
             CRTDUPOBJ  OBJ(UPFDCSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(ZCST)
 
/* Remove constraints from the physical files. */
             OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/MCST) +
                          OVRSCOPE(*JOB)
             CALL       PGM(UTC000002) PARM(&MLIB '*ALL' '*REMOVE')
             DLTOVR     FILE(UTC000002F) LVL(*JOB)
             OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/PCST) +
                          OVRSCOPE(*JOB)
             CALL       PGM(UTC000002) PARM(&PLIB '*ALL' '*REMOVE')
             DLTOVR     FILE(UTC000002F) LVL(*JOB)
             OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/TCST) +
                          OVRSCOPE(*JOB)
             CALL       PGM(UTC000002) PARM(&TLIB '*ALL' '*REMOVE')
             DLTOVR     FILE(UTC000002F) LVL(*JOB)
             IF         COND(&BF *NE 'N') THEN(DO)                                      /*MD020013*/
                OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/BCST) +
                             OVRSCOPE(*JOB)                                             /*A1084804*/
                CALL       PGM(UTC000002) PARM(&BFLIB '*ALL' '*REMOVE')                 /*A1084804*/
                DLTOVR     FILE(UTC000002F) LVL(*JOB)                                   /*A1084804*/
             ENDDO                                                                      /*MD020013*/
             IF         COND(&CBA *NE 'N') THEN(DO)                                     /*MD020013*/
                OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/ACST) +
                             OVRSCOPE(*JOB)                                             /*A1084804*/
                CALL       PGM(UTC000002) PARM(&CBALIB '*ALL' '*REMOVE')                /*A1084804*/
                DLTOVR     FILE(UTC000002F) LVL(*JOB)                                   /*A1084804*/
             ENDDO                                                                      /*MD020013*/
             IF         COND(&CBS *NE 'N') THEN(DO)                                     /*MD020013*/
                OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/SCST) +
                             OVRSCOPE(*JOB)                                             /*A1084804*/
                CALL       PGM(UTC000002) PARM(&CBSLIB '*ALL' '*REMOVE')                /*A1084804*/
                DLTOVR     FILE(UTC000002F) LVL(*JOB)                                   /*A1084804*/
             ENDDO                                                                      /*MD020013*/
             IF         COND(&LAYER *EQ '*ZONE  ') THEN(DO)
                OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/ZCST) +
                             OVRSCOPE(*JOB)
                CALL       PGM(UTC000002) PARM(&ZLIB '*ALL' '*REMOVE')
                DLTOVR     FILE(UTC000002F) LVL(*JOB)
             ENDDO
 
/* Remove all diagnostic messages from program queue. */
             RMVMSG     CLEAR(*ALL)
 
READNEXT:
             RCVF
             MONMSG     MSGID(CPF0864) EXEC(DO)
                GOTO       CMDLBL(ADD_CST)
             ENDDO
 
/* Attempt to change CCSID ... */
             CHGPF      FILE(&ATLIB/&ATFILE) CCSID(&CCSID)
             MONMSG     MSGID(CPF7304) EXEC(DO)
RCVMSG:
                RCVMSG     MSGTYPE(*DIAG) MSGID(&MSGID)
                IF         COND(&MSGID *EQ 'CPF32A5') THEN(DO)
/* Call program to temporarily remove logicals. */
                   CALL       PGM(SMC000057) PARM(&ATFILE &ATLIB &PLIB)
                   CHGPF      FILE(&ATLIB/&ATFILE) CCSID(&CCSID)
                ENDDO
                ELSE       CMD(DO)
                   IF         COND(&MSGID *EQ 'CPD3238') THEN(DO)
                      GOTO       CMDLBL(RCVMSG)
                   ENDDO
                   ELSE       CMD(DO)
                      CHGVAR     VAR(&ERRMSG) VALUE('Error in changing CCSID +
                                   for' *BCAT &ATLIB *TCAT '/' *TCAT &ATFILE +
                                   *TCAT '.')
                      CALL       PGM(UP008010) PARM('*WRITE ' 'SMC000054 ' +
                                   &ERRMSG)
                   ENDDO
                ENDDO
             ENDDO
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&ERRMSG) VALUE('Error in changing CCSID +
                             for' *BCAT &ATLIB *TCAT '/' *TCAT &ATFILE +
                             *TCAT '.')
                CALL       PGM(UP008010) PARM('*WRITE ' 'SMC000054 ' +
                             &ERRMSG)
             ENDDO
 
             GOTO       CMDLBL(READNEXT)
 
/* Add constraints back. */
ADD_CST:
             OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/MCST) +
                          OVRSCOPE(*JOB)
             CALL       PGM(UTC000002) PARM(&MLIB '*ALL' '*ADD')
             DLTOVR     FILE(UTC000002F) LVL(*JOB)
             OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/PCST) +
                          OVRSCOPE(*JOB)
             CALL       PGM(UTC000002) PARM(&PLIB '*ALL' '*ADD')
             DLTOVR     FILE(UTC000002F) LVL(*JOB)
             OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/TCST) +
                          OVRSCOPE(*JOB)
             CALL       PGM(UTC000002) PARM(&TLIB '*ALL' '*ADD')
             DLTOVR     FILE(UTC000002F) LVL(*JOB)
             IF         COND(&LAYER *EQ '*ZONE  ') THEN(DO)
                OVRDBF     FILE(UTC000002F) TOFILE(QTEMP/ZCST) +
                             OVRSCOPE(*JOB)
                CALL       PGM(UTC000002) PARM(&ZLIB '*ALL' '*ADD')
                DLTOVR     FILE(UTC000002F) LVL(*JOB)
             ENDDO
 
/* Call program to restore logicals. */
RST_LF:
             IF         COND(&COUNT *LE 9) THEN(DO)
                CALL       PGM(SMC000060) PARM(&NO_RESTORE &COUNT &PLIB)
                IF         COND(&NO_RESTORE *EQ 'E') THEN(DO)
                   CHGVAR     VAR(&ERRMSG) VALUE('One or more logical +
                                files have failed to restore.')
                   CALL       PGM(UP008010) PARM('*WRITE ' 'SMC000054 ' +
                                &ERRMSG)
                ENDDO
                IF         COND(&NO_RESTORE *NE 'N') THEN(DO)
                   CHGVAR     VAR(&COUNT) VALUE(&COUNT + 1)
                   GOTO       CMDLBL(RST_LF)
                ENDDO
             ENDDO
 
REPORT:
             CALL       PGM(UP008010) PARM('*REPORT' 'SMC000054 ' ' ')
 
             GOTO       CMDLBL(ENDPGM)
ERROR:
             IF         COND(&RECURSIVE *EQ 'N') THEN(DO)
                CHGVAR     VAR(&RECURSIVE) VALUE('Y')
RCVERRMSG:
                RCVMSG     MSGTYPE(*DIAG) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                             MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                IF         COND(&MSGID *NE ' ') THEN(DO)
                   SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                MSGDTA(&MSGDTA) MSGTYPE(*DIAG)
                   GOTO       CMDLBL(RCVERRMSG)
                ENDDO
                RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                             MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                             MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
             ENDDO
 
ENDPGM:
             ENDPGM
