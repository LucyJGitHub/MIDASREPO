/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas SM Validity checker for BFCMPUSR')              */
/*********************************************************************/
/*                                                                   */
/*       Midas - Implementation module                               */
/*                                                                   */
/*       SMC000123V - Validity checker for BFCMPUSR                  */
/*                                                                   */
/*       (c) Finastra International Limited 2011                     */
/*                                                                   */
/*       Last Amend No. MD046248           Date 27Oct17              */
/*       Prev Amend No. CBF005  *CREATE    Date 04Jul11              */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*                                                                   */
/*       MD046248 - Finastra Rebranding                              */
/*       CBF005 - BF Infrastructure: Single Security User Maintenance*/
/*                Profile                                            */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&USER01 &USER02 &MBROPT &DTL)
 
             DCL        VAR(&USER01) TYPE(*CHAR) LEN(10)
             DCL        VAR(&USER02) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MBROPT) TYPE(*CHAR) LEN(8)
             DCL        VAR(&DTL) TYPE(*CHAR) LEN(4)
 
             DCL        VAR(&ERROR) TYPE(*CHAR) LEN(1)
             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) VALUE(N)
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)
 
             COPYRIGHT  TEXT('(c) Finastra Internationa Limited +
                          2011')
 
             MONMSG     MSGID(CPF0000 RPG0000 MCH0000) EXEC(GOTO +
                          CMDLBL(ERROR))
 
/** The two users should not be the same. */
             IF         COND(&USER01 *EQ &USER02) THEN(DO)
             SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000The +
                          two users should be different.') +
                          MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
/** Call program to check that users exist on file. */
             CALL       PGM(SM000036) PARM(&USER01 &USER02)
             IF         COND(%SWITCH(11XXXXXX)) THEN(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                             MSGDTA('0000Neither user exists on +
                             file.') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
             IF         COND(%SWITCH(1XXXXXXX)) THEN(DO)
             SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                          MSGDTA('0000User' *BCAT &USER01 *BCAT +
                          'does not exist on file.') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
             IF         COND(%SWITCH(X1XXXXXX)) THEN(DO)
             SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                          MSGDTA('0000User' *BCAT &USER02 *BCAT +
                          'does not exist on file.') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
             GOTO       CMDLBL(ENDPGM)
ERROR:
/** If validity error then send message back to command . . . */
             IF         COND(&ERROR *EQ 'Y') THEN(DO)
             SNDPGMMSG  MSGID(CPF0002) MSGF(QCPFMSG) MSGTYPE(*ESCAPE)
             ENDDO
/** . . .  else send generic message. */
             ELSE       CMD(DO)
                IF         COND(&RECURSIVE *EQ 'N') THEN(DO)
                   CHGVAR     VAR(&RECURSIVE) VALUE('Y')
RCVMSG:
             RCVMSG     MSGTYPE(*DIAG) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                          MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   IF         COND(&MSGID *NE ' ') THEN(DO)
                      SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                   MSGDTA(&MSGDTA) MSGTYPE(*DIAG)
                      GOTO       CMDLBL(RCVMSG)
                   ENDDO
             RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                          MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
                ENDDO
             ENDDO
 
 
ENDPGM:
             ENDPGM
