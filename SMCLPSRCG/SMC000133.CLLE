/*********************************************************************/
/*XBI    OVRDBF FILE(SMC000133F) TOFILE(UPOBJDTPD)                   */
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas SM Copy files from xPLIB to xMLIB')             */
/*********************************************************************/
/*                                                                   */
/*       Midas - Implementation module                               */
/*                                                                   */
/*       SMC000133 - Copy files from xMLIB to xPLIB                  */
/*                                                                   */
/*       (c) Finastra International Limited 2023                     */
/*                                                                   */
/*       Last Amend No. MD061587 *CREATE   Date 07Jul23              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD061587 - Add process to migrate files previously in       */
/*                  GM/DM and now in GP/DP                           */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&FMLIB &TOLIB &LAYER)

             DCL        VAR(&FMLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TOLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LAYER) TYPE(*CHAR) LEN(7)

             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7) VALUE(' ')
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)

             DCLF       FILE(SMC000133F)

             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2023')

/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))

/* Set status to ACTIVE. */
             CALL       PGM(SM000008) PARM('SMC000133' '*PGM' +
                          '*UPDATE' 'ACTIVE')

/* Reset 'from' library name to xDTALIB. */
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
                CHGVAR     VAR(&FMLIB) VALUE(%SST(&FMLIB 1 2) *TCAT +
                             'GMLIB')
                CHGVAR     VAR(&TOLIB) VALUE(%SST(&TOLIB 1 2) *TCAT +
                             'GPLIB')
             ENDDO
             IF         COND(&LAYER *EQ '*ZONE  ') THEN(DO)
                CHGVAR     VAR(&FMLIB) VALUE(%SST(&FMLIB 1 2) *TCAT +
                             'DMLIB')
                CHGVAR     VAR(&TOLIB) VALUE(%SST(&TOLIB 1 2) *TCAT +
                             'DPLIB')
             ENDDO

/* Check if from library exists; if it doesn't then skip processing. */
             CHKOBJ     OBJ(&FMLIB) OBJTYPE(*LIB)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                GOTO       CMDLBL(SUCCESS)
             ENDDO

/* Create working files. */
             CRTDUPOBJ  OBJ(UPOBJDTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(SMC000133F)
             DSPOBJD    OBJ(&FMLIB/*ALL) OBJTYPE(*FILE) +
                          OUTPUT(*OUTFILE) OUTFILE(QTEMP/SMC000133O)
             CPYF       FROMFILE(QTEMP/SMC000133O) +
                          TOFILE(QTEMP/SMC000133F) MBROPT(*REPLACE) +
                          FMTOPT(*MAP *DROP)

/* Call program to remove records for files not to be migrated. */
             OVRDBF     FILE(SMCPYDPD) TOFILE(QTEMP/SMC000133F) +
                          OVRSCOPE(*JOB)
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
                CALL       PGM(SM000001)
             ENDDO
             IF         COND(&LAYER *EQ '*ZONE  ') THEN(DO)
                CALL       PGM(SM000017)
             ENDDO
             DLTOVR     FILE(SMCPYDPD) LVL(*JOB)
             IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                GOTO       CMDLBL(ERROR)
             ENDDO

READNEXT:
             RCVF
             MONMSG     MSGID(CPF0864) EXEC(DO)
                GOTO       CMDLBL(SUCCESS)
             ENDDO

/* If the file does not exist in the 'to' library then do not process. */
             CHKOBJ     OBJ(&TOLIB/&ODOBNM) OBJTYPE(*FILE)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                GOTO       CMDLBL(READNEXT)
             ENDDO

             IF         COND(&ODOBNM *EQ 'GPGLCUSL') THEN(GOTO +
                          CMDLBL(READNEXT))

             IF         COND(%SST(&ODOBNM 1 2) *EQ 'GZ') THEN(GOTO +
                          CMDLBL(READNEXT))

             CPYF       FROMFILE(&FMLIB/&ODOBNM) +
                          TOFILE(&TOLIB/&ODOBNM) FROMMBR(*ALL) +
                          TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                          FMTOPT(*MAP *DROP)
/* If from-file or to-file is locked, or to-file is in use. */
             MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                GOTO       CMDLBL(ERROR)
             ENDDO
/* If to-file has insufficient allowed number of members. */
             MONMSG     MSGID(CPF2888) EXEC(DO)
                GOTO       CMDLBL(ERROR)
             ENDDO
/* If to-file has incorrect data in any fields. */
             MONMSG     MSGID(CPF2972) EXEC(DO)
                GOTO       CMDLBL(ERROR)
             ENDDO
/* If from-file has no members or its only member is empty. */
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
                GOTO       CMDLBL(READNEXT)
             ENDDO
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)
                GOTO       CMDLBL(READNEXT)
             ENDDO
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
                GOTO       CMDLBL(READNEXT)
             ENDDO
/* If different FMTOPT required. */
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2963) EXEC(DO)
                GOTO       CMDLBL(ERROR)
             ENDDO

             GOTO       CMDLBL(READNEXT)

SUCCESS:
             CALL       PGM(SM000008) PARM('SMC000133' '*PGM' +
                          '*UPDATE' 'PASSED')
             GOTO       CMDLBL(ENDPGM)

ERROR:
/* Set status to FAILED. */
             CALL       PGM(SM000008) PARM('SMC000133' '*PGM' +
                          '*UPDATE' 'FAILED')
             IF         COND(&RECURSIVE *EQ 'Y') THEN(DO)
                SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) +
                             MSGDTA('Recursive error for job +
                             SMC000133.') MSGTYPE(*ESCAPE)
             ENDDO
             CHGVAR     VAR(&RECURSIVE) VALUE('Y')

ERROR2:
 /* Receive escape error message. */
             RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                          MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
 /* Pass it back to calling program. */
             SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                          MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
ENDPGM:
             ENDPGM
