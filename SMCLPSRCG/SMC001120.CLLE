/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas SM Authority set up')                           */
/*********************************************************************/
/*                                                                   */
/*       Midas - Implementation                                      */
/*                                                                   */
/*       SMC001120 - Authority set up                                */
/*                                                                   */
/*       (c) Misys International Banking Systems Ltd. 2014           */
/*                                                                   */
/*       Last Amend No. CUP042  *REWRITE   Date 05Nov14              */
/*       Prev Amend No. AR886414           Date 05Jan12              */
/*                      CSC043             Date 18Jun10              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/*                      CUP033             Date 08Jun06              */
/*                      CSM005             Date 21Sep05              */
/*                      CPK020             Date 18Aug04              */
/*                      CUP025  *CREATE    Date 28Nov03              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       CUP042 - Changes for Bridge deliverable data split          */
/*       AR886414 - Creation of CBS, CBA and BF libraries in SMSETUPD*/
/*                  not catered                                      */
/*       CSC043 - MidasPlus IASP Enablement                          */
/*       CUP033 - Removal of System Value /COPYs.                    */
/*       CSM005 - Changes to /COPYs.  Recompile.                     */
/*       CPK020 - Set up library list.                               */
/*       CUP025 - MidasPlus Bridge changes.                          */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&LAYER)
 
             DCL        VAR(&LAYER) TYPE(*CHAR) LEN(7)
 
             DCL        VAR(&PFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&GPFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&IASP_YN) TYPE(*CHAR) LEN(1)
             DCL        VAR(&IASP) TYPE(*CHAR) LEN(10)
 
/* &SPARE is a non-specific variable to pass any additional parameters to the */
/*  called programs. */
             DCL        VAR(&SPARE) TYPE(*CHAR) LEN(50)
             DCL        VAR(&SAVLIBL) TYPE(*CHAR) LEN(1)
             DCL        VAR(&SUBMITJOB) TYPE(*CHAR) LEN(4)
             DCL        VAR(&CHECKSVAL) TYPE(*CHAR) LEN(1)
             DCL        VAR(&MENUOPT) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SUBOPT) TYPE(*CHAR) LEN(20)
             DCL        VAR(&STATUS) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ERRPGM) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ERRORFLAG) TYPE(*CHAR) LEN(1)
             DCL        VAR(&SRERROR) TYPE(*INT)
             DCL        VAR(&MESSAGE) TYPE(*CHAR) LEN(50)
             DCL        VAR(&RTNCODE) TYPE(*CHAR) LEN(7)
             DCL        VAR(&RTNFLAG) TYPE(*CHAR) LEN(1)
 
             DCL        VAR(&SVAL1) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK1) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL2) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK2) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL3) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK3) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL4) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK4) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL5) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK5) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL6) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK6) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL7) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK7) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL8) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK8) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL9) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK9) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL10) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK0) TYPE(*CHAR) LEN(20)
 
             COPYRIGHT TEXT('(c) Misys International Banking Systems Ltd. +
                          2014')
 
/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))
 
/* Prompt for whether jobs should be submitted. */
             SUBMITJOB  ??SUBMITJOB(*N)
             MONMSG     MSGID(CPF6801) EXEC(DO)
                GOTO       CMDLBL(ENDPGM)
             ENDDO
             RTVDTAARA  DTAARA(QTEMP/SUBMITJOB) RTNVAR(&SUBMITJOB)
 
/* Prepare temporary files, job, etc. */
             CALLSUBR   SUBR(PREPARE)
 
/* Retrieve required System Values. */
             CALLSUBR   SUBR(RTVSVAL)
/* For a general error just report. */
             IF         COND(&ERRORFLAG *EQ 'E') THEN(DO)
                GOTO       CMDLBL(ERROR)
             ENDDO
/* If a System Value is blank then send specific error message. */
             IF         COND(&ERRORFLAG *EQ 'B') THEN(DO)
                CALLSUBR   SUBR(BLANKSVAL)
                GOTO       CMDLBL(ENDPGM)
             ENDDO
 
/* Set up variables for the program. */
             CHGVAR     VAR(&MENUOPT) VALUE('SetUpAuthority')
 
/* Set up library list. */
             CALLSUBR   SUBR(SETUPLIBL)
 
/* Change library authority. */
CHGLIBAUT:
             CHGVAR     VAR(&SUBOPT) VALUE('ChgOwnAutLibrary')
             CHGVAR     VAR(&ERRPGM) VALUE('SM000031')
             CALL       PGM(UP000009) PARM('*CHK' &MENUOPT &SUBOPT +
                          &LAYER &STATUS)
             IF         COND(&STATUS *EQ 'E') THEN(DO)
                CHGVAR     VAR(&ERRPGM) VALUE('UP000009')
                GOTO       CMDLBL(ERROR)
             ENDDO
             IF         COND(&STATUS *NE 'C') THEN(DO)
                CHGVAR     VAR(%SST(&SPARE 1 10)) VALUE(&IASP)
                CHGVAR     VAR(%SST(&SPARE 11 2)) VALUE(&GPFX)
                CHGVAR     VAR(%SST(&SPARE 21 4)) VALUE(%SST(&SUBMITJOB +
                          1 4))
                CALL       PGM(SM000031) PARM(&SUBOPT &LAYER &PFX +
                             &SPARE &RTNFLAG)
                CALLSUBR   SUBR(ERRORHAND2) RTNVAL(&SRERROR)
                IF         COND(&SRERROR *EQ 2) THEN(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
             ENDDO
 
/* Change contents authority. */
CHGCNTAUT:
             CHGVAR     VAR(&SUBOPT) VALUE('ChgOwnAutObjects')
             CHGVAR     VAR(&ERRPGM) VALUE('SM000031')
             CALL       PGM(UP000009) PARM('*CHK' &MENUOPT &SUBOPT +
                          &LAYER &STATUS)
             IF         COND(&STATUS *EQ 'E') THEN(DO)
                CHGVAR     VAR(&ERRPGM) VALUE('UP000009')
                GOTO       CMDLBL(ERROR)
             ENDDO
             IF         COND(&STATUS *NE 'C') THEN(DO)
                CHGVAR     VAR(%SST(&SPARE 1 10)) VALUE(&IASP)
                CHGVAR     VAR(%SST(&SPARE 11 2)) VALUE(&GPFX)
                CHGVAR     VAR(%SST(&SPARE 21 4)) VALUE(%SST(&SUBMITJOB +
                          1 4))
                CALL       PGM(SM000031) PARM(&SUBOPT &LAYER &PFX +
                             &SPARE &RTNFLAG)
                CALLSUBR   SUBR(ERRORHAND2) RTNVAL(&SRERROR)
                IF         COND(&SRERROR *EQ 2) THEN(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
             ENDDO
 
/* Change library. */
CHGLIB:
             CHGVAR     VAR(&SUBOPT) VALUE('ChgLib')
             CHGVAR     VAR(&ERRPGM) VALUE('SM000031')
             CALL       PGM(UP000009) PARM('*CHK' &MENUOPT &SUBOPT +
                          &LAYER &STATUS)
             IF         COND(&STATUS *EQ 'E') THEN(DO)
                CHGVAR     VAR(&ERRPGM) VALUE('UP000009')
                GOTO       CMDLBL(ERROR)
             ENDDO
             IF         COND(&STATUS *NE 'C') THEN(DO)
                CHGVAR     VAR(%SST(&SPARE 1 10)) VALUE(' ')
                CHGVAR     VAR(%SST(&SPARE 11 2)) VALUE(&GPFX)
                CHGVAR     VAR(%SST(&SPARE 21 4)) VALUE(%SST(&SUBMITJOB +
                          1 4))
                CALL       PGM(SM000031) PARM(&SUBOPT &LAYER &PFX +
                             &SPARE &RTNFLAG)
                CALLSUBR   SUBR(ERRORHAND2) RTNVAL(&SRERROR)
                IF         COND(&SRERROR *EQ 2) THEN(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
             ENDDO
 
/* Remove authorisation entries which go across zone and global layer. */
CRSRMVAUTL:
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CHGVAR     VAR(&SUBOPT) VALUE('CrossRmvAuthListEnt')
                CHGVAR     VAR(&ERRPGM) VALUE('SM000031')
                CALL       PGM(UP000009) PARM('*CHK' &MENUOPT &SUBOPT +
                             &LAYER &STATUS)
                IF         COND(&STATUS *EQ 'E') THEN(DO)
                   CHGVAR     VAR(&ERRPGM) VALUE('UP000009')
                   GOTO       CMDLBL(ERROR)
                ENDDO
                IF         COND(&STATUS *NE 'C') THEN(DO)
                   CHGVAR     VAR(%SST(&SPARE 1 10)) VALUE(' ')
                   CHGVAR     VAR(%SST(&SPARE 11 2)) VALUE(&GPFX)
                   CHGVAR     VAR(%SST(&SPARE 21 4)) VALUE(' ')
                   CALL       PGM(SM000031) PARM(&SUBOPT &LAYER &PFX +
                                &SPARE &RTNFLAG)
                   CALLSUBR   SUBR(ERRORHAND2) RTNVAL(&SRERROR)
                   IF         COND(&SRERROR *EQ 2) THEN(DO)
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                ENDDO
             ENDDO
 
/* Add authorisation entries which go across zone and global layer. */
CRSADDAUTL:
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CHGVAR     VAR(&SUBOPT) VALUE('CrossAddAuthListEnt')
                CHGVAR     VAR(&ERRPGM) VALUE('SM000031')
                CALL       PGM(UP000009) PARM('*CHK' &MENUOPT &SUBOPT +
                             &LAYER &STATUS)
                IF         COND(&STATUS *EQ 'E') THEN(DO)
                   CHGVAR     VAR(&ERRPGM) VALUE('UP000009')
                   GOTO       CMDLBL(ERROR)
                ENDDO
                IF         COND(&STATUS *NE 'C') THEN(DO)
                   CHGVAR     VAR(%SST(&SPARE 1 10)) VALUE(' ')
                   CHGVAR     VAR(%SST(&SPARE 11 2)) VALUE(&GPFX)
                   CHGVAR     VAR(%SST(&SPARE 21 4)) VALUE(' ')
                   CALL       PGM(SM000031) PARM(&SUBOPT &LAYER &PFX +
                                &SPARE &RTNFLAG)
                   CALLSUBR   SUBR(ERRORHAND2) RTNVAL(&SRERROR)
                   IF         COND(&SRERROR *EQ 2) THEN(DO)
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                ENDDO
             ENDDO
 
/* Change profiles which go across zone and global layer. */
CRSCHGPRFS:
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CHGVAR     VAR(&SUBOPT) VALUE('CrossChgUserProfile')
                CHGVAR     VAR(&ERRPGM) VALUE('SM000031')
                CALL       PGM(UP000009) PARM('*CHK' &MENUOPT &SUBOPT +
                             &LAYER &STATUS)
                IF         COND(&STATUS *EQ 'E') THEN(DO)
                   CHGVAR     VAR(&ERRPGM) VALUE('UP000009')
                   GOTO       CMDLBL(ERROR)
                ENDDO
                IF         COND(&STATUS *NE 'C') THEN(DO)
                   CHGVAR     VAR(%SST(&SPARE 1 10)) VALUE(' ')
                   CHGVAR     VAR(%SST(&SPARE 11 2)) VALUE(&GPFX)
                   CHGVAR     VAR(%SST(&SPARE 21 4)) VALUE(' ')
                   CALL       PGM(SM000031) PARM(&SUBOPT &LAYER &PFX +
                                &SPARE &RTNFLAG)
                   CALLSUBR   SUBR(ERRORHAND2) RTNVAL(&SRERROR)
                   IF         COND(&SRERROR *EQ 2) THEN(DO)
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                ENDDO
             ENDDO
 
/* Reset settings from the start of the program. */
             CALL       PGM(UP000009) PARM('*RST' ' ' ' ' ' ' &STATUS)
             IF         COND(&STATUS *EQ 'E') THEN(DO)
                CHGVAR     VAR(&ERRPGM) VALUE('UP000009')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
             GOTO       CMDLBL(ENDPGM)
ERROR:
             RTVMSG     MSGID(UPM0001) MSGF(UTMSGF) +
                          MSGDTA(&ERRPGM) MSG(&MESSAGE)
             MONMSG     MSGID(CPF0000)
             CHGDTAARA  DTAARA(MIDASMSG (101 50)) VALUE(&MESSAGE)
             MONMSG     MSGID(CPF0000)
             CHGDTAARA  DTAARA(MIDASMSG (201 50)) VALUE('Check +
                          joblog for details')
             MONMSG     MSGID(CPF0000)
             CALL       PGM(SCC0010) PARM(&ERRPGM 'JOBLOG' 'Y')
             MONMSG     MSGID(CPF0000 MCH0000)
 
ENDPGM:
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
                IF         COND(&SAVLIBL *EQ 'Y') THEN(DO)
                   RSTLIBL    SAVEDLIBL(SMC001120)
                   MONMSG     MSGID(CPF0000)
                ENDDO
             ENDDO
 
/******************************************************************************/
/*                                                                            */
/* Subroutine to prepare for run.                                             */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(PREPARE)
 
             CHGJOB     SWS(XXXXXX00)
 
/* Create data area for screen message handling. */
             DLTDTAARA  DTAARA(QTEMP/MIDASMSG)
             MONMSG     MSGID(CPF0000)
             CRTDTAARA  DTAARA(QTEMP/MIDASMSG) TYPE(*CHAR) LEN(800)
 
/* Create error handling file in QTEMP. */
             DLTF       FILE(QTEMP/UPERRMQT)
             MONMSG     MSGID(CPF0000)
             CRTPF      FILE(QTEMP/UPERRMQT) RCDLEN(100)
 
             ENDSUBR
 
/******************************************************************************/
/*                                                                            */
/* Subroutine to retrieve System Values.                                      */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(RTVSVAL)
 
/* Retrieve the appropriate System Values and perform other layer specific */
/*  code.                                                                  */
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CHGVAR     VAR(&SVALK3) VALUE('BrgMidasSystemPrefix')
                CHGVAR     VAR(&SVALK4) VALUE('BrgMidasGlobalPrefix')
                CHGVAR     VAR(&ERRPGM) VALUE('AOSVALR0')
                CALL       PGM(AOSVALR0) PARM(&RTNCODE &SVALK1 &SVAL1 +
                             &SVALK2 &SVAL2 &SVALK3 &SVAL3 &SVALK4 +
                             &SVAL4 &SVALK5 &SVAL5 &SVALK6 &SVAL6 +
                             &SVALK7 &SVAL7 &SVALK8 &SVAL8 &SVALK9 +
                             &SVAL9 &SVALK0 &SVAL10)
                CHGVAR     VAR(&CHECKSVAL) VALUE('Z')
                CALLSUBR   SUBR(CHECKSVAL)
                CHGVAR     VAR(&PFX) VALUE(%SST(&SVAL3 1 2))
                CHGVAR     VAR(&GPFX) VALUE(%SST(&SVAL4 1 2))
 
                CHGVAR     VAR(&SVALK1) VALUE('IASPinstallation')
                CHGVAR     VAR(&SVALK2) VALUE('IASPgroup')
                CHGVAR     VAR(&SVALK3) VALUE(' ')
                CHGVAR     VAR(&SVALK4) VALUE(' ')
                CHGVAR     VAR(&ERRPGM) VALUE('GPAOSVALR0')
                CALL       PGM(GPAOSVALR0) PARM(&RTNCODE &SVALK1 &SVAL1 +
                             &SVALK2 &SVAL2 &SVALK3 &SVAL3 &SVALK4 +
                             &SVAL4 &SVALK5 &SVAL5 &SVALK6 &SVAL6 +
                             &SVALK7 &SVAL7 &SVALK8 &SVAL8 &SVALK9 +
                             &SVAL9 &SVALK0 &SVAL10)
                CHGVAR     VAR(&CHECKSVAL) VALUE('G')
                CALLSUBR   SUBR(CHECKSVAL)
                CHGVAR     VAR(&IASP_YN) VALUE(%SST(&SVAL1 1 1))
                IF         COND(&IASP_YN *EQ 'Y') THEN(DO)
                   CHGVAR     VAR(&IASP) VALUE(%SST(&SVAL2 1 10))
                ENDDO
             ENDDO
 
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
                CHGVAR     VAR(&SVALK1) VALUE('IASPinstallation')
                CHGVAR     VAR(&SVALK2) VALUE('IASPgroup')
                CHGVAR     VAR(&SVALK3) VALUE('BrgMidasGlobalPrefix')
                CHGVAR     VAR(&ERRPGM) VALUE('GPAOSVALR0')
                CALL       PGM(GPAOSVALR0) PARM(&RTNCODE &SVALK1 &SVAL1 +
                             &SVALK2 &SVAL2 &SVALK3 &SVAL3 &SVALK4 +
                             &SVAL4 &SVALK5 &SVAL5 &SVALK6 &SVAL6 +
                             &SVALK7 &SVAL7 &SVALK8 &SVAL8 &SVALK9 +
                             &SVAL9 &SVALK0 &SVAL10)
                CALLSUBR   SUBR(CHECKSVAL)
                CHGVAR     VAR(&IASP_YN) VALUE(%SST(&SVAL1 1 1))
                IF         COND(&IASP_YN *EQ 'Y') THEN(DO)
                   CHGVAR     VAR(&IASP) VALUE(%SST(&SVAL2 1 10))
                ENDDO
                CHGVAR     VAR(&PFX) VALUE(%SST(&SVAL3 1 2))
                CHGVAR     VAR(&GPFX) VALUE(' ')
             ENDDO
 
             ENDSUBR
 
/******************************************************************************/
/*                                                                            */
/* Subroutine for checking the call to System Values.                         */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(CHECKSVAL)
 
             IF         COND(&RTNCODE *NE ' ') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                IF         COND(&CHECKSVAL *EQ 'G') THEN(DO)
                   IF         COND(%SST(&SVAL1 1 1) *EQ '*') THEN(DO)
                      CHGVAR     VAR(&ERRORFLAG) VALUE('E')
                   ENDDO
                   IF         COND(&SVAL1 *EQ ' ') THEN(DO)
                      CHGVAR     VAR(&ERRORFLAG) VALUE('B')
                   ENDDO
/* As this is a check for the IASP group it is only relevant if IASP is being */
/*  used.                                                                     */
                   IF         COND(%SST(&SVAL1 1 1) *EQ 'Y') THEN(DO)
                      IF         COND(%SST(&SVAL2 1 1) *EQ '*') THEN(DO)
                         CHGVAR     VAR(&ERRORFLAG) VALUE('E')
                      ENDDO
                      IF         COND(&SVAL2 *EQ ' ') THEN(DO)
                         CHGVAR     VAR(&ERRORFLAG) VALUE('B')
                      ENDDO
                   ENDDO
                ENDDO
                IF         COND(&CHECKSVAL *EQ 'Z') THEN(DO)
                   IF         COND(%SST(&SVAL3 1 1) *EQ '*') THEN(DO)
                      CHGVAR     VAR(&ERRORFLAG) VALUE('E')
                   ENDDO
                   IF         COND(&SVAL3 *EQ ' ') THEN(DO)
                      CHGVAR     VAR(&ERRORFLAG) VALUE('B')
                   ENDDO
                   IF         COND(%SST(&SVAL4 1 1) *EQ '*') THEN(DO)
                      CHGVAR     VAR(&ERRORFLAG) VALUE('E')
                   ENDDO
                   IF         COND(&SVAL4 *EQ ' ') THEN(DO)
                      CHGVAR     VAR(&ERRORFLAG) VALUE('B')
                   ENDDO
                ENDDO
             ENDDO
 
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
                IF         COND(%SST(&SVAL1 1 1) *EQ '*') THEN(DO)
                   CHGVAR     VAR(&ERRORFLAG) VALUE('E')
                ENDDO
                IF         COND(&SVAL1 *EQ ' ') THEN(DO)
                   CHGVAR     VAR(&ERRORFLAG) VALUE('B')
                ENDDO
/* As this is a check for the IASP group it is only relevant if IASP is being */
/*  used.                                                                     */
                IF         COND(&SVAL1 *EQ 'Y') THEN(DO)
                   IF         COND(%SST(&SVAL2 1 1) *EQ '*') THEN(DO)
                      CHGVAR     VAR(&ERRORFLAG) VALUE('E')
                   ENDDO
                   IF         COND(&SVAL2 *EQ ' ') THEN(DO)
                      CHGVAR     VAR(&ERRORFLAG) VALUE('B')
                   ENDDO
                ENDDO
                IF         COND(%SST(&SVAL3 1 1) *EQ '*') THEN(DO)
                   CHGVAR     VAR(&ERRORFLAG) VALUE('E')
                ENDDO
                IF         COND(&SVAL3 *EQ ' ') THEN(DO)
                   CHGVAR     VAR(&ERRORFLAG) VALUE('B')
                ENDDO
             ENDDO
 
ENDCHKSVAL:
             ENDSUBR
 
/******************************************************************************/
/*                                                                            */
/* Subroutine for reporting blank System Values.                              */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(BLANKSVAL)
 
             RTVMSG     MSGID(UPM0003) MSGF(UTMSGF) MSG(&MESSAGE)
             CHGDTAARA  DTAARA(MIDASMSG (101 50)) VALUE(&MESSAGE)
             RTVMSG     MSGID(UPM0004) MSGF(UTMSGF) MSG(&MESSAGE)
             CHGDTAARA  DTAARA(MIDASMSG (151 50)) VALUE(&MESSAGE)
             CALL       PGM(SCC0010) PARM('SMC001120' 'ENTER' ' ')
 
             ENDSUBR
 
/******************************************************************************/
/*                                                                            */
/* Subroutine to set up the library list.                                     */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(SETUPLIBL)
 
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CALL       PGM(UPC0014) PARM(&PFX)
             ENDDO
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
                SAVLIBL    SAVDTL(SMC001120)
                CHGVAR     VAR(&SAVLIBL) VALUE('Y')
                CALL       PGM(GPC000016) PARM(&PFX)
             ENDDO
 
             ENDSUBR
 
/******************************************************************************/
/*                                                                            */
/* Subroutine for handling errors in programs not using driving file.         */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(ERRORHAND2)
 
             IF         COND(&RTNFLAG *NE ' ') THEN(DO)
                CHGVAR     VAR(&STATUS) VALUE('F')
                CALL       PGM(UP000009) PARM('*UPD' &MENUOPT &SUBOPT +
                             &LAYER &STATUS)
                IF         COND(&STATUS *EQ 'E') THEN(DO)
                   CHGVAR     VAR(&ERRPGM) VALUE('UP000009')
                ENDDO
                CHGVAR     VAR(&SRERROR) VALUE(2)
                GOTO       CMDLBL(EXITEHSR2)
             ENDDO
             ELSE       CMD(DO)
                CHGVAR     VAR(&STATUS) VALUE('C')
                CALL       PGM(UP000009) PARM('*UPD' &MENUOPT &SUBOPT +
                             &LAYER &STATUS)
                IF         COND(&STATUS *EQ 'E') THEN(DO)
                   CHGVAR     VAR(&ERRPGM) VALUE('UP000009')
                   CHGVAR     VAR(&SRERROR) VALUE(2)
                ENDDO
             ENDDO
 
EXITEHSR2:
             ENDSUBR    RTNVAL(&SRERROR)
 
             ENDPGM
