/*********************************************************************/
/*S*D****CLPBASE******************************************************/                     AR808720
/*********************************************************************/
/*                                                                   */
/*       Midas - Implementation module                               */
/*                                                                   */
/*       SMC1122_V - Validity checker for SETUPAUT                   */
/*                                                                   */
/*       (c) Misys International Banking Systems Ltd. 2003           */
/*                                                                   */
/*       Last Amend No. AR808720*REDUNDANT Date 20Jul11              */
/*       Prev Amend No. CSC043             Date 18Jun10              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/*                      CUP016 *CREATE     Date 01Apr03              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*     AR808720 - Remove prompt for authority change.                */
/*       CSC043 - MidasPlus IASP Enablement                          */
/*       CUP016 - Add implementation software to core.               */
/*                                                                   */
/*********************************************************************/
/**********  PGM        PARM(&LIB &LIBAUT &OBJAUT &SUBM &JOBQ)                         */ /*CSC043*/
             PGM        PARM(&LIB &LIBAUT &OBJAUT &SUBM &JOBQ &ASP +
                          &ASPDEV)                                                        /*CSC043*/
 
             DCL        VAR(&LIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBAUT) TYPE(*CHAR) LEN(48)
             DCL        VAR(&OBJAUT) TYPE(*CHAR) LEN(38)
             DCL        VAR(&SUBM) TYPE(*CHAR) LEN(4)
             DCL        VAR(&JOBQ) TYPE(*CHAR) LEN(20)
             DCL        VAR(&ASP) TYPE(*CHAR) LEN(2)                                      /*CSC043*/
             DCL        VAR(&ASPDEV) TYPE(*CHAR) LEN(10)                                  /*CSC043*/
 
             DCL        VAR(&CRTAUT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LOWNER) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LOWNERAUT) TYPE(*CHAR) LEN(8)
             DCL        VAR(&LPUBLIC) TYPE(*CHAR) LEN(8)
             DCL        VAR(&LAUTL) TYPE(*CHAR) LEN(10)
 
             DCL        VAR(&OOWNER) TYPE(*CHAR) LEN(10)
             DCL        VAR(&OOWNERAUT) TYPE(*CHAR) LEN(8)
             DCL        VAR(&OPUBLIC) TYPE(*CHAR) LEN(8)
             DCL        VAR(&OAUTL) TYPE(*CHAR) LEN(10)
 
             DCL        VAR(&JOBQN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&JOBQL) TYPE(*CHAR) LEN(10)
 
             DCL        VAR(&ERROR) TYPE(*CHAR) LEN(1)
             DCL        VAR(&CPYFLD) TYPE(*CHAR) LEN(64) VALUE('(c) +
                          Misys International Banking Systems Ltd. +
                          2003')
 
/* Global monitor message */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ABNOR))
 
/* Set up variables. */
             CHGVAR     VAR(&CRTAUT) VALUE(%SST(&LIBAUT 3 10))
             CHGVAR     VAR(&LOWNER) VALUE(%SST(&LIBAUT 13 10))
             CHGVAR     VAR(&LOWNERAUT) VALUE(%SST(&LIBAUT 23 8))
             CHGVAR     VAR(&LPUBLIC) VALUE(%SST(&LIBAUT 31 8))
             CHGVAR     VAR(&LAUTL) VALUE(%SST(&LIBAUT 39 10))
 
             CHGVAR     VAR(&OOWNER) VALUE(%SST(&OBJAUT 3 10))
             CHGVAR     VAR(&OOWNERAUT) VALUE(%SST(&OBJAUT 13 8))
             CHGVAR     VAR(&OPUBLIC) VALUE(%SST(&OBJAUT 21 8))
             CHGVAR     VAR(&OAUTL) VALUE(%SST(&OBJAUT 29 10))
 
             CHGVAR     VAR(&JOBQN) VALUE(%SST(&JOBQ 1 10))
             CHGVAR     VAR(&JOBQL) VALUE(%SST(&JOBQ 11 10))
 
/* See if library exists */
             CHKOBJ     OBJ(*LIBL/&LIB) OBJTYPE(*LIB) AUT(*ALL)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                             MSGDTA('0000Library' *BCAT &LIB *BCAT +
                             'does not exist') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ABNOR)
             ENDDO
             MONMSG     MSGID(CPF9802) EXEC(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000You +
                             do not have sufficient authority to' +
                             *BCAT &LIB *TCAT '.') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ABNOR)
             ENDDO
 
/* If authorisation list entered for CRTAUT check that it exists. */
             IF         COND(%SST(&CRTAUT 1 1) *NE '*') THEN(DO)
                CHKOBJ     OBJ(*LIBL/&CRTAUT) OBJTYPE(*AUTL)
                MONMSG     MSGID(CPF9801) EXEC(DO)
                   SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                                MSGDTA('0000Authorisation list' *BCAT +
                                &CRTAUT *BCAT 'does not exist') MSGTYPE(*DIAG)
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ABNOR)
                ENDDO
             ENDDO
 
/* Check that library owner exists. */
             CHKOBJ     OBJ(*LIBL/&LOWNER) OBJTYPE(*USRPRF)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                             MSGDTA('0000Profile' *BCAT &LOWNER *BCAT +
                             'does not exist') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ABNOR)
             ENDDO
 
/* Check that object owner exists. */
             CHKOBJ     OBJ(*LIBL/&OOWNER) OBJTYPE(*USRPRF)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                             MSGDTA('0000Profile' *BCAT &OOWNER *BCAT +
                             'does not exist') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ABNOR)
             ENDDO
 
/* If library authorisation list entered check that it exists. */
             IF         COND(&LAUTL *NE '*NONE') THEN(DO)
                CHKOBJ     OBJ(*LIBL/&LAUTL) OBJTYPE(*AUTL)
                MONMSG     MSGID(CPF9801) EXEC(DO)
                   SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                                MSGDTA('0000Authorisation list' *BCAT +
                                &LAUTL *BCAT 'does not exist') MSGTYPE(*DIAG)
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ABNOR)
                ENDDO
             ENDDO
 
/* If object authorisation list entered check that it exists. */
             IF         COND(&OAUTL *NE '*NONE') THEN(DO)
                CHKOBJ     OBJ(*LIBL/&OAUTL) OBJTYPE(*AUTL)
                MONMSG     MSGID(CPF9801) EXEC(DO)
                   SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                                MSGDTA('0000Authorisation list' *BCAT +
                                &OAUTL *BCAT 'does not exist') MSGTYPE(*DIAG)
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ABNOR)
                ENDDO
             ENDDO
 
/* If program is to be submitted then check that job queue exists. */
             IF         COND(&SUBM *EQ '*YES') THEN(DO)
                IF         COND(&JOBQN *EQ ' ') THEN(DO)
                   SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000Job +
                                queue must be entered') MSGTYPE(*DIAG)
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ABNOR)
                ENDDO
                ELSE       CMD(DO)
                   CHKOBJ     OBJ(&JOBQL/&JOBQN) OBJTYPE(*JOBQ)
                   MONMSG     MSGID(CPF9801) EXEC(DO)
                      SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000Job +
                                   queue' *BCAT &JOBQL *TCAT '/' *TCAT +
                                   &JOBQN *BCAT 'does not exist') MSGTYPE(*DIAG)
                      CHGVAR     VAR(&ERROR) VALUE('Y')
                      GOTO       CMDLBL(ABNOR)
                   ENDDO
                ENDDO
             ENDDO
 
             GOTO       CMDLBL(END)
 
ABNOR:
             IF         COND(&ERROR *EQ 'Y') THEN(SNDPGMMSG +
                          MSGID(CPF0002) MSGF(QCPFMSG) +
                          MSGTYPE(*ESCAPE))
 
END:
             CHGVAR     VAR(&CPYFLD) VALUE('(c) +
                          Misys International Banking Systems Ltd.')
             ENDPGM
