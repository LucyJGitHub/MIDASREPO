/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas SM CCP for MIGRATEZ command')                   */
/*********************************************************************/
/*                                                                   */
/*       Midas - Implementation module                               */
/*                                                                   */
/*       SMC000038 - CPP for MIGRATEZ                                */
/*                                                                   */
/*       (c) Finastra International Limited 2007                     */
/*                                                                   */
/*-------------------------------------------------------------------*/
/* This program monitors for a large and specific set of messages    */
/* which may be generated by the CPYF commands.  If this monitoring  */
/* is amended in any way the following programs may also need to be  */
/* changed:                                                          */
/*             SMC000037                                             */
/*             SMC000042                                             */
/*             SMC000045                                             */
/*             UPC0245                                               */
/*             UPC0246                                               */
/*             UPC0259                                               */
/*             UPC0263                                               */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*                                                                   */
/*       Last Amend No. MD061587           Date 07Jul23              */
/*       Prev Amend No. MD058089           Date 01Sep21              */
/*                      MD046248           Date 27Oct17              */
/*                      MD039374           Date 04May16              */
/*                      CPK030             Date 09Apr14              */
/*                      MD020016           Date 23Apr13              */
/*                      MD020092B          Date 11Apr13              */
/*                      AR1085447          Date 06Feb13              */
/*                      AR792029           Date 22Jun11              */
/*                      CUP003             Date 06Aug10              */
/*                      BUG27793*REWRITE   Date 04Jun10              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/*                      B18595             Date 06May08              */
/*                      CUP038  *CREATE    Date 03Oct06              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD061587 - Add process to migrate files previously in       */
/*                  GM/DM and now in GP/DP                           */
/*       MD058089 - Deliverable Data Split for SM  and UP            */
/*       MD046248 - Finastra Rebranding                              */
/*       MD039374 - Correct program name.                            */
/*       CPK030 - Additional processing for moved DTALIB files.      */
/*       MD020016 - Simplify selection of migration path.            */
/*       MD020092B - Change in order to make sure FF data areas are  */
/*                  handled correctly.                               */
/*       AR1085447 - Handle migration of loan reference to alpha.    */
/*       AR792029 - Change system prefix references within migration */
/*                  job.                                             */
/*       CUP003 - Program to handle graphical field changes.         */
/*              - Handle unique keys better.                         */
/*       BUG27793 - Make migration multi-streamed.                   */
/*       B18595 - Creation of data area in wrong place.              */
/*       CUP038 - Re-organisation of migration tools.                */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&FMLIB &TOLIB &CRT &RERUN &SYSPFX +
                          &EXCEPTION &THRESHOLD &JUMP)

             DCL        VAR(&FMLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TOLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CRT) TYPE(*CHAR) LEN(4)
             DCL        VAR(&RERUN) TYPE(*CHAR) LEN(4)
             DCL        VAR(&SYSPFX) TYPE(*CHAR) LEN(4)
             DCL        VAR(&EXCEPTION) TYPE(*CHAR) LEN(362)
             DCL        VAR(&THRESHOLD) TYPE(*DEC) LEN(2 0)
             DCL        VAR(&JUMP) TYPE(*DEC) LEN(2 0)

             DCL        VAR(&FMPFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&TOPFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&MODE) TYPE(*CHAR) LEN(7)
             DCL        VAR(&ORLVL) TYPE(*CHAR) LEN(22)
             DCL        VAR(&EXCPTOBJ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&EXCPTTYP) TYPE(*CHAR) LEN(8)
             DCL        VAR(&NOOFEXCPTB) TYPE(*CHAR) LEN(2)
             DCL        VAR(&NOOFEXCPTS) TYPE(*DEC) LEN(2 0)
             DCL        VAR(&THRESHOLDA) TYPE(*CHAR) LEN(2)
             DCL        VAR(&JUMPA) TYPE(*CHAR) LEN(2)
             DCL        VAR(&BREACH) TYPE(*CHAR) LEN(1)
             DCL        VAR(&COUNT) TYPE(*DEC) LEN(2 0)
             DCL        VAR(&STATUS) TYPE(*CHAR) LEN(6)
             DCL        VAR(&STARTOBJ) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&STARTTYP) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&SYSPCTAFT) TYPE(*DEC) LEN(7 4)
             DCL        VAR(&SYSTOT) TYPE(*DEC) LEN(7 0)
             DCL        VAR(&UP249RTN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&QUOTE) TYPE(*CHAR) LEN(1) VALUE('''')
/*********   DCL        VAR(&STM_STR) TYPE(*CHAR) LEN(80) +
                          VALUE('UPDATE SMCNUMPD SET CNUPDF =') */                      /*MD058089*/
             DCL        VAR(&STM_STR) TYPE(*CHAR) LEN(80) +
                          VALUE('UPDATE SMCNUXTD SET CNUPDF =')                         /*MD058089*/
             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) VALUE('N')

             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7) VALUE(' ')
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)

/**********  DCLF       FILE(SMCPYDL0)                                                 */ /*CUP003*/
             DCLF       FILE(SMCPYDL2)                                                    /*CUP003*/

             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2007')

/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))

/* Create source file for running SQL statements. */
             DLTF       FILE(QTEMP/RUNSQLSTM)
             MONMSG     MSGID(CPF0000)
             DLTF       FILE(QTEMP/RUNSQL)
             MONMSG     MSGID(CPF0000)
             CRTSRCPF   FILE(QTEMP/RUNSQLSTM) RCDLEN(112) +
                          MBR(RUNSQLSTM) TEXT('Temporary source +
                          file for SMC000038')
             RNMOBJ     OBJ(QTEMP/RUNSQLSTM) OBJTYPE(*FILE) +
                          NEWOBJ(RUNSQL)

/* Create temporary file for DSPFFD outfile. */                                           /*CUP003*/
             DLTF       FILE(QTEMP/DSPFFD)                                                /*CUP003*/
             MONMSG     MSGID(CPF0000)                                                    /*CUP003*/
             DLTF       FILE(QTEMP/SMC000115F)                                            /*CUP003*/
             MONMSG     MSGID(CPF0000)                                                    /*CUP003*/
             CRTDUPOBJ  OBJ(UPFFDSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(SMC000115F)                                 /*CUP003*/

/* Set temporary data area with &THRESHOLD and &JUMP values .... */
             CHGVAR     VAR(&THRESHOLDA) VALUE(&THRESHOLD)
             CHGVAR     VAR(&JUMPA) VALUE(&JUMP)
/* Get first reading of system storage values. */
             CALL       PGM(UP0249) PARM(&UP249RTN &SYSPCTAFT &SYSTOT)
/* If the system is already over the threshold then halt processing ... */
             IF         COND(&SYSPCTAFT *GE &THRESHOLD) THEN(DO)
                GOTO       CMDLBL(BREACH)
             ENDDO
/* ... otherwise update data area and continue. */
             CHGDTAARA  DTAARA(&FMLIB/SMBRGMIGDA (23 2)) +
                          VALUE(&THRESHOLDA)
             CHGDTAARA  DTAARA(&FMLIB/SMBRGMIGDA (25 2)) VALUE(&JUMPA)

/* Work out whether special migration is required. */
             RTVDTAARA  DTAARA(&FMLIB/SMBRGMIGDA (1 22)) RTNVAR(&ORLVL)
             IF         COND(%SST(&ORLVL 1 10) *EQ 'Midas     ') +
                          THEN(DO)
                CHGVAR     VAR(&MODE) VALUE('*PREAC')
             ENDDO
/**********  ELSE       CMD(DO)                                                      */ /*MD020016*/
             IF         COND(%SST(&ORLVL 1 10) *EQ 'MidasPlus ') +
                          THEN(DO)                                                      /*MD020016*/
                IF         COND(%SST(&ORLVL 11 3) *EQ '1.1' *OR +
                             %SST(&ORLVL 11 3) *EQ '1.2') THEN(DO)
                   CHGVAR     VAR(&MODE) VALUE('*PREAC')
                ENDDO
                ELSE       CMD(DO)
                   IF         COND(%SST(&ORLVL 11 3) *EQ '1.4') THEN(DO)               /*AR1085447*/
                      CHGVAR     VAR(&MODE) VALUE('*PREAL')                            /*AR1085447*/
                   ENDDO                                                               /*AR1085447*/
                ENDDO                                                                   /*MD020016*/
             ENDDO                                                                      /*MD020016*/
             IF         COND(%SST(&ORLVL 1 10) *EQ 'BFMidas   ') +
                          THEN(DO)                                                      /*MD020016*/
                IF         COND(%SST(&ORLVL 11 3) *EQ '1.4' *OR +
                             %SST(&ORLVL 11 3) *EQ '2.0') THEN(DO)                      /*MD020016*/
                   CHGVAR     VAR(&MODE) VALUE('*PREAL')                                /*MD020016*/
/**********        ELSE       CMD(DO)                                      */ /*AR1085447 MD020016*/
/**********        CHGVAR     VAR(&MODE) VALUE('*POSTAC')                            */ /*MD020016*/
/**********        ENDDO                                                   */ /*AR1085447 MD020016*/
                ENDDO
             ENDDO
             IF         COND(&MODE *EQ ' ') THEN(DO)                                    /*MD020016*/
                CHGVAR     VAR(&MODE) VALUE('*POSTAC')                                  /*MD020016*/
             ENDDO                                                                      /*MD020016*/

/* If this is not a re-run then populate driving file. */
             IF         COND(&RERUN *EQ '*NO') THEN(DO)
                DLTF       FILE(QTEMP/SMC000038O)
                MONMSG     MSGID(CPF0000)
                DSPOBJD    OBJ(&FMLIB/*ALL) OBJTYPE(*ALL) +
                             OUTPUT(*OUTFILE) OUTFILE(QTEMP/SMC000038O)
                CPYF       FROMFILE(QTEMP/SMC000038O) TOFILE(SMCPYDPD) +
                             MBROPT(*REPLACE) FMTOPT(*MAP *DROP)
/* Update driving file with the 'to' library. */
                CHGVAR     VAR(&STM_STR) VALUE('update SMCPYDPD set +
                             ODSCMD =' *BCAT &QUOTE *TCAT &TOLIB *TCAT +
                             &QUOTE)
                CALL       PGM(UTWRTSQL) PARM(&STM_STR '*CLEAR')
                RUNSQLSTM  SRCFILE(QTEMP/RUNSQL) SRCMBR(RUNSQLSTM) +
                             COMMIT(*NONE)
                MONMSG     MSGID(SQL9010)
/* Make sure status field on SMCNUMPD is blank for new migration. */
/**********     IF         COND(&MODE *EQ '*PREAC') THEN(DO) */                        /*AR1085447*/
/**********        CALL       PGM(SM000003) PARM('*ZONE  ')                            /*AR1085447*/
                IF         COND((&MODE *EQ '*PREAC') *OR +
                                (&MODE *EQ '*PREAL')) THEN(DO)                         /*AR1085447*/
                   CALL       PGM(SM000003) PARM('*ZONE  ' &MODE)                      /*AR1085447*/
/* Display list of files with packed Customer Number fields. */
                   DLTF       FILE(QTEMP/SMC000038F)
                   MONMSG     MSGID(CPF0000)
                   DSPPGMREF  PGM(SM000043) OUTPUT(*OUTFILE) +
                                OUTFILE(QTEMP/SMC000038F)
                   CPYF       FROMFILE(QTEMP/SMC000038F) TOFILE(UPPREFTPD) +
                                MBROPT(*REPLACE) FMTOPT(*MAP *DROP)
                ENDDO
/* Call program to remove records from SMCPYDPD that are not be copied. */
                CALL       PGM(SM000017)
                IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* If this is pre-Release 4 migration library then remove records from    */
/*  SMCPYDPD that were moved from the DM to the DTA library at Release 4. */
                IF         COND(%SST(&ORLVL 1 10) *EQ 'Midas     ' *AND +
                             %SST(&ORLVL 11 2) *NE 'R4') THEN(DO)
                   CALL       PGM(SM000042)
                ENDDO
             ENDDO
             ELSE       CMD(DO)
/* If this a re-run then set 'SKIP' records back to neutral value. */
                CHGVAR     VAR(&STM_STR) VALUE('update SMCPYDPD set +
                             ODDDAT =' *BCAT &QUOTE *TCAT '999999' +
                             *TCAT &QUOTE *BCAT 'where ODDDAT =' *BCAT +
                             &QUOTE *TCAT 'SKIP  ' *TCAT &QUOTE)
                CALL       PGM(UTWRTSQL) PARM(&STM_STR '*CLEAR')
                RUNSQLSTM  SRCFILE(QTEMP/RUNSQL) SRCMBR(RUNSQLSTM) +
                             COMMIT(*NONE)
                MONMSG     MSGID(SQL9010)
             ENDDO

/* Check if any items have been specified on the exceptions list. */
             CHGVAR     VAR(&NOOFEXCPTB) VALUE(%SST(&EXCEPTION 1 2))
             CHGVAR     VAR(&NOOFEXCPTS) VALUE(%BIN(&NOOFEXCPTB))
             IF         COND(&NOOFEXCPTS *NE 0) THEN(DO)
                CHGVAR     VAR(&COUNT) VALUE(1)
                CHGVAR     VAR(&STARTOBJ) VALUE(3)
                CHGVAR     VAR(&STARTTYP) VALUE(13)
EXCEPT:
                IF         COND(&COUNT *LE &NOOFEXCPTS) THEN(DO)
                   CHGVAR     VAR(&EXCPTOBJ) VALUE(%SST(&EXCEPTION +
                                &STARTOBJ 10))
                   CHGVAR     VAR(&EXCPTTYP) VALUE(%SST(&EXCEPTION +
                                &STARTTYP 8))
/* Set record on driving file to indicate that object is to be skipped. */
                   CALL       PGM(SM000008) PARM(&EXCPTOBJ &EXCPTTYP +
                          '*UPDATE' 'SKIP  ')
                   CHGVAR     VAR(&COUNT) VALUE(&COUNT + 1)
                   CHGVAR     VAR(&STARTOBJ) VALUE(&STARTOBJ + 18)
                   CHGVAR     VAR(&STARTTYP) VALUE(&STARTTYP + 18)
                   GOTO       CMDLBL(EXCEPT)
                ENDDO
             ENDDO

/* Call program to handle known files which need particular treatment. */                 /*CUP003*/
             IF         COND(%SST(&ORLVL 1 10) *EQ 'Midas     ' *OR +
                          %SST(&ORLVL 1 10) *EQ 'MidasPlus ' *AND +
                          (%SST(&ORLVL 11 10) *LT '1.4')) THEN(DO)                        /*CUP003*/
                CALL       PGM(SMC000115) PARM('CGCORRPD' &FMLIB &TOLIB)                  /*CUP003*/
                CALL       PGM(SMC000115) PARM('CGCDSHPD' &FMLIB &TOLIB)                  /*CUP003*/
             ENDDO                                                                        /*CUP003*/

             CHGVAR     VAR(&FMPFX) VALUE(%SST(&FMLIB 1 2))                            /*MD020092B*/
             CHGVAR     VAR(&TOPFX) VALUE(%SST(&TOLIB 1 2))                            /*MD020092B*/

/* Call program to copy across multi-membered DP files. */                             /*MD020092B*/
             CALL       PGM(SM000008) PARM('SMC000008' '*PGM' +
                          '*CHECK' &STATUS)                                            /*MD020092B*/
             IF         COND(&STATUS *NE 'PASSED' *AND &STATUS *NE +
                          'SUBMIT') THEN(DO)                                           /*MD020092B*/
                CALL       PGM(SM000008) PARM('SMC000008' '*PGM' +
                             '*WRITE' 'SUBMIT')                                        /*MD020092B*/
                SBMJOB     CMD(CALL PGM(SMC000008) PARM(&FMPFX &TOPFX)) +
                             JOB(SMC000008) JOBD(SETUP) JOBQ(SMJOBQNM)                 /*MD020092B*/
             ENDDO                                                                     /*MD020092B*/

READNEXT:
             RCVF
             MONMSG     MSGID(CPF0864) EXEC(DO)
                GOTO       CMDLBL(EXTRA)
             ENDDO

/* If this is a rerun then some records will have their status already updated */
/*  so some of these can be ignored.  Those with a status of PASSED are        */
/*  already excluded by the logical.                                           */
             IF         COND(&ODDDAT *EQ 'SUBMIT' *OR &ODDDAT *EQ +
                          'NFOUND' *OR &ODDDAT *EQ 'SKIP  ') THEN(DO)
                GOTO       CMDLBL(READNEXT)
             ENDDO
             IF         COND(&ODDDAT *EQ 'UNIQUE') THEN(DO)                               /*CUP003*/
                GOTO       CMDLBL(READNEXT)                                               /*CUP003*/
             ENDDO                                                                        /*CUP003*/

/* If threshold has been breached then report. */
             RTVDTAARA  DTAARA(&FMLIB/SMBRGMIGDA (27 1)) +
                          RTNVAR(&BREACH)
             IF         COND(&BREACH *EQ 'Y') THEN(DO)
                GOTO       CMDLBL(BREACH)
             ENDDO

/* Ignore record for temporary data area SMBRGMIGDA. */
             IF         COND(&ODOBNM *EQ 'SMBRGMIGDA') THEN(DO)
                CALL       PGM(SM000008) PARM(&ODOBNM '*DTAARA' +
                             '*DELETE' ' ')
                GOTO       CMDLBL(READNEXT)
             ENDDO

/* If object not physical file, data area or data queue then just flag */
/*  as "not found".                                                   */
/**********  IF         COND(%SST(&ODOBAT 1 2) *NE 'PF' *AND &ODOBTP +                 */ /*CUP003*/
/**********               *NE '*DTAARA' *AND &ODOBTP *NE '*DTAQ') +                    */ /*CUP003*/
/**********               THEN(DO)                                                     */ /*CUP003*/
             IF         COND(%SST(&ODOBAT 1 2) *NE 'PF' *AND &ODOBTP +
                          *NE '*DTAARA' *AND &ODOBTP *NE '*DTAQ' +
                          *AND &ODOBTP *NE '*VLDL') THEN(DO)                              /*CUP003*/
                CALL       PGM(SM000008) PARM(&ODOBNM &ODOBTP '*UPDATE' +
                             'NFOUND')
                GOTO       CMDLBL(READNEXT)
             ENDDO

 /* Update driving file that job is submitted. */
             CALL       PGM(SM000008) PARM(&ODOBNM &ODOBTP '*UPDATE' +
                          'SUBMIT')

/* Submit job to copy data for each object. */
             SBMJOB     CMD(CALL PGM(SMC000042) PARM(&ODOBNM &ODOBTP +
                          &FMLIB &TOLIB &CRT &RERUN &MODE)) +
                          JOB(&ODOBNM) JOBD(SETUP) JOBQ(SMJOBQNM)

             GOTO       CMDLBL(READNEXT)

EXTRA:
/**********  CHGVAR     VAR(&FMPFX) VALUE(%SST(&FMLIB 1 2))                         */ /*MD020092B*/
/**********  CHGVAR     VAR(&TOPFX) VALUE(%SST(&TOLIB 1 2))                         */ /*MD020092B*/

/* Call program to handle pre-Release 4 exceptions. */
             IF         COND(%SST(&ORLVL 1 10) *EQ 'Midas     ' *AND +
                          %SST(&ORLVL 11 2) *NE 'R4') THEN(DO)
/* Check if option has already been run. */
                CALL       PGM(SM000008) PARM('SMC0260' '*PGM' '*CHECK' +
                             &STATUS)
                IF         COND(&STATUS *NE 'PASSED' *AND &STATUS *NE +
                             'SUBMIT') THEN(DO)
/* Update driving file and submit job. */
                   CALL       PGM(SM000008) PARM('SMC0260' '*PGM' '*WRITE' +
                                'SUBMIT')
                   SBMJOB     CMD(CALL PGM(SMC0260) PARM(&FMPFX &TOPFX)) +
                                JOB(SMC0260) JOBD(SETUP) JOBQ(SMJOBQNM)
                ENDDO
             ENDDO

/**Call*program*to*change*system*prefixes.**/ /*                                     */ /*AR792029*/
/**********  IF         COND(&SYSPFX *EQ '*YES') THEN(DO)                            */ /*AR792029*/
/**Check*if*option*has*already*been*run.**/ /*                                       */ /*AR792029*/
/**********     CALL       PGM(SM000008) PARM('UPC8005' '*PGM' '*CHECK' +            */ /*AR792029*/
/**********                  &STATUS)                                                */ /*AR792029*/
/**********     IF         COND(&STATUS *NE 'PASSED' *AND &STATUS *NE +              */ /*AR792029*/
/**********                  'SUBMIT') THEN(DO)                                      */ /*AR792029*/
/**Update*driving*file*and*submit*job.**/ /*                                         */ /*AR792029*/
/**********        CALL       PGM(SM000008) PARM('UPC8005' '*PGM ' +                 */ /*AR792029*/
/**********                     '*WRITE' 'SUBMIT')                                   */ /*AR792029*/
/**********        SBMJOB     CMD(CALL PGM(UPC8005) PARM(&FMPFX &TOPFX +             */ /*AR792029*/
/**********                     '*MIG')) JOB(UPC8005) JOBD(SETUP) +                  */ /*AR792029*/
/**********                     JOBQ(SMJOBQNM)                                       */ /*AR792029*/
/**********     ENDDO                                                                */ /*AR792029*/
/**********  ENDDO                                                                   */ /*AR792029*/

/**Call*program*to*copy*across*multi-membered*DP*files.**/ /*                       */ /*MD020092B*/
/**********  CALL       PGM(SM000008) PARM('SMC000008' '*PGM' +                     */ /*MD020092B*/
/**********               '*CHECK' &STATUS)                                         */ /*MD020092B*/
/**********  IF         COND(&STATUS *NE 'PASSED' *AND &STATUS *NE +                */ /*MD020092B*/
/**********               'SUBMIT') THEN(DO)                                        */ /*MD020092B*/
/**********     CALL       PGM(SM000008) PARM('SMC000008' '*PGM' +                  */ /*MD020092B*/
/**********                  '*WRITE' 'SUBMIT')                                     */ /*MD020092B*/
/**********     SBMJOB     CMD(CALL PGM(SMC000008) PARM(&FMPFX &TOPFX)) +           */ /*MD020092B*/
/**********                  JOB(SMC000008) JOBD(SETUP) JOBQ(SMJOBQNM)              */ /*MD020092B*/
/**********  ENDDO                                                                  */ /*MD020092B*/

/* Call program to copy renamed files (if any). */
             CALL       PGM(SM000008) PARM('SMC000031' '*PGM' +
                          '*CHECK' &STATUS)
             IF         COND(&STATUS *NE 'PASSED' *AND &STATUS *NE +
                          'SUBMIT') THEN(DO)
                CALL       PGM(SM000008) PARM('SMC000031' '*PGM' +
                             '*WRITE' 'SUBMIT')
                SBMJOB     CMD(CALL PGM(SMC000031) PARM(&FMLIB &TOLIB)) +
                             JOB(SMC000031) JOBD(SETUP) JOBQ(SMJOBQNM)
             ENDDO

/* Call program to copy files that have been moved out of deliverable data */             /*CPK030*/
/*  library.                                                               */             /*CPK030*/
             CALL       PGM(SM000008) PARM('SMC000132' '*PGM' +
                          '*CHECK' &STATUS)                                               /*CPK030*/
             IF         COND(&STATUS *NE 'PASSED' *AND &STATUS *NE +
                          'SUBMIT') THEN(DO)                                              /*CPK030*/
                CALL       PGM(SM000008) PARM('SMC000132' '*PGM' +
                             '*WRITE' 'SUBMIT')                                           /*CPK030*/
/************   SBMJOB     CMD(CALL PGM(SMC0000132) PARM(&FMLIB &TOLIB +
/************                '*ZONE  ')) JOB(SMC000132) JOBD(SETUP) +
/************                JOBQ(SMJOBQNM)                                  /*CPK030*/ /*MD039374*/
                SBMJOB     CMD(CALL PGM(SMC000132) PARM(&FMLIB &TOLIB +
                             '*ZONE  ')) JOB(SMC000132) JOBD(SETUP) +
                             JOBQ(SMJOBQNM)                                             /*MD039374*/
             ENDDO                                                                        /*CPK030*/

/* Call program to copy files that have been moved out of deliverable data */           /*MD061587*/
/*  library (from GM-DM to GP-DP)                                          */           /*MD061587*/
             CALL       PGM(SM000008) PARM('SMC000133' '*PGM' +
                          '*CHECK' &STATUS)                                             /*MD061587*/
             IF         COND(&STATUS *NE 'PASSED' *AND &STATUS *NE +
                          'SUBMIT') THEN(DO)                                            /*MD061587*/
                CALL       PGM(SM000008) PARM('SMC000133' '*PGM' +
                             '*WRITE' 'SUBMIT')                                         /*MD061587*/
                SBMJOB     CMD(CALL PGM(SMC000133) PARM(&FMLIB &TOLIB +
                             '*GLOBAL')) JOB(SMC000133) JOBD(SETUP) +
                             JOBQ(SMJOBQNM)                                             /*MD061587*/
             ENDDO                                                                      /*MD061587*/
                                                                                        /*MD061587*/
             GOTO       CMDLBL(ENDPGM)

BREACH:
/* Send specific message for breach of threshold. */
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('The +
                          limits for the command have been +
                          breached.  The migration is halted.') +
                          MSGTYPE(*ESCAPE)
             GOTO       CMDLBL(ENDPGM)

ERROR:
 /* Recursive error. */
             IF         COND(&RECURSIVE *EQ 'Y') THEN(DO)
                SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) +
                             MSGDTA('Recursive error in pgm +
                             SMC000038.') MSGTYPE(*ESCAPE)
             ENDDO
             CHGVAR     VAR(&RECURSIVE) VALUE('Y')
ERROR2:
 /* Receive escape error message */
             RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                          MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
 /* Pass it back to calling program */
             SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                          MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)

ENDPGM:
             ENDPGM
