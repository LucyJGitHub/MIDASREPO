/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas SM Input "from" release level - zone')          */
/*********************************************************************/
/*                                                                   */
/*       Midas - Implementation module                               */
/*                                                                   */
/*       SMC000069 - Input 'from' release level                      */
/*                                                                   */
/*       (c) Finastra International Limited 2010                     */
/*                                                                   */
/*       Last Amend No. MD056103           Date 23Jun20              */
/*       Prev Amend No. MD054605           Date 17Oct19              */
/*                      MD046248           Date 27Oct17              */
/*                      CUP023             Date 17Mar11              */
/*                      BUG27791 *CREATE   Date 28May10              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD056103 - Ensure proper update of SDSVLXTD                 */
/*       MD054605 - Deliverable Data Split for SDSVALPD              */
/*       MD046248 - Finastra Rebranding                              */
/*       CUP023 - Addition of sequence numbers for release levels    */
/*       BUG27791 - Identify 'from' release more easily              */
/*                                                                   */
/*********************************************************************/
/**********  PGM        PARM(&OPFXSVAL)                                                */ /*CUP023*/
             PGM        PARM(&PFXSVAL &OPFXSVAL)                                          /*CUP023*/

             DCL        VAR(&PFXSVAL) TYPE(*CHAR) LEN(20)                                 /*CUP023*/
             DCL        VAR(&OPFXSVAL) TYPE(*CHAR) LEN(20)

             DCL        VAR(&SBSID) TYPE(*CHAR) LEN(2)                                    /*CUP023*/
             DCL        VAR(&OLDSBSID) TYPE(*CHAR) LEN(2)
             DCL        VAR(&FMDMLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&FMDTALIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&PRODUCT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&REL) TYPE(*CHAR) LEN(10)
             DCL        VAR(&SUBRLS) TYPE(*CHAR) LEN(2)
             DCL        VAR(&SVAL) TYPE(*CHAR) LEN(200)
             DCL        VAR(&AORTN) TYPE(*CHAR) LEN(7)
             DCL        VAR(&RELDA500) TYPE(*CHAR) LEN(500)
             DCL        VAR(&RELDA200) TYPE(*CHAR) LEN(200)
             DCL        VAR(&BLANKSVAL) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&MESSAGE) TYPE(*CHAR) LEN(50)
             DCL        VAR(&STM_STR) TYPE(*CHAR) LEN(80)                                 /*CUP023*/
             DCL        VAR(&SYSTEMVAL) TYPE(*CHAR) LEN(200)                            /*MD056103*/

/**********  DCLF       FILE(UPSVALJ0) OPNID(A) */                                      /*MD054605*/
             DCLF       FILE(UPSVALJ0) OPNID(A) ALWNULL(*YES)                           /*MD054605*/
/**********  DCLF       FILE(SCRELHPD) OPNID(B)                                        */ /*CUP023*/

             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2010')

/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))

             CHGJOB     SWS(XXXXXX00)

/* Create data area /MIDASMSG in QTEMP */
             DLTDTAARA  DTAARA(QTEMP/MIDASMSG)
             MONMSG     MSGID(CPF0000)
             CRTDTAARA  DTAARA(QTEMP/MIDASMSG) TYPE(*CHAR) LEN(800) +
                          VALUE(' ')

/* Create and rename temporary source file for RUNSQLSTM. */                              /*CUP023*/
             DLTF       FILE(QTEMP/RUNSQLSTM)                                             /*CUP023*/
             MONMSG     MSGID(CPF0000)                                                    /*CUP023*/
             DLTF       FILE(QTEMP/RUNSQL)                                                /*CUP023*/
             MONMSG     MSGID(CPF0000)                                                    /*CUP023*/
             CRTSRCPF   FILE(QTEMP/RUNSQLSTM) RCDLEN(112) +
                          MBR(RUNSQLSTM) TEXT('Temporary source +
                          file for SMC000069')                                            /*CUP023*/
             RNMOBJ     OBJ(QTEMP/RUNSQLSTM) OBJTYPE(*FILE) +
                          NEWOBJ(RUNSQL)                                                  /*CUP023*/

/* Check that System Values have an entry. */
VALIDATE:
             RCVF       OPNID(A)
             MONMSG     MSGID(CPF0864) EXEC(DO)
                GOTO       CMDLBL(CHECK)
             ENDDO

             IF         COND(&A_GISVAL *EQ &PFXSVAL) THEN(DO)                             /*CUP023*/
                IF         COND(&A_GIVAL *EQ ' ') THEN(DO)                                /*CUP023*/
                   CHGVAR     VAR(&BLANKSVAL) VALUE('Y')                                  /*CUP023*/
                ENDDO                                                                     /*CUP023*/
                ELSE       CMD(DO)                                                        /*CUP023*/
                   CHGVAR     VAR(&SBSID) VALUE(&A_GIVAL)                                 /*CUP023*/
                ENDDO                                                                     /*CUP023*/
             ENDDO                                                                        /*CUP023*/

             IF         COND(&A_GISVAL *EQ &OPFXSVAL) THEN(DO)
                IF         COND(&A_GIVAL *EQ ' ') THEN(DO)
                   CHGVAR     VAR(&BLANKSVAL) VALUE('Y')
                ENDDO
                ELSE       CMD(DO)
                   CHGVAR     VAR(&OLDSBSID) VALUE(&A_GIVAL)
                ENDDO
             ENDDO

             GOTO       CMDLBL(VALIDATE)

 CHECK:
             IF         COND(&BLANKSVAL *EQ 'Y') THEN(DO)
                RTVMSG     MSGID(UPM0003) MSGF(UTMSGF) MSG(&MESSAGE)
                CHGDTAARA  DTAARA(MIDASMSG (101 50)) VALUE(&MESSAGE)
                RTVMSG     MSGID(UPM0004) MSGF(UTMSGF) MSG(&MESSAGE)
                CHGDTAARA  DTAARA(MIDASMSG (151 50)) VALUE(&MESSAGE)
                CALL       PGM(SCC0010) PARM('SMC000069' 'ENTER' ' ')
                GOTO       CMDLBL(ENDPGM)
             ENDDO

/* Set up library list. */                                                                /*CUP023*/
             CALL       PGM(UPC0014) PARM(&SBSID)                                         /*CUP023*/

/* Create temporary data area to store release data. */
             DLTDTAARA  DTAARA(QTEMP/SMBRGRELDA)
             MONMSG     MSGID(CPF0000)
             CRTDTAARA  DTAARA(QTEMP/SMBRGRELDA) TYPE(*CHAR) LEN(256)

/* Attempt to  get release level from System Values. */
             CALL       PGM(AOSVALR0) PARM(&AORTN +
                          'BrgOldSystemRlsLvl' &SVAL ' ' ' ' ' ' ' +
                          ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' +
                          ' ' ' ' ' ' ' ')
             IF         COND(&AORTN *NE '       ') THEN(DO)
                GOTO       CMDLBL(ERROR)
             ENDDO
             ELSE       CMD(DO)
                IF         COND(&SVAL *EQ ' ') THEN(DO)
                   GOTO       CMDLBL(RELH)
                ENDDO
                ELSE       CMD(DO)
                   CHGVAR     VAR(&PRODUCT) VALUE(%SST(&SVAL 1 10))
                   CHGVAR     VAR(&REL) VALUE(%SST(&SVAL 11 10))
                   CHGVAR     VAR(&SUBRLS) VALUE(%SST(&SVAL 21 2))
                   GOTO       CMDLBL(PROMPT)
                ENDDO
             ENDDO

RELH:
/* Check if SCRELHPD exists in 'from' system. */
             CHGVAR     VAR(&FMDTALIB) VALUE(&OLDSBSID *TCAT 'DTALIB')
             CHKOBJ     OBJ(&FMDTALIB/SCRELHPD) OBJTYPE(*FILE)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                GOTO       CMDLBL(MIDAS)
             ENDDO

             DLTF       FILE(QTEMP/RELH)                                                  /*CUP023*/
             MONMSG     MSGID(CPF0000)                                                    /*CUP023*/

/* Create copy of the latest RELH file and copy 'from' version to it. */                  /*CUP023*/
             DLTF       FILE(QTEMP/RELHOLD)                                               /*CUP023*/
             MONMSG     MSGID(CPF0000)                                                    /*CUP023*/
             CRTDUPOBJ  OBJ(SCRELHPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(RELHOLD)                                    /*CUP023*/
             CPYF       FROMFILE(&FMDTALIB/SCRELHPD) +
                          TOFILE(QTEMP/RELHOLD) MBROPT(*REPLACE) +
                          FMTOPT(*MAP *DROP)                                              /*CUP023*/
/* Create copy of the latest RELH to create view. */                                      /*CUP023*/
             DLTF       FILE(QTEMP/RELHNEW)                                               /*CUP023*/
             MONMSG     MSGID(CPF0000)                                                    /*CUP023*/
             CPYF       FROMFILE(SCRELHPD) TOFILE(QTEMP/RELHNEW) +
                          MBROPT(*REPLACE) CRTFILE(*YES)                                  /*CUP023*/

/* Build view to get sequential list of release levels. */                                /*CUP023*/
             CHGVAR     VAR(&STM_STR) VALUE('create view QTEMP/RELH +
                          as select b.AXSEQ1 concat b.AXSEQ2 concat +
                          b.AXSEQ3')                                                      /*CUP023*/
             CALL       PGM(UTWRTSQL) PARM(&STM_STR '*CLEAR')                             /*CUP023*/
             CHGVAR     VAR(&STM_STR) VALUE('concat a.AXRELL concat +
                          a.AXIREL concat a.AXINFO as ALLRCD')                            /*CUP023*/
             CALL       PGM(UTWRTSQL) PARM(&STM_STR '*WRITE')                             /*CUP023*/
             CHGVAR     VAR(&STM_STR) VALUE('from QTEMP/RELHOLD a +
                          left join QTEMP/RELHNEW b')                                     /*CUP023*/
             CALL       PGM(UTWRTSQL) PARM(&STM_STR '*WRITE')                             /*CUP023*/
             CHGVAR     VAR(&STM_STR) VALUE('on a.AXRELL = b.AXRELL +
                          and a.AXIREL = b.AXIREL and a.AXINFO = +
                          b.AXINFO')                                                      /*CUP023*/
             CALL       PGM(UTWRTSQL) PARM(&STM_STR '*WRITE')                             /*CUP023*/
             RUNSQLSTM  SRCFILE(QTEMP/RUNSQL) SRCMBR(RUNSQLSTM) +
                          COMMIT(*NONE)                                                   /*CUP023*/
             MONMSG     MSGID(SQL9010)                                                    /*CUP023*/

/* If SCRELHPD is found then read file and find out latest record. */
/**********  OVRDBF     FILE(GPRELHPD) TOFILE(&FMDTALIB/SCRELHPD)                      */ /*CUP023*/
             CALL       PGM(SM000006) PARM(&PRODUCT &REL &SUBRLS)
/**********  DLTOVR     FILE(GPRELHPD)                                                 */ /*CUP023*/
             GOTO       CMDLBL(PROMPT)

MIDAS:
             CHGVAR     VAR(&FMDMLIB) VALUE(&OLDSBSID *TCAT 'DMLIB')
             CHGVAR     VAR(&PRODUCT) VALUE('Midas     ')
             CHKOBJ     OBJ(&FMDMLIB/MIDAS) OBJTYPE(*DTAARA)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                GOTO       CMDLBL(MIDASDBA)
             ENDDO
/* Work out combinations for data area MIDAS. */
             RTVDTAARA  DTAARA(&FMDMLIB/MIDAS) RTNVAR(&RELDA500)
             IF         COND(%SST(&RELDA500 15 1) *EQ '4') THEN(DO)
                CHGVAR     VAR(&REL) VALUE('R4')
                CHGVAR     VAR(&SUBRLS) VALUE(%SST(&RELDA500 19 2))
             ENDDO
             IF         COND(%SST(&RELDA500 19 3) *EQ 'DBA') THEN(DO)
                CHGVAR     VAR(&REL) VALUE(%SST(&RELDA500 19 3) *BCAT +
                             %SST(&RELDA500 22 2))
                CHGVAR     VAR(&SUBRLS) VALUE(%SST(&RELDA500 29 2))
             ENDDO
             IF         COND(%SST(&RELDA500 19 3) *EQ 'R10') THEN(DO)
                CHGVAR     VAR(&REL) VALUE('ABS' *BCAT %SST(&RELDA500 +
                             20 4))
                CHGVAR     VAR(&SUBRLS) VALUE(%SST(&RELDA500 29 2))
             ENDDO
             GOTO       CMDLBL(PROMPT)

MIDASDBA:
             CHKOBJ     OBJ(&FMDMLIB/MIDASDBA) OBJTYPE(*DTAARA)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                GOTO       CMDLBL(MIDASDBAR2)
             ENDDO
/* Work out combinations for data area MIDASDBA. */
             RTVDTAARA  DTAARA(&FMDMLIB/MIDASDBA) RTNVAR(&RELDA500)
             IF         COND(%SST(&RELDA500 7 3) *EQ 'DBA') THEN(DO)
                CHGVAR     VAR(&REL) VALUE('DBA R' *TCAT %SST(&RELDA500 +
                             19 1))
                CHGVAR     VAR(&SUBRLS) VALUE(%SST(&RELDA500 23 2))
             ENDDO
             GOTO       CMDLBL(PROMPT)

MIDASDBAR2:
             CHKOBJ     OBJ(&FMDMLIB/MIDASDBAR2) OBJTYPE(*DTAARA)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                GOTO       CMDLBL(PROMPT)
             ENDDO
/* Work out combinations for data area MIDASDBA. */
             RTVDTAARA  DTAARA(&FMDMLIB/MIDASDBAR2) RTNVAR(&RELDA200)
             IF         COND(%SST(&RELDA200 7 3) *EQ 'DBA') THEN(DO)
                CHGVAR     VAR(&REL) VALUE('DBA R' *TCAT %SST(&RELDA200 +
                             19 1))
                IF         COND(%SST(&RELDA200 24 2) *EQ 'TF' *OR +
                             %SST(&RELDA200 24 2) *EQ 'IR') THEN(DO)
                   CHGVAR     VAR(&SUBRLS) VALUE(%SST(&RELDA200 26 2))
                ENDDO
                ELSE       CMD(DO)
                   CHGVAR     VAR(&SUBRLS) VALUE(%SST(&RELDA200 21 2))
                ENDDO
             ENDDO

PROMPT:
/* Update temporary data area to supply prompt override program; if values */
/*  are blank then enter default values.                                   */
             IF         COND(&REL *EQ ' ') THEN(DO)
                CHGVAR     VAR(&PRODUCT) VALUE('Midas')
                CHGVAR     VAR(&REL) VALUE('R4')
                CHGVAR     VAR(&SUBRLS) VALUE('00')
             ENDDO
             CHGDTAARA  DTAARA(QTEMP/SMBRGRELDA (1 10)) VALUE(&PRODUCT)
             CHGDTAARA  DTAARA(QTEMP/SMBRGRELDA (11 10)) VALUE(&REL)
             CHGDTAARA  DTAARA(QTEMP/SMBRGRELDA (21 2)) VALUE(&SUBRLS)

/**********  OVRDBF     FILE(GPSVALL0) TOFILE(SDSVALL0) OVRSCOPE(*JOB) */               /*MD054605*/
/**********  ?          RELEASELVL                                                     */ /*CUP023*/
             ?          RELEASELVL ??PRODUCT(&PRODUCT) ??REL(&REL) +
                          ??SUBRLS(&SUBRLS)                                               /*CUP023*/
             MONMSG     MSGID(CPF6801)
/**********  DLTOVR     FILE(GPSVALL0) LVL(*JOB) */                                     /*MD054605*/
             CHGVAR     VAR(&STM_STR) VALUE(' ')                                        /*MD056103*/
             CHGVAR     VAR(&STM_STR) VALUE('update SDSVLXTD z +
                         set (z.gival) = (select g.gival from GPSVLXTD g')              /*MD056103*/
             CALL       PGM(UTWRTSQL) PARM(&STM_STR '*CLEAR')                           /*MD056103*/
             CHGVAR     VAR(&STM_STR) VALUE(' where g.gisval +
                          = ''BrgOldSystemRlsLvl'') where z.gisval +
                          = ''BrgOldSystemRlsLvl'';')                                   /*MD056103*/
             CALL       PGM(UTWRTSQL) PARM(&STM_STR '*WRITE')                           /*MD056103*/
             RUNSQLSTM  SRCFILE(QTEMP/RUNSQL) SRCMBR(RUNSQLSTM) +
                          COMMIT(*NONE)                                                 /*MD056103*/
             MONMSG     MSGID(SQL9010)                                                  /*MD056103*/
                                                                                        /*MD056103*/
             GOTO       CMDLBL(ENDPGM)
ERROR:
/* Set up messages for Midas Information Screen. */
/**********  RTVMSG     MSGID(UPM0001) MSGF(UTMSGF) +                                  */ /*CUP023*/
/**********               MSGDTA('SMC000067') MSG(&MESSAGE)                            */ /*CUP023*/
             RTVMSG     MSGID(UPM0001) MSGF(UTMSGF) +
                          MSGDTA('SMC000069') MSG(&MESSAGE)                               /*CUP023*/
             MONMSG     MSGID(CPF0000)
             CHGDTAARA  DTAARA(MIDASMSG (101 50)) VALUE(&MESSAGE)
             MONMSG     MSGID(CPF0000)
             CHGDTAARA  DTAARA(MIDASMSG (201 50)) VALUE('Check +
                          joblog for details')
             MONMSG     MSGID(CPF0000)
/**********  CALL       PGM(SCC0010) PARM('SMC000067' 'ENTER' ' ')                     */ /*CUP023*/
             CALL       PGM(SCC0010) PARM('SMC000069' 'ENTER' ' ')                        /*CUP023*/
             MONMSG     MSGID(CPF0000)

ENDPGM:
             ENDPGM
