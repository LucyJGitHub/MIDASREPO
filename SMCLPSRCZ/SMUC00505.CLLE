/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas SM FusionBanking Platform Schema Upgrade')      */
/*********************************************************************/
/*                                                                   */
/*       Midas - Implementation Module                               */
/*                                                                   */
/*       SMUC00505 - FusionBanking Platform Schema Upgrade           */
/*                                                                   */
/*       (c) Finastra International Limited 2021                     */
/*                                                                   */
/*       Last Amend No. MD058454           Date 18Aug21              */
/*       Prev Amend No. MD057446  *CREATE  Date 12Jan21              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD058454 - SP25: Installation issues with ASPs.             */
/*                - Include ASP and ASPDEV as parameters in CHGOWNAUT*/
/*       MD057446 - Duplicate key error on SMUPGCTD when running     */
/*                  PRCA. Create separate programs for global and    */
/*                  zonal schema upgrade. Transfer zone processing   */
/*                  from program SMUC00504 to this program.          */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&LAYER &NEWBFLIB)

             DCL        VAR(&LAYER) TYPE(*CHAR) LEN(7)
             DCL        VAR(&NEWBFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&BRGBRGLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&BRGDTALIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&BRGSRCLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&GLOBPRFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&ZONEPRFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&ERRORFLAG) TYPE(*CHAR) LEN(1)
             DCL        VAR(&STATUS) TYPE(*CHAR) LEN(1)
             DCL        VAR(&OWNER) TYPE(*CHAR) LEN(10)
             DCL        VAR(&AUTL) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DPLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&BFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TODAY) TYPE(*CHAR) LEN(6)
             DCL        VAR(&BACKUPLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&SAVF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&JLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&JRN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RETURN) TYPE(*CHAR) LEN(1)
             DCL        VAR(&IASP_YN) TYPE(*CHAR) LEN(1)                                /*MD058454*/
             DCL        VAR(&IASP) TYPE(*CHAR) LEN(10)                                  /*MD058454*/

/*/COPY SDCPYSRC,SDSVALDCL */

             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2021')

/** Global monitor message */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ABNOR))

             CHGJOB     SWS(XXXXXX00)

/** The new schema library should exists */
             CHKOBJ     OBJ(&NEWBFLIB) OBJTYPE(*LIB)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                GOTO       CMDLBL(ABNOR)
             ENDDO

/** Retrieve required system values */
             CALLSUBR   SUBR(RTVSYSVAL)
             IF         COND(&ERRORFLAG *EQ 'E') THEN(DO)
                GOTO       CMDLBL(ABNOR)
             ENDDO

/** Setup program variables */
             CHGVAR     VAR(&DPLIB) VALUE(&ZONEPRFX *TCAT 'DPLIB')
             CHGVAR     VAR(&OWNER) VALUE(&ZONEPRFX *TCAT 'OWNER')
             CHGVAR     VAR(&AUTL) VALUE(&ZONEPRFX *TCAT 'DATABASE')
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CHGVAR     VAR(&BFLIB) VALUE(&ZONEPRFX *TCAT +
                             &GLOBPRFX *TCAT 'BFLIB')
             ENDDO

/** Create the schema upgrade status data area if not exists */
             CHKOBJ     OBJ(&DPLIB/SMZUPSTAT) OBJTYPE(*DTAARA)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                CALL       PGM(UPC000034) PARM('SMZUPSTAT' 'SMDTASRCDP' +
                             &BRGSRCLIB &DPLIB ' ' ' ' &OWNER +
                             &AUTL &RETURN)
                IF         COND(&RETURN = 'E') THEN(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
             ENDDO

/** Check the schema upgrade status */
             RTVDTAARA  DTAARA(&DPLIB/SMZUPSTAT) RTNVAR(&STATUS)

/** If status is nonblank, this is a re-run of a previous failure */
/** Do recovery point processing */
             IF         COND(&STATUS *EQ 'A') THEN(DO)
                GOTO       CMDLBL(PHASEA)
             ENDDO

             IF         COND(&STATUS *EQ 'B') THEN(DO)
                GOTO       CMDLBL(PHASEB)
             ENDDO

             IF         COND(&STATUS *EQ 'C') THEN(DO)
                GOTO       CMDLBL(PHASEC)
             ENDDO

/** PHASEA: Creation of old schema library backup before deletion */
PHASEA:
             CHGVAR     VAR(&STATUS) VALUE('A')
             CHGDTAARA  DTAARA(&DPLIB/SMZUPSTAT) VALUE(&STATUS)

             RTVJOBA    DATE(&TODAY)
             CHGVAR     VAR(&BACKUPLIB) VALUE('#' *TCAT &BFLIB)
             CHKOBJ     OBJ(&BACKUPLIB) OBJTYPE(*LIB)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CRTLIB     LIB(&BACKUPLIB) TEXT('Temp Backup for old' +
                             *BCAT &BFLIB *BCAT &TODAY)
             ENDDO

             CHGVAR     VAR(&SAVF) VALUE('#' *TCAT &BFLIB)
             CHKOBJ     OBJ(&BACKUPLIB/&SAVF) OBJTYPE(*FILE)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                CRTSAVF    FILE(&BACKUPLIB/&SAVF) TEXT(&BFLIB *BCAT +
                             'Backup')
                SAVLIB     LIB(&BFLIB) DEV(*SAVF) +
                             SAVF(&BACKUPLIB/&SAVF) ACCPTH(*YES) +
                             OUTPUT(*PRINT)
             ENDDO

/** PHASEB: Deletion of all objects from the old schema library */
/** And also, replacing it with the delivered new schema objects */
PHASEB:
             CHGVAR     VAR(&STATUS) VALUE('B')
             CHGDTAARA  DTAARA(&DPLIB/SMZUPSTAT) VALUE(&STATUS)

             CLRLIB     LIB(&BFLIB)
             CPYLIB     FROMLIB(&NEWBFLIB) TOLIB(&BFLIB) +
                          CRTLIB(*NO)

/** PHASEC: Update of new schema objects to use Midas journalling */
/** And also, update object ownership and authority */
PHASEC:
             CHGVAR     VAR(&STATUS) VALUE('C')
             CHGDTAARA  DTAARA(&DPLIB/SMZUPSTAT) VALUE(&STATUS)

/** Delete existing journals and use the Midas Journalling */
             CALLSUBR   SUBR(CHGJRN)
             IF         COND(&ERRORFLAG *EQ 'E') THEN(DO)
                GOTO       CMDLBL(ABNOR)
             ENDDO

/** Program successful completion */
/** Set status to blanks */
             CHGVAR     VAR(&STATUS) VALUE(' ')
             CHGDTAARA  DTAARA(&DPLIB/SMZUPSTAT) VALUE(&STATUS)

             GOTO       CMDLBL(ENDPGM)

/** Abnormal processing */
ABNOR:
             CHGJOB     SWS(XXXXXX11)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('Program +
                          SMUC00504 ended abnormally - see joblog.') +
                          MSGTYPE(*ESCAPE)

/*********************************************************************/
/**                                                                  */
/** Subroutine to retrieve System Values                             */
/** Note:Even if the program is being run for a zone it still needs  */
/**  to retrieve some global values.                                 */
/**                                                                  */
/*********************************************************************/
             SUBR       SUBR(RTVSYSVAL)

             CHGVAR     VAR(&SVALK1) VALUE('BrgDeliveredBrgLib')
             CHGVAR     VAR(&SVALK2) VALUE('BrgDeliveredDtaLib')
             CHGVAR     VAR(&SVALK3) VALUE('BrgDeliveredSrcLib')

             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CHGVAR     VAR(&SVALK4) VALUE('BrgMidasGlobalPrefix')
                CHGVAR     VAR(&SVALK5) VALUE('BrgMidasSystemPrefix')
                CALL       PGM(AOSVALR0) PARM(&RSVALRTNC &SVALK1 &SVAL1 +
                             &SVALK2 &SVAL2 &SVALK3 &SVAL3 &SVALK4 +
                             &SVAL4 &SVALK5 &SVAL5 &SVALK6 &SVAL6 +
                             &SVALK7 &SVAL7 &SVALK8 &SVAL8 &SVALK9 +
                             &SVAL9 &SVALK10 &SVAL10)
             ENDDO

             IF         COND(&RSVALRTNC *NE ' ') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO

             CHGVAR     VAR(&BRGBRGLIB) VALUE(%SST(&SVAL1 1 10))
             CHGVAR     VAR(&BRGDTALIB) VALUE(%SST(&SVAL2 1 10))
             CHGVAR     VAR(&BRGSRCLIB) VALUE(%SST(&SVAL3 1 10))
             CHGVAR     VAR(&GLOBPRFX) VALUE(%SST(&SVAL4 1 2))
             CHGVAR     VAR(&ZONEPRFX) VALUE(%SST(&SVAL5 1 2))

/* RE-USE VARIABLES FROM AOSVALR0 TO GPAOSVALR0                                         /*MD058454*/
             CHGVAR     VAR(&SVALK1) VALUE('IASPinstallation')                          /*MD058454*/
             CHGVAR     VAR(&SVALK2) VALUE('IASPgroup')                                 /*MD058454*/
             CHGVAR     VAR(&SVALK3) VALUE(' ')                                         /*MD058454*/
             CHGVAR     VAR(&SVALK4) VALUE(' ')                                         /*MD058454*/
             CHGVAR     VAR(&SVALK5) VALUE(' ')                                         /*MD058454*/
             CALL       PGM(GPAOSVALR0) PARM(&RSVALRTNC &SVALK1 &SVAL1 +
                          &SVALK2 &SVAL2 &SVALK3 &SVAL3 &SVALK4 +
                          &SVAL4 &SVALK5 &SVAL5 &SVALK6 &SVAL6 +
                          &SVALK7 &SVAL7 &SVALK8 &SVAL8 &SVALK9 +
                          &SVAL9 &SVALK10 &SVAL10)                                      /*MD058454*/
                                                                                        /*MD058454*/
             IF         COND(&RSVALRTNC *NE ' ') THEN(DO)                               /*MD058454*/
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')                                   /*MD058454*/
             ENDDO                                                                      /*MD058454*/
                                                                                        /*MD058454*/
             CHGVAR     VAR(&IASP_YN) VALUE(%SST(&SVAL1 1 1))                           /*MD058454*/
             IF         COND(&IASP_YN *EQ 'Y') THEN(DO)                                 /*MD058454*/
             CHGVAR     VAR(&IASP) VALUE(%SST(&SVAL2 1 10))                             /*MD058454*/
             ENDDO                                                                      /*MD058454*/
                                                                                        /*MD058454*/
             ENDSUBR

/*********************************************************************/
/**                                                                  */
/** Delete existing journals and use the Midas Journalling           */
/**                                                                  */
/*********************************************************************/
             SUBR       SUBR(CHGJRN)

/** Build outfile to control the deleting & journalling process */
             DLTF       FILE(QTEMP/BFAOBJLST)
             MONMSG     MSGID(CPF0000)
             CRTDUPOBJ  OBJ(UPOBJDTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(BFAOBJLST)

             DSPOBJD    OBJ(&BFLIB/*ALL) OBJTYPE(*ALL) +
                          OUTPUT(*OUTFILE) OUTFILE(QTEMP/BFAOBJLST) +
                          OUTMBR(*FIRST *ADD)

/** End and Delete Journals within the upgraded schema library */
             CALL       PGM(SMC002103)
             IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO

/** Delete Journal Recievers and SYS* views within schema library */
             CALL       PGM(SMC002104)
             IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO

/** Change ownership & authority of all objects w/in schema Library */
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CHGVAR     VAR(&OWNER) VALUE(&ZONEPRFX *TCAT 'OWNER')
                CHGVAR     VAR(&AUTL) VALUE(&ZONEPRFX *TCAT 'DATABASE')
             ENDDO

             IF         COND(&IASP *EQ ' ') THEN(DO)                                    /*MD058454*/
             CHGOWNAUT  OBJ(&BFLIB/*ALL) OBJTYPE(*ALL) +
                          NEWOWN(&OWNER) PUBAUT(*USE) +
                          AUTL(&AUTL) CHGLIB(N)
             ENDDO                                                                      /*MD058454*/
             ELSE       CMD(DO)                                                         /*MD058454*/
             CHGOWNAUT  OBJ(&BFLIB/*ALL) OBJTYPE(*ALL) +
                          NEWOWN(&OWNER) PUBAUT(*USE) +
                          AUTL(&AUTL) CHGLIB(N) ASP(*ASPDEV) ASPDEV(&IASP)              /*MD058454*/
             ENDDO                                                                      /*MD058454*/

/** Journal all files within schema library using Midas Journal */
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CHGVAR     VAR(&JLIB) VALUE(&ZONEPRFX *TCAT 'JLIB')
                CHGVAR     VAR(&JRN) VALUE('ICJRN')
             ENDDO

             STRJRNPF   FILE(&BFLIB/*ALL) JRN(&JLIB/&JRN) +
                          IMAGES(*BOTH)
             MONMSG     MSGID(CPF700A)

             ENDSUBR

ENDPGM:
             ENDPGM
