     H        1
      *****************************************************************
/*STD *  RPGBASE                                                      *
/*EXI *  TEXT('Midas TM Takeon FRA,IR,LE,FF trd to MM fwd book')      *
     F*****************************************************************
     F*                                                               *
     F*  Midas - Treasury Management Module                       *
     F*                                                               *
     F*  TM3340 - TAKEON POSITIONS FROM FRA, IRS, CUSTOMER            *
     F*           LENDING AND INTEREST RATE FUTURES INTO              *
     F*           MM FORWARD BOOK                                     *
     F*                                                               *
     F*  Function: This program takes on deals done today from the    *
     F*  (I/C COB) FF, LE, and FRA/IRS modules, and updates the       *
     F*            MM forward book file (MMFWDDPP). It is run         *
     F*            automatically during I/C initiation and on         *
     F*            request from the menu option during I/C.           *
     F*                                                               *
     F*  Called by: TMC3360 - Takeon control.                         *
     F*                                                               *
     F*  Calls    : none                                              *
     F*                                                               *
      *  (c) Misys International Banking Systems Ltd. 2001            *
     F*                                                               *
      *  Last Amend No. CLE148             Date 23Jul12               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      *  Prev Amend No. CSD031             Date 10Apr06               *
      *                 CSD027A            Date 16May06               *
      *                 CLE042             Date 06Sep05               *
      *                 CDL038             Date 10May05               *
      *                 CSE071             Date 19Jul05               *
      *                 CDL028             Date 07Feb05               *
      * Midas Release 4.01.02 ----------------------------------------*
     F*                 204902             Date 13Jun02               *
      * Midas Release 4 --------------- Base -------------------------*
      * Midas DBA 3.02 -----------------------------------------------*
     F*                 163486             Date 14Oct99               *
      * Midas DBA 3.00 ---------------- Base -------------------------*
     F*                 119222             DATE 21Jun99               *
     F*                 CFF004             DATE 02OCT96               *
     F*                 052266             DATE 18APR94               *
     F*                 046303             DATE 16JAN94               *
     F*                 S01393             DATE 22SEP92               *
     F*                 E38323             DATE 31JUL92               *
     F*                 BH3105/E27177      DATE 08AUG91               *
     F*                 S01195             DATE 11DEC90               *
     F*                 S01194             DATE 11DEC90               *
     F*                 S01117             DATE 11DEC90               *
     F*                                                               *
     F*---------------------------------------------------------------*
     F*                                                               *
      *  CLE148 - Alpha Loan Reference (Recompile)                    *
      *  CSD031 - Enhanced Centralised Static Data (Recompile)        *
      *  CSD027A- Conversion of cust. no. to alpha (post 103 build)   *
      *  CLE042 - Extended Loan Sub Type (Recompile)                  *
      *  CDL038 - Extended Deal Sub Type (Recompile)                  *
      *  CSE071 - Multiple Holidays Re Securities (recompile)         *
      *  CDL028 - Automatic Rate Interpolations (Recompile)           *
     F*  204902 - COB error at TM3340 : divide by zero.               *
     F*           If @WRK3 is equal to zero bypass the division and   *
     F*           zeroise the average rate.  And if EAMT is zero do   *
     F*           not process the transaction.                        *
     F*  163486 - Recompiled due to changes to DLLEEVLL.              *
     F*  119222 - Do not attempt to average a 0 event amout.          *
     F*  CFF004 - Increase in size of Price Fields,(Recompiled Only)  *
     F*  052266 - For FRA/IRS deals, Settlement Date (Value Date)     *
     F*           amounts are being totalled into the Maturity        *
     F*           In/out fields instead of Value In/Out.              *
     F*  046303 - /COPY source subr. ZFWDT amended to prevent array   *
     F*           error if no holiday record found - fixed by S01434. *
     F*           Program recompiled.                                 *
     F*  S01393 - Recompiled for SRM                                  *
     F*  E38323 - Recompiled over changed copy source ZFWDT subr.     *
     F*  BH3105/- IF A PRINCIPAL REPAYMENT IS ZERO DO NOT             *
     F*  E27177   ATTEMPT TO CALCULATE AVERAGE RATES VALUE            *
     F*  S01195 - NEW HOLIDAY PROCESSING                              *
     F*  S01194 - NEW STANDING DATA PROCESSING                        *
     F*  S01117 - DEALING PROGRAMS USED ONLY IN TREASURY MGMT.        *
     F*           MODULE NOW PREFIXED WITH 'TM'                       *
     F*  NEW PROGRAM FOR S01279 - Replace CTC with an Average rate    *
     F*                           on MM Daily Summary Enquiry.        *
     F*  AND S01280 - Include FRA, IRS, FF, LE into MM forward book   *
     F*                                                               *
     F*****************************************************************
     F*  C R E A T I O N     P A R A M E T E R S                      *
     F*                                                               *
     F*                                                               *
     F****************************************************************
     F* ID F  C  H  L    FUNCTION OF INDICATORS
     F* ---------------------------------------
     F*
     F*       50         General CHAIN fail indicator
     F*       52         General End of file indicator
     F*       53         LOKUP fail on access of currencies array
     F*       55         IRS's, Our floating rate has been fixed
     F*       56         IRS's, Their floating rate has been fixed
     F*       80         Check for low and equal on array @YD (ZA0710)
     F*       81         Check for low on array @MD (ZA0710)
     F********82*********used*by*/COPY*subroutine*********************    S01195
     F*       82         work indicator used by FFDN31 subroutine         S01195
     F********85*********used*by*/COPY*subroutine*********************    S01195
     F********89*********used*by*/COPY*subroutine*********************    S01195
     F********90*********used*by*/COPY*subroutine*********************    S01195
     F********91*********used*by*/COPY*subroutine*********************    S01195
     F********92*********used*by*/COPY*subroutine*********************    S01195
     F********93*********used*by*/COPY*subroutine*********************    S01195
     F********94*********used*by*/COPY*subroutine*********************    S01195
     F********95*********used*by*/COPY*subroutine*********************    S01195
     F********96*********used*by*/COPY*subroutine*********************    S01195
     F********97*********used*by*/COPY*subroutine*********************    S01195
     F*       98         Date format, used by /COPY subroutine
     F*       99         used by /COPY subroutine
     F*       U6         Program error
     F*       U7         Data base error
     F*       U8         Data base error
     F*
     F*****************************************************************
     F*
     F*  Group frequently used files together for efficiency.
     F*
     F***FDICDRLLIF**E***        K        DISK         KINFSR INFSR       S01194
     F**********  TABTB11F                          KIGNORE               S01194
     F**********  TABTB20F                          KIGNORE               S01194
     F***FXTB40LLIF**E***        K        DISK         KINFSR INFSR       S01194
     FDLMMTULLUF  E                    DISK         KINFSR INFSR A
     F***TABLETJ*IF**E***        K        DISK         KINFSR INFSR       S01195
     F***FDCCYTLLIF**E***        K        DISK         KINFSR INFSR       S01194
     FMARKT   IF  E           K        DISK         KINFSR INFSR      UC
     FBOOKD   IF  E           K        DISK         KINFSR INFSR      UC
     FINTYP   IF  E           K        DISK         KINFSR INFSR      UC
     FDLAMTDLLIF  E           K        DISK         KINFSR INFSR      UC
     FDLINRALLIF  E           K        DISK         KINFSR INFSR      UC
     FDLINRFLLIF  E           K        DISK         KINFSR INFSR      UC
     FDLFUTULLUF  E           K        DISK         KINFSR INFSR A    UC
     FDLFUTSLLIF  E           K        DISK         KINFSR INFSR      UC
     FDLIRFDLLIF  E           K        DISK         KINFSR INFSR      UC
     FDLFRIRLLIF  E           K        DISK         KINFSR INFSR      UC
     FDLLEEVLLIF  E           K        DISK         KINFSR INFSR      UC
     FMMFWURLLUF  E           K        DISK         KINFSR INFSR
     FMMFWUDLLUF  E           K        DISK         KINFSR INFSR A
     FMMFWUHLLUF  E           K        DISK         KINFSR INFSR A
      *
     E                    CPY@    1   1 80
      ** COPYRIGHT STATEMENT COMPILE TIME ARRAY
      *
     E                    @YD     4   4  5 0A
      **  ARRAY FOR SR. ZA0710 - CUMULATIVE DAYS IN YEAR FOR 4 YEAR PERIOD
      *
     E                    @MD    13  13  5 0A
      **  ARRAY FOR SR. ZA0710 - CUMULATIVE DAYS IN YEAR PER MONTH
      *
     E                    @CA       200  3   @CD     6
      ** Currency/currency details array
      *
      *
     E/COPY ZSRSRC,FFDATEZ1
     E***/COPY*ZSRSRC,ZDATE5Z1****                                        S01195
     E***/COPY*ZSRSRC,ZDATE3Z1****                                        S01195
     E/COPY ZSRSRC,ZDATE1Z1
     E/COPY ZSRSRC,ZHOLE                                                  S01195
      * New holiday array                                                 S01195
      *
     I***/COPY*ZSRSRC,ZDATE3Z2****                                        S01195
     I/COPY ZSRSRC,FFDATEZ2
     I***/COPY*ZSRSRC,ZDATE3Z3****                                        S01195
      *
     I* Copy standard holiday data structure                              S01195
      /COPY ZSRSRC,ZHOLI                                                  S01195
     I            DS
      **  DATA STRUCTURE FOR SR. ZA0710 - FIELD IS @@Z71Y
     I                                        1   40@@Z71Y
     I                                        1   10@@SSY1
     I                                        2   20@@SSY2
     I                                        3   30@@SSY3
     I                                        4   40@@SSY4
      *
      *
     I            DS
      **  DATA STRUCTURE FOR SR. ZA0710 - FIELD IS @@VDT
     I                                        1   80@@VDT
     I                                        1   40@@YR
     I                                        5   60@@Z71M
     I                                        7   80@@Z71D
      *
      *
     I@MMOD       DS                            256
      **   MMOD Data Structure for module flags
     I                                       10  10 @LE
     I                                       50  50 @FF
      *
      *
     I@UPDT       DS                              7
      ** Data structure to hold the date of update from MIDAS run date.
     I                                        1   20HSDLUP
     I                                        1   20HTDLUP
     I                                        3   5 HSMLUP
     I                                        3   5 HTMLUP
     I                                        6   70HSYLUP
     I                                        6   70HTYLUP
      *
      *
     I            DS
      **  Data Structure for SR. #ZBA - date field YYYYMMDD.
     I                                        1   80@DATA
     I                                        1   40@YY1
     I                                        5   60@MM1
     I                                        7   80@DD1
      *
      *
     I            DS
      **  Data Structure for SR. #ZBA - date field YYYYMMDD.
     I                                        1   80@DATB
     I                                        1   40@YY2
     I                                        5   60@MM2
     I                                        7   80@DD2
      *
      *
     I@CDDS       DS
      * Currency details array split (spot date, default calc. method)
     I                                        1   5 @SPOTA
     I                                        6   6 @CALCA
      *
      *
     IPSDS       SDS
      **   Program status data structure
     I                                      201 208 @FILE
     I                                      254 263 @USER
      *
      *
     I           UDS
      **  Local data area, *LDA, for data base errors.
     I                                      134 141 DBFILE
     I                                      142 170 DBKEY
     I                                      171 180 DBPGM
     I                                      181 183 DBASE
     ISDCURR    E DSSDCURRPD                                              S01194
     I* External DS for Currency Details                                  S01194
     ISDBANK    E DSSDBANKPD                                              S01194
     I* External DS for Bank Details                                      S01194
     ISDMMOD    E DSSDMMODPD                                              S01194
     I* External DS for Module Details                                    S01194
     IDSSDY     E DSDSSDY                                                 S01194
     I* DS used by Access Objects (long records)                          S01194
     IDSFDY     E DSDSFDY                                                 S01194
     I* DS used by Access Objects (short records)                         S01194
      ****************************************************************
      *
      *                 MAIN PROGRAM
      *                 ~~~~~~~~~~~~
      **  Input parameter
     C           *ENTRY    PLIST
     C                     PARM           @TERM   1
      *
      ** Program is called 1st to update Takeon in progress flag to
      ** 'Y' only. (Only if LE is on the system.) @TERM = 'Y'.
      ** Program is called to update Takeon in progress flag to 'N'
      ** only in case of errors in LE0480. (Only if LE is on the
      ** system). @TERM = 'N'.
      ** Program is then called to takeon the trades. @TERM = ' '.
      *
      **  First Cycle Processing
     C                     EXSR #A
      *
      **  Detail Processing
     C           @TERM     IFEQ ' '                        B1
     C           *INU7     ANDEQ'0'                        B1
     C                     EXSR #B                         *1
     C                     END                             E1
      *
      **  Termination Processing
     C                     EXSR #C                         *1
      *
      ****************************************************************
      *
      *            INDEX TO SUBROUTINES
      *            ~~~~~~~~~~~~~~~~~~~~
      * #B       Detail Processing
      * #BA      Takeon Customer Lending Trades (LE)
      * #BAA     Takeon Customer Lending Trades (LE), events processing
      * #ZC      Update MM forward book files
      * ZA0710   Convert Midas day number to YYYYMMDD
      * #ZE      Calculate Interest Rate Future settlement date
      **FFDATE***/COPY,*to*calculate*Int*rate*fut*settlement*date*****    S01195
      * FFDATE   To calculate Int rate fut settlement date                S01195
      **ZDATE3***/COPY,*to*calculate*a*number*of*working*days*forward     S01195
      * ZFWDT    /COPY, to calculate a number of working days forward     S01195
      * ZBKDT    /COPY, to calculate a number of working days backward    S01195
      * ZDATE1   /COPY, to convert MMDDYY to Midas day number
      **ZDATE5***/COPY,*to*check*if*day*is*working*day***                 S01195
      * ZCHKH    /COPY, to check if day is working day                    S01195
      * #BB      Takeon Interest Rate Futures Trades (FF)
      * #BBA     Process Intrst Rate Fut prior to settlment, value date
      * #BBB     Process Intrest Rate Fut prior to settlement, mat date
      * #BBC     Process Interest Rate Futures after settlement
      * #BBD     Delete records from DLFUTSPP for deleted futures
      * #BC      Takeon FRA and IRS Trades
      * #BCA     Process FRA's prior to settlement
      * #BCB     Process FRA's past to settlement
      * #BCC     Process IRS's
      * #ZB      Calculate forward rate from forward forward rate
      * #ZBA     Obtain tenor of FRA, Interest rate future
      * #ZD      Fill up currency details array
      * #ZA      Update takeon flag to No
      * #A       First Cycle Processing
      * #C       Termination Processing
      * *PSSR    Program error routine, called by RPG
      * INFSR    File error routine, called by RPG
      *
      ****************************************************************
      *
      *  SUBROUTINE:    #B   - Detail Processing
      *
      *  CALLED FROM :  MAIN PROCESSING
      *
      *  FIELDS INPUT : @LE - LE Module flag from DTAARA/MMOD
      *                 @FF - FF Module flag from DTAARA/MMOD
      ******************IRFRA*-*FRA/IRS*flag*from*pf/TABTB40**********    S01194
      *                 IRFRA - FRA/IRS flag from pf/SDMMODPD             S01194
      *
      *  FIELDS USED :  @TERM - *ENTRY parm, set to 'E' for error
      *
      *  CALLS  :       #BA - Takeon Customer Lending Trades (LE)
      *                 #BB - Takeon Interest Rate Futures Trades (FF)
      *                 #BC - Takeon FRA and IRS Trades
      ****************************************************************
      *
     C           #B        BEGSR
      *
      **  If Customer Lending module is on system takeon LE trades
     C           @LE       IFEQ 'Y'                        B1
     C                     EXSR #BA                        *1
      *
      **  Skip further processing if error has occured
     C           @TERM     CABEQ'E'       #B9              *1
     C                     END                             E1
      *
      **  If Futures and Options module is on system takeon
      **  Interest Rate Futures Trades
     C           @FF       IFEQ 'Y'                        B1
     C                     EXSR #BB                        *1
      *
      **  Skip further processing if error has occured
     C           @TERM     CABEQ'E'       #B9              *1
     C                     END                             E1
      *
      **  If FRA/IRS module is on system takeon FRA/IRS trades
     C********** IRFRA     IFEQ 'Y'                        B1             S01194
     C           BGFIIN    IFEQ 'Y'                        B1             S01194
     C                     EXSR #BC                        *1
     C                     END                             E1
      *
     C           #B9       ENDSR                           #B9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BA  - Takeon Customer Lending trades
      *                 This routine generates LE events using LE pgm
      *                 and then reads through the events updating the
      *                 MM forward books as appropriate.
      *
      *  CALLED FROM :  #B - Detail Processing
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @TERM - *ENTRY parm, set to 'E' for error
      *                 @UPDMM - Update MM forward book file, Y/blanks
      *                 @UPDHM - if 'N' do not update half month file
      *                 @EDAT - Saved event date
      *                 @ECCY - Saved event currency
      *                 @CCY - Currency for update of MM fwd book files
      *                 @@DAYN - Date for file updtes, in Midas Day no.
      *                 @LDNA - Trade type for file updates
      *                 @RLSMD - File excptn format to release MMFWDRP0
      *                 @RLSMH - File excptn format to release MMFWHRP0
      *
      *  CALLS  :       #BAA - Process Lending Events
      *                 #ZC - Update MM forward book files with data
      *
      ****************************************************************
      *
     C           #BA       BEGSR
      *
      ** First delete existing LE records from MM daily forward book
     C           'LE'      SETLLMMFWDRP0
      *
      ** Read and delete until end of file or end of LE records
     C           *IN52     DOUEQ'1'                        B1
     C           HSLDNA    ORNE 'LE'                       B1
     C                     READ MMFWDRP0                 52*1
      *
     C           *IN52     IFNE '1'                        B*2
     C           HSLDNA    ANDEQ'LE'                       B*2
     C                     DELETMMFWDRP0                   **2
     C                     END                             E*2
      *
     C                     END                             E1
      *
      ** If loop did not reach end of file but read a record for
      ** another trade type, must release the locked record
     C           *IN52     IFEQ '0'                        B1
     C           HSLDNA    ANDNE'LE'                       B1
     C                     EXCPT@RLSMD                     *1
     C                     END                             E1
      *
      ** Now delete existing LE records from MM monthly forward book
     C           'LE'      SETLLMMFWHRP0
      *
      ** Read and delete until end of file or end of LE records
     C           *IN52     DOUEQ'1'                        B1
     C           HTLDNA    ORNE 'LE'                       B1
     C                     READ MMFWHRP0                 52*1
      *
     C           *IN52     IFNE '1'                        B*2
     C           HTLDNA    ANDEQ'LE'                       B*2
     C                     DELETMMFWHRP0                   **2
     C                     END                             E*2
      *
     C                     END                             E1
      *
      ** If loop did not reach end of file but read a record for
      ** another trade type, must release the locked record
     C           *IN52     IFEQ '0'                        B1
     C           HTLDNA    ANDNE'LE'                       B1
     C                     EXCPT@RLSMH                     *1
     C                     END                             E1
      *
      ** Read through the Lending Events and update the MM forward
      ** book files as appropriate.
      ** This processing accumulates the data, for each event date,
      ** within the program and only updates the files when a new
      ** date is read. This keep (slow) file updates to a minimum.
      *
      ** Open after events generated to prevent record locking
     C                     OPEN DLLEEVLL
      *
      ** Start at the beginning of the file
     C           *LOVAL    SETLLDLLEEVLL
      *
      ** Set up part of update key ready for file updates
     C                     MOVE 'LE'      @LDNA   2
     C                     MOVE *BLANKS   @UPDHM
      *
      ** Read until end of file
     C           *IN52     DOUEQ'1'                        B1
     C                     READ DLLEEVLL                 52*1
      *
      ** If event date has changed or the event currency has changed,
      ** and there are updates to the file required
      ** (on the first read of LF/DLLEEVLL @UPDMM wil be blank)
     C           @EDAT     IFNE EDAT                       B*2
     C           @UPDMM    ANDEQ'Y'                        B*2
      *
     C           @ECCY     ORNE ECCY                       B*2
     C           @UPDMM    ANDEQ'Y'                        B*2
      *
      ** then update the forward book files with the accumulated data
     C                     MOVE @ECCY     @CCY    3        **2
     C                     Z-ADD@EDAT     @@DAYN  50       **2
     C                     EXSR #ZC                        **2
      *
      ** Reset the Update MM files flag to blanks
     C                     MOVE *BLANKS   @UPDMM  1        **2
     C                     END                             E*2
      *
      ** Process each Lending event type
     C           *IN52     IFEQ '0'                        B*2
     C                     EXSR #BAA                       **2
     C                     END                             E*2
      *
     C                     END                             E1
      *
      ** If end of file and last set of records read from LF/DLLEEVLL
      ** require updates, must update forward book files
     C           *IN52     IFEQ '1'                        B1
     C           @UPDMM    ANDEQ'Y'                        B1
     C                     MOVE @ECCY     @CCY    3        *1
     C                     Z-ADD@EDAT     @@DAYN  50       *1
     C                     EXSR #ZC                        *1
     C                     END                             E1
      *
     C                     CLOSEDLLEEVLL
      *
     C           #BA9      ENDSR                           #BA9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BAA - Process Lending events for MM forward
      *                 book updates
      *
      *  CALLED FROM :  #BA - Takeon Customer Lending trades
      *
      *  FIELDS INPUT :
      *                 @SDCIN - Working daily cash in
      *                 @SDCOT - Working daily cash out
      *                 @SDNMT - Working daily net movement
      *                 @SMAIN - Working daily maturity date cash in
      *                 @SMAOT - Working daily maturity date cash out
      *                 @SDNIM - Working daily net interest movement
      *
      *                 @THMCI - Working half month cash in
      *                 @THMCO - Working half month cash out
      *                 @THMNM - Working half month net movement
      *                 @THNIM - Working half month net interest movmnt
      *
      *  FIELDS USED :
      *                 @WRK1 - Work field for weighted average calc
      *                 @WRK4 - Work field for weighted average calc
      *                 @WRK3 - Work field for weighted average calc
      *                 @WRK4 - Work field holding principal - discount
      *                 @EDAT - Saved event date
      *                 @ECCY - Saved event currency
      *                 @UPDMM - Update MM forward book file, Y/blanks
      *
      *  CALLS  :       nothing
      *
      ****************************************************************
      *
      *          Notes on the processing in this subroutine:
      *
      *  The calculation for average rate, cash in  is:
      *  average rate, cash in  @SAVIN =
      *
      *  (Current value * cash in at mdat) + (event rate * event amt)
      *  ------------------------------------------------------------
      *               (cash in at mdat + event amount)
      *
      *    ie. =  @WRK1 + @WRK2      in this coding.
      *           -------------
      *               @WRK3
      *
      *
      *  The calculation for average rate, cash out  is:
      *  average rate, cash out  @SAVOT =
      *
      *  (Current value * cash out at mdat) + (event rate * event amt)
      *  ------------------------------------------------------------
      *               (cash out at mdat + event amount)
      *
      *    ie. =  @WRK1 + @WRK2      in this coding.
      *           -------------
      *               @WRK3
      *
      *   Note that for discounted trades the event amount will be:
      *              = Principal amount - Discount amount
      *   ie.  @WRK4 = EAMT - OTHA in this coding.
      *
      *****************************************************************
      *
     C           #BAA      BEGSR
      *
      ** Save the currency and event date into work fields
     C                     Z-ADDEDAT      @EDAT
     C                     MOVE ECCY      @ECCY
      *
      *
      ** Process Term Loan, Start Event
     C           ETYP      IFEQ '62V1'                     B1
      *
      ** Event amount is the loan principal
     C           @SDCOT    ADD  EAMT      @SDCOT           *1
     C           @SDNMT    SUB  EAMT      @SDNMT           *1
     C           @THMCO    ADD  EAMT      @THMCO           *1
     C           @THMNM    SUB  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Loan, Principal Increase (amendment)
      ** (note this event type will be added by Release 10 LE)
     C           ETYP      IFEQ '62V3'                     B1
      *
      ** Event amount is the loan principal
     C           @SDCOT    ADD  EAMT      @SDCOT           *1
     C           @SDNMT    SUB  EAMT      @SDNMT           *1
     C           @THMCO    ADD  EAMT      @THMCO           *1
     C           @THMNM    SUB  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Loan, Interest event
     C           ETYP      IFEQ '62I2'                     B1
      *
      ** Event amount is the loan interest
     C           EAMT      MULT 10        @WRK3            *1
     C           @SDNIM    ADD  @WRK3     @SDNIM           *1
     C           @THNIM    ADD  EAMT      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Loan, Principal Repayment
     C           ETYP      IFEQ '62R1'                     B1
     C           EAMT      ANDNE*ZERO                      B1             BH3105
      *
      ** Event amount is the loan principal
      ** Event rate is the loan interest rate
     C           @SAVIN    MULT @SMAIN    @WRK1            *1
     C           INTR      MULT EAMT      @WRK2            *1
     C           @WRK1     ADD  @WRK2     @WRK1            *1
     C           @SMAIN    ADD  EAMT      @WRK3            *1
     C           @WRK3     IFEQ 0                                         204902
     C                     Z-ADD@WRK3     @SAVIN                          204902
     C                     ELSE                                           204902
     C           @WRK1     DIV  @WRK3     @SAVIN    H      *1
     C                     ENDIF                                          204902
      *
     C           @SMAIN    ADD  EAMT      @SMAIN           *1
     C           @THMCI    ADD  EAMT      @THMCI           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Loan, Interest Repayment event
     C           ETYP      IFEQ '62R2'                     B1
      *
      ** Event amount is the interest repayment amount
      ** Interest is stored on file multiplied by 10 for accuracy
     C           EAMT      MULT 10        @WRK3            *1
     C           @SDNIM    ADD  @WRK3     @SDNIM           *1
     C           @THNIM    ADD  EAMT      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Loan, Currency change at Rollover event
      ** (note this event type will be added by Release 10 LE)
     C           ETYP      IFEQ '62R3'                     B1
      *
      ** Event amount is the principal repayment amount
     C           @SDCIN    ADD  EAMT      @SDCIN           *1
     C           @SDNMT    ADD  EAMT      @SDNMT           *1
     C           @THMCI    ADD  EAMT      @THMCI           *1
     C           @THMNM    ADD  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Loan, Currency change at Rollover event
      ** (note this event type will be added by Release 10 LE)
     C           ETYP      IFEQ '62R4'                     B1
      *
      ** Event amount is the principal repayment amount
     C           @SDCOT    ADD  EAMT      @SDCOT           *1
     C           @SDNMT    SUB  EAMT      @SDNMT           *1
     C           @THMCO    ADD  EAMT      @THMCO           *1
     C           @THMNM    SUB  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Loan, Maturity Event
     C           ETYP      IFEQ '62M1'                     B1
     C           EAMT      ANDNE*ZERO                      B1
      *
      ** Event amount is the remaining loan principal
      ** Event rate is the loan interest rate
     C           @SAVIN    MULT @SMAIN    @WRK1            *1
     C           INTR      MULT EAMT      @WRK2            *1
     C           @WRK1     ADD  @WRK2     @WRK1            *1
     C           @SMAIN    ADD  EAMT      @WRK3            *1
     C           @WRK3     IFEQ 0                                         204902
     C                     Z-ADD@WRK3     @SAVIN                          204902
     C                     ELSE                                           204902
     C           @WRK1     DIV  @WRK3     @SAVIN    H      *1
     C                     ENDIF                                          204902
      *
     C           @SMAIN    ADD  EAMT      @SMAIN           *1
     C           @THMCI    ADD  EAMT      @THMCI           *1
     C           @THMNM    ADD  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Loan, Maturity event
     C           ETYP      IFEQ '62M2'                     B1
      *
      ** Event amount is the remaining loan interest
      ** Interest is stored on file multiplied by 10 for accuracy
     C           EAMT      MULT 10        @WRK3            *1
     C           @SDNIM    ADD  @WRK3     @SDNIM           *1
     C           @THNIM    ADD  EAMT      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Discounted loan, Start event
     C           ETYP      IFEQ '63V1'                     B1
      *
      ** Event amount is the loan principal
      ** Other amount is the discount amount
     C           EAMT      SUB  OTHA      @WRK4            *1
     C           @SDCOT    ADD  @WRK4     @SDCOT           *1
     C           @SDNMT    SUB  @WRK4     @SDNMT           *1
     C           @THMCO    ADD  @WRK4     @THMCO           *1
     C           @THMNM    SUB  @WRK4     @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Discounted Loan, Maturity Event
     C           ETYP      IFEQ '63M1'                     B1
      *
      ** Event amount is the remaining loan principal
      ** Other amount is the discount amount
      ** Event rate is the loan interest rate
     C           EAMT      SUB  OTHA      @WRK4            *1
     C           @SAVIN    MULT @SMAIN    @WRK1            *1
     C           INTR      MULT @WRK4     @WRK2            *1
     C           @WRK1     ADD  @WRK2     @WRK1            *1
     C           @SMAIN    ADD  @WRK4     @WRK3            *1
     C           @WRK3     IFEQ 0                                         204902
     C                     Z-ADD@WRK3     @SAVIN                          204902
     C                     ELSE                                           204902
     C           @WRK1     DIV  @WRK3     @SAVIN    H      *1
     C                     ENDIF                                          204902
      *
      ** Interest is stored on file multiplied by 10 for accuracy
     C           OTHA      MULT 10        @WRK3            *1
     C           @SDNIM    ADD  @WRK3     @SDNIM           *1
     C           @SMAIN    ADD  @WRK4     @SMAIN           *1
     C           @THNIM    ADD  OTHA      @THNIM           *1
     C           @THMCI    ADD  @WRK4     @THMCI           *1
     C           @THMNM    ADD  @WRK4     @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participations Purchased, Start event
     C           ETYP      IFEQ '64V1'                     B1
      *
      ** Event amount is the loan principal
     C           @SDCOT    ADD  EAMT      @SDCOT           *1
     C           @SDNMT    SUB  EAMT      @SDNMT           *1
     C           @THMCO    ADD  EAMT      @THMCO           *1
     C           @THMNM    SUB  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participations Purchased, Principal
      ** Increase (amendment)
      ** (note this event type will be added by Release 10 LE)
     C           ETYP      IFEQ '64V3'                     B1
      *
      ** Event amount is the principal increase
     C           @SDCOT    ADD  EAMT      @SDCOT           *1
     C           @SDNMT    SUB  EAMT      @SDNMT           *1
     C           @THMCO    ADD  EAMT      @THMCO           *1
     C           @THMNM    SUB  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participations Purchased, Interest event
     C           ETYP      IFEQ '64I2'                     B1
      *
      ** Event amount is the loan interest amount
      ** Interest is stored on file multiplied by 10 for accuracy
     C           EAMT      MULT 10        @WRK3            *1
     C           @SDNIM    ADD  @WRK3     @SDNIM           *1
     C           @THNIM    ADD  EAMT      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participation Purchased, Principal
      ** Repayment event
     C           ETYP      IFEQ '64R1'                     B1
     C           EAMT      ANDNE*ZERO                                     204902
      *
      ** Event amount is the repayment amount
      ** Event rate is the loan interest rate
     C           @SAVIN    MULT @SMAIN    @WRK1            *1
     C           INTR      MULT EAMT      @WRK2            *1
     C           @WRK1     ADD  @WRK2     @WRK1            *1
     C           @SMAIN    ADD  EAMT      @WRK3            *1
     C           @WRK3     IFEQ 0                                         204902
     C                     Z-ADD@WRK3     @SAVIN                          204902
     C                     ELSE                                           204902
     C           @WRK1     DIV  @WRK3     @SAVIN    H      *1
     C                     ENDIF                                          204902
      *
     C           @SMAIN    ADD  EAMT      @SMAIN           *1
     C           @THMCI    ADD  EAMT      @THMCI           *1
     C           @THMNM    ADD  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participation Purchased, Interest
      ** Repayment event
     C           ETYP      IFEQ '64R2'                     B1
      *
      ** Event amount is the interest repayment amount
      ** Interest is stored on file multiplied by 10 for accuracy
     C           EAMT      MULT 10        @WRK3            *1
     C           @SDNIM    ADD  @WRK3     @SDNIM           *1
     C           @THNIM    ADD  EAMT      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participation Purchased, Maturity event
     C           ETYP      IFEQ '64M1'                     B1
     C           EAMT      ANDNE*ZERO                      B1
      *
      ** Event amount is the remaining loan principal
      ** Event rate is the loan interest rate
     C           @SAVIN    MULT @SMAIN    @WRK1            *1
     C           INTR      MULT EAMT      @WRK2            *1
     C           @WRK1     ADD  @WRK2     @WRK1            *1
     C           @SMAIN    ADD  EAMT      @WRK3            *1
     C           @WRK3     IFEQ 0                                         204902
     C                     Z-ADD@WRK3     @SAVIN                          204902
     C                     ELSE                                           204902
     C           @WRK1     DIV  @WRK3     @SAVIN    H      *1
     C                     ENDIF                                          204902
      *
     C           @SMAIN    ADD  EAMT      @SMAIN           *1
     C           @THMCI    ADD  EAMT      @THMCI           *1
     C           @THMNM    ADD  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participation Purchased, Maturity event
     C           ETYP      IFEQ '64M2'                     B1
      *
      ** Event amount is the remaining interest amount
      ** Interest is stored on file multiplied by 10 for accuracy
     C           EAMT      MULT 10        @WRK3            *1
     C           @SDNIM    ADD  @WRK3     @SDNIM           *1
     C           @THNIM    ADD  EAMT      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Discounted Participations Purchased, Start event
     C           ETYP      IFEQ '65V1'                     B1
      *
      ** Event amount is the loan principal
      ** Other amount is the discount amount
     C           EAMT      SUB  OTHA      @WRK4            *1
     C           @SDCOT    ADD  @WRK4     @SDCOT           *1
     C           @SDNMT    SUB  @WRK4     @SDNMT           *1
     C           @THMCO    ADD  @WRK4     @THMCO           *1
     C           @THMNM    SUB  @WRK4     @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Discounted Participation Purchased, Maturity Event
     C           ETYP      IFEQ '65M1'                     B1
      *
      ** Event amount is the remaining loan principal
      ** Other amount is the discount amount
      ** Event rate is the loan interest rate
     C           EAMT      SUB  OTHA      @WRK4            *1
     C           @SAVIN    MULT @SMAIN    @WRK1            *1
     C           INTR      MULT @WRK4     @WRK2            *1
     C           @WRK1     ADD  @WRK2     @WRK1            *1
     C           @SMAIN    ADD  @WRK4     @WRK3            *1
     C           @WRK3     IFEQ 0                                         204902
     C                     Z-ADD@WRK3     @SAVIN                          204902
     C                     ELSE                                           204902
     C           @WRK1     DIV  @WRK3     @SAVIN    H      *1
     C                     ENDIF                                          204902
      *
      ** Interest is stored on file multiplied by 10 for accuracy
     C           OTHA      MULT 10        @WRK3            *1
     C           @SMAIN    ADD  @WRK4     @SMAIN           *1
     C           @SDNIM    ADD  @WRK3     @SDNIM           *1
     C           @THMCI    ADD  @WRK4     @THMCI           *1
     C           @THMNM    ADD  @WRK4     @THMNM           *1
     C           @THNIM    ADD  OTHA      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participations Sold, Start event
     C           ETYP      IFEQ '66V1'                     B1
      *
      ** Event amount is the loan principal
     C           @SDCIN    ADD  EAMT      @SDCIN           *1
     C           @SDNMT    ADD  EAMT      @SDNMT           *1
     C           @THMCI    ADD  EAMT      @THMCI           *1
     C           @THMNM    ADD  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participations Sold, Principal
      ** Increase (amendment)
      ** (note this event type will be added by Release 10 LE)
     C           ETYP      IFEQ '66V3'                     B1
      *
      ** Event amount is the principal increase
     C           @SDCIN    ADD  EAMT      @SDCIN           *1
     C           @SDNMT    ADD  EAMT      @SDNMT           *1
     C           @THMCI    ADD  EAMT      @THMCI           *1
     C           @THMNM    ADD  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participations Sold, Interest event
     C           ETYP      IFEQ '66I2'                     B1
      *
      ** Event amount is the interest amount
      ** Interest is stored on file multiplied by 10 for accuracy
     C           EAMT      MULT 10        @WRK3            *1
     C           @SDNIM    SUB  @WRK3     @SDNIM           *1
     C           @THNIM    SUB  EAMT      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participation Sold, Maturity Event
     C           ETYP      IFEQ '66M1'                     B1
     C           EAMT      ANDNE*ZERO                      B1
      *
      ** Event amount is the remaining loan principal
      ** Event rate is the loan interest rate
     C           @SAVOT    MULT @SMAOT    @WRK1            *1
     C           INTR      MULT EAMT      @WRK2            *1
     C           @WRK1     ADD  @WRK2     @WRK1            *1
     C           @SMAOT    ADD  EAMT      @WRK3            *1
     C           @WRK3     IFEQ 0                                         204902
     C                     Z-ADD@WRK3     @SAVOT                          204902
     C                     ELSE                                           204902
     C           @WRK1     DIV  @WRK3     @SAVOT    H      *1
     C                     ENDIF                                          204902
      *
     C           @SMAOT    ADD  EAMT      @SMAOT           *1
     C           @THMCO    ADD  EAMT      @THMCO           *1
     C           @THMNM    SUB  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participation Sold, Maturity event
     C           ETYP      IFEQ '66M2'                     B1
      *
      ** Event amount is the remaining interest amount
      ** Interest is stored on file multiplied by 10 for accuracy
     C           EAMT      MULT 10        @WRK3            *1
     C           @SDNIM    SUB  @WRK3     @SDNIM           *1
     C           @THNIM    SUB  EAMT      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participation Sold, Principal
      ** Repayment event
     C           ETYP      IFEQ '66R1'                     B1
     C           EAMT      ANDNE*ZERO                                     204902
      *
      ** Event amount is the Principal repayment amount
      ** Event rate is the loan interest rate
      *                                                                   119222
      ** Only attempt to produce an average if event amount               119222
      ** is not zero                                                      119222
     C                     Z-ADD0         @SAVOT                          119222
     C           EAMT      IFNE 0                                         119222
     C           @SAVOT    MULT @SMAOT    @WRK1            *1
     C           INTR      MULT EAMT      @WRK2            *1
     C           @WRK1     ADD  @WRK2     @WRK1            *1
     C           @SMAOT    ADD  EAMT      @WRK3            *1
     C           @WRK3     IFEQ 0                                         204902
     C                     Z-ADD@WRK3     @SAVOT                          204902
     C                     ELSE                                           204902
     C           @WRK1     DIV  @WRK3     @SAVOT    H      *1
     C                     ENDIF                                          204902
     C                     ENDIF                                          119222
      *
     C           @SMAOT    ADD  EAMT      @SMAOT           *1
     C           @THMCO    ADD  EAMT      @THMCO           *1
     C           @THMNM    SUB  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Term Participation Sold, Interest Repayment event
     C           ETYP      IFEQ '66R2'                     B1
      *
      ** Event amount is the interest repayment amount
      ** Interest is stored on file multiplied by 10 for accuracy
     C           EAMT      MULT 10        @WRK3            *1
     C           @SDNIM    SUB  @WRK3     @SDNIM           *1
     C           @THNIM    SUB  EAMT      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Discounted Participations Sold, Start event
     C           ETYP      IFEQ '67V1'                     B1
      *
      ** Event amount is the loan principal
      ** Other amount is the discount amount
     C           EAMT      SUB  OTHA      @WRK4            *1
     C           @SDCIN    ADD  @WRK4     @SDCIN           *1
     C           @SDNMT    ADD  @WRK4     @SDNMT           *1
     C           @THMCI    ADD  @WRK4     @THMCI           *1
     C           @THMNM    ADD  @WRK4     @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Discounted Participations Sold, Principal
      ** Increase (amendment)
      ** (note this event type will be added by Release 10 LE)
     C           ETYP      IFEQ '67V3'                     B1
      *
      ** Event amount is the principal increase
     C           @SDCIN    ADD  EAMT      @SDCIN           *1
     C           @SDNMT    ADD  EAMT      @SDNMT           *1
     C           @THMCI    ADD  EAMT      @THMCI           *1
     C           @THMNM    ADD  EAMT      @THMNM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
      *
      ** Process Discounted Participation Sold, Principal
      ** Repayment event
     C           ETYP      IFEQ '67M1'                     B1
      *
      ** Event amount is the Principal repayment amount
      ** Other amount is the discount amount
      ** Event rate is the loan interest rate
     C           EAMT      SUB  OTHA      @WRK4            *1
     C           @SAVOT    MULT @SMAOT    @WRK1            *1
     C           INTR      MULT @WRK4     @WRK2            *1
     C           @WRK1     ADD  @WRK2     @WRK1            *1
     C           @SMAOT    ADD  @WRK4     @WRK3            *1
     C           @WRK3     IFEQ 0                                         204902
     C                     Z-ADD@WRK3     @SAVOT                          204902
     C                     ELSE                                           204902
     C           @WRK1     DIV  @WRK3     @SAVOT    H      *1
     C                     ENDIF                                          204902
      *
      ** Interest is stored on file multiplied by 10 for accuracy
     C           OTHA      MULT 10        @WRK3            *1
     C           @SMAOT    ADD  @WRK4     @SMAOT           *1
     C           @SDNIM    SUB  @WRK3     @SDNIM           *1
     C           @THMCO    ADD  @WRK4     @THMCO           *1
     C           @THMNM    SUB  @WRK4     @THMNM           *1
     C           @THNIM    SUB  OTHA      @THNIM           *1
     C                     MOVE 'Y'       @UPDMM           *1
     C                     END                             E1
      *
     C           #BAA9     ENDSR                           #BAA9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #ZC - Update the MM forward book files
      *
      *  CALLED FROM :  #BA - Takeon Customer Lending trades
      *                 #BBA - Process Interest rate futures
      *                 #BBB - Process Interest rate futures
      *                 #BBC - Process Interest rate futures
      *                 #BCA - Process FRA/IRS
      *                 #BCB - Process FRA/IRS
      *                 #BCC - Process FRA/IRS
      *
      *  FILEDS INPUT : @CCY - Currency for update of MM fwd book files
      *                 @@DAYN - Date for file updtes, in Midas Day no.
      *                 @LDNA - Trade type for file updates
      *
      *                 @SDCIN - Working daily cash in
      *                 @SDCOT - Working daily cash out
      *                 @SDNMT - Working daily net movement
      *                 @SMAIN - Working daily maturity date cash in
      *                 @SMAOT - Working daily maturity date cash out
      *                 @SDNIM - Working daily net interest movement
      *                 @SAVIN - Working daily average rate, cash in
      *                 @SAVOT - Working daily average rate, cash out
      *
      *                 @THMCI - Working half month cash in
      *                 @THMCO - Working half month cash out
      *                 @THMNM - Working half month net movement
      *                 @THNIM - Working half month net interest movmnt
      *
      *                 @UPDHM - if 'N' do not update half month file
      *
      *  FIELDS USED :  @@YR - Year date, YYYY, for file updates
      *                 @@Z71M - Month date, MM, for file updates
      *                 @@Z71D - Day date, DD, for file updates
      *                 @VDHM - Half month part of key on LF/MMFWUHLL
      *                 @WRK1 - Work field for weighted average calc
      *                 @WRK2 - Work field for weighted average calc
      *                 @WRK3 - Work field for weighted average calc
      *                 @WRK4 - Work field holding principal - discount
      *
      *  CALLS  :       ZA0710 - convert Midas day number to YYYYMMDD
      *
      ****************************************************************
      *  Average rates are accumulated as weighted averages:
      *
      *  The calculation for average rate, cash in  is:
      *  New average rate, cash in  HSAVIN =
      *
      *  (Current average * Current cash) + (Working av * Working cash)
      *   rate, cash in     in at mdate      rt, cash in  in at mdate
      *  ------------------------------------------------------------
      *       (Current cash in at mdat + Working cash in at mdate)
      *
      *    ie. =  @WRK1 + @WRK2      in this coding.
      *           -------------
      *               @WRK3
      *
      *
      *  The calculation for average rate, cash out  is:
      *  New average rate, cash out  HSAVOT =
      *
      *  (Current average * Current cash) + (Working av * Working cash)
      *   rate, cash out    in at mdate     rt, cash out  out at mdate
      *  ------------------------------------------------------------
      *       (Current cash out at mdat + Working cash out at mdate)
      *
      *    ie. =  @WRK1 + @WRK2      in this coding.
      *           -------------
      *               @WRK3
      *
      *
     C           #ZC       BEGSR
      *
      ** Convert from Midas day number to YYYYMMDD format
     C                     EXSR ZA0710
      *
      ** Update the MM daily forward book file
      *
      *
      **  Chain to LF/MMFWUDLL file
     C           @DKEY     CHAINMMFWUDLL             50
      *
      ** Key for LF/MMFWUDLL file
     C           @DKEY     KLIST
     C                     KFLD           @CCY
     C                     KFLD           @@YR
     C                     KFLD           @@Z71M
     C                     KFLD           @@Z71D
     C                     KFLD           @LDNA
      *
      ** If record not found create new record for that currency/date
      **  see data structure @UPDT for day/month/year last update.
     C           *IN50     IFEQ '1'                        B1
      *
      ** Set up standard data
     C                     MOVE 'HS'      HSRCID           *1
     C**********           MOVE RUNA      @UPDT            *1             S01194
     C                     MOVE BJMRDT    @UPDT            *1             S01194
     C                     TIME           HSTLUP           *1
     C                     MOVE 'I'       HSCHTP           *1
     C**********           Z-ADDRUND      HSLCD            *1             S01194
     C                     Z-ADDBJRDNB    HSLCD            *1             S01194
     C                     MOVEL@USER     HSLUID           *1
     C                     MOVE @CCY      HSCCY            *1
     C                     Z-ADD@@YR      HSFBYY           *1
     C                     Z-ADD@@Z71M    HSFBMM           *1
     C                     Z-ADD@@Z71D    HSFBDD           *1
     C                     MOVE @LDNA     HSLDNA           *1
      *
      ** Set up fields containing real data
     C                     Z-ADD@SDCIN    HSDCIN           *1
     C                     Z-ADD@SDCOT    HSDCOT           *1
     C                     Z-ADD@SDNMT    HSDNMT           *1
     C                     Z-ADD@SDNIM    HSDNIM           *1
     C                     Z-ADD*ZERO     HSFIXM           *1
     C                     Z-ADD@SMAIN    HSMAIN           *1
     C                     Z-ADD@SMAOT    HSMAOT           *1
     C                     Z-ADD@SAVIN    HSAVIN           *1
     C                     Z-ADD@SAVOT    HSAVOT           *1
      *
     C                     WRITEMMFWDDP0                   *1
      *
     C                     ELSE                            X1
      *
      ** If record already on file update it with new information
     C                     MOVE *BLANK    HSDLTF           *1
     C**********           MOVE RUNA      @UPDT            *1             S01194
     C                     MOVE BJMRDT    @UPDT            *1             S01194
     C                     TIME           HSTLUP           *1
     C                     MOVE 'A'       HSCHTP           *1
     C**********           Z-ADDRUND      HSLCD            *1             S01194
     C                     Z-ADDBJRDNB    HSLCD            *1             S01194
     C                     MOVEL@USER     HSLUID           *1
      *
      ** Set up fields containing real data
     C                     ADD  @SDCIN    HSDCIN           *1
     C                     ADD  @SDCOT    HSDCOT           *1
     C                     ADD  @SDNMT    HSDNMT           *1
     C                     ADD  @SDNIM    HSDNIM           *1
      *
      ** must accumulate the average rates as weighted averages
     C** - but only if Maturity Amounts are being dealt with              052266
     C*                                                                   052266
     C           @SAVIN    IFNE *ZERO                      B*2
     C           @SMAIN    ANDNE*ZERO                      B*2            052266
     C           @SAVIN    MULT @SMAIN    @WRK1            **2
     C           HSAVIN    MULT HSMAIN    @WRK2            **2
     C           @WRK1     ADD  @WRK2     @WRK1            **2
     C           HSMAIN    ADD  @SMAIN    @WRK3            **2
     C           @WRK1     DIV  @WRK3     HSAVIN    H      **2
     C                     END                             E*2
      *
     C           @SAVOT    IFNE *ZERO                      B*2
     C           @SMAOT    ANDNE*ZERO                      B*2            052266
     C           @SAVOT    MULT @SMAOT    @WRK1            **2
     C           HSAVOT    MULT HSMAOT    @WRK2            **2
     C           @WRK1     ADD  @WRK2     @WRK1            **2
     C           HSMAOT    ADD  @SMAOT    @WRK3            **2
     C           @WRK1     DIV  @WRK3     HSAVOT    H      **2
     C                     END                             E*2
      *
     C                     ADD  @SMAIN    HSMAIN           *1
     C                     ADD  @SMAOT    HSMAOT           *1
      *
     C                     UPDATMMFWDDP0                   *1
      *
     C                     END                             E1
      *
      *
      ** Now update the MM Half monthly file if required
     C           @UPDHM    IFNE 'N'                        B1
      *
      ** Set up key for 1st or second half of month depending on days
     C           @@Z71D    IFLE 15                         B*2
     C                     Z-ADD1         @VDHM            **2
     C                     ELSE                            X*2
     C                     Z-ADD2         @VDHM   20       **2
     C                     END                             E*2
      *
      ** Chain to MMFWUHLL file
     C           @HKEY     CHAINMMFWUHLL             50    *1
      *
      ** Key for MMFWUHLL file
     C           @HKEY     KLIST                           *1
     C                     KFLD           @CCY             *1
     C                     KFLD           @@YR             *1
     C                     KFLD           @@Z71M           *1
     C                     KFLD           @VDHM            *1
     C                     KFLD           @LDNA            *1
      *
      **  If record not found create new record for that currency/date
      **  see data structure @UPDT for day/month/year last update.
     C           *IN50     IFEQ '1'                        B*2
      *
     C                     MOVE 'HT'      HTRCID           **2
     C**********           MOVE RUNA      @UPDT            **2            S01194
     C                     MOVE BJMRDT    @UPDT            **2            S01194
     C                     TIME           HTTLUP           **2
     C                     MOVE 'I'       HTCHTP           **2
     C**********           Z-ADDRUND      HTLCD            **2            S01194
     C                     Z-ADDBJRDNB    HTLCD            **2            S01194
     C                     MOVEL@USER     HTLUID           **2
     C                     MOVE @CCY      HTCCY            **2
     C                     Z-ADD@@YR      HTFBYY           **2
     C                     Z-ADD@@Z71M    HTFBMM           **2
     C                     Z-ADD@VDHM     HTFBHM           **2
     C                     MOVE @LDNA     HTLDNA           **2
      *
      ** Set up fields with real data in them
     C                     Z-ADD@THMCI    HTHMCI           **2
     C                     Z-ADD@THMCO    HTHMCO           **2
     C                     Z-ADD@THMNM    HTHMNM           **2
     C                     Z-ADD@THNIM    HTHNIM           **2
     C                     Z-ADD*ZERO     HTFIXM           **2
      *
     C                     WRITEMMFWDHP0                   **2
      *
     C                     ELSE                            X*2
      *
      ** If record already on file update it with new information
     C                     MOVE *BLANK    HTDLTF           **2
     C**********           MOVE RUNA      @UPDT            **2            S01194
     C                     MOVE BJMRDT    @UPDT            **2            S01194
     C                     TIME           HTTLUP           **2
     C                     MOVE 'A'       HTCHTP           **2
     C**********           Z-ADDRUND      HTLCD            **2            S01194
     C                     Z-ADDBJRDNB    HTLCD            **2            S01194
     C                     MOVEL@USER     HTLUID           **2
      *
      ** Set up fields with real data in them
     C                     ADD  @THMCI    HTHMCI           **2
     C                     ADD  @THMCO    HTHMCO           **2
     C                     ADD  @THMNM    HTHMNM           **2
     C                     ADD  @THNIM    HTHNIM           **2
      *
     C                     UPDATMMFWDHP0                   **2
      *
     C                     END                             E*2
     C                     END                             E1
      *
      *
      ** Clear the work fields
     C                     Z-ADD*ZERO     @WRK1  308
     C                     Z-ADD*ZERO     @WRK2  308
     C                     Z-ADD*ZERO     @WRK3  200
     C                     Z-ADD*ZERO     @WRK4  200
      *
      ** Clear daily  work fields
     C                     Z-ADD*ZERO     @SDCOT
     C                     Z-ADD*ZERO     @SDCIN
     C                     Z-ADD*ZERO     @SDNMT
     C                     Z-ADD*ZERO     @SDNIM
     C                     Z-ADD*ZERO     @SAVIN
     C                     Z-ADD*ZERO     @SAVOT
     C                     Z-ADD*ZERO     @SMAIN
     C                     Z-ADD*ZERO     @SMAOT
      *
      ** Clear half monthly work fields
     C                     Z-ADD*ZERO     @THMCO
     C                     Z-ADD*ZERO     @THMCI
     C                     Z-ADD*ZERO     @THNIM
     C                     Z-ADD*ZERO     @THMNM
      *
     C                     MOVE *BLANKS   @UPDHM
      *
     C           #ZC9      ENDSR                           #ZC9 TAG
      *
      /EJECT
      *****************************************************************
      *                                                               *
      *  Midas STANDARD SUBROUTINE                                    *
      *                                                               *
      *  ZA0710 - CALCULATE MIDAS DAY NO. TO DRS (YYYYMMDD) FORMAT.   *
      *                                                               *
      *  LAST AMEND NO. E22098             DATE 14MAY90               *
      *                                                               *
      *  E22098  -  CREATION PARAMETERS PHYSICALLY REMOVED AND        *
      *             HEADER BOX ADDED.                                 *
      *                                                               *
      *       SUBROUTINE ZA0710 EXPECTS FIELD '@@DAYN' TO BE          *
      *       PASSED TO IT IN 5,0 FORMAT.IF THE ABOVE FIELD IS LESS   *
      *       THAN 1 IT RETURNS 1 IN FIELD '@@RTN'.THE MAIN PROGRAM   *
      *       SHOULD CHECK FOR THIS CONDITION AND DO THE NECESSARY.   *
      *       IF '@@RTN' IS NOT EQUAL TO 1 IT RETURNS THE FIELD       *
      *       '@@VDT'  IN 'YYYYMMDD' FORMAT.                          *
      *                                                               *
      * NOTE: FIELD TO BE DEFINED BY EXTERNAL ROUTINE IS              *
      *                                                               *
      *       1) @@DAYN   LENGTH 5,0.                                 *
      *                                                               *
      *       FIELDS USED AND ALREADY DEFINED IN THE ROUTINE ARE:     *
      *                                                               *
      *       1) @@VDT    LENGTH 8,0 DEFINED BY A DS.                 *
      *       2) @@RTN    LENGTH 1,0.                                 *
      *       3) @@I      LENGTH 2,0 USED TO ACCESS ARRAY @YD         *
      *       4) @@J      LENGTH 2,0 USED TO ACCESS ARRAY @MD         *
      *       5) @@Z71Y   LENGTH 4,0 DEFINED BY A DS.                 *
      *       6) @@RDAY   LENGTH 5,0.                                 *
      *       7) @@LEAP   LENGTH 1,0.                                 *
      *                                                               *
      *       INDICATORS USED ARE:                                    *
      *                                                               *
      *       1) 80       CHECK FOR LOW AND EQUAL ON ARRAY @YD        *
      *       2) 81       CHECK FOR LOW ON ARRAY @MD.                 *
      *                                                               *
      * INPUT FIELD:       @@DAYN                                     *
      *                                                               *
      * OUTPUT FIELD:      @@VDT                                      *
      *                                                               *
      * WORK FIELDS:       @@RTN                                      *
      *                    @@Z71Y                                     *
      *                    @@RDAY                                     *
      *                    @@LEAP                                     *
      *                    @@I                                        *
      *                    @@J                                        *
      *                                                               *
      * ARRAYS USED:       @YD COMPILE TIME ARRAY.                    *
      *                    @MD COMPILE TIME ARRAY.                    *
      *                                                               *
      *****************************************************************
      *
     C           ZA0710    BEGSR
      *
     C                     SETOF                     8081
     C                     Z-ADD0         @@RTN   10
     C                     Z-ADD0         @@VDT
     C                     Z-ADD1         @@I     20
     C                     Z-ADD1         @@J     20
     C                     Z-ADD1         @@LEAP  10
      *
     C           @@DAYN    IFLT 1
     C                     Z-ADD1         @@RTN
     C                     GOTO ZA0719
     C                     END
      *
      * DIVISION TO DETERMINE WETHER LEAP YEAR.
      *
     C           @@DAYN    DIV  1461      @@Z71Y
     C                     MVR            @@RDAY  50
      *
      * CALCULATING YEAR.
      *
     C           @@Z71Y    MULT 4         @@Z71Y
     C                     ADD  1972      @@Z71Y
      *
      * CHECKING IF YEAR IS GREATER THAN OR EQUAL TO 2100
      *
     C           @@Z71Y    IFGE 2100
     C                     ADD  @@SSY2    @@RDAY
     C                     END
      *
      * LOKUP ARRAY @YD TO SEE HOW MANY YEARS OF A FOUR YEAR CYCLE
      * HAVE PASSED.
      *
     C           @@RDAY    LOKUP@YD,@@I                8080
      *
      * IF YEAR IS A LEAP YEAR SSLEAP IS SET TO ZERO.
      *
     C           *IN80     IFEQ '0'
     C                     Z-ADD0         @@LEAP
     C                     END
      *
      * ADD INDEX TO YEAR TO GIVE CORRECT YEAR AND ADJUST '@@RDAY'.
      *
     C           @@LEAP    IFEQ 1
     C           @@RDAY    SUB  @YD,@@I   @@RDAY
     C                     ADD  @@I       @@Z71Y
     C                     END
      *
      * PROCESSING FOR A LEAP YEAR.
      *
     C           @@LEAP    IFEQ 0
      *
      * IF '@@RDAY' = 60 DATE MUST BE 29TH OF FEBRUARY.
      *
     C           @@RDAY    IFEQ 60
     C                     Z-ADD29        @@Z71D
     C                     Z-ADD2         @@Z71M
     C                     GOTO ZA0711
     C                     END
      *
      * IF '@@RDAY' > 60 DATE IS AFTER 29TH OF FEBRUARY,CONVERSION CAN
      * PROCEED AS USUAL AFTER SUBTRACTING THE EXTRA DAY FOR THE LEAP
      * YEAR. NOTE : '@@RDAY' < 60 CONVERSION PROCEEDS AS USUAL.
      *
     C           @@RDAY    IFGT 60
     C           @@RDAY    SUB  1         @@RDAY
     C                     END
      *
     C                     END
      *
      * IF DAY '@@DAYN' IS EXACTLY DIVISIBLE BY 1461 (NUMBER OF DAYS
      * IN 4 YEARS) THEN DATE MUST BE LAST DAY OF PREVIOUS FOUR YEAR
      * GROUP.
      *
     C           @@RDAY    IFEQ 0
     C                     Z-ADD31        @@Z71D
     C                     Z-ADD12        @@Z71M
     C                     SUB  1         @@Z71Y
     C                     GOTO ZA0711
     C                     END
      *
      * LOOK UP ARRAY ARRAY @MD TO DETERMINE WHICH MONTH '@@RDAY'
      * OCCURS IN
      *
     C           @@RDAY    LOKUP@MD,@@J                81
     C                     Z-ADD@@J       @@Z71M
     C           @@RDAY    SUB  @MD,@@J   @@Z71D
      *
      * DS @@VDT  IS RETURNED IN YYYYMMDD FORMAT
      *
     C           ZA0711    TAG
      *
     C                     MOVE @@Z71Y    @@YR
      *
     C           ZA0719    ENDSR
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #ZE - Obtain settlement date for an Interest
      *                 Rate Future
      *
      *  CALLED FROM :  #BB - Process Interest Rate Futures
      *                 #BBC - Process Interest Rate Futures past settl
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @MRKT - Market
      *                 @SETD - Settlement date
      *                 @SMKT - Saved market
      *
      *  CALLS  :       FFDATE - Obtain settlement date using formula
      *
      ****************************************************************
      *
     C           #ZE       BEGSR
      *
      ** If instrument is an OTC (over the counter)
     C           ISTI      IFEQ 'Y'                        B1
     C                     Z-ADDSETD      @SETD   50       *1
     C                     ELSE                            X1
      *
      ** Else access market file to obtain market currency for subrtine
     C                     MOVELISTT      @MRKT   2        *1
      *
      ** Only access if market has changed
     C           @SMKT     IFNE @MRKT                      B*2
     C                     MOVE @MRKT     @SMKT   2        **2
     C           @MRKT     CHAINMARKT                50    **2
      *
     C           *IN50     IFEQ '1'                        B**3
     C                     SETON                     U7U8LR ************
     C                     MOVEL'MARKT   'DBFILE            * DB ERROR *
     C                     MOVEL@MRKT     DBKEY             * 006      *
     C                     MOVE '006'     DBASE             ************
     C                     MOVE 'E'       @TERM            ***3
     C                     DUMP                            ***3
     C                     GOTO #ZE9                       ***3
     C                     END                             E**3
     C                     END                             E*2
      *
      ** Use settlement date formula to calculate a Midas day number
     C                     MOVE SEDF      FFDATC           *1
     C                     MOVE MKLC      FFCCY1           *1
     C                     MOVE ISCY      FFCCY2           *1
     C                     MOVE OTHC      FFCCY3           *1
     C                     Z-ADDYRNO      FFYR             *1
     C                     Z-ADDMTHN      FFMTH            *1
     C                     EXSR FFDATE                     *1
     C                     MOVE FFDAY     @SETD            *1
     C                     END                             E1
      *
     C           #ZE9      ENDSR                           #ZE9 TAG
      *
     C/EJECT
      * FFDATE etc. now hard coded due to new holiday processing          S01195
      *                                                                   S01195
     C***/COPY*ZSRSRC,FFDATEZ3***                                         S01195
     C***/EJECT***                                                        S01195
     C***/COPY*ZSRSRC,ZDATE3Z4***                                         S01195
     C***/EJECT***                                                        S01195
     C***/COPY ZSRSRC,ZDATE5Z2                                            S01195
     C***/EJECT                                                           S01195
     C*****************************************************************
     C*                                                               *
     C*  FFDATE SR.   TO DETERMINE THE CORRECT WORKING DAY AS A MIDAS *
     C*               DAY NUMBER FOR A FORMULA SPECIFIED FOR EACH     *
     C*               MARKET/INSTRUMENT TYPE/YEAR/MONTH               *
     C*                                                               *
     C*   INPUT   : FFDATC   DATE FORMULA           FORMAT (7A)       *
     C*             FFMTH    MONTH OF REQD. DATE    FORMAT (2N)       *
     C*             FFYR     YEAR OF REQD. DATE     FORMAT (2N)       *
     C*             FFCCY1   MARKET CURRENCY        FORMAT (3A)       *
     C*             FFCCY2   INSTRUMENT CURRENCY    FORMAT (3A)       *
     C*             FFCCY3   OTHER CURRENCY         FORMAT (3A)       *
     C*                                                               *
     C*   OUTPUT  : FFDAY    WORKING DAY DEFINED                      *
     C*                      BY INPUT FIELDS        FORMAT (5N)       *
     C*                                                               *
     C*   SUBROUTINES USED:                                           *
     C*                                                               *
     C*             FFDE31   CALC LAST WORKING DAY IN MONTH           *
     C*             FFDN31   CALC SPECIFIED WORKING DAY IN MONTH      *
     C*             FFDAAD   ADJUST DAY WITH AN ACTUAL NO. OF DAYS    *
     C*             FFDABD   ADJUST DAY WITH NO. OF BUSINESS DAYS IN  *
     C*                      MARKET CENTRE CCY                        *
     C*             FFDACD   ADJUST DAY WITH NO. OF BUSINESS DAYS IN  *
     C*                      MARKET CENTRE CCY & INST CCY & OTHER CCY *
     C*             FFDAWD   ADJUST DAY WITH BY 1 BUSINESS DAY IN     *
     C*                      MARKET CENTRE CCY IF NOT A WORKING DAY   *
     C**************FFDCYH***DETERMINE*WHETHER*CCY*PASSED*IS*A*WORKING*   S01195
     C***********************DAY*FOR*THE*LAST*DAY*OUPUT*BY*ZDATE/5*****   S01195
     C**************FFDAT3***CALCULATE*A*NO.*OF*WORKING*DAYS*BACK******   S01195
     C***********************IN*A*GIVEN*CCY****************************   S01195
     C**************FFDAT5***DETERMINE*WHETHER*A*DAY*IS*A*WORKING*DAY**   S01195
     C***********************&*FIND*THE*PREV*WORKING*DAY*IF*IT*IS*NOT**   S01195
     C*                                                               *
     C*             ZDATE1   CONVERT A DATE TO A NO. OF DAYS          *
     C**************ZDATE3***CALCULATE*A*NO.*OF*WORKING*DAYS*FORWARDS**   S01195
     C***********************IN*A*GIVEN*CCY****************************   S01195
     C**************ZDATE5***DETERMINE*WHETHER*A*DAY*IS*A*WORKING*DAY**   S01195
     C***********************&*FIND*THE*NEXT*WORKING*DAY*IF*IT*IS*NOT**   S01195
     C*             ZFWDT    CALCULATE A NO. OF WORKING DAYS FORWARDS *   S01195
     C*                      IN A GIVEN CCY                           *   S01195
     C*             ZBKDT    CALCULATE A NO. OF WORKING DAYS BACKWARDS*   S01195
     C*                      IN A GIVEN CCY                           *   S01195
     C*             ZCHKH    DETERMINE WHETHER A DAY IS A WORKING DAY *   S01195
     C*                                                               *   S01195
     C*  NOTE: IN THIS PROGRAM THE CURRENCY LOCATION CODE (ZLOC)      *   S01195
     C*        USED AS INPUT FOR NEW HOLIDAY ROUTINES IS ALWAYS       *   S01195
     C*        SET TO SYSTEM LOCATION CODE, DONE IN 1ST CYCLE         *   S01195
     C*                                                               *
     C*             *IN85    USED/RESET AS WORK INDICATOR             *
     C*                                                               *
     C* NB. THE DATE FORMULA COMPRISES:       ABCDEFG       WHERE     *
     C*                                       -------                 *
     C*  AB  =  BASE DATE.   =  a) DAY NO. IN MONTH                   *
     C*                   OR =  b) WEEK NO. AND DAY CODE              *
     C*                   OR =  c) LAST WORKING DAY IN MONTH  ("31")  *
     C*                                                               *
     C*  CDEFG = ADJUSTMENT                                           *
     C*                                                               *
     C*          IF NO ADJUSTMENT (DEFG = *BLANKS) AND BASE DATE IS   *
     C*          a) OR b) ABOVE,                                      *
     C*                                                               *
     C*  C  =    "+"/"-" FOR NEXT/PREVIOUS WORKING DAY IF HOLIDAY     *
     C*                                                               *
     C*          OTHERWISE, IF ADJUSTMENT SPECIFIED:                  *
     C*                                                               *
     C*  C  =    "+"/"-" NUMBER OF DAYS FORWARDS/BACKWARDS            *
     C*                                                               *
     C*  DE =    NUMBER OF DAYS                                       *
     C*                                                               *
     C*  F  =    TYPE OF DAYS TO BE COUNTED                           *
     C*                     "A" = ACTUAL DAYS                         *
     C*                     "B" = BUSINESS DAYS IN CCY1               *
     C*                     "C" = BUSINESS DAYS IN CCY1,CCY2 & CCY3   *
     C*                                                               *
     C*  G  =    "+"/"-" FOR NEXT/PREVIOUS WORKING DAY IF DAY FROM    *
     C*          F IS A HOLIDAY  ( TYPE "A" ONLY )                    *
     C*                                                               *
     C*****************************************************************
     C**
     C           FFDATE    BEGSR                           ***FFDATE****
     C**
     C*
     C**   DEFINE/INITIALISE FIELDS
     C*
     C                     MOVE FFDATC    FFDATC  7
     C                     Z-ADDFFMTH     FFMTH   20
     C                     Z-ADDFFYR      FFYR    20
     C                     MOVE FFCCY1    FFCCY1  3
     C                     MOVE FFCCY2    FFCCY2  3
     C                     MOVE FFCCY3    FFCCY3  3
     C*
     C                     Z-ADD0         FFDAY   50
     C*
     C           *LIKE     DEFN FFMTH     FFTM
     C           *LIKE     DEFN FFYR      FFYRW
     C           *LIKE     DEFN FFDAY     DUMP
     C           *LIKE     DEFN FFDAY     FFMDY
     C           *LIKE     DEFN FFDAY     FFMDY1
     C           *LIKE     DEFN FFDAY     FFMDY2
     C           *LIKE     DEFN FFDAY     FFMDY3
     C           *LIKE     DEFN FFCCY1    FFCCYX
     C*
     C**  FIND DAY IN MONTH
     C**  IF '31' SPECIFIED, FIND LAST WORKING DAY IN MONTH
     C**  OTHERWISE FIND THE DAY SPECIFIED BY THE DAY NO. OR DAY CODE
     C*
     C           FFAB      CASEQ'31'      FFDE31
     C           FFAB      CASNE'31'      FFDN31
     C                     END
     C*
     C*    CALCULATE ADJUSTMENTS SPECIFIED TO DATE
     C*
     C**   ADJUSTMENTS TO DATE NEED TO BE MADE IF
     C**   1.  A DAY NO. OR CODE WAS SPECIFIED ( AS THIS DAY MAY BE A
     C**       HOLIDAY OR AN ADJUSTMENT MAY HAVE BEEN SPECIFIED )
     C**   OR
     C**   2.  ' MONTH END ' WAS SPECIFIED ( WHICH WILL BE A WORKING
     C**       DAY ) AND AN ADJUSTMENT HAS BEEN SPECIFIED
     C*
     C           FFAB      IFNE '31'
     C           FFAB      OREQ '31'
     C           FFDEF     ANDNE*BLANKS
     C*
     C**   DETERMINE NO. OF DAYS FORWARDS/BACKWARDS DEPENDING ON CODE
     C**            I.E. 'A' = ACTUAL DAYS
     C**            I.E. 'B' = BUSINESS DAYS - MARKET CENTRE CCY
     C**            I.E. 'C' = BUSINESS DAYS - MKT. CENTRE & INST. CCY
     C**            I.E. ' ' = NO ADJUSTMENT
     C**   NB  RESULT WILL BE A WORKING DAY
     C**       ( BEFORE/AFTER DAY GIVEN IF HOLIDAY - DEP. IF +/- CODE )
     C*
     C           FFDEF     IFNE *BLANK
     C                     MOVE FFDEA     FFDE    20
     C                     ELSE
     C                     Z-ADD*ZERO     FFDE
     C                     END
     C*
     C           FFF       CASEQ'A'       FFDAAD
     C           FFF       CASEQ'B'       FFDABD
     C           FFF       CASEQ'C'       FFDACD
     C           FFF       CASEQ' '       FFDAWD
     C                     END
     C*
     C                     END
     C**
     C                     ENDSR
     C*
     C*****************************************************************
     C/EJECT
     C*****************************************************************
     C*                                                               *
     C*  FFDE31 SR.   CALLED FROM STANDARD SUBROUTINE FFDATE          *
     C*               CALCULATE LAST WORKING DAY IN MONTH             *
     C*                                                               *
     C*****************************************************************
     C*
     C           FFDE31    BEGSR                           ****FFDE31***
     C**
     C*
     C**   DETERMINE MONTH NUMBER FOR NEXT MONTH
     C*
     C*
     C**   IF NOT DECEMBER
     C*
     C           FFMTH     IFNE 12
     C           FFMTH     ADD  1         FFTM
     C                     Z-ADDFFYR      FFYRW
     C*
     C**   IF DECEMBER
     C*
     C                     ELSE
     C                     Z-ADD1         FFTM
     C           FFYR      ADD  1         FFYRW
     C                     END
     C*
     C**   DETERMINE MIDAS DAY NUMBER FOR 1ST OF NEXT MONTH
     C*
     C           *IN98     IFEQ '1'
     C                     MOVE '01'      FFWRK4  40
     C                     MOVELFFTM      FFWRK4
     C                     ELSE
     C                     MOVE FFTM      FFWRK4
     C                     MOVEL'01'      FFWRK4
     C                     END
     C*
     C                     MOVE FFYRW     ZDATE
     C                     MOVELFFWRK4    ZDATE
     C*
     C                     EXSR ZDATE1
     C*
     C                     Z-ADDZDAYNO    FFDAY
     C*
     C**   SUBTRACT 1 TO GET LAST DAY OF MONTH REQUIRED
     C*
     C                     SUB  1         FFDAY
     C*
     C**   IF THIS IS NOT A WORKING DAY, FIND LAST WORKING DAY IN MONTH
     C**   IN THE MARKET CURRENCY
     C*
     C                     MOVE FFDAY     ZDAYNO
     C                     MOVE FFCCY1    ZCCY
     C**********           MOVE 'Y'       ZOPT                            S01195
     C                     Z-ADD0         ZNRDYS                          S01195
     C**********           EXSR FFDAT5                                    S01195
     C                     EXSR ZBKDT                                     S01195
     C*
     C                     Z-ADDZDYNBR    FFDAY
     C**
     C                     ENDSR
     C*
     C*****************************************************************
     C/EJECT
     C*****************************************************************
     C*                                                               *
     C*  FFDN31 SR.   CALLED FROM STANDARD SUBROUTINE FFDATE          *
     C*               CALCULATE THE SPECIFIED DAY IN MONTH            *
     C*                                                               *
     C*****************************************************************
     C*
     C           FFDN31    BEGSR                           ****FFDN31***
     C**
     C*
     C**  CONVERT THE FIRST TWO CHARACTERS
     C*
     C**
     C**  DETERMINE MIDAS DATE FOR 1ST OF MONTH
     C**
     C*
     C           *IN98     IFEQ '1'
     C                     MOVELFFMTH     FFWRK4
     C                     MOVE '01'      FFWRK4
     C                     ELSE
     C                     MOVE FFMTH     FFWRK4
     C                     MOVEL'01'      FFWRK4
     C                     END
     C*
     C                     MOVELFFWRK4    ZDATE
     C                     MOVE FFYR      ZDATE
     C*
     C                     EXSR ZDATE1
     C*
     C                     Z-ADDZDAYNO    FFDAY
     C**
     C*
     C**
     C**    DETERMINE WHETHER FIRST TWO CHARACTERS ARE DAY NO.OR
     C**    DAY CODE
     C**
     C*
     C           FFB       LOKUPTABDY     TABNO          81
     C*
     C**    IF FIRST TWO CHARACTERS ARE DAY CODE
     C*
     C           *IN81     IFEQ '1'
     C**
     C*
     C**  DETERMINE DAY IN THE WEEK FOR THE 1ST OF THE MONTH FOR A
     C**  GIVEN MIDAS DATE.
     C**  ( THIS METHOD IS BASED ON THE FACT THAT THE DAY OF MIDAS DAY
     C**  1 - 01/01/72 - IS KNOWN.  SEE SD1050 )
     C*
     C           FFDAY     DIV  7         DUMP
     C                     MVR            FFDAYY  10
     C*
     C**  DETERMINE THE NO. OF DAYS AFTER 1ST OF MONTH AND IT'S
     C**     MIDAS DATE
     C*
     C                     Z-ADDTABNO     FFDAYW  10
     C           FFDAYW    SUB  FFDAYY    FFDAYZ  10   82
     C   82                ADD  7         FFDAYZ
     C                     ADD  FFDAYZ    FFDAY
     C                     MOVE FFAA      FFA     10
     C           2         DO   FFA
     C           FFDAY     ADD  7         FFDAY
     C                     END
     C**
     C                     ELSE
     C**
     C*
     C**    IF FIRST TWO CHARACTERS ARE  NO. OF DAYS
     C*
     C*
     C**    ADD NO. OF DAYS TO MIDAS DAY NO. OF FIRST DAY OF MONTH
     C*
     C                     MOVE FFAB      FFABN   20
     C                     SUB  1         FFABN
     C                     ADD  FFABN     FFDAY
     C**
     C                     END
     C*
     C                     ENDSR
     C*
     C*****************************************************************
     C/EJECT
     C*****************************************************************
     C*                                                               *
     C*  FFDAAD SR.   CALLED FROM STANDARD SUBROUTINE FFDATE          *
     C*               TO ADJUST DAY WITH SPECIFIED NO. OF ACTUAL      *
     C*               DAYS                                            *
     C*                                                               *
     C*****************************************************************
     C*
     C           FFDAAD    BEGSR                           ****FFDAAD***
     C**
     C*
     C**   ADD/SUBTRACT SPECIFIED NO. OF DAYS AS REQUIRED
     C*
     C           FFC       IFEQ '+'
     C                     ADD  FFDE      FFDAY
     C                     ELSE
     C                     SUB  FFDE      FFDAY
     C                     END
     C*
     C**   IF FFDAY IS HOLIDAY DETERMINE NEXT/PREVIOUS  WORKING DAY
     C*
     C           FFG       IFEQ '+'
     C*
     C**   IF HOLIDAY, DETERMINE NEXT WORKING DAY
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY1    ZCCY
     C**********           MOVE 'Y'       ZOPT                            S01195
     C                     Z-ADD0         ZNRDYS                          S01195
     C**********           EXSR ZDATE5                                    S01195
     C                     EXSR ZFWDT                                     S01195
     C*
     C                     Z-ADDZDYNBR    FFDAY
     C*
     C                     ELSE
     C*
     C**   IF HOLIDAY, DETERMINE PREVIOUS WORKING DAY
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY1    ZCCY
     C**********           MOVE 'Y'       ZOPT                            S01195
     C                     Z-ADD0         ZNRDYS                          S01195
     C**********           EXSR FFDAT5                                    S01195
     C                     EXSR ZBKDT                                     S01195
     C*
     C                     Z-ADDZDYNBR    FFDAY
     C*
     C                     END
     C**
     C                     ENDSR
     C*
     C*****************************************************************
     C/EJECT
     C*****************************************************************
     C*                                                               *
     C*  FFDABD SR.   CALLED FROM STANDARD SUBROUTINE FFDATE          *
     C*               TO ADJUST DAY WITH SPECIFIED NO. OF BUSINESS    *
     C*               DAYS FOR THE MARKET CENTRE                      *
     C*                                                               *
     C*****************************************************************
     C*
     C           FFDABD    BEGSR                           ****FFDABD***
     C**
     C*
     C**   ADD/SUBTRACT SPECIFIED NO. OF DAYS AS REQUIRED
     C*
     C           FFC       IFEQ '+'
     C*
     C**   CALCULATE LIMIT FFDE WORKING DAYS AFTER DATE
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY1    ZCCY
     C                     Z-ADDFFDE      ZNRDYS
     C**********           EXSR ZDATE3                                    S01195
     C                     EXSR ZFWDT                                     S01195
     C*
     C                     Z-ADDZDYNBR    FFDAY
     C*
     C                     ELSE
     C*
     C**   CALCULATE LIMIT FFDE WORKING DAYS BEFORE DATE
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY1    ZCCY
     C                     Z-ADDFFDE      ZNRDYS
     C**********           EXSR FFDAT3                                    S01195
     C                     EXSR ZBKDT                                     S01195
     C*
     C                     Z-ADDZDYNBR    FFDAY
     C*
     C                     END
     C**
     C                     ENDSR
     C*
     C*****************************************************************
     C/EJECT
     C*****************************************************************
     C*                                                               *
     C*  FFDACD SR.   CALLED FROM STANDARD SUBROUTINE FFDATE          *
     C*               TO ADJUST DAY WITH SPECIFIED NO. OF BUSINESS    *
     C*               DAYS IN CCY OF MARKET CENTRE & INSTRUMENT &     *
     C*               ANY OTHER CCY                                   *
     C*                                                               *
     C*****************************************************************
     C*
     C           FFDACD    BEGSR                           ****FFDACD***
     C**
     C*
     C**   DETERMINE SPECIFIED NEXT/PREVIOUS WORKING DAYS IN ALL CCYS
     C*
     C           FFC       IFEQ '+'
     C**
     C*
     C**   DETERMINE NEXT FFDE WORKING DAYS
     C*
     C**   CALCULATE LIMIT FFDE WORKING DAYS AFTER DATE,IN CCY1
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY1    ZCCY
     C                     Z-ADDFFDE      ZNRDYS
     C**********           EXSR ZDATE3                                    S01195
     C                     EXSR ZFWDT                                     S01195
     C                     Z-ADDZDYNBR    FFMDY1
     C*
     C**   CALCULATE LIMIT FFDE WORKING DAYS AFTER DATE,IN CCY2
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY2    ZCCY
     C                     Z-ADDFFDE      ZNRDYS
     C**********           EXSR ZDATE3                                    S01195
     C                     EXSR ZFWDT                                     S01195
     C                     Z-ADDZDYNBR    FFMDY2
     C*
     C**   CALCULATE LIMIT FFDE WORKING DAYS AFTER DATE,IN CCY3
     C**   IF PRESENT
     C*
     C           FFCCY3    IFNE ' '
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY3    ZCCY
     C                     Z-ADDFFDE      ZNRDYS
     C**********           EXSR ZDATE3                                    S01195
     C                     EXSR ZFWDT                                     S01195
     C                     Z-ADDZDYNBR    FFMDY3
     C                     END
     C*
     C**   TO FIND THE EARLIEST DAY ( TODAY OR LATER ) WHICH IS A
     C**   WORKING DAY IN ALL CURRENCIES, FIRST FIND THE LATEST OF
     C**   ALL THE DATES
     C*
     C           FFMDY1    IFGT FFMDY2
     C                     Z-ADDFFMDY1    FFMDY
     C                     ELSE
     C                     Z-ADDFFMDY2    FFMDY
     C                     END
     C           FFCCY3    IFNE *BLANKS
     C           FFMDY3    ANDGTFFMDY
     C                     Z-ADDFFMDY3    FFMDY
     C                     END
     C*
     C**   CHECK IF FFMDY IS WORKING DAY IN ALL CURRENCIES
     C*
     C                     Z-ADDFFMDY     ZDYNBR
     C*
     C                     MOVE 'N'       HOLF    1
     C*
     C**   CONTINUE WHILE THE DATE IS A HOLIDAY IN ANY CCY
     C*
     C           HOLF      DOWEQ'N'
     C*
     C                     Z-ADDZDYNBR    ZDAYNO
     C*
     C**   FIND NEXT WORKING DAY IN CCY1
     C*
     C                     MOVE FFCCY1    ZCCY
     C**********           MOVE 'Y'       ZOPT                            S01195
     C                     Z-ADD0         ZNRDYS                          S01195
     C**********           EXSR ZDATE5                                    S01195
     C                     EXSR ZFWDT                                     S01195
     C*
     C**   CHECK IF THIS DATE IS A HOLIDAY IN CCY2
     C*
     C**********           MOVE FFCCY2    FFCCYX                          S01195
     C                     MOVE FFCCY2    ZCCY                            S01195
     C                     Z-ADDZDYNBR    ZDAYNO                          S01195
     C*
     C**********           EXSR FFDCYH                                    S01195
     C                     EXSR ZCHKH                                     S01195
     C*
     C**   IF CCY2 A HOLIDAY,INCREMENT DAY AND REPEAT FROM CCY1 CHECK
     C*
     C********** *IN85     IFEQ '1'                                       S01195
     C           ZIND      IFEQ 'H'                                       S01195
     C*
     C                     ADD  1         ZDYNBR
     C                     ELSE
     C*
     C**   IF CCY2 NOT A HOLIDAY, CHECK CCY3 IF PRESENT
     C**   IF CCY3 NOT PRESENT, DAY IS NOT A HOLIDAY IN ANY CCY
     C*
     C           FFCCY3    IFEQ *BLANK
     C                     MOVE 'Y'       HOLF
     C                     ELSE
     C*
     C**   CHECK IF THIS DATE IS A HOLIDAY IN CCY3
     C*
     C**********           MOVE FFCCY3    FFCCYX                          S01195
     C                     MOVE FFCCY3    ZCCY                            S01195
     C*
     C**********           EXSR FFDCYH                                    S01195
     C                     EXSR ZCHKH                                     S01195
     C*
     C**   IF CCY3 A HOLIDAY,INCREMENT DAY AND REPEAT FROM CCY1 CHECK
     C*
     C********** *IN85     IFEQ '1'                                       S01195
     C           ZIND      IFEQ 'H'                                       S01195
     C                     ADD  1         ZDYNBR
     C*
     C                     ELSE
     C*
     C**   IF CCY3 NOT A HOLIDAY, DAY IS NOT A HOLIDAY IN ANY CCY
     C*
     C                     MOVE 'Y'       HOLF
     C*
     C                     END
     C                     END
     C                     END
     C**
     C                     END
     C*
     C**   ZDYNBR IS THE NEXT WORKING DAY NOT A HOLIDAY IN ANY CCY
     C*
     C                     Z-ADDZDYNBR    FFDAY
     C**
     C                     ELSE
     C**
     C*
     C**   DETERMINE PREVIOUS FFDE WORKING DAYS
     C*
     C**   CALCULATE LIMIT FFDE WORKING DAYS BEFORE DATE,IN CCY1
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY1    ZCCY
     C                     Z-ADDFFDE      ZNRDYS
     C**********           EXSR FFDAT3                                    S01195
     C                     EXSR ZBKDT                                     S01195
     C                     Z-ADDZDYNBR    FFMDY1
     C*
     C**   CALCULATE LIMIT FFDE WORKING DAYS BEFORE DATE,IN CCY2
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY2    ZCCY
     C                     Z-ADDFFDE      ZNRDYS
     C**********           EXSR FFDAT3                                    S01195
     C                     EXSR ZBKDT                                     S01195
     C                     Z-ADDZDYNBR    FFMDY2
     C*
     C**   CALCULATE LIMIT FFDE WORKING DAYS BEFORE DATE,IN CCY3
     C**   IF PRESENT
     C*
     C           FFCCY3    IFNE ' '
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY3    ZCCY
     C                     Z-ADDFFDE      ZNRDYS
     C**********           EXSR FFDAT3                                    S01195
     C                     EXSR ZBKDT                                     S01195
     C                     Z-ADDZDYNBR    FFMDY3
     C                     END
     C*
     C**   TO FIND THE LATEST DAY ( TODAY OR EARLIER ) WHICH IS A
     C**   WORKING DAY IN ALL CURRENCIES, FIRST FIND THE EARLIEST OF
     C**   ALL THE DATES
     C*
     C           FFMDY1    IFLT FFMDY2
     C                     Z-ADDFFMDY1    FFMDY
     C                     ELSE
     C                     Z-ADDFFMDY2    FFMDY
     C                     END
     C           FFCCY3    IFNE *BLANKS
     C           FFMDY3    ANDLTFFMDY
     C                     Z-ADDFFMDY3    FFMDY
     C                     END
     C*
     C**   CHECK IF FFMDY IS WORKING DAY IN ALL CURRENCIES
     C*
     C                     Z-ADDFFMDY     ZDYNBR
     C*
     C                     MOVE 'N'       HOLF
     C*
     C**   CONTINUE WHILE THE DATE IS A HOLIDAY IN ANY CCY
     C*
     C           HOLF      DOWEQ'N'
     C*
     C                     Z-ADDZDYNBR    ZDAYNO
     C*
     C**   FIND PREVIOUS WORKING DAY IN CCY1
     C*
     C                     MOVE FFCCY1    ZCCY
     C**********           MOVE 'Y'       ZOPT                            S01195
     C                     Z-ADD0         ZNRDYS                          S01195
     C**********           EXSR FFDAT5                                    S01195
     C                     EXSR ZBKDT                                     S01195
     C*
     C**   CHECK IF THIS DATE IS A HOLIDAY IN CCY2
     C*
     C**********           MOVE FFCCY2    FFCCYX                          S01195
     C                     MOVE FFCCY2    ZCCY                            S01195
     C                     Z-ADDZDYNBR    ZDAYNO                          S01195
     C*
     C**********           EXSR FFDCYH                                    S01195
     C                     EXSR ZCHKH                                     S01195
     C*
     C**   IF CCY2 A HOLIDAY,INCREMENT DAY AND REPEAT FROM CCY1 CHECK
     C*
     C********** *IN85     IFEQ '1'                                       S01195
     C           ZIND      IFEQ 'H'                                       S01195
     C*
     C                     SUB  1         ZDYNBR
     C                     ELSE
     C*
     C**   IF CCY2 NOT A HOLIDAY, CHECK CCY3 IF PRESENT
     C**   IF CCY3 NOT PRESENT, DAY IS NOT A HOLIDAY IN ANY CCY
     C*
     C           FFCCY3    IFEQ *BLANK
     C                     MOVE 'Y'       HOLF
     C                     ELSE
     C*
     C**   CHECK IF THIS DATE IS A HOLIDAY IN CCY3
     C*
     C**********           MOVE FFCCY3    FFCCYX                          S01195
     C                     MOVE FFCCY3    ZCCY                            S01195
     C*
     C**********           EXSR FFDCYH                                    S01195
     C                     EXSR ZCHKH                                     S01195
     C*
     C**   IF CCY3 A HOLIDAY,INCREMENT DAY AND REPEAT FROM CCY1 CHECK
     C*
     C********** *IN85     IFEQ '1'                                       S01195
     C           ZIND      IFEQ 'H'                                       S01195
     C                     SUB  1         ZDYNBR
     C*
     C                     ELSE
     C*
     C**   IF CCY3 NOT A HOLIDAY, DAY IS NOT A HOLIDAY IN ANY CCY
     C*
     C                     MOVE 'Y'       HOLF
     C*
     C                     END
     C                     END
     C                     END
     C**
     C                     END
     C*
     C**   ZDYNBR IS THE PREVIOUS WORKING DAY NOT A HOLIDAY IN ANY CCY
     C*
     C                     Z-ADDZDYNBR    FFDAY
     C**
     C                     END
     C**
     C                     ENDSR
     C*
     C*****************************************************************
     C/EJECT
     C*****************************************************************
     C*                                                               *
     C*  FFDAWD SR.   CALLED FROM STANDARD SUBROUTINE FFDATE          *
     C*               RETURN DAY PASSED IF IT IS A WORKING DAY, ELSE  *
     C*               RETURN NEXT/PREVIOUS WORKING DAY IN MARKET      *
     C*               CENTRE CURRENCY AS REQUIRED                     *
     C*                                                               *
     C*****************************************************************
     C*                                                               *
     C           FFDAWD    BEGSR                           ****FFDAWD***
     C**
     C           FFC       IFEQ '+'
     C*
     C**   IF FFDAY IS HOLIDAY DETERMINE NEXT WORKING DAY
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY1    ZCCY
     C**********           MOVE 'Y'       ZOPT                            S01195
     C                     Z-ADD0         ZNRDYS                          S01195
     C**********           EXSR ZDATE5                                    S01195
     C                     EXSR ZFWDT                                     S01195
     C*
     C                     ELSE
     C*
     C**  IF FFDAY IS HOLIDAY DETERMINE PREVIOUS WORKING DAY
     C*
     C                     Z-ADDFFDAY     ZDAYNO
     C                     MOVE FFCCY1    ZCCY
     C**********           MOVE 'Y'       ZOPT                            S01195
     C                     Z-ADD0         ZNRDYS                          S01195
     C**********           EXSR FFDAT5                                    S01195
     C                     EXSR ZBKDT                                     S01195
     C                     END
     C*
     C                     Z-ADDZDYNBR    FFDAY
     C**
     C                     ENDSR
     C*****************************************************************
     C/EJECT
     C/COPY ZSRSRC,ZDATE1Z2
     C/COPY ZSRSRC,ZACCH                                                  S01195
     C/COPY ZSRSRC,ZFWDT                                                  S01195
     C/COPY ZSRSRC,ZBKDT                                                  S01195
     C/COPY ZSRSRC,ZCHKH                                                  S01195
      ****************************************************************
      *
      *  SUBROUTINE:    #BB  - Takeon Interest Rate Futures trades from
      *                 the Futures and Options module (FF).
      *
      *  CALLED FROM :  #B - Detail Processing
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @SETD - Settlement date
      *                 @ISTT - Saved instrument type
      *                 @BOKC - Saved book code
      *
      *  CALLS  :       #ZE - Calculate settlement date
      *                 #BBA - Process Fut prior to settlment, vdate
      *                 #BBB - Process Fut prior to settlement, mdate
      *                 #BBC - Process Futures after settlement
      *
      ****************************************************************
      *
     C           #BB       BEGSR
      *
      ** First delete existing FU records from MM daily forward book
     C           'FU'      SETLLMMFWDRP0
      *
      ** Read and delete until end of file or end of FU records
     C           *IN52     DOUEQ'1'                        B1
     C           HSLDNA    ORNE 'FU'                       B1
     C                     READ MMFWDRP0                 52*1
      *
     C           *IN52     IFNE '1'                        B*2
     C           HSLDNA    ANDEQ'FU'                       B*2
     C                     DELETMMFWDRP0                   **2
     C                     END                             E*2
      *
     C                     END                             E1
      *
      ** If loop did not reach end of file but read a record for
      ** another trade type, must release the locked record
     C           *IN52     IFEQ '0'                        B1
     C           HSLDNA    ANDNE'FU'                       B1
     C                     EXCPT@RLSMD                     *1
     C                     END                             E1
      *
      ** Now delete existing FU records from MM monthly forward book
     C           'FU'      SETLLMMFWHRP0
      *
      ** Read and delete until end of file or end of FU records
     C           *IN52     DOUEQ'1'                        B1
     C           HTLDNA    ORNE 'FU'                       B1
     C                     READ MMFWHRP0                 52*1
      *
     C           *IN52     IFNE '1'                        B*2
     C           HTLDNA    ANDEQ'FU'                       B*2
     C                     DELETMMFWHRP0                   **2
     C                     END                             E*2
      *
     C                     END                             E1
      *
      ** If loop did not reach end of file but read a record for
      ** another trade type, must release the locked record
     C           *IN52     IFEQ '0'                        B1
     C           HTLDNA    ANDNE'FU'                       B1
     C                     EXCPT@RLSMH                     *1
     C                     END                             E1
      *
      ** Now rebuild the positions
     C                     OPEN DLAMTDLL
     C                     OPEN DLINRALL
     C                     OPEN DLINRFLL
     C                     OPEN DLFUTULL
     C                     OPEN DLFUTSLL
     C                     OPEN DLIRFDLL
     C                     OPEN MARKT
     C                     OPEN BOOKD
     C                     OPEN INTYP
      *
     C           *LOVAL    SETLLDLINRFLL
      *
      ** Read until end of file
     C           *IN52     DOUEQ'1'                        B1
     C                     READ DLINRFLL                 52*1
      *
      ** If instrument type has changed then access instruments file
     C           ISTT      IFNE @ISTT                      B*2
     C                     MOVE ISTT      @ISTT            **2
     C           ISTT      CHAININTYP                50    **2
      *
     C           *IN50     IFEQ '1'                        B**3
     C                     SETON                     U7U8LR ************
     C                     MOVEL'INTYP   'DBFILE            * DB ERROR *
     C                     MOVELISTT      DBKEY             * 005      *
     C                     MOVE '005'     DBASE             ************
     C                     MOVE 'E'       @TERM            ***3
     C                     DUMP                            ***3
     C                     GOTO #BB9                       ***3
     C                     END                             E**3
     C                     END                             E*2
      *
      ** If book code has changed then access book codes file
     C           BOKC      IFNE @BOKC                      B*2
     C                     MOVE BOKC      @BOKC            **2
     C           BOKC      CHAINBOOKD                50    **2
      *
     C           *IN50     IFEQ '1'                        B**3
     C                     SETON                     U7U8LR ************
     C                     MOVEL'BOOKD   'DBFILE            * DB ERROR *
     C                     MOVELBOKC      DBKEY             * 007      *
     C                     MOVE '007'     DBASE             ************
     C                     MOVE 'E'       @TERM            ***3
     C                     DUMP                            ***3
     C                     GOTO #BB9                       ***3
     C                     END                             E**3
     C                     END                             E*2
      *
      ** Only process interest rate futures against a hedged book
      ** prior to settlement date
     C           *IN52     IFEQ '0'                        B*2
     C           HDGI      ANDEQ'Y'                        B*2
     C           ISPT      ANDEQ1                          B*2
     C           FCIN      ANDNE'Y'                        B*2
      *
      ** Obtain settlement date for the interest rate future
     C                     EXSR #ZE                        **2
     C           *INU7     CABEQ'1'       #BB9             **2
      *
      ** Process futures prior to settlement for the settlement date
     C********** RUND      IFLE @SETD                      B**3           S01194
     C           BJRDNB    IFLE @SETD                      B**3           S01194
     C                     EXSR #BBA                       ***3
     C           *INU7     CABEQ'1'       #BB9             ***3           S01194
     C                     END                             E**3
      *
      ** Process futures prior to settlement for the far date
     C                     EXSR #BBB                       **2
      *
     C                     END                             E*2
     C                     END                             E1
      *
      ** Process settled interest rate futures
     C                     EXSR #BBC
      *
      ** Remove deleted futures from DLFUTSPP, i.e. MM Daily Deals Enq.
      *
     C                     EXSR #BBD
     C                     CLOSEINTYP
     C                     CLOSEBOOKD
     C                     CLOSEMARKT
     C                     CLOSEDLIRFDLL
     C                     CLOSEDLFUTSLL
     C                     CLOSEDLFUTULL
     C                     CLOSEDLINRFLL
     C                     CLOSEDLINRALL
     C                     CLOSEDLAMTDLL
      *
     C           #BB9      ENDSR                           #BB9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BBA - Process Interest Rate Futures prior
      *                 to settlement, near date processing
      *
      *  CALLED FROM :  #BB - Process Interest Rate Futures
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @SAVIN - Working daily average rate, cash in
      *                 @SAVOT - Working daily average rate, cash out
      *                 @SMAIN - Working daily maturity date, cash in
      *                 @SMAOT - Working daily maturity date, cash out
      *                 @THMCI - Working half monthly, cash in
      *                 @THMCO - Working half monthly, cash out
      *                 @THMNM - Working half monthly, net movement
      *                 @LDNA - Trade type for MM file updates
      *                 @CCY - Currency for forward book file updates
      *                 @@DAYN - Date for MM file updates (sr/ZA0710)
      *                 @CALC - Interest calculation method
      *                 @RATE - rate equivalent of the price
      *                 @EFRT - Effective forward rate from sr/#ZB
      *                 @UNPAL - Underlying principal
      *                 @UPDHM - if 'N' do not update half month file
      *                 @TENR - Tenor ie. underlying period
      *                 @CUR - currency code passed to sr/#ZD
      *
      *  CALLS  :       #ZB - Obtain forward rate from forward forward
      *                 #ZC - Update MM forward book files
      *                 #ZD - Fill up currency details array
      *
      ****************************************************************
      *
     C           #BBA      BEGSR
      *
      ** Obtain rate from price
     C           100       SUB  COPR      @RATE
      *
      ** Set up tenor
     C                     Z-ADDULPD      @TENR
      *
      ** Obtain default interest calculation method for the currency
      ** This method cuts down on slow file access's to improve speed
     C                     SETOF                         53
     C                     Z-ADD1         @I      30
     C           ISCY      LOKUP@CA,@I                   53
      *
      ** If element not found then add one for use next time
     C           *IN53     IFEQ '0'                        B1
     C                     MOVE ISCY      @CUR             *1
     C                     EXSR #ZD                        *1
     C           *INU7     CABEQ'1'       #BBA9            *1             S01194
     C                     ELSE                            X1
     C                     MOVEA@CD       @CDDS            *1
     C                     END                             E1
     C                     MOVE @CALCA    @CALC
      *
      ** Obtain an effective rate for the forward date from the
      ** forward forward rate
     C                     EXSR #ZB
      *
      ** Obtain underlying principal
     C           NUCO      MULT CTAM      @UNPAL 160
      *
      ** Contract is purchased
     C           TRTY      IFEQ 'P'                        B1
     C                     Z-ADD@EFRT     @SAVOT           *1
     C                     Z-ADD@UNPAL    @SMAOT           *1
     C                     Z-ADD@UNPAL    @THMCO           *1
     C                     Z-SUB@UNPAL    @THMNM           *1
      *
      ** Contract is sold
     C                     ELSE                            X1
     C                     Z-ADD@EFRT     @SAVIN           *1
     C                     Z-ADD@UNPAL    @SMAIN           *1
     C                     Z-ADD@UNPAL    @THMCI           *1
     C                     Z-ADD@UNPAL    @THMNM           *1
     C                     END                             E1
      *
      ** Update the MM Daily and half monthly forward book file
     C                     MOVE 'FU'      @LDNA
     C                     MOVE ISCY      @CCY
     C                     Z-ADD@SETD     @@DAYN
     C                     MOVE *BLANK    @UPDHM
     C                     EXSR #ZC
      *
     C           #BBA9     ENDSR                           TAG #BBA9
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BBB - Process Interest Rate Futures prior
      *                 to settlement, far date processing
      *
      *  CALLED FROM :  #BB - Process Interest Rate Futures
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @FARD - Far date
      *                 @SETD - Settlement date
      *                 @SAVIN - Working daily average rate, cash in
      *                 @SAVOT - Working daily average rate, cash out
      *                 @SMAIN - Working daily maturity date, cash in
      *                 @SMAOT - Working daily maturity date, cash out
      *                 @THMCI - Working half monthly, cash in
      *                 @THMCO - Working half monthly, cash out
      *                 @THMNM - Working half monthly, net movement
      *                 @LDNA - Trade type for MM file updates
      *                 @CCY - Currency for forward book file updates
      *                 @@DAYN - Date for MM file updates (sr/ZA0710)
      *                 @RATE - rate equivalent of the price
      *                 @UNPAL - Underlying principal
      *                 @UPDHM - if 'N' do not update half month file
      *                 @FUTS - Key list for access of DLFUTSLL
      *
      *  CALLS  :       #ZC - Update MM forward book files
      *
      ****************************************************************
      *
     C           #BBB      BEGSR
      *
      ** Obtain rate from price
     C           100       SUB  COPR      @RATE
      *
      ** Obtain underlying principal
     C           NUCO      MULT CTAM      @UNPAL 160
      *
      ** Contract is sold
     C           TRTY      IFEQ 'S'                        B1
     C                     Z-ADD@RATE     @SAVOT           *1
     C                     Z-ADD@UNPAL    @SMAOT           *1
     C                     Z-ADD@UNPAL    @THMCO           *1
     C                     Z-SUB@UNPAL    @THMNM           *1
      *
      ** Contract is purchased
     C                     ELSE                            X1
     C                     Z-ADD@RATE     @SAVIN           *1
     C                     Z-ADD@UNPAL    @SMAIN           *1
     C                     Z-ADD@UNPAL    @THMCI           *1
     C                     Z-ADD@UNPAL    @THMNM           *1
     C                     END                             E1
      *
      ** Calculate far date
     C           @SETD     ADD  ULPD      @FARD   50
      *
      ** Update the MM Daily and half monthly forward book file
     C                     MOVE 'FU'      @LDNA
     C                     MOVE ISCY      @CCY
     C                     Z-ADD@FARD     @@DAYN
     C                     MOVE *BLANK    @UPDHM
     C                     EXSR #ZC
      *
      ** Now output a rcd to the futures extract file (used by DL3200)
      ** only if it is not already on (cannot clear file during i/c,
      ** because it may be locked by the enquiry).
     C                     SETOF                     50
     C           @FUTS     SETLLDLFUTSLL                 50
      *
     C           @FUTS     KLIST
     C                     KFLD           ISCY
     C                     KFLD           @SETD
     C                     KFLD           TNBR
      *
     C           *IN50     IFEQ '0'                        B1
     C                     Z-ADD@SETD     SETL             *1
     C                     Z-ADD@FARD     FARD             *1
     C                     Z-ADD@RATE     RATE             *1
     C                     Z-ADD@UNPAL    ULPR             *1
     C                     WRITEDLFUTSP0                   *1
     C                     END                             E1
      *
     C           #BBB9     ENDSR                           TAG #BBB9
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BBC - Process Interest Rate Futures after
      *                 settlement
      *
      *  CALLED FROM :  #BB - Process Interest Rate Futures
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @FARD - Far date
      *                 @UPDHM - if 'N' do not update half month file
      *                 @SETD - Settlement date
      *                 @BOKC - Saved book code
      *                 @ISTT - Saved instrument type
      *                 @INRA - Key list for access of DLINRALL
      *                 @CCY - Currency for file update
      *                 @SDNIM - Working daily interest amount
      *                 @LDNA - Trade type for file update
      *                 @@DAYN - Date for file update
      *                 @FUTS - Key list for access of DLFUTSLL
      *
      *  CALLS  :       #ZE - Obtain Settlement date
      *                 #ZC - Update MM forward book files
      *
      ****************************************************************
      ** After settlement date only the interest amount is updated
      ** (on the far date). This is calculated as the difference
      ** between the price of the original contract and the close out
      ** price, accrued on a daily basis. Note that this may be -ve.
      *
      ** Note that this is used by the TM MM Daily Summary enquiry
      ** to adjust the average rate, this is the only use for the
      ** amount so the half monthly file is not updated.
      *
      ** This process assumes that Daily Accruals are used, so field
      ** RPAD is accrued on a daily basis.
      *
     C           #BBC      BEGSR
      *
      ** Read file from the beginning
     C           *LOVAL    SETLLDLAMTDLL
      *
      ** Read until end of file
     C           *IN52     DOUEQ'1'                        B1
     C                     READ DLAMTDLL                 52*1
      *
      ** If instrument type has changed then access instruments file
     C           ISTT      IFNE @ISTT                      B*2
     C           *IN52     ANDEQ'0'                        B*2
     C                     MOVE ISTT      @ISTT            **2
     C           ISTT      CHAININTYP                50    **2
      *
     C           *IN50     IFEQ '1'                        B**3
     C                     SETON                     U7U8LR ************
     C                     MOVEL'INTYP   'DBFILE            * DB ERROR *
     C                     MOVELISTT      DBKEY             * 008      *
     C                     MOVE '008'     DBASE             ************
     C                     MOVE 'E'       @TERM            ***3
     C                     DUMP                            ***3
     C                     GOTO #BBC9                      ***3
     C                     END                             E**3
     C                     END                             E*2
      *
      ** If book code has changed then access book codes file
     C           BOKC      IFNE @BOKC                      B*2
     C           *IN52     ANDEQ'0'                        B*2
     C                     MOVE BOKC      @BOKC            **2
     C           BOKC      CHAINBOOKD                50    **2
      *
     C           *IN50     IFEQ '1'                        B**3
     C                     SETON                     U7U8LR ************
     C                     MOVEL'BOOKD   'DBFILE            * DB ERROR *
     C                     MOVELBOKC      DBKEY             * 009      *
     C                     MOVE '009'     DBASE             ************
     C                     MOVE 'E'       @TERM            ***3
     C                     DUMP                            ***3
     C                     GOTO #BBC9                      ***3
     C                     END                             E**3
     C                     END                             E*2
      *
      ** Only process interest rate futures against a hedged book
     C           HDGI      IFEQ 'Y'                        B*2
     C           ISPT      ANDEQ1                          B*2
     C           *IN52     ANDEQ'0'                        B*2
      *
      ** Obtain settlement date
     C                     EXSR #ZE                        **2
      *
      ** Calculate far date from settlement date
     C           @SETD     ADD  ULPD      @FARD            **2
      *
      ** Set up interest field
     C                     Z-ADDRPAD      @SDNIM           **2
      *
      ** Update the MM Daily forward book file only
     C                     MOVE 'FU'      @LDNA            **2
     C                     MOVE CCY       @CCY             **2
     C                     Z-ADD@FARD     @@DAYN           **2
     C                     MOVE 'N'       @UPDHM           **2
     C                     EXSR #ZC                        **2
      *
      ** Now output a rcd to the futures extract file (used by DL3200)
      ** only if it is not already on (cannot clear file during i/c,
      ** because it may be locked by the enquiry).
     C           @INRA     SETLLDLINRALL                   **2
     C           @INRA     KLIST                           **2
     C                     KFLD           ISTT             **2
     C                     KFLD           YRNO             **2
     C                     KFLD           MTHN             **2
     C                     KFLD           BOKC             **2
      *
      ** Read through all trades for this record on lf/DLAMTDLL
      ** Fields ending in 'A' are from lf/DLINRALL
     C           ISTT      DOUNEISTTA                      B**3
     C           YRNO      ORNE YRNOA                      B**3
     C           MTHN      ORNE MTHNA                      B**3
     C           BOKC      ORNE BOKCA                      B**3
     C           *IN52     OREQ '1'                        B**3
      *
     C                     READ DLINRALL                 52***3
      *
     C           ISTT      IFEQ ISTTA                      B***4
     C           YRNO      ANDEQYRNOA                      B***4
     C           MTHN      ANDEQMTHNA                      B***4
     C           BOKC      ANDEQBOKCA                      B***4
     C           *IN52     ANDEQ'0'                        B***4
      *
     C                     SETOF                     50
      *
      ** Set up transaction number in key list
     C                     Z-ADDTNBRA     TNBR             ****4
     C           @FUTS     SETLLDLFUTSLL                 50****4
      *
     C           *IN50     IFEQ '0'                        B****5
     C**********           Z-ADDCUSCA     CUSC             *****5                            CSD027A
     C                     MOVE CUSCA     CUSC             *****5                            CSD027A
     C                     Z-ADD@SETD     SETL             *****5
     C                     Z-ADD@FARD     FARD             *****5
     C                     Z-ADD@RATE     RATE             *****5
     C                     Z-ADD@UNPAL    ULPR             *****5
     C                     WRITEDLFUTSP0                   *****5
     C                     END                             E****5
     C                     END                             E***4
     C                     END                             E**3
      *
     C                     END                             E*2
     C                     END                             E1
      *
     C           #BBC9     ENDSR                           TAG #BBC9
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BBD - Remove deleted interest rate futures
      *                 from DLFUTSPP
      *
      *  CALLED FROM :  #BB  - Process interest rate futures
      *
      ****************************************************************
      *
     C           #BBD      BEGSR
      *
      ** Read through file of deleted futures
     C           *LOVAL    SETLLDLIRFDLL             52
      *
     C           *IN52     DOUEQ'1'                        B1
      *
     C                     READ DLIRFDLL                 52*1
      *
     C           *IN52     IFEQ '0'                        B*2
      *
      ** Set up transaction number in key list
     C           TNBR      SETLLDLFUTULL                 50**2
      *
      * *IN50 is set on if record equal to key is found
     C           *IN50     IFEQ '1'                        B**3
     C                     READ DLFUTSP0                 50***3
     C                     DELETDLFUTSP0                   ***3
     C                     END                             E**3
     C                     END                             E*2
     C                     END                             E1
      *
     C           #BBD9     ENDSR
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BC  - Takeon Forward Rate Agreements (FRA's)
      *                 and Interest Rate Swaps (IRS's).
      *
      *  CALLED FROM :  #B - Detail Processing
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :
      *
      *  CALLS  :       #BCA - Process FRA's prior to settlement
      *                 #BCB - Process FRA's past to settlement
      *                 #BCC - Process IRS's
      *
      ****************************************************************
      *
     C           #BC       BEGSR
      *
      ** First delete existing FR records from MM daily forward book
     C           'FR'      SETLLMMFWDRP0
      *
      ** Read and delete until end of file or end of FR records
     C           *IN52     DOUEQ'1'                        B1
     C           HSLDNA    ORNE 'FR'                       B1
     C                     READ MMFWDRP0                 52*1
      *
     C           *IN52     IFNE '1'                        B*2
     C           HSLDNA    ANDEQ'FR'                       B*2
     C                     DELETMMFWDRP0                   **2
     C                     END                             E*2
      *
     C                     END                             E1
      *
      ** If loop did not reach end of file but read a record for
      ** another trade type, must release the locked record
     C           *IN52     IFEQ '0'                        B1
     C           HSLDNA    ANDNE'FR'                       B1
     C                     EXCPT@RLSMD                     *1
     C                     END                             E1
      *
      ** Now delete existing FR records from MM monthly forward book
     C           'FR'      SETLLMMFWHRP0
      *
      ** Read and delete until end of file or end of FR records
     C           *IN52     DOUEQ'1'                        B1
     C           HTLDNA    ORNE 'FR'                       B1
     C                     READ MMFWHRP0                 52*1
      *
     C           *IN52     IFNE '1'                        B*2
     C           HTLDNA    ANDEQ'FR'                       B*2
     C                     DELETMMFWHRP0                   **2
     C                     END                             E*2
      *
     C                     END                             E1
      *
      ** If loop did not reach end of file but read a record for
      ** another trade type, must release the locked record
     C           *IN52     IFEQ '0'                        B1
     C           HTLDNA    ANDNE'FR'                       B1
     C                     EXCPT@RLSMH                     *1
     C                     END                             E1
      *
      ** Now delete existing IR records from MM daily forward book
     C           'IR'      SETLLMMFWDRP0
      *
      ** Read and delete until end of file or end of IR records
     C           *IN52     DOUEQ'1'                        B1
     C           HSLDNA    ORNE 'IR'                       B1
     C                     READ MMFWDRP0                 52*1
      *
     C           *IN52     IFNE '1'                        B*2
     C           HSLDNA    ANDEQ'IR'                       B*2
     C                     DELETMMFWDRP0                   **2
     C                     END                             E*2
      *
     C                     END                             E1
      *
      ** If loop did not reach end of file but read a record for
      ** another trade type, must release the locked record
     C           *IN52     IFEQ '0'                        B1
     C           HSLDNA    ANDNE'IR'                       B1
     C                     EXCPT@RLSMD                     *1
     C                     END                             E1
      *
      ** Now delete existing IR records from MM monthly forward book
     C           'IR'      SETLLMMFWHRP0
      *
      ** Read and delete until end of file or end of IR records
     C           *IN52     DOUEQ'1'                        B1
     C           HTLDNA    ORNE 'IR'                       B1
     C                     READ MMFWHRP0                 52*1
      *
     C           *IN52     IFNE '1'                        B*2
     C           HTLDNA    ANDEQ'IR'                       B*2
     C                     DELETMMFWHRP0                   **2
     C                     END                             E*2
      *
     C                     END                             E1
      *
      ** If loop did not reach end of file but read a record for
      ** another trade type, must release the locked record
     C           *IN52     IFEQ '0'                        B1
     C           HTLDNA    ANDNE'IR'                       B1
     C                     EXCPT@RLSMH                     *1
     C                     END                             E1
      *
      ** Now rebuild the positions by reading the FRA/IRS deals file
     C                     OPEN DLFRIRLL
      *
     C           *LOVAL    SETLLDLFRIRLL
      *
      ** Read until end of file
     C           *IN52     DOUEQ'1'                        B1
     C                     READ DLFRIRLL                 52*1
      *
      ** Process Forward Rate Agreements, FRA's
     C           DTYP      IFEQ 'FR'                       B*2
     C           *IN52     ANDEQ'0'                        B*2
      *
      ** If bit 0 is on, Our first rate fix has been done
     C                     SETOF                     5556
     C                     TESTB'0'       UDNSI          55
      *
      ** If bit 0 is on, Their first rate fix has been done
     C                     TESTB'0'       TDNSI          56
      *
      ** Process FRA's prior to settlement (settlement occurs on vdat)
      **    Trade entered today, zero rate fix days but not yet settled
     C********** RUND      IFEQ VDAT                       B**3           S01194
     C           BJRDNB    IFEQ VDAT                       B**3           S01194
     C           *IN55     ANDEQ'0'                        B**3
     C           *IN56     ANDEQ'0'                        B**3
      *
     C********** RUND      ORLT VDAT                       B**3           S01194
     C           BJRDNB    ORLT VDAT                       B**3           S01194
     C                     EXSR #BCA                       ***3
      *
      ** Process FRA's past settlement, only if maturity date has not
      ** been passed by spot date (sr/#BCB has extra checks for this)
     C                     ELSE                            X**3
     C                     EXSR #BCB                       ***3
     C           *INU7     CABEQ'1'       #BC9             ***3           S01194
     C                     END                             E**3
     C                     END                             E*2
      *
      ** Process Interest Rate Swaps, IRS's, types RS, RX only
     C           DTYP      IFEQ 'RS'                       B*2
     C           *IN52     ANDEQ'0'                        B*2
     C           DTYP      OREQ 'RX'                       B*2
     C           *IN52     ANDEQ'0'                        B*2
     C                     EXSR #BCC                       **2
     C                     END                             E*2
     C                     END                             E1
      *
     C                     CLOSEDLFRIRLL
      *
     C           #BC9      ENDSR                           #BC9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BCA - Process Forward Rate Agreements (FRA's)
      *                 prior to settlement.
      *
      *  CALLED FROM :  #BC - Takeon FRA's and IRS's
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @SAVIN - Working daily average rate, cash in
      *                 @SAVOT - Working daily average rate, cash out
      *                 @SMAIN - Working daily maturity date, cash in
      *                 @SMAOT - Working daily maturity, cash out
      *                 @THMCI - Working half monthly, cash in
      *                 @THMCO - Working half monthly, cash out
      *                 @THMNM - Working half monthly, net movement
      *                 @LDNA - Trade type for MM file updates
      *                 @CCY - Currency for forward book file updates
      *                 @@DAYN - Date for MM file updates (sr/ZA0710)
      *                 @CALC - Interest calculation method
      *                 @RATE - The fixed rate
      *                 @BEG - start date (sr/#ZBA)
      *                 @END - end date (sr/#ZBA)
      *                 @TENR - Tenor
      *
      *  CALLS  :       #ZB - Obtain forward rate from forward forward
      *                 #ZC - Update MM forward book files
      *
      ****************************************************************
      *
      ** This process updates the MM forward book for the settlement
      ** date with the notional principal, averaged at a rate derived
      ** from the fixed rate, and the MM forward book for the maturity
      ** date with the notional principal, averaged at the fixed rate.
      ** Prior to settlement only the fixed rate side is considered.
      *
      ** To 'buy' an FRA means to buy the right to use the fixed rate
      ** (so the counterparty uses the floating rate).
      *
      ** The terms value date and settlement date are interchangeable
      ** for FRA's.
      *
     C           #BCA      BEGSR
      *
     C                     Z-ADDVDAT      @BEG    50
     C                     Z-ADDMDAT      @END    50
     C                     MOVE 'FR'      @LDNA
     C                     MOVE UCUCY     @CCY
      *
      ** Update forward book files for Settlement date
      *
      ** Bank ('Our' fields) buys the fixed rate
     C           BYSL      IFEQ 'B'                        B1
      *
      ** Obtain a forward rate from the forward forward rate
     C                     MOVE UICBS     @CALC   1        *1
     C                     Z-ADDURTSP     @RATE  117       *1
     C                     Z-ADD*ZERO     @TENR            *1
     C                     EXSR #ZB                        *1
      *
      ** Update the cash in fields
     C                     Z-ADD@EFRT     @SAVIN           *1
     C***********          Z-ADDUPAMT     @SMAIN           *1             052266
     C                     Z-ADDUPAMT     @SDCIN           *1             052266
     C                     Z-ADDUPAMT     @SDNMT           *1             052266
     C                     Z-ADDUPAMT     @THMCI           *1
     C                     Z-ADDUPAMT     @THMNM           *1
      *
      ** Else Counterparty ('Their' fields) has the fixed rate
     C                     ELSE                            X1
     C                     MOVE TICBS     @CALC            *1
     C                     Z-ADDTRTSP     @RATE            *1
     C                     Z-ADD*ZERO     @TENR            *1
      *
      ** Obtain a forward rate from the forward forward rate
     C                     EXSR #ZB                        *1
      *
      ** Update the cash out fields
     C                     Z-ADD@EFRT     @SAVOT           *1
     C***********          Z-ADDTPAMT     @SMAOT           *1             052266
     C                     Z-ADDTPAMT     @SDCOT           *1             052266
     C                     Z-SUBTPAMT     @SDNMT           *1             052266
     C                     Z-ADDTPAMT     @THMCO           *1
     C                     Z-SUBTPAMT     @THMNM           *1
     C                     END                             E1
      *
      ** Update the MM Daily and Monthly forward book files
     C                     Z-ADDVDAT      @@DAYN
     C                     EXSR #ZC
      *
      *
      ** Update forward book files for Maturity date
      *
      ** Bank ('Our' fields) buys the fixed rate
     C           BYSL      IFEQ 'B'                        B1
      *
      ** Update the cash out fields
     C                     Z-ADDURTSP     @SAVOT           *1
     C                     Z-ADDUPAMT     @SMAOT           *1
     C                     Z-ADDUPAMT     @THMCO           *1
     C                     Z-SUBUPAMT     @THMNM           *1
      *
      ** Else Counterparty ('Their' fields) has the fixed rate
     C                     ELSE                            X1
      *
      ** Update the cash in fields
     C                     Z-ADDTRTSP     @SAVIN           *1
     C                     Z-ADDTPAMT     @SMAIN           *1
     C                     Z-ADDTPAMT     @THMCI           *1
     C                     Z-ADDUPAMT     @THMNM           *1
     C                     END                             E1
      *
      ** Update the MM Daily and Monthly forward book files
     C                     Z-ADDMDAT      @@DAYN
     C                     EXSR #ZC
      *
     C           #BCA9     ENDSR                           #BCA9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BCB - Process Forward Rate Agreements (FRA's)
      *                 past settlement.
      *
      *  CALLED FROM :  #BC - Takeon FRA's and IRS's
      *
      *  FIELDS INPUT:  none
      *
      *  FIELDS USED:   @WRK5 - work field
      *                 @WRK7 - work field
      *                 @WRK8 - work field
      *                 @WRK9 - work field
      *                 @UPDHM - if 'N' do not update half month file
      *                 @CA - Currency array
      *                 @I - Index to currency array
      *                 @SPOT - Spot date
      *                 @CDDS - Currency details data structure
      *                 @CUR - Currency for array update
      *                 @SDNIM - Working daily interest
      *                 @LDNA - Trade type for file update
      *                 @CCY - Currency for file update
      *
      *  CALLS  :       #ZC - Update MM forward book files
      *                 #ZD - Add currency details to array
      *
      ****************************************************************
      *
      ** Trades after settlement show only the non discounted proceeds
      ** in the interest column.
      *
      ** This amount is calculated by assuming the settlement
      ** amount has been accrued on a daily basis over the life of the
      ** notional deal. The amount accrued to date is then calculated.
      *
      *  The calculation is   amount =
      *
      *  (receive - pay rate) * (principal * (mat date - value date)
      *   rate                  ------------------------------------
      *                               (year in days * 100)
      *
      *
      *   = @WRK9 * @WRK7    in this code
      *             -----
      *             @WRK5
      *
      ** Note that this is used by the TM MM Daily Summary enquiry
      ** to adjust the average rate, this is the only use for the
      ** amount so the half monthly file is not updated.
      ** This is a reasonable approximation to the non discounted
      ** proceeds accrued daily.
      *
     C           #BCB      BEGSR
      *
      ** Obtain spot date for the currency
      ** This method cuts down on slow file access's to improve speed
     C                     SETOF                         53
     C                     Z-ADD1         @I
     C           UCUCY     LOKUP@CA,@I                   53
      *
      ** If element not found then add one for use next time
     C           *IN53     IFEQ '0'                        B1
     C                     MOVE UCUCY     @CUR    3        *1
     C                     EXSR #ZD                        *1
     C           *INU7     CABEQ'1'       #BCB9            *1             S01194
     C                     ELSE                            X1
     C                     MOVEA@CD       @CDDS            *1
     C                     END                             E1
      *
     C                     MOVE @SPOTA    @SPOT   50
      *
      ** If spot date has passed maturity date then no updates
     C           @SPOT     IFLT MDAT                       B1
      *
      ** Obtain (year in days * 100) value
     C           UICBS     IFEQ 1                          *1
     C           UICBS     OREQ 4                          *1
     C                     Z-ADD36500     @WRK5            *1
     C                     END                             *1
      *
     C           UICBS     IFEQ 2                          *1
     C           UICBS     OREQ 3                          *1
     C           UICBS     OREQ 5                          *1
     C                     Z-ADD36000     @WRK5            *1
     C                     END                             *1
      *
     C           UICBS     IFEQ 6                          *1
     C                     Z-ADD36600     @WRK5            *1
     C                     END                             *1
      *
     C           MDAT      SUB  @SPOT     @WRK7  210       *1
     C           UPAMT     MULT @WRK7     @WRK7            *1
     C           @WRK7     DIV  @WRK5     @WRK8  159       *1
      *
     C           TEINR     SUB  UEINR     @WRK9  138       *1
      *
     C           @WRK9     MULT @WRK8     @SDNIM    H      *1
      *
      ** Update the MM Daily forward book file only
     C                     MOVE 'FR'      @LDNA            *1
     C                     MOVE UCUCY     @CCY             *1
     C                     Z-ADDMDAT      @@DAYN           *1
     C                     MOVE 'N'       @UPDHM  1        *1
     C                     EXSR #ZC                        *1
      *
     C                     END                             E1
      *
     C           #BCB9     ENDSR                           #BCB9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #BCC - Process Interest Rate Swaps (IRS's).
      *
      *  CALLED FROM :  #BC - Takeon FRA's and IRS's
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @SAVIN - Working daily average rate, cash in
      *                 @SAVOT - Working daily average rate, cash out
      *                 @SMAIN - Working daily maturity date, cash in
      *                 @SMAOT - Working daily maturity date, cash out
      *                 @THMCI - Working half monthly, cash in
      *                 @THMCO - Working half monthly, cash out
      *                 @THMNM - Working half monthly, net movement
      *                 @LDNA - Trade type for MM file updates
      *                 @CCY - Currency for forward book file updates
      *                 @@DAYN - Date for file updtes, in Midas Day no.
      *
      *  CALLS  :       #ZC - Update MM forward book files
      *
      ****************************************************************
      *
      ** Fixed rate legs update the maturity date record with the
      ** notional principal averaged at the fixed rate.
      ** Floating rate legs are only processed if they have passed the
      ** first rate fix date. They update the next interest payment
      ** date record with the notional principal averaged at the rate
      ** of the last rate fix.
      *
      ** Note that 'Our' side always updates as cash out, and 'Their'
      ** side always updates as cash in.
      ** Note that the Effective rate fields contain the rate of the
      ** last fix or the fixed rate.
      *
     C           #BCC      BEGSR
      *
     C                     MOVE 'IR'      @LDNA
      *
      ** If bit 0 is on, Our first rate fix has been done
     C                     SETOF                     5556
     C                     TESTB'0'       UDNSI          55
      *
      ** If bit 0 is on, Their first rate fix has been done
     C                     TESTB'0'       TDNSI          56
      *
      ** Must process for floating rates with a short term rate
      ** covering the entire period, treat these as fixed rates
     C           UBRTT     IFNE *ZERO                      B1
     C           *IN55     ANDEQ'1'                        B1
      **    a rate change date has not been entered
     C           UNICD     ANDEQ*ZERO                      B1
      **    UINFD is non zero if vdat is forward dated
     C           UINFD     ANDNE*ZERO                      B1
     C                     Z-ADD*ZERO     UINFD            *1
     C                     END                             E1
      *
      ** Must process for floating rates with a short term rate
      ** covering the entire period, treat these as fixed rates
     C           TBRTT     IFNE *ZERO                      B1
     C           *IN56     ANDEQ'1'                        B1
      **    a rate change date has not been entered
     C           TNICD     ANDEQ*ZERO                      B1
      **    TINFD is non zero if vdat is forward dated
     C           TINFD     ANDNE*ZERO                      B1
     C                     Z-ADD*ZERO     TINFD            *1
     C                     END                             E1
      *
      ** Process a floating rate on 'Our' side as long as it has
      ** passed the first rate fix date.
      ** Note that UEINR contains any short term rate entered
     C           UBRTT     IFNE *ZERO                      B1
     C           *IN55     ANDEQ'1'                        B1
     C********** RUND      ANDLEUINFD                      B1             S01194
     C           BJRDNB    ANDLEUINFD                      B1             S01194
      *
     C                     Z-ADDUPAMT     @SMAOT           *1
     C                     Z-ADDUEINR     @SAVOT           *1
     C                     Z-ADDUPAMT     @THMCO           *1
     C                     Z-SUBUPAMT     @THMNM           *1
     C                     Z-ADDUINFD     @@DAYN           *1
     C                     MOVE UCUCY     @CCY             *1
      *
      ** Update the MM Daily and Monthly forward book files
     C                     EXSR #ZC
     C                     END                             E1
      *
      ** Process a floating rate on 'Their' side as long as it has
      ** passed the first rate fix date.
      ** Note that TEINR contains any short term rate entered
      **    if c'party pays floating,
     C           TBRTT     IFNE *ZERO                      B1
     C           *IN56     ANDEQ'1'                        B1
     C********** RUND      ANDLETINFD                      B1             S01194
     C           BJRDNB    ANDLETINFD                      B1             S01194
      *
     C                     Z-ADDTPAMT     @SMAIN           *1
     C                     Z-ADDTEINR     @SAVIN           *1
     C                     Z-ADDTPAMT     @THMCI           *1
     C                     Z-ADDTPAMT     @THMNM           *1
     C                     Z-ADDTINFD     @@DAYN           *1
     C                     MOVE TCUCY     @CCY             *1
      *
      ** Update the MM Daily and Monthly forward book files
     C                     EXSR #ZC                        *1
     C                     END                             E1
      *
      ** Process a fixed rate on 'Our' leg
     C           UBRTT     IFEQ *ZERO                      B1
     C********** RUND      ANDLEMDAT                       B1             S01194
     C           BJRDNB    ANDLEMDAT                       B1             S01194
      *
      ** Or floating rate with a short term rate covering entire period
     C           UBRTT     ORNE *ZERO                      B1
     C           *IN55     ANDEQ'1'                        B1
     C           UINFD     ANDEQ*ZERO                      B1
     C********** RUND      ANDLEMDAT                       B1             S01194
     C           BJRDNB    ANDLEMDAT                       B1             S01194
      *
     C                     Z-ADDUPAMT     @SMAOT           *1
     C                     Z-ADDUEINR     @SAVOT           *1
     C                     Z-ADDUPAMT     @THMCO           *1
     C                     Z-SUBUPAMT     @THMNM           *1
     C                     Z-ADDMDAT      @@DAYN           *1
     C                     MOVE UCUCY     @CCY             *1
      *
      ** Update the MM Daily and Monthly forward book files
     C                     EXSR #ZC                        *1
     C                     END                             E1
      *
      ** Process a fixed rate or short term rate on 'Their' side
      **    if c'party pays fixed rate
     C           TBRTT     IFEQ *ZERO                      B1
     C********** RUND      ANDLEMDAT                       B1             S01194
     C           BJRDNB    ANDLEMDAT                       B1             S01194
      *
      ** Or floating rate with a short term rate covering entire period
     C           TBRTT     ORNE *ZERO                      B1
     C           *IN56     ANDEQ'1'                        B1
     C           TINFD     ANDEQ*ZERO                      B1
     C********** RUND      ANDLEMDAT                       B1             S01194
     C           BJRDNB    ANDLEMDAT                       B1             S01194
      *
     C                     Z-ADDTPAMT     @SMAIN           *1
     C                     Z-ADDTEINR     @SAVIN           *1
     C                     Z-ADDTPAMT     @THMCI           *1
     C                     Z-ADDTPAMT     @THMNM           *1
     C                     Z-ADDMDAT      @@DAYN           *1
     C                     MOVE TCUCY     @CCY             *1
      *
      ** Update the MM Daily and Monthly forward book files
     C                     EXSR #ZC                        *1
     C                     END                             E1
      *
     C           #BCC9     ENDSR                           #BCC9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #ZB  - Obtain forward rate from a forward
      *                 forward rate.
      *
      *  CALLED FROM :  #BCA - Process FRA's prior to settlement
      *                 #BBA - Process Interest Rate Futures
      *
      *  FIELDS INPUT : @BEG - value/start date
      *                 @END - maturity/end date
      *                 @CALC - interest calculation method
      *                 @RATE - forward forward interest rate
      *                 @TENR - Tenor
      *
      *  FIELDS OUTPUT: @EFRT - Effective forward rate
      *
      *  FIELDS USED :  @WRK5 - Work field
      *                 @WRK6 - Work field
      *
      *  CALLS  :       #ZBA - Calculate Tenor
      *
      ****************************************************************
      *
      ** The forward rate derived from the forward forward rate is
      ** calculated as below.
      *
      ** rate =        Fixed rate
      *          ------------------------
      *          1 + (Fixed rate * Tenor)
      *              ---------------------
      *               (100 * Year in days)
      *
      *        =         @RATE
      *               -----------
      *                1 + @WRK6
      *                    -----
      *                    @WRK5
      *
      *
     C           #ZB       BEGSR
      *
      ** Obtain (year in days * 100) value
     C           @CALC     IFEQ '1'
     C           @CALC     OREQ '4'
     C                     Z-ADD36500     @WRK5   50
     C                     END
      *
     C           @CALC     IFEQ '2'
     C           @CALC     OREQ '3'
     C           @CALC     OREQ '5'
     C                     Z-ADD36000     @WRK5
     C                     END
      *
     C           @CALC     IFEQ '6'
     C                     Z-ADD36600     @WRK5
     C                     END
      *
      ** Obtain Tenor (FU passes tenor, FRA does not)
     C           @TENR     IFEQ *ZERO                      B1
     C                     EXSR #ZBA                       *1
     C                     END                             E1
      *
     C           @RATE     MULT @TENR     @WRK6  189
     C           @WRK6     DIV  @WRK5     @WRK6
     C           1         ADD  @WRK6     @WRK6
     C           @RATE     DIV  @WRK6     @EFRT  138H
      *
     C           #ZB9      ENDSR                           #ZB9 TAG
      *
      /EJECT
      *****************************************************************
      *
      *  SUBROUTINE:    #ZBA - Obtain Tenor
      *                 This is a copy of sr/MM1009 from MM0089.
      *
      *  CALLED FROM :  #BCA - Process FRA's prior to settlement
      *
      *  FIELDS INPUT @BEG  - Start date of period
      *               @END  - End date of period
      *               @CALC - Interest calculation method
      *
      *  FIELDS OUTPUT @TENR - Tenor
      *
      *  WORKFIELDS   @WN5   - Work field 5N
      *               @WN5A  - Work field 5N
      *               @WDAT  - Work field 5N
      *               @DAYN  - Work field 5N
      *               @P1    - Work field 5N
      *               @P2    - Work field 5N
      *               @P3    - Work field 5N
      *               @LPNM  - Work field used in setting up @TG10
      *
      *  CALLS  :     ZA0710 - Convert Midas day no. to YMD format
      *
      ****************************************************************
     C           #ZBA      BEGSR
      *
     C                     Z-ADD*ZEROS    @TENR
     C                     Z-ADD*ZEROS    @LPNM
      *
      *  FIND NUMBER OF DAYS DIFFERENCE BETWEEN DATES
      *
     C           @END      SUB  @BEG      @WDAT   50
      **
      *    FOR CALCULATION METHODS 3,4 OR 5.
      **
     C           @CALC     IFEQ '3'                        **** B 1
     C           @CALC     OREQ '4'
     C           @CALC     OREQ '5'
      *
     C                     Z-ADD@BEG      @@DAYN  50
     C                     EXSR ZA0710
     C                     Z-ADD@@VDT     @DATA
      *
     C                     Z-ADD@END      @@DAYN
     C                     EXSR ZA0710
     C                     Z-ADD@@VDT     @DATB
      *  IF IN SAME MONTH
     C           @YY1      IFEQ @YY2                       **** B 2
     C           @MM1      IFEQ @MM2                       **** B 3
     C           @DD2      SUB  @DD1      @TENR
     C                     GOTO #ZBA9                      --------->
     C                     END                             **** E 3
     C                     END                             **** E 2
      *
     C                     ELSE                            **** X
      * IF NOT 3,4 OR 5    ****
      * EXIT PROCESSING
     C                     Z-ADD@WDAT     @TENR   50       - LOAD OUTPT
     C                     GOTO #ZBA9                      ----------->
     C                     END                             **** E 1
      *
     C           @CALC     IFEQ '3'                        **** B 1
      *  CALC NO. DAYS IN FIRST MONTH
     C           @MM1      IFNE 2                          **** B 2
     C           30        SUB  @DD1      @P1     50   80
      *  IF < 0, INITIALISE TO 0
     C   80                Z-ADD*ZEROS    @P1
      *
     C                     ELSE                            **** X
      *  TEST IF LEAP      ****
      *  YEAR
     C           @YY1      DIV  4         @WN5
     C                     MVR            @WN5           80
      *
     C           *IN80     IFEQ '1'                        **** B 3
     C           29        SUB  @DD1      @P1     50
     C                     ELSE
      *  IF NOT LEAP       ++++
     C           28        SUB  @DD1      @P1     50
     C                     END                             **** E 3
     C                     END                             **** E 2
      *  CALC. NO. DAYS IN LAST MONTH
     C           @DD2      IFLE 30                         **** B 2
     C                     Z-ADD@DD2      @P2     50
     C                     ELSE                            **** X
      *                    ****
     C                     Z-ADD30        @P2
     C                     END                             **** E 2
      *  CALC NO. DAYS IN INTERVENING MONTHS
     C           @YY2      IFEQ @YY1                       **** B 2
     C           @MM2      SUB  @MM1      @P3     50
     C                     SUB  1         @P3
     C                     MULT 30        @P3
     C                     ELSE                            **** X
      *                    ****
     C           @YY2      SUB  @YY1      @P3
     C                     SUB  1         @P3
     C                     MULT 360       @P3
      *
      * FIND NO. OF MONTHS FOR THE TWO PARTIAL YEARS
     C           12        SUB  @MM1      @WN5A   50
     C                     MULT 30        @WN5A
      *
     C           @MM2      SUB  1         @WN5
     C           @WN5      MULT 30        @WN5
      *  ACCUMULATE
     C           @WN5A     ADD  @WN5      @WN5A
     C           @P3       ADD  @WN5A     @P3
     C                     END                             **** E 2
      *  FINAL SUM
      *
     C           @P1       ADD  @P2       @TENR
     C                     ADD  @P3       @TENR
     C                     END                             **** E 1
      *  FOR METHODS 4 AND 5
      *
     C           @CALC     IFEQ '4'                        **** B 1
     C           @CALC     OREQ '5'
      *   CALCULATE NUMBER OF LEAP YEARS BETWEEN START AND END DATES
     C           @MM1      IFLE 2                          **** B 2
     C           @YY1      DIV  4         @WN5    50                   YR
     C                     MVR            @WN5           80
      *  ADD 1 IF LEAP YEAR
     C   80                ADD  1         @LPNM   50
     C                     END                             **** E 3
      *  BYPASS IF YEARS ARE THE SAME
     C           @YY1      IFEQ @YY2                       **** B 3
     C           @WDAT     SUB  @LPNM     @TENR
     C                     GOTO #ZBA9                      ---------->
     C                     END                             **** E 2
      *  LOOP TO CALCULATE NO. LEAP YEARS
     C           @YY1      DOWNE@YY2                       **** B 2
      *  INCREMENT START YEAR
     C                     ADD  1         @YY1
      *
     C           @YY1      IFEQ @YY2                       **** B 3
     C           @MM2      IFGT 2                          **** B 4
     C           @YY2      DIV  4         @WN5                         YR
     C                     MVR            @WN5           80
      *  INCREMENT IF LEAP YEAR
     C   80                ADD  1         @LPNM
     C                     END                              **** E 4
     C           @WDAT     SUB  @LPNM     @TENR
     C                     END                              **** E 3
     C           @YY1      IFNE @YY2                       **** B 3
     C           @YY1      DIV  4         @WN5                         YR
     C                     MVR            @WN5           80
      *  ADD 1 IF LEAP YEAR
     C   80                ADD  1         @LPNM
     C                     END                              **** E 3
     C                     END                              **** E 2
     C                     END                              **** E 1
      *
     C           #ZBA9     ENDSR                           TAG #ZBA9
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #ZD  - Fill up the currency array if a currency
      *                 is not yet on it
      *
      *  CALLED FROM :  #BCB - Process FRA's past to settlement
      *                 #BBA - Process FU's prior to settlment, vdate
      *
      *  FIELDS INPUT : @CUR - currency
      *
      *  FIELDS USED :  FFDATC- Date formula
      *                 FFMTH - month of the required date
      *                 FFYR - required year
      *                 FFCCY1 - Market currency
      *                 FFCCY2 - Instrument currency
      *                 FFCCY3 - Other currency
      *                 @KEY - Key for access of Table files
      *                 @J - array index
      *                 @CALCA - working default interest calc. method
      *                 @DET - working currency details field
      *                 @SPOTA - working spot date field
      *                 @IN98 - Saved *IN98
      *                 @@VDT - Data structure to split date up
      *                 @WRK10 - Work field
      *                 @@YR - Part of @@VDT data structure
      *                 @CDDS - Currency detilas data structure
      *
      ***CALLS**:*******ZDATE3*-*Calculate*a*no.*working*days*forward*    S01195
      *  CALLS  :       ZFWDT  - Calculate a no. working days forward     S01195
      *
      ****************************************************************
      ** This method cuts down on slow file access's to improve speed
      *
     C           #ZD       BEGSR
      *
     C**********           MOVE *BLANKS   @KEY                            S01194
     C**********           MOVEL'20'      @KEY                            S01194
     C**********           MOVEL@CUR      @KEY4   4                       S01194
     C**********           MOVE '1'       @KEY4                           S01194
     C**********           MOVE @KEY4     @KEY                            S01194
      **********                                                          S01194
     C********** @KEY      CHAINFDCCYTLL             50                   S01194
      *                                                                   S01194
      * Get currency details via access object                            S01194
     C                     CALL 'AOCURRR0'                                S01194
     C                     PARM '*MSG   ' @RTCD   7                       S01194
     C                     PARM '*KEY   ' @OPTN   7                       S01194
     C                     PARM @CUR      @@CUR   3                       S01194
     C           SDCURR    PARM SDCURR    DSSDY                           S01194
      *                                                                   S01194
      ***If*the*chain*fails*do*not*treat*as*an*error,*default*interest    S01194
      ***calc.*method*and*spot*days*are*only*entered*for*dealing*ccy's    S01194
      ***If*not*found*treat*spot*as*2*days*forward*and*def.*calc.*as*2.   S01194
      *                                                                   S01194
      * DB error if currency not found                                    S01194
     C           @RTCD     IFNE *BLANKS                                   S01194
     C                     SETON                     U7U8LR
     C                     MOVEL'SDCURRPD'DBFILE           ************   S01194
     C                     MOVEL@CUR      DBKEY            * DB ERROR *   S01194
     C                     MOVEL'010'     DBASE            *   010    *   S01194
     C                     MOVE 'E'       @TERM            ************   S01194
     C                     DUMP                                           S01194
     C                     GOTO #ZD9                                      S01194
     C                     END                                            S01194
      *                                                                   S01194
     C********** *IN50     IFEQ '1'                        B1             S01194
     C********** MSPD      OREQ *ZERO                      B1             S01194
     C********** DICM      OREQ *ZERO                      B1             S01194
      *                                                                   S01194
      * If the currency is found but either the Default Interest          S01194
      * Calculation Method or the MM Spot Days are zero, the              S01194
      * currency is not a dealing currency - in this case treat           S01194
      * spot as 2 days forward and default int. calc. basis as 2          S01194
     C           A6SPDY    IFEQ *ZERO                      B1             S01194
     C           A6DICB    OREQ *ZERO                      B1             S01194
      *
      ** calculate 2 working days forward from rundate for spot date
     C**********           Z-ADDRUND      ZDAYNO           *1             S01194
     C                     Z-ADDBJRDNB    ZDAYNO           *1             S01194
     C                     Z-ADD2         ZNRDYS           *1
     C                     MOVE @CUR      ZCCY             *1
     C**********           EXSR ZDATE3                     *1             S01195
     C                     EXSR ZFWDT                      *1             S01195
     C                     MOVE ZDYNBR    @SPOTA           *1
      *
     C                     MOVE '2'       @CALCA           *1
     C                     ELSE                            X1
      *
      ** Convert to Midas day number, must save *IN98 for further use
     C                     MOVE *IN98     @IN98   10       *1
      *
      ** MSPD is always in format YYYYMMDD, convert to DDMMYY
     C                     SETOF                     98    *1
     C**********           MOVE MSPD      @@VDT            *1             S01194
     C                     MOVE A6MMSD    @@VDT            *1             S01194
     C                     MOVEL@@Z71D    @WRK10  4        *1
     C                     MOVE @@Z71M    @WRK10           *1
     C                     MOVE @@YR      ZDATE            *1
     C                     MOVEL@WRK10    ZDATE            *1
     C                     EXSR ZDATE1                     *1
     C                     MOVE ZDAYNO    @SPOTA           *1
     C                     MOVE @IN98     *IN98            *1
     C**********           MOVE DICM      @CALCA           *1             S01194
     C                     MOVE A6DICB    @CALCA           *1             S01194
     C                     END                             E1
      *
      ** increment the element index
     C                     ADD  1         @J      30
      *
      ** Add the new details to the array (via the data structure)
     C                     MOVE @CDDS     @CD,@J
      *
     C           #ZD9      ENDSR                           #ZD9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #ZA  - Update Takeon in Progress Flag to 'N'
      *                 This is run if a data base error occurs
      *                 and for normal termination of processing.
      *                 For normal processing the Time of Last Takeon
      *                 is set to the system time.
      *                 For abnormal processing the Time of Last Takeon
      *                 is set to zero, this shows up on the TM forward
      *                 book enquiries and highlights the fact that
      *                 something has gone wrong.
      *
      *  CALLED FROM :  *PSSR Program error
      *                 INFDS File error
      *                 #C  Termination Processing
      *
      *  FIELDS INPUT :
      *
      *  FIELDS USED :  @USER - User profile
      *                 @TERM - Termination parameter
      *
      *  CALLS  :       nothing
      *
      ****************************************************************
      *
     C           #ZA       BEGSR
      *
      ** Set Takeon in progress flag to No, using Update lf,
      ** read the one and only record the file
     C           1         SETLLDLMMTULL
     C                     READ DLMMTULL                 50
      *
      ** Otherwise set up the fields for output of LF/DLMMTULL
     C                     MOVE 'TO'      TORCID
     C                     Z-ADDBJRDNB    TOLCD                           S01194
     C                     TIME           TOTLUP
     C                     MOVEL@USER     TOLUID
     C                     MOVE 'N'       TOTOIP
      *
     C           *INU6     IFEQ '1'                        B1
     C           *INU7     OREQ '1'                        B1
     C                     Z-ADD*ZERO     TOTLTO           *1
     C                     ELSE                            X1
     C                     TIME           TOTLTO           *1
     C                     END                             E1
      *
      ** update the Takeon flag file
     C           *IN50     IFEQ '0'                        B1
     C                     UPDATDLMMTOP0
     C                     ELSE                            X1
     C                     WRITEDLMMTOP0                   *1
     C                     END                             E1
      *
     C           #ZA9      ENDSR                           #ZA9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    #A   - First Cycle Processing
      *
      *  CALLED FROM :  MAIN PROCESSING
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @KEY - Key for access of Table files
      *                 @TERM - Termination parameter
      *                 @UPDT - Data structure to split up run date
      *                 @MMOD - Data area MMOD
      *                 @INDEX - Index for currency details array
      *                 BIS@ - Work field
      *                 CPY@ - Array containing copyright statement
      *
      *  CALLS  :       nothing
      *
      ****************************************************************
      *
     C           #A        BEGSR
      *
      ** If termination parameter is set as 'Y' then set the takeon
      ** in progress flag to 'Y' and end processing. Do nothing else.
      ** If termination parameter is set as 'N' then set the takeon
      ** in progress flag to 'N' and end processing. Do nothing else.
     C           @TERM     IFEQ ' '                        B1
      *
      ** Must use copyright array in order to include in object
     C                     MOVEACPY@      BIS@   80        *1
      *
      **  Set up program name for database error
     C**********           MOVEL'DL3340'  DBPGM            *1             S01117
     C                     MOVEL'TM3340'  DBPGM            *1             S01117
      *
      ** Set the element index for the currencies array
     C                     Z-ADD1         @INDEX  30       *1
      *
      **  Obtain module flags from DTAARA/MMOD
     C           *NAMVAR   DEFN MMOD      @MMOD            *1
     C                     IN   @MMOD                      *1
      *
      ****Obtain*FRA/IRS*module*flag*from*DL*icd*record***                S01194
     C**********           MOVE *BLANKS   @KEY   12        *1             S01194
     C**********           MOVEL'01'      @KEY             *1             S01194
     C**********           MOVE '40'      @KEY             *1             S01194
      **********                                                          S01194
     C********** @KEY      CHAINFXTB40LL             50    *1             S01194
      **********                                                          S01194
      ***If*the*chain*fails*or*a*RECI*is*not*'D'*then*it*is*a***          S01194
      ***data*base*error****                                              S01194
     C********** *IN50     IFEQ '1'                        B*2            S01194
     C********** RECI      ORNE 'D'                        B*2            S01194
     C**********           SETON                     U7U8LR ************  S01194
     C**********           MOVEL'FXTB40LL'DBFILE            * DB ERROR *  S01194
     C**********           MOVEL@KEY      DBKEY             * 001      *  S01194
     C**********           MOVE '001'     DBASE             ************  S01194
     C**********           MOVE 'E'       @TERM            **2            S01194
     C**********           DUMP                            **2            S01194
     C**********           GOTO #A9                        **2            S01194
     C**********           END                             E*2            S01194
      *                                                                   S01194
      * Get FRA/IRS module indicator from PF/SDMMODPD                     S01194
     C                     CALL 'AOMMODR0'                                S01194
     C                     PARM '*MSG   ' @RTCD   7                       S01194
     C                     PARM '*FIRST ' @OPTN   7                       S01194
     C           SDMMOD    PARM SDMMOD    DSFDY                           S01194
      *                                                                   S01194
     C           @RTCD     IFNE *BLANKS                    *************  S01194
     C                     MOVEL'SDMMODPD'DBFILE           *  DB ERROR *  S01194
     C                     MOVEL'*FIRST'  DBKEY            *    001    *  S01194
     C                     MOVEL'001'     DBASE            *************  S01194
     C                     SETON                     U7U8LR               S01194
     C                     MOVE 'E'       @TERM                           S01194
     C                     DUMP                                           S01194
     C                     GOTO #A9                                       S01194
     C                     END                                            S01194
      *                                                                   S01194
     C                     END                             E1
      *
      ****Read*icd*record*1,*PF/TABTB10*for*the*rundate.****              S01194
     C**********           MOVE *BLANKS   @KEY                            S01194
     C**********           MOVEL'01'      @KEY                            S01194
     C**********           MOVE '10'      @KEY                            S01194
      **********                                                          S01194
     C********** @KEY      CHAINFDICDRLL             50                   S01194
      **********                                                          S01194
      ***If*the*chain*fails*or*a*RECI*is*not*'D'*then*it*is*a***          S01194
      ***data*base*error******                                            S01194
     C********** *IN50     IFEQ '1'                        B1             S01194
     C********** RECI      ORNE 'D'                        B1             S01194
     C**********           SETON                     U7U8LR ************  S01194
     C**********           MOVEL'FDICDRLL'DBFILE            * DB ERROR *  S01194
     C**********           MOVEL@KEY      DBKEY             * 002      *  S01194
     C**********           MOVE '002'     DBASE             ************  S01194
     C**********           MOVE 'E'       @TERM            *1             S01194
     C**********           DUMP                            *1             S01194
     C**********           GOTO #A9                        *1             S01194
     C**********           END                             E1             S01194
      *                                                                   S01194
      * Get rundate and system location code from PF/SDBANKPD             S01194
     C                     CALL 'AOBANKR0'                                S01194
     C                     PARM '*MSG   ' @RTCD   7                       S01194
     C                     PARM '*FIRST ' @OPTN   7                       S01194
     C           SDBANK    PARM SDBANK    DSFDY                           S01194
      *                                                                   S01194
     C           @RTCD     IFNE *BLANKS                    *************  S01194
     C                     MOVEL'SDBANKPD'DBFILE           *  DB ERROR *  S01194
     C                     MOVEL'*FIRST'  DBKEY            *    002    *  S01194
     C                     MOVEL'002'     DBASE            *************  S01194
     C                     SETON                     U7U8LR               S01194
     C                     MOVE 'E'       @TERM                           S01194
     C                     DUMP                                           S01194
     C                     GOTO #A9                                       S01194
     C                     END                                            S01194
      *                                                                   S01195
      * Set up system location as input field for holiday routines        S01195
     C                     MOVELBJSLCD    ZLOC                            S01195
      *
      ***Move*RUNA*from*PF/TABTB10*to*Data*Structure*used*for*MM***       S01194
      ***forward*book*update***                                           S01194
      ** Move alpha run date from SDBANKPD to Data Structure              S01194
      ** used for MM forward book update                                  S01194
     C**********           MOVE RUNA      @UPDT                           S01194
     C                     MOVE BJMRDT    @UPDT                           S01194
      *
      ** check date format (used by a /COPY sr)
     C********** DATF      COMP 'M'                      98               S01194
     C           BJDFIN    COMP 'M'                      98               S01194
      *
      ** If called for normal takeon or to set flag to 'Y' while LE
      ** events are generated set the flag to 'Y'
      ** (ie. @TERM will be 'Y' or ' ').
     C           @TERM     IFNE 'N'                        B1
      **  Set Takeon in progress flag to Yes, using Update lf,
      ** read the one and only record on the file
     C           1         SETLLDLMMTULL                   *1
     C                     READ DLMMTULL                 50*1
      *
      *
      ** Otherwise set up the fields for output to LF/DLMMTULL
     C                     MOVE 'TO'      TORCID           *1
     C**********           Z-ADDRUND      TOLCD            *1             S01194
     C                     Z-ADDBJRDNB    TOLCD            *1             S01194
     C                     TIME           TOTLUP           *1
     C                     MOVEL@USER     TOLUID           *1
     C                     MOVE 'Y'       TOTOIP           *1
     C                     MOVE *ZERO     TOTLTO           *1
      *
      ** update the Takeon flag file
     C           *IN50     IFEQ '0'                        B1
     C                     UPDATDLMMTOP0                   *1
     C                     ELSE                            X1
     C                     WRITEDLMMTOP0                   *1
     C                     END                             E1
      *
      ** Else set flag to 'N' (this is if an error occured in LE0480)
     C                     ELSE                            X1
     C                     EXSR #ZA                        *1
     C                     END                             E1
      *
      ** Define work fields
     C           *LIKE     DEFN ISTT      @ISTT
     C           *LIKE     DEFN BOKC      @BOKC
      *
     C           *LIKE     DEFN EDAT      @EDAT
     C           *LIKE     DEFN ECCY      @ECCY
      *
     C           *LIKE     DEFN HSDCOT    @SDCOT
     C           *LIKE     DEFN HSDCIN    @SDCIN
     C           *LIKE     DEFN HSDNMT    @SDNMT
     C           *LIKE     DEFN HSDNIM    @SDNIM
     C           *LIKE     DEFN HSAVIN    @SAVIN
     C           *LIKE     DEFN HSAVOT    @SAVOT
     C           *LIKE     DEFN HSMAIN    @SMAIN
     C           *LIKE     DEFN HSMAOT    @SMAOT
      *
     C           *LIKE     DEFN HTHMCO    @THMCO
     C           *LIKE     DEFN HTHMCI    @THMCI
     C           *LIKE     DEFN HTHNIM    @THNIM
     C           *LIKE     DEFN HTHMNM    @THMNM
      *
     C           #A9       ENDSR                           #A9 TAG
      *
      /EJECT
      ************************************************************
      *  SUBROUTINE:    #C   - Termination Processing
      *                 This subroutine updates the Takeon in Progress
      *                 Flag to 'N', it is run for database errors
      *                 and for normal termination processing
      *
      *  CALLED FROM :  MAIN PROCESSING
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  none
      *
      *  CALLS  :       #ZA - Set Takeon Flag to No
      *
      ****************************************************************
      *
     C           #C        BEGSR
      *
      ** Set Takeon in progress flag to No as long as takeon has run
     C           @TERM     IFEQ ' '                        B1
     C                     EXSR #ZA                        *1
     C                     END                             E1
      *
      ** set on last record indicator
     C                     MOVE '1'       *INLR
      *
     C           #C9       ENDSR                           #C9 TAG
      *
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    *PSSR  Routine called by RPG if a program
      *                 error occurs.
      *
      *  CALLED FROM :
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @ERR1 - Error field 1, is this the 1st call?
      *                 @TERM - Termination parameter
      *
      *  CALLS  :       #ZA - Update takeon in progress flag
      *
      *****************************************************************
     C           *PSSR     BEGSR
      *
      ** Set @ERR1 to 'Y' to prevent looping if further errors
     C           @ERR1     IFNE 'Y'                        B1
     C                     MOVE 'Y'       @ERR1   1        *1
     C                     SETON                       U6LR*1
      *
      ** Set takeon in progress flag to No
     C                     EXSR #ZA
     C           *INU7     CABEQ'1'       PSSR9            *1
      *
      ** Set up fields in local data area, *LDA
     C**********           MOVEL'DL3340'  DBPGM            *1             S01117
     C                     MOVEL'TM3340'  DBPGM            *1             S01117
     C                     MOVEL'991'     DBASE            *1
      *
     C                     DUMP                            *1
     C                     END                             E1
      *
      ** Terminate the program
     C                     MOVE 'E'       @TERM
     C                     RETRN
      *
     C           PSSR9     ENDSR
      /EJECT
      ****************************************************************
      *
      *  SUBROUTINE:    INFSR  Routine called by RPG if a file
      *                 processing error occurs.
      *
      *  CALLED FROM :
      *
      *  FIELDS INPUT : none
      *
      *  FIELDS USED :  @ERR2 - Error field 2, is this the 1st call?
      *                 @TERM - Termination parameter
      *
      *  CALLS  :       #ZA - Update takeon in progress flag
      *
      *****************************************************************
      *
     C           INFSR     BEGSR
      *
      ** Set @ERR1 to 'Y' to prevent looping if further errors
     C           @ERR2     IFNE 'Y'                        B1
     C                     MOVE 'Y'       @ERR2   1        *1
     C                     SETON                     U7U8LR*1
      *
      ** Set takeon in progress flag to No
     C                     EXSR #ZA
     C           *INU7     CABEQ'1'       INFSR9           *1
      *
      ** Set up fields in local data area, *LDA
     C                     MOVE @FILE     DBFILE           *1
     C**********           MOVEL'DL3340'  DBPGM            *1             S01117
     C                     MOVEL'TM3340'  DBPGM            *1             S01117
     C                     MOVE '992'     DBASE            *1
      *
     C                     DUMP                            *1
     C                     END                             E1
      *
      ** Terminate the program
     C                     MOVE 'E'       @TERM
     C                     RETRN
      *
     C           INFSR9    ENDSR
      *
      ****************************************************************
      *
      *
      ** Format to release record for daily forward book during
      ** deletion of records
     OMMFWDRP0E                @RLSMD
      *
      ** Format to release record for half monthly forward book during
      ** deletion of records
     OMMFWHRP0E                @RLSMH
      *
      *
** CPY@ - Copyright statement
(c) Misys International Banking Systems Ltd. 2001
** @YD  USED BY SR. ZA0710 - YEARS, IN DAYS, CUMULATIVE IN 4 YEAR SPAN
00366007310109601461
** @MD  USED BY SR. ZA0710 - MONTHS IN DAYS CUMULATIVE THROUGH YEAR
00000000310005900090001200015100181002120024300273003040033400365
**   TABDY/TABNO - SHORTNAMES & DAY NUMBERS (used by /COPY)
F0S1X2M3U4W5T6
**   ZYDY - YEARS IN DAYS CUMULATIVE, FOUR YEAR SPAN (used by /COPY)
0366073110961461
**   ZMDY - MONTHS IN DAYS CUMULATIVE THROUGH YEAR (used by /COPY)
000031059090120151181212243273304334365
