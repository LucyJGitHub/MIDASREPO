/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas UP ADBU Script Generation for Global')          */
/*********************************************************************/
/*                                                                   */
/*       Midas - Upgrade Module                                      */
/*                                                                   */
/*       UPC000052 - ADBU Script Generation for Global               */
/*                                                                   */
/*       (c) Finastra International Limited 2020                     */
/*                                                                   */
/*       Last Amend No. MD061992           Date 23Oct23              */
/*       Prev Amend No. MD060960           Date 16Jan23              */
/*                      CUT017 *CREATE     Date 17Mar20              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD061992 - Allow 3 char prefix for reference libraries      */
/*       MD060960 - Some dependents do not exist yet as their        */
/*                  CRTDUPOBJ has not been executed yet. Fix is to   */
/*                  rebuild the order.                               */
/*       CUT017 - Adapptive Database Upgrade                         */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&PRFX &REFSYS &BRGBRGLIB)

             DCL        VAR(&SEQC) TYPE(*DEC) LEN(15 5) VALUE(0)
             DCL        VAR(&PRFX) TYPE(*CHAR) LEN(2)
/**********  DCL        VAR(&REFSYS) TYPE(*CHAR) LEN(2) */                              /*MD061992*/
             DCL        VAR(&REFSYS) TYPE(*CHAR) LEN(3)                                 /*MD061992*/
             DCL        VAR(&LIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&BRGBRGLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RETURN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&FLDUPD) TYPE(*CHAR) LEN(10)
             DCL        VAR(&FLDVAL) TYPE(*CHAR) LEN(100)
             DCL        VAR(&ERROR) TYPE(*CHAR) LEN(10)
             DCL        VAR(&PLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DTQN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGLEN) TYPE(*DEC) LEN(5 0) VALUE(50)
             DCL        VAR(&MSGDATA) TYPE(*CHAR) LEN(50)
             DCL        VAR(&RCVWAIT) TYPE(*DEC) LEN(5 0) VALUE(-1)
             DCL        VAR(&COUNT) TYPE(*DEC) LEN(2 0)
             DCL        VAR(&FAIL) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&WMSG) TYPE(*CHAR) LEN(50) VALUE('DONE')

             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2020')

/** Global Monitor Message */

             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO CMDLBL(ABNOR))

/* Update Script Work File job Status with 'Running' */
             CHGVAR        VAR(&FLDUPD) VALUE('UPSCRS')
             CHGVAR     VAR(&FLDVAL) VALUE('R')
             CALL UPGUPDWR ('*UPDATE   ' &PRFX &FLDUPD &FLDVAL &ERROR &RETURN)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)

/** Create DTAQ for sbmedt jobs */
             CHGVAR     VAR(&DTQN) VALUE('UP000052')
             CHGVAR     VAR(&PLIB) VALUE(&PRFX *TCAT 'GPLIB')
             DLTDTAQ    DTAQ(&PLIB/&DTQN)
             MONMSG     MSGID(CPF2105)
             CRTDTAQ    DTAQ(&PLIB/&DTQN) MAXLEN(50) TEXT('UP +
                           Server DTAQ for UP000052')

/** Clear script file */
             CLRPFM     FILE(UPGSCRTD)

/* pre-step: need to re-generate List of dependent files based on driver file */
/* as driver may have been changed */
/*If *GLOBAL */

             CLRPFM     FILE(UPGXRFPD)
             OVRDBF     FILE(UPXREFPD) TOFILE(UPGXRFPD)
             OVRDBF     FILE(UPCLOGPD) TOFILE(UPGLOGPD)

             CALL       PGM(UPXREFLS2) PARM('*GLOBAL')

/* 1. generate script for LF to be deleted */
             CLRPFM     FILE(UPGOPDTD)
             CALL       PGM(UP000080) PARM(&PRFX &REFSYS 'P' &ERROR)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)

             CALL       PGM(UP000055) PARM(&PRFX &SEQC &BRGBRGLIB &RETURN)
             IF         COND(&RETURN *NE '          ') THEN(GOTO ABNOR)

/* 1.1 generate script for LF to be deleted not listed yet */
/* as an example: FCRCOJW0 exists in SP23 but does not depend on SCSRDXTD which is */
/* new in SP24 */
             CLRPFM     FILE(UPGXRRPD)
             CALL       PGM(UPGXRFLSR) PARM(&REFSYS &ERROR)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)

             CLRPFM     FILE(UPGORDTD)
             CALL       PGM(UP000080) PARM(&PRFX &REFSYS 'R' &ERROR)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)

             CALL       PGM(UP000068) PARM(&PRFX &SEQC &BRGBRGLIB &RETURN)
             IF         COND(&RETURN *NE '          ') THEN(GOTO ABNOR)

/* list dependent for files to be ignored */
             CLRPFM     FILE(UPGXRIPD)
             CALL       PGM(UPGXRFLSI) PARM(&REFSYS &ERROR)

/* 2. generate script for driver file */

/*GMLIB */
             CHGVAR     VAR(&LIB) VALUE(&PRFX *TCAT 'GMLIB')
             SBMJOB     CMD(CALL PGM(UP000056) PARM(&LIB &PRFX &REFSYS &SEQC +
                          &BRGBRGLIB &RETURN)) JOB(&LIB) +
                          JOBQ(&BRGBRGLIB/SMJOBQNM)

/*GPLIB */
             CHGVAR     VAR(&LIB) VALUE(&PRFX *TCAT 'GPLIB')
             SBMJOB     CMD(CALL PGM(UP000056) PARM(&LIB &PRFX &REFSYS &SEQC +
                          &BRGBRGLIB &RETURN)) JOB(&LIB) +
                          JOBQ(&BRGBRGLIB/SMJOBQNM)

/*GTALIB */
             CHGVAR     VAR(&LIB) VALUE(&PRFX *TCAT 'GTALIB')
             SBMJOB     CMD(CALL PGM(UP000056) PARM(&LIB &PRFX &REFSYS &SEQC +
                          &BRGBRGLIB &RETURN)) JOB(&LIB) +
                          JOBQ(&BRGBRGLIB/SMJOBQNM)

/*GVLIB */
             CHGVAR     VAR(&LIB) VALUE(&PRFX *TCAT 'GVLIB')
             SBMJOB     CMD(CALL PGM(UP000056) PARM(&LIB &PRFX &REFSYS &SEQC +
                          &BRGBRGLIB &RETURN)) JOB(&LIB) +
                          JOBQ(&BRGBRGLIB/SMJOBQNM)

/* Wait for the 4 jobs to complete */
LOOP:
             CALL       PGM(QRCVDTAQ) PARM(&DTQN '*LIBL' &MSGLEN +
                          &MSGDATA &RCVWAIT)

             IF         COND(&MSGDATA *EQ 'DONE') THEN(CHGVAR +
                          VAR(&COUNT) VALUE(&COUNT + 1))

             IF         COND(&MSGDATA *EQ 'FAIL') THEN(CHGVAR +
                          VAR(&COUNT) VALUE(&COUNT + 1))

             IF         COND(&MSGDATA *EQ 'FAIL') THEN(CHGVAR +
                          VAR(&FAIL) VALUE('Y'))

             IF         COND(&COUNT *LT 4) THEN(GOTO LOOP)

/* If there is a FAIL */
             IF         COND(&FAIL *EQ 'Y') THEN(DO)
/* Update Script  Status with 'Abnormal' */
             CHGVAR        VAR(&FLDUPD) VALUE('UPSCRS')
             CHGVAR     VAR(&FLDVAL) VALUE('A')
             CALL UPGUPDWR ('*UPDATE   ' &PRFX &FLDUPD &FLDVAL &ERROR &RETURN)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)
             ENDDO


/* 3. generate script for LF creation */
             CLRPFM     FILE(UPGXRRPD)
             CALL       PGM(UPGXRFLSR) PARM(&REFSYS &ERROR)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)

             CLRPFM     FILE(UPGORDTD)
             CALL       PGM(UP000080) PARM(&PRFX &REFSYS 'R' &ERROR)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)

/* Call new program to review the rebuild order */                                      /*MD060960*/
             CLRPFM     FILE(UPGDEPTD)                                                  /*MD060960*/
             CALL       PGM(UP000078) PARM(&REFSYS &ERROR)                              /*MD060960*/
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)                  /*MD060960*/
             CALL       PGM(UP000079) PARM(&ERROR)                                      /*MD060960*/
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)                  /*MD060960*/
                                                                                        /*MD060960*/
/**********  CALL       PGM(UP000070) PARM(&PRFX &REFSYS &ERROR) */                     /*MD060960*/
/**********  IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR) */               /*MD060960*/
             CALL       PGM(UP000170) PARM(&PRFX &REFSYS &ERROR)                        /*MD060960*/
             IF         COND(&ERROR *NE '          ') THEN(GOTO ABNOR)                  /*MD060960*/

/* Send DONE message to server */
             CALL       PGM(QSNDDTAQ) PARM('ADBU_GSVR' '*LIBL     ' +
                               &MSGLEN &WMSG)

             GOTO       CMDLBL(END)


/* Abnormal termination */

 ABNOR:      CHGJOB     SWS(XXXXXX11)

/* Send FAIL message to server */
             CHGVAR        VAR(&WMSG) VALUE('FAIL')
             CALL       PGM(QSNDDTAQ) PARM('ADBU_GSVR' '*LIBL     ' +
                               &MSGLEN &WMSG)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('Program UPC000052 ended +
                          abnormally - see job log') TOMSGQ(MOPERQ)
             MONMSG     MSGID(CPF0000 MCH0000)

/* End program */


 END:        ENDPGM
