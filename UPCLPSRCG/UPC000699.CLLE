/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas UP New dlv. data handler for mig. / upg.')      */
/*********************************************************************/
/*                                                                   */
/*       Midas - Bridge                                              */
/*                                                                   */
/*       UPC000699 - Action File handler                             */
/*                                                                   */
/*       (c) Finastra International Limited 2004                     */
/*                                                                   */
/*       Last Amend No. CUP040  *CREATE    Date 04Mar13              */
/*       Prev Amend No. xxxxxxxx           Date ddMmmyy              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       CUP040 - New deliverable data methodology.                  */
/*              - This is a version of the ACTIONFILE CPP program    */
/*                (UPC000799) which will only be used for the mass   */
/*                runs that are part of an upgrade or migration.  It */
/*                does not have a *BLD, *ADD, *MRG or *CFT mode.     */
/*                However the *RVW mode does behave like the         */
/*                original *BLD mode which is why two libraries are  */
/*                required.                                          */
/*              - Effectively this always runs in *POSTTKO mode.     */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&MODE &FILE &OLDLIB &NEWLIB)
 
             DCL        VAR(&MODE) TYPE(*CHAR) LEN(4)
             DCL        VAR(&FILE) TYPE(*CHAR) LEN(10)
             DCL        VAR(&OLDLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&NEWLIB) TYPE(*CHAR) LEN(10)
 
             DCL        VAR(&BESPFILE) TYPE(*CHAR) LEN(10)
             DCL        VAR(&OFFSET) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&RECLEN) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&RTNCODE) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MODEX) TYPE(*CHAR) LEN(1)
             DCL        VAR(&SUBRERR) TYPE(*INT) LEN(4) VALUE(0)
             DCL        VAR(&SECCOPY) TYPE(*CHAR) LEN(10)
             DCL        VAR(&USRDTA) TYPE(*CHAR) LEN(10)
 
             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) VALUE(N)
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)
 
             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2013')
 
/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))
 
             CHGJOB     LOG(4 0 *SECLVL) LOGCLPGM(*YES)
             CHGJOB     SWS(XXXXXX00)
 
CONFLICT:
             IF         COND(&MODE *EQ '*CFT') THEN(DO)
                CHGVAR     VAR(&MODE) VALUE('*RVW')
                CHGVAR     VAR(&MODEX) VALUE('X')
             ENDDO
 
REVIEW:
/* The review will compare the delivered file, which will be a complete set */
/*  of core records, against the system set of records.                     */
             IF         COND(&MODE *EQ '*RVW') THEN(DO)
                CHGVAR     VAR(&OFFSET) VALUE(0)
/* Retrieve information about file. */
                CALL       PGM(UTAORCDF) PARM(&RTNCODE &RECLEN ' ' +
                             &FILE &NEWLIB)
                IF         COND(&RTNCODE *NE ' ') THEN(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
 
/* Create work files. */
                CALLSUBR   SUBR(CRTWRKFS) RTNVAL(&SUBRERR)
 
/* Copy data from files to flat-files; compare core and bespoke against */
/*  deliverable.                                                        */
                CPYF       FROMFILE(&OLDLIB/&FILE) +
                             TOFILE(QTEMP/UPAFNDPD) MBROPT(*REPLACE) +
                             FMTOPT(*NOCHK)
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2869)
                CHGVAR     VAR(&BESPFILE) VALUE(%SST(&FILE 1 5) *TCAT +
                             'BTD')
                CPYF       FROMFILE(&BESPFILE) TOFILE(QTEMP/UPAFNDPD) +
                             MBROPT(*ADD) FMTOPT(*NOCHK)
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2869)
                CPYF       FROMFILE(&NEWLIB/&FILE) +
                             TOFILE(QTEMP/UPAFODPD) MBROPT(*REPLACE) +
                             FMTOPT(*NOCHK)
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2869)
 
/* Perform special processing for before build. */
                CALLSUBR   SUBR(PRERVW) RTNVAL(&SUBRERR)
 
/* Call program to perform comparison. */
                OVRDBF     FILE(UPAFODPD) TOFILE(QTEMP/UPAFODPD)
                OVRDBF     FILE(UPAFNDPD) TOFILE(QTEMP/UPAFNDPD)
                CALL       PGM(UP009017) PARM('*BLD' &FILE &FILE +
                             &RECLEN ' ' &OFFSET 'N' &OLDLIB &NEWLIB)
                DLTOVR     FILE(UPAFODPD UPAFNDPD)
                IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
                IF         COND(&MODEX *EQ 'X') THEN(DO)
                   CHGVAR     VAR(&USRDTA) VALUE('X' *BCAT &FILE)
                ENDDO
                ELSE       CMD(DO)
                   CHGVAR     VAR(&USRDTA) VALUE('R' *BCAT &FILE)
                ENDDO
                CHGSPLFA   FILE(UP009006P1) SPLNBR(*LAST) USRDTA(&USRDTA)
/* Perform special processing after build. */
                CALLSUBR   SUBR(PSTRVW)  RTNVAL(&SUBRERR)
             ENDDO
 
PROCESS:
/* Process Action File. */
             IF         COND(&MODE *EQ '*PRC') THEN(DO)
/* Perform special processing before processing Action File. */
                CALLSUBR   SUBR(PREPRC) RTNVAL(&SUBRERR)
 
                CLRPFM     FILE(&OLDLIB/&FILE)
                CPYF       FROMFILE(&NEWLIB/&FILE) +
                             TOFILE(&OLDLIB/&FILE) MBROPT(*REPLACE)
                MONMSG     MSGID(CPF2817) EXEC(DO)
                   CPYF       FROMFILE(QTEMP/&SECCOPY) TOFILE(&FILE) +
                                FROMMBR(*ALL) TOMBR(*FROMMBR) +
                                MBROPT(*REPLACE)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* Perform special processing after processing Action File. */
                CALLSUBR   SUBR(PSTPRC) RTNVAL(&SUBRERR)
             ENDDO
 
             GOTO       CMDLBL(ENDPGM)
 
ERROR:
             IF         COND(&RECURSIVE *EQ 'N') THEN(DO)
                CHGVAR     VAR(&RECURSIVE) VALUE('Y')
RCVMSG:
                RCVMSG     MSGTYPE(*DIAG) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                             MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                IF         COND(&MSGID *NE ' ') THEN(DO)
                   SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                MSGDTA(&MSGDTA) MSGTYPE(*DIAG)
                   GOTO       CMDLBL(RCVMSG)
                ENDDO
                RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                             MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                             MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
             ENDDO
 
/*********************************************************************/
/*                                                                   */
/*       PRERVW - Special processing to perform before the review of */
/*                the Action File                                    */
/*                                                                   */
/*********************************************************************/
             SUBR       SUBR(PRERVW)
 
             ENDSUBR
/* End PRERVW subroutine. */
/*********************************************************************/
/*                                                                   */
/*       PSTRVW - Special processing to perform after the review of  */
/*                the Action File                                    */
/*                                                                   */
/*********************************************************************/
             SUBR       SUBR(PSTRVW)
 
             ENDSUBR
/* End PSTRVW subroutine. */
/*********************************************************************/
/*                                                                   */
/*       PREPRC - Special processing to perform before the update of */
/*                the target file                                    */
/*                                                                   */
/*********************************************************************/
             SUBR       SUBR(PREPRC)
 
/* Create security copy of file before updating it. */
             CHGVAR     VAR(&SECCOPY) VALUE('Q' *TCAT &FILE)
             CPYF       FROMFILE(&FILE) TOFILE(QTEMP/&SECCOPY) +
                          FROMMBR(*ALL) TOMBR(*FROMMBR) +
                          MBROPT(*REPLACE) CRTFILE(*YES)
 
             ENDSUBR
/* End PREPRC subroutine. */
/*********************************************************************/
/*                                                                   */
/*       PSTPRC - Special processing to perform after the update of  */
/*                the target file                                    */
/*                                                                   */
/*********************************************************************/
             SUBR       SUBR(PSTPRC)
 
             CALL       PGM(UP009016) PARM(&FILE)
 
             ENDSUBR
/* End PSTPRC subroutine. */
/*********************************************************************/
/*                                                                   */
/*       CRTWRKFS - Create copies of work files in QTEMP             */
/*                                                                   */
/*********************************************************************/
             SUBR       SUBR(CRTWRKFS)
 
             DLTF       FILE(QTEMP/UPAFODPD)
             MONMSG     MSGID(CPF0000)
             DLTF       FILE(QTEMP/UPAFNDPD)
             MONMSG     MSGID(CPF0000)
             CRTDUPOBJ  OBJ(UPAFODPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP)
             CRTDUPOBJ  OBJ(UPAFNDPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP)
 
             ENDSUBR
/* End CRTWRKFS subroutine. */
 
ENDPGM:
             ENDPGM
