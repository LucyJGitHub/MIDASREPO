/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas UP Create deliverables list')                   */
/*********************************************************************/
/*                                                                   */
/*       Midas - Upgrade Module                                      */
/*                                                                   */
/*       UPC0090 - Create Deliverables List                          */
/*                                                                   */
/*       (c) Finastra International Limited 2001                     */
/*                                                                   */
/*       Last Amend No. CUP042 *REWRITE    Date 28Apr15              */
/*       Prev Amend No. AR936709           Date 26Mar12              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/*                      CUP033             Date 18Sep06              */
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/*                      CSM005             Date 21Sep05              */
/*                      CPK020             Date 28Jul04              */
/*                      CPK018             Date 05Mar04              */
/* Midas Release 4 --------------- Base -----------------------------*/
/* Midas DBA 3.00 ---------------- Base -----------------------------*/
/*                      CUP001  *CREATE    Date 29Dec98              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       CUP042 - Reworking of command to simplify it.               */
/*       AR936709 - Create UPERRMQT earlier in the process.          */
/*       CUP033 - Removal of System Value /COPYs                     */
/*       CSM005 - Changes to /COPYs.  Recompile.                     */
/*       CPK020 - Handle deliverable data.                           */
/*       CPK018 - MidasPlus packaging.  UPDLVCPD in Global layer.    */
/*       CUP001 - Introduction of BRIDGE                             */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&SRC &DLVLIB &DLVDTALIB &CRTOPT)
 
             DCL        VAR(&SRC) TYPE(*CHAR) LEN(20)
             DCL        VAR(&DLVLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DLVDTALIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CRTOPT) TYPE(*CHAR) LEN(8)
 
             DCL        VAR(&SRCF) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
                          DEFVAR(&SRC)
             DCL        VAR(&SRCLIB) TYPE(*CHAR) STG(*DEFINED) +
                          LEN(10) DEFVAR(&SRC 11)
             DCL        VAR(&RTNCODE) TYPE(*CHAR) LEN(1)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(128)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) +
                          VALUE('N')
 
             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2001')
 
/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))
 
/* Delete and recreate temporary error message file. */
             DLTF       FILE(QTEMP/UPERRMQT)
             MONMSG     MSGID(CPF0000)
             CRTPF      FILE(QTEMP/UPERRMQT) RCDLEN(100) +
                          TEXT('Temporary error file for CRTDLVLST')
             DLTF       FILE(QTEMP/UPERRXQT)
             MONMSG     MSGID(CPF0000)
             CRTPF      FILE(QTEMP/UPERRXQT) RCDLEN(100) +
                          TEXT('Temporary error file for CRTDLVLST')
 
             SAVLIBL    SAVDTL(CRTDLVLST)
/* Ensure Bridge library is at the top of the library list. */
             RMVLIBLE   LIB(&DLVLIB)
             MONMSG     MSGID(CPF0000)
             ADDLIBLE   LIB(&DLVLIB)
 
             CRTDUPOBJ  OBJ(UPDLVCPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(&DLVLIB) DATA(*NO)
             MONMSG     MSGID(CPF2130)
 
/* If *REPLACE is requested clear the deliverables list file. */
             IF         COND(&CRTOPT *EQ '*REPLACE') THEN(DO)
                CLRPFM     FILE(UPDLVCPD)
             ENDDO
 
/* If source file specified then perform preparatory processing. */
             IF         COND(&SRCF *NE '*NONE') THEN(DO)
/* Delete and create the work files. */
                DLTF       FILE(QTEMP/UPC0090FD)
                MONMSG     MSGID(CPF0000)
                DLTF       FILE(QTEMP/UPC0090OF1)
                MONMSG     MSGID(CPF0000)
                CRTDUPOBJ  OBJ(UPFDMBTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                             TOLIB(QTEMP) NEWOBJ(UPC0090FD)
                DSPFD      FILE(&SRCLIB/&SRCF) TYPE(*MBR) +
                             OUTPUT(*OUTFILE) OUTFILE(QTEMP/UPC0090OF)
                MONMSG     MSGID(CPF3012) EXEC(DO)
                   CHGVAR     VAR(&SRCF) VALUE('*NONE')
                   GOTO       CMDLBL(DLVDTA)
                ENDDO
                CPYF       FROMFILE(QTEMP/UPC0090OF) +
                             TOFILE(QTEMP/UPC0090FD) +
                             MBROPT(*REPLACE) FMTOPT(*MAP *DROP)
 
/* Call program to update driving file including priorities. */
                RMVLIBLE   LIB(&SRCLIB)
                MONMSG     MSGID(CPF0000)
                ADDLIBLE   LIB(&SRCLIB)
             ENDDO
 
DLVDTA:
/* If deliverable data specified then perform preparatory processing. */
             IF         COND(&DLVDTALIB *NE '*NONE') THEN(DO)
/* Delete and create the work files. */
                DLTF       FILE(QTEMP/UPC0090OD)
                MONMSG     MSGID(CPF0000)
                DLTF       FILE(QTEMP/UPC0090OF2)
                MONMSG     MSGID(CPF0000)
                CRTDUPOBJ  OBJ(UPOBJDTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                             TOLIB(QTEMP) NEWOBJ(UPC0090OD)
                DSPOBJD    OBJ(&DLVDTALIB/*ALL) OBJTYPE(*ALL) +
                             OUTPUT(*OUTFILE) +
                             OUTFILE(QTEMP/UPC0090OF2)
                MONMSG     MSGID(CPF2123) EXEC(DO)
                   CHGVAR     VAR(&DLVDTALIB) VALUE('*NONE')
                   GOTO       CMDLBL(UPDDLVLST)
                ENDDO
                CPYF       FROMFILE(QTEMP/UPC0090OF2) +
                             TOFILE(QTEMP/UPC0090OD) +
                             MBROPT(*REPLACE) FMTOPT(*MAP *DROP)
 
/* Perform override for the Action File. */
                OVRDBF     FILE(UPAFCPPD) +
                             TOFILE(&DLVDTALIB/UPAFCPPD) +
                             OVRSCOPE(*JOB)
             ENDDO
 
UPDDLVLST:
             CALL       PGM(UP0090) PARM(&SRCF &DLVDTALIB &RTNCODE)
 
             IF         COND(&DLVDTALIB *NE '*NONE') THEN(DO)
                DLTOVR     FILE(UPAFCPPD) LVL(*JOB)
             ENDDO
             RSTLIBL    SAVEDLIBL(CRTDLVLST)
 
/* Check for warning messages. */
             IF         COND(&RTNCODE *EQ 'W') THEN(DO)
                SNDPGMMSG  MSG('Possible problems with the +
                             deliverables list encountered.  Check +
                             report UP008010P1.') MSGTYPE(*DIAG)
             ENDDO
 
             GOTO       CMDLBL(ENDPGM)
 
ERROR:
             IF         COND(&RECURSIVE *EQ 'N') THEN(DO)
                CHGVAR     VAR(&RECURSIVE) VALUE('Y')
RCVMSG:
                RCVMSG     MSGTYPE(*DIAG) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                             MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                IF         COND(&MSGID *NE ' ') THEN(DO)
                   SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                MSGDTA(&MSGDTA) MSGTYPE(*DIAG)
                   GOTO       CMDLBL(RCVMSG)
                ENDDO
                RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                             MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                             MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
             ENDDO
 ENDPGM:
             ENDPGM
