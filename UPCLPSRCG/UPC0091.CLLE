/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI *  TEXT('Midas UP CRTDLVLST validity checker')                 */
/*********************************************************************/
/*                                                                   */
/*       Midas - Upgrade Module                                      */
/*                                                                   */
/*       UTC0091 - CRTDLVLST Validity Checker                        */
/*                                                                   */
/*       (c) Finastra International Limited 2001                     */
/*                                                                   */
/*       Last Amend No. CUP042 *REWRITE    Date 28Apr15              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/*       Prev Amend No. CPK020             Date 28Jul04              */
/* Midas Release 4 --------------- Base -----------------------------*/
/* Midas DBA 3.00 ---------------- Base -----------------------------*/
/*                      CUP001 *CREATE     Date 29Dec98              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       CUP042 - Reworking of command to simplify it.               */
/*       CPK020 - Handle deliverable data.                           */
/*       CUP001 - Introduction of BRIDGE                             */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&SRC &DLVLIB &DLVDTALIB &CRTOPT)
 
             DCL        VAR(&SRC) TYPE(*CHAR) LEN(20)
             DCL        VAR(&DLVDTALIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DLVLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CRTOPT) TYPE(*CHAR) LEN(8)
 
             DCL        VAR(&SRCF) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
                          DEFVAR(&SRC)
             DCL        VAR(&SRCLIB) TYPE(*CHAR) STG(*DEFINED) +
                          LEN(10) DEFVAR(&SRC 11)
             DCL        VAR(&MSGSUB) TYPE(*CHAR) LEN(30)
             DCL        VAR(&MSGTXT) TYPE(*CHAR) LEN(132)
             DCL        VAR(&ERROR) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) +
                          VALUE('N')
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(128)
             DCL        VAR(&PATLEN) TYPE(*DEC) LEN(3 0) VALUE(1)
             DCL        VAR(&RESULT) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&STRLEN) TYPE(*DEC) LEN(3 0) VALUE(10)
             DCL        VAR(&STRPOS) TYPE(*DEC) LEN(3 0) VALUE(2)
 
             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2001')
 
/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))
 
/* If *NONE is specified then ensure that a library has been entered. */
             IF         COND(&SRCF *NE '*NONE') THEN(DO)
                IF         COND(&SRCLIB *EQ ' ') THEN(DO)
                   CHGVAR     VAR(&MSGTXT) VALUE('Library containing +
                                source files must be entered.')
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ERROR)
                ENDDO
             ENDDO
             ELSE       CMD(DO)
/* Source files and deliverable data can not both be '*NONE'. */
                IF         COND(&DLVDTALIB *EQ '*NONE') THEN(DO)
                   CHGVAR     VAR(&MSGTXT) VALUE('Source files and +
                                deliverable data library can not +
                                both be *NONE.')
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ERROR)
                ENDDO
                ELSE       CMD(DO)
                   GOTO       CMDLBL(DLVLIB)
                ENDDO
             ENDDO
 
/* If the source is not *ALL then check if it generic or not. */
             IF         COND(&SRCF *NE '*ALL') THEN(DO)
               CALL       PGM(QCLSCAN) PARM(&SRCF &STRLEN &STRPOS +
                            '*' &PATLEN '0' '0' '' &RESULT)
                IF         COND(&RESULT *GT 0) THEN(DO)
                   GOTO       CMDLBL(DLVLIB)
                ENDDO
/* If it is not generic then check source file and library exist. */
                ELSE       CMD(DO)
                   CHKOBJ     OBJ(&SRCLIB/&SRCF) OBJTYPE(*FILE) +
                                AUT(*USE)
                   MONMSG     MSGID(CPF9810) EXEC(DO)
                      CHGVAR     VAR(&MSGSUB) VALUE(&SRCLIB)
                      RTVMSG     MSGID(CPF9810) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                                   MSG(&MSGTXT)
                      CHGVAR     VAR(&ERROR) VALUE('Y')
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                   MONMSG     MSGID(CPF9801) EXEC(DO)
                      CHGVAR     VAR(&MSGSUB) VALUE(&SRCF *CAT &SRCLIB)
                      RTVMSG     MSGID(CPF9801) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                                   MSG(&MSGTXT)
                      CHGVAR     VAR(&ERROR) VALUE('Y')
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                   MONMSG     MSGID(CPF9802) EXEC(DO)
                      CHGVAR     VAR(&MSGSUB) VALUE(&SRCF *CAT &SRCLIB)
                      RTVMSG     MSGID(CPF9802) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                                   MSG(&MSGTXT)
                      CHGVAR     VAR(&ERROR) VALUE('Y')
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                ENDDO
             ENDDO
 
/* Check for  library containing deliverables list. */
DLVLIB:
             CHKOBJ     OBJ(&DLVLIB) OBJTYPE(*LIB) AUT(*CHANGE)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&DLVLIB *CAT 'QSYS')
                RTVMSG     MSGID(CPF9801) MSGF(QCPFMSG) +
                             MSGDTA(&MSGSUB) MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
             MONMSG     MSGID(CPF9802) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&DLVLIB *CAT 'QSYS')
                RTVMSG     MSGID(CPF9802) MSGF(QCPFMSG) +
                             MSGDTA(&MSGSUB) MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
/* Check for deliverable data library. */
DLVDTA:
             IF         COND(&DLVDTALIB *NE '*NONE') THEN(DO)
                CHKOBJ     OBJ(&DLVDTALIB) OBJTYPE(*LIB) AUT(*USE)
                MONMSG     MSGID(CPF9801) EXEC(DO)
                   CHGVAR     VAR(&MSGSUB) VALUE(&DLVDTALIB *CAT +
                                'QSYS')
                   RTVMSG     MSGID(CPF9801) MSGF(QCPFMSG) +
                                MSGDTA(&MSGSUB) MSG(&MSGTXT)
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ERROR)
                ENDDO
                MONMSG     MSGID(CPF9802) EXEC(DO)
                   CHGVAR     VAR(&MSGSUB) VALUE(&DLVDTALIB *CAT +
                                'QSYS')
                   RTVMSG     MSGID(CPF9802) MSGF(QCPFMSG) +
                                MSGDTA(&MSGSUB) MSG(&MSGTXT)
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ERROR)
                ENDDO
             ENDDO
 
             GOTO       CMDLBL(ENDPGM)
 
ERROR:
/* If validity error then send message back to command . . . */
             IF         COND(&ERROR *EQ 'Y') THEN(DO)
                CHGVAR     VAR(&MSGTXT) VALUE('0000' *TCAT &MSGTXT)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA(&MSGTXT) +
                             MSGTYPE(*DIAG)
                SNDPGMMSG  MSGID(CPF0002) MSGF(QCPFMSG) MSGTYPE(*ESCAPE)
             ENDDO
/* . . .  else send generic message. */
             ELSE       CMD(DO)
                IF         COND(&RECURSIVE *EQ 'N') THEN(DO)
                   CHGVAR     VAR(&RECURSIVE) VALUE('Y')
RCVMSG:
                   RCVMSG     MSGTYPE(*DIAG) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                                MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   IF         COND(&MSGID *NE ' ') THEN(DO)
                      SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                   MSGDTA(&MSGDTA) MSGTYPE(*DIAG)
                      GOTO       CMDLBL(RCVMSG)
                   ENDDO
                   RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                                MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
                ENDDO
             ENDDO
 
ENDPGM:
             ENDPGM
