/*********************************************************************/
/*S*D****CLPBASE******************************************************/
/*********************************************************************/
/*                                                                   */
/*       Midas - Upgrade Module                                      */
/*                                                                   */
/*       UPC0245 - Physical Files Installation                       */
/*                                                                   */
/*       (c) Finastra International Limited 2001                     */
/*                                                                   */
/*********************************************************************/
/* This program monitors for a large and specific set of messages    */
/* which may be generated by the CPYF commands.  If this monitoring  */
/* is amended in any way the following programs may also need to be  */
/* changed:                                                          */
/*             SMC000037                                             */                   /*CUP038*/
/*             SMC000038                                             */                   /*CUP038*/
/*             SMC000045                                             */                   /*CUP038*/
/*             UPC0246                                               */
/*             UPC0259                                               */
/*             UPC0263                                               */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       Last Amend No. CUP041   *REDUNDANTDate 04Aug14              */
/*       Prev Amend No. A1076141           Date 11Jan13              */
/*                      CBF012             Date 04Jul11              */
/*                      CUT008              Date 09Feb11             */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/*                      256038             Date 25Aug08              */
/*                      CUP038             Date 13Sep07              */
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/*                      CUP030             Date 31Dec04              */
/*                      CPK019             Date 29Jun04              */
/*                      CPK017             Date 13Nov03              */
/* Midas Release 4.01.02 --------------------------------------------*/
/*                      CSC011             Date 19Aug02              */
/* Midas Release 4.01 -----------------------------------------------*/
/*                      CPK015             Date 02Apr02              */
/* Midas Release 4 --------------- Base -----------------------------*/
/* Midas DBA 3.03 ---------------------------------------------------*/
/*                      CUP008             Date 21Jul00              */
/*                      CUP007             Date 16May00              */
/* Midas DBA 3.01 ---------------------------------------------------*/
/*                      CPK010             Date 22Oct99              */
/* Midas DBA 3.00 ---------------- Base -----------------------------*/
/*                      CUP002             Date 26Apr99              */
/*                      CUP001 *CREATE     Date 06Aug98              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       CUP041 - New Bridge methodology to combine menu options     */
/*       A1076141 - Change back to only having one type of DBU.      */
/*       CBF012 - BF Infrastructure: Upgradability                   */
/*       CUT008  - CRTOBJ rewrite.                                   */
/*                 Change of CRTOBJ parameters.                      */
/*       256038 - Handel file triggers too.                          */
/*       CUP038 - Re-organisation of migration tools.  Cosmetic.     */
/*       CUP030 - Re-instate the end journaling of the moved file.   */
/*       CPK019 - Handle global area data area layouts.              */
/*       CPK017 - MidasPlus packaging.  Upgrade of global layer.     */
/*       CSC011 - 24x7 availability.  Upgrade of Support system.     */
/*       CPK015 - 4.01 packaging.  Handling DZLIB.                   */
/*       CUP008 - Create renames by using variable.                  */
/*       CUP007 - Additional handling for special case files.        */
/*       CPK010 - Problems found at DBA R3.00 alpha site             */
/*       CUP002 - Additional message monitoring                      */
/*       CUP001 - Introduction of BRIDGE                             */
/*                                                                   */
/*********************************************************************/
/**********  PGM        PARM(&PTFSRC &LIBMOV &SBS &OWNER &AUTL &RETURN)  */               /*CBF012*/
/**********  PGM        PARM(&PTFSRC &LIBMOV &SBS &OWNER &AUTL &RETURN &MODE) */ /*CBF012 A1076141*/
             PGM        PARM(&PTFSRC &LIBMOV &SBS &OWNER &AUTL &RETURN)                 /*A1076141*/
 
             DCL        VAR(&PTFSRC) TYPE(*CHAR) LEN(10)
             DCL        VAR(&SBS) TYPE(*CHAR) LEN(2)
             DCL        VAR(&OWNER) TYPE(*CHAR) LEN(10)
             DCL        VAR(&AUTL) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBMOV) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RETURN) TYPE(*CHAR) LEN(1)
/**********  DCL        VAR(&MODE) TYPE(*CHAR) LEN(4)                         */ /*CBF012 A1076141*/
 
             DCL        VAR(&FRLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RTNLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DMLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DPLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DTALIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&DZLIB) TYPE(*CHAR) LEN(10)                                   /*CPK015*/
             DCL        VAR(&GMLIB) TYPE(*CHAR) LEN(10)                                   /*CPK017*/
             DCL        VAR(&GPLIB) TYPE(*CHAR) LEN(10)                                   /*CPK017*/
             DCL        VAR(&GTALIB) TYPE(*CHAR) LEN(10)                                  /*CPK017*/
             DCL        VAR(&LIBTYPE) TYPE(*CHAR) LEN(2)
             DCL        VAR(&USTS) TYPE(*CHAR) LEN(1)
             DCL        VAR(&NEWNAM) TYPE(*CHAR) LEN(10)                                  /*CUP008*/
             DCL        VAR(&DZ_EXIST) TYPE(*CHAR) LEN(4) VALUE(*YES)                     /*CSC011*/
             DCL        VAR(&CPYFLD) TYPE(*CHAR) LEN(64) VALUE('(c) +
                          Finastra International Limited +
                          2001')
 
             DCLF       FILE(UPDLVCL5)
 
/* Global monitor message */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ABNOR))
 
             CHGVAR     VAR(&RETURN) VALUE(' ')
             CHGVAR     VAR(&DMLIB) VALUE(&SBS *CAT 'DMLIB')
             CHGVAR     VAR(&DPLIB) VALUE(&SBS *CAT 'DPLIB')
             CHGVAR     VAR(&DTALIB) VALUE(&SBS *CAT 'DTALIB')
             CHGVAR     VAR(&DZLIB) VALUE(&SBS *CAT 'DZLIB')                              /*CPK015*/
             CHKOBJ     OBJ(&DZLIB) OBJTYPE(*LIB)                                         /*CSC011*/
             MONMSG     MSGID(CPF9801) EXEC(DO)                                           /*CSC011*/
                CHGVAR     VAR(&DZ_EXIST) VALUE(*NO)                                      /*CSC011*/
             ENDDO                                                                        /*CSC011*/
             CHGVAR     VAR(&GMLIB) VALUE(&SBS *CAT 'GMLIB')                              /*CPK017*/
             CHGVAR     VAR(&GPLIB) VALUE(&SBS *CAT 'GPLIB')                              /*CPK017*/
             CHGVAR     VAR(&GTALIB) VALUE(&SBS *CAT 'GTALIB')                            /*CPK017*/
 
             CHGVAR     VAR(&USTS) VALUE('C')
READNEXT:
             IF         COND(&AUMBNM *NE ' ') THEN(DO)
/*/COPY UPCPYSRCG,C_UP0020A                                          */
             ENDDO
 
             RCVF
             MONMSG     MSGID(CPF0864) EXEC(DO)
              GOTO       CMDLBL(END)
             ENDDO
 
/**********  IF         COND(((&MODE *EQ '*NML') *AND +                              */ /*A1076141*/
/**********               (%SUBSTRING(&AUSRCF 1 2) *EQ 'HI')) *OR +                  */ /*A1076141*/
/**********               ((&MODE *EQ '*HIL') *AND +                                 */ /*A1076141*/
/**********               (%SUBSTRING(&AUSRCF 1 2) *NE 'HI'))) THEN(DO)       */ /*CBF012 A1076141*/
/**********     GOTO       CMDLBL(READNEXT)                                   */ /*CBF012 A1076141*/
/**********  ENDDO                                                            */ /*CBF012 A1076141*/
 
             CHGVAR     VAR(&LIBTYPE) VALUE('   ')
             CHGVAR     VAR(&LIBTYPE) VALUE(%SST(&AUSRCF 9 2))
             IF         COND(&LIBTYPE *EQ 'QT') THEN(GOTO +
                          CMDLBL(READNEXT))
             IF         COND(&LIBTYPE *EQ 'DT') THEN(DO)
                CHGVAR     VAR(&FRLIB) VALUE(&DTALIB)
             ENDDO
             IF         COND(&LIBTYPE *EQ 'DM') THEN(DO)
                CHGVAR     VAR(&FRLIB) VALUE(&DMLIB)
             ENDDO
             IF         COND(&LIBTYPE *EQ 'DP' *OR &LIBTYPE *EQ +
                          'DA') THEN(DO)
                CHGVAR     VAR(&FRLIB) VALUE(&DPLIB)
             ENDDO
             IF         COND(&LIBTYPE *EQ 'DZ') THEN(DO)                                  /*CPK015*/
                IF         COND(&DZ_EXIST *NE '*YES') THEN(DO)                            /*CSC011*/
                   GOTO       CMDLBL(READNEXT)                                            /*CSC011*/
                ENDDO                                                                     /*CSC011*/
                CHGVAR     VAR(&FRLIB) VALUE(&DZLIB)                                      /*CPK015*/
             ENDDO                                                                        /*CPK015*/
             IF         COND(&LIBTYPE *EQ 'GM') THEN(DO)                                  /*CPK017*/
                CHGVAR     VAR(&FRLIB) VALUE(&GMLIB)                                      /*CPK017*/
             ENDDO                                                                        /*CPK017*/
/**********  IF         COND(&LIBTYPE *EQ 'GP') THEN(DO)                    */ /*CPK017*/ /*CPK019*/
             IF         COND(&LIBTYPE *EQ 'GP' *OR &LIBTYPE *EQ +
                          'GA') THEN(DO)                                                  /*CPK019*/
                CHGVAR     VAR(&FRLIB) VALUE(&GPLIB)                                      /*CPK017*/
             ENDDO                                                                        /*CPK017*/
             IF         COND(&LIBTYPE *EQ 'GT') THEN(DO)                                  /*CPK017*/
                CHGVAR     VAR(&FRLIB) VALUE(&GTALIB)                                     /*CPK017*/
             ENDDO                                                                        /*CPK017*/
 
/* If object not found then just create */
             RTVOBJD    OBJ(&AUMBNM) OBJTYPE(*FILE) RTNLIB(&RTNLIB)
             MONMSG     MSGID(CPF9812) EXEC(DO)
                GOTO CRTOBJ
             ENDDO
             MOVOBJ     OBJ(&RTNLIB/&AUMBNM) OBJTYPE(*FILE) +
                          TOLIB(&LIBMOV)
             MONMSG     MSGID(CPF3201) EXEC(DO)
/* If object already exists then try to rename it and move again */
/************   RNMOBJ     OBJ(&LIBMOV/&AUMBNM) OBJTYPE(*FILE) +                       */ /*CUP008*/
/************             NEWOBJ('#.' *TCAT &AUMBNM)                                   */ /*CUP008*/
                CHGVAR     VAR(&NEWNAM) VALUE('#.' *TCAT &AUMBNM)                         /*CUP008*/
                RNMOBJ     OBJ(&LIBMOV/&AUMBNM) OBJTYPE(*FILE) +
                          NEWOBJ(&NEWNAM)                                                 /*CUP008*/
/* If renamed object already exists then flag as failure */
                MONMSG     MSGID(CPF3201) EXEC(DO)
                   CHGVAR     VAR(&USTS) VALUE('F')
                   GOTO       CMDLBL(READNEXT)
                ENDDO
                MOVOBJ     OBJ(&RTNLIB/&AUMBNM) OBJTYPE(*FILE) +
                          TOLIB(&LIBMOV)
             ENDDO
 
             ENDJRNPF   FILE(&LIBMOV/&AUMBNM)                                             /*CUP030*/
             MONMSG     MSGID(CPF7032)                                                    /*CUP030*/
             RMVPFTRG   FILE(&LIBMOV/&AUMBNM)                                             /*256038*/
             MONMSG     MSGID(CPF32C6)                                                    /*256038*/
 
CRTOBJ:
/**********  CRTOBJ     SRCMBR(&AUMBNM) SRCFILE(&PTFSRC/&AUSRCF) +                     */ /*CUT008*/
/**********               PLIB(&FRLIB) OWNER(&OWNER) AUTL(&AUTL)                       */ /*CUT008*/
             CRTOBJ     OBJ(&FRLIB/&AUMBNM) SRCFILE(&PTFSRC/&AUSRCF) +
                          SRCMBR(*OBJ) OWNER(&OWNER) AUTL(&AUTL)                          /*CUT008*/
/************MONMSG     MSGID(SYS9898 SYS0011) EXEC(DO)            */ /*CUP002*/
             MONMSG     MSGID(SYS9898 SYS0011 SYS0017) EXEC(DO)       /*CUP002*/
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
 
/* If moved version not found then file is new, or had no members */
             CHKOBJ     OBJ(&LIBMOV/&AUMBNM) OBJTYPE(*FILE) MBR(*FIRST)
             MONMSG     MSGID(CPF9801) EXEC(GOTO CMDLBL(READNEXT))
             MONMSG     MSGID(CPF9815) EXEC(GOTO CMDLBL(READNEXT))
CPYF:
             CLRPFM     FILE(&FRLIB/&AUMBNM)
             MONMSG     MSGID(CPF0000)
                                                                                          /*CUP007*/
/* Check for special processing before attempting standard copies */                      /*CUP007*/
             IF         COND(%SST(&AUFMTO 1 1) *EQ 'S') THEN(DO)                          /*CUP007*/
                IF         COND(%SST(&AUFMTO 2 4) *EQ '*MAP') THEN(DO)                    /*CUP007*/
                   GOTO       CMDLBL(TAG02)                                               /*CUP007*/
                ENDDO                                                                     /*CUP007*/
                IF         COND(%SST(&AUFMTO 2 6) *EQ '*NOCHK') THEN(DO)                  /*CUP007*/
                   GOTO       CMDLBL(TAG03)                                               /*CUP007*/
                ENDDO                                                                     /*CUP007*/
                IF         COND(%SST(&AUFMTO 2 7) *EQ '*NOCOPY') THEN(DO)                 /*CPK019*/
                   GOTO       CMDLBL(READNEXT)                                            /*CPK019*/
                ENDDO                                                                     /*CPK019*/
             ENDDO                                                                        /*CUP007*/
 
             CPYF       FROMFILE(&LIBMOV/&AUMBNM) +
                          TOFILE(&FRLIB/&AUMBNM) FROMMBR(*ALL) +
                          TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                          FMTOPT(*NONE)
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NONE) - Category 1        */
/*                                                                   */
/* First category of monitored messages are critical errors and will */
/* be flagged as failed without attempting other types of CPYF as    */
/* they would also fail.                                             */
/*********************************************************************/
/* If either from-file or to-file does not exist */
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2861) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2802) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
/* If insufficient authority to either from-file or to-file */
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2864) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2862) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
/* If from-file has more fields than to-file, treat as error */                           /*CPK010*/
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2965) EXEC(DO)                           /*CPK010*/
                CHGVAR     VAR(&USTS) VALUE('F')                                          /*CPK010*/
                GOTO       CMDLBL(READNEXT)                                               /*CPK010*/
             ENDDO                                                                        /*CPK010*/
/* If from-file or to-file is locked, or to-file is in use */
             MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
/* If to-file has insufficient allowed number of members */
             MONMSG     MSGID(CPF2888) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NONE) - Category 2        */
/*                                                                   */
/* Second category of monitored messages are non-critical errors and */
/* will be flagged as completed without attempting other types of    */
/* as they would also fail.                                          */
/*********************************************************************/
/* If from-file has no members or its only member is empty */
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
/************   GOTO       CMDLBL(READNEXT)                        */ /*CUP002*/
                GOTO       CMDLBL(TAG001)                             /*CUP002*/
             ENDDO
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)       /*CUP002*/
                GOTO       CMDLBL(TAG001)                             /*CUP002*/
             ENDDO                                                    /*CUP002*/
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
/************   GOTO       CMDLBL(READNEXT)                        */ /*CUP002*/
                GOTO       CMDLBL(TAG001)                             /*CUP002*/
             ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NONE) - Category 3        */
/*                                                                   */
/* Third category of monitored messages are for possibly critical    */
/* errors but further CPYFs should be attempted.                     */
/*********************************************************************/
/* If different FMTOPT required */
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2969) EXEC(DO)
                GOTO       CMDLBL(TAG02)
             ENDDO
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2963) EXEC(DO)
                GOTO       CMDLBL(TAG02)
             ENDDO
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2962) EXEC(DO)
                GOTO       CMDLBL(TAG02)
             ENDDO
 
/* If CPYF worked then process journalling */
             GOTO       CMDLBL(TAG001)
 
 TAG02:
             CPYF       FROMFILE(&LIBMOV/&AUMBNM) +
                          TOFILE(&FRLIB/&AUMBNM) FROMMBR(*ALL) +
                          TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                          FMTOPT(*MAP *DROP)
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*MAP *DROP) - Category 1   */
/*                                                                   */
/* It is possible that a message from the 3rd category for the first */
/* CPYF was received first; therefore, some category 1 errors must   */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file or to-file is locked, or to-file is in use */
             MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
/* If to-file has insufficient allowed number of members */
             MONMSG     MSGID(CPF2888) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*MAP *DROP) - Category 2   */
/*                                                                   */
/* It is possible that a message from the 3rd category for the first */
/* CPYF was received first; therefore, some category 2 errors must   */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file has no members or its only member is empty */
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
/************   GOTO       CMDLBL(READNEXT)                        */ /*CUP002*/
                GOTO       CMDLBL(TAG001)                             /*CUP002*/
             ENDDO
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)       /*CUP002*/
                GOTO       CMDLBL(TAG001)                             /*CUP002*/
             ENDDO                                                    /*CUP002*/
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
/************   GOTO       CMDLBL(READNEXT)                        */ /*CUP002*/
                GOTO       CMDLBL(TAG001)                             /*CUP002*/
             ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*MAP *DROP) - Category 3   */
/*                                                                   */
/* Third category of monitored messages are for possibly critical    */
/* errors but further CPYFs should be attempted.                     */
/*********************************************************************/
/* If different FMTOPT required */
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2963) EXEC(DO)
/**********     GOTO       CMDLBL(TAG03)                                               */ /*CPK017*/
                CHGVAR     VAR(&USTS) VALUE('F')                                          /*CPK017*/
                GOTO       CMDLBL(READNEXT)                                               /*CPK017*/
             ENDDO
 
/* If CPYF worked then process journalling */
             GOTO       CMDLBL(TAG001)
 TAG03:
             CPYF       FROMFILE(&LIBMOV/&AUMBNM) +
                          TOFILE(&FRLIB/&AUMBNM) FROMMBR(*ALL) +
                          TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                          FMTOPT(*NOCHK)
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NOCHK) - Category 1       */
/*                                                                   */
/* It is possible that a message from the 3rd category for the       */
/* second CPYF was received first; therefore, some category 1 errors */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file or to-file is locked, or to-file is in use */
             MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
/* If to-file has insufficient allowed number of members */
             MONMSG     MSGID(CPF2888) EXEC(DO)
                CHGVAR     VAR(&USTS) VALUE('F')
                GOTO       CMDLBL(READNEXT)
             ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NOCHK) - Category 2       */
/*                                                                   */
/* It is possible that a message from the 3rd category for the       */
/* second CPYF was received first; therefore, some category 2 errors */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file has no members or its only member is empty */
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
/************   GOTO       CMDLBL(READNEXT)                        */ /*CUP002*/
                GOTO       CMDLBL(TAG001)                             /*CUP002*/
             ENDDO
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)       /*CUP002*/
                GOTO       CMDLBL(TAG001)                             /*CUP002*/
             ENDDO                                                    /*CUP002*/
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
/************   GOTO       CMDLBL(READNEXT)                        */ /*CUP002*/
                GOTO       CMDLBL(TAG001)                             /*CUP002*/
             ENDDO
 
TAG001:
/**********  ENDJRNPF   FILE(&LIBMOV/&AUMBNM)                                          */ /*CPK018*/
/**********  MONMSG     MSGID(CPF7032) EXEC(GOTO CMDLBL(READNEXT))                     */ /*CPK018*/
 
/************STRJRNPF   FILE(&AUMBNM) JRN(ICJRN) IMAGES(*BOTH) +                       */ /*CPK017*/
/************             OMTJRNE(*OPNCLO)                                             */ /*CPK017*/
/************MONMSG     MSGID(CPF0000)                                                 */ /*CPK017*/
 
             GOTO       CMDLBL(READNEXT)
 
             GOTO       CMDLBL(END)
 ABNOR:
             CHGVAR     VAR(&RETURN) VALUE('F')
 
END:         CHGVAR     VAR(&CPYFLD) VALUE('(c) +
                          Finastra International Limited')
 
             ENDPGM
