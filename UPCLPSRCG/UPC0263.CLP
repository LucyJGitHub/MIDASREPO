/*********************************************************************/
/*STD    CLPBASE                                                     */
/*EXI *  TEXT('Midas UP Copy data for submitted job')                */
/*********************************************************************/
/*                                                                   */
/*       Midas - Upgrade Module                                      */
/*                                                                   */
/*       UPC0263 - Copy data for submitted job                       */
/*                                                                   */
/*       (c) Finastra International Limited 2002                     */
/*                                                                   */
/*********************************************************************/
/* This program monitors for a large and specific set of messages    */
/* which may be generated by the CPYF commands.  If this monitoring  */
/* is amended in any way the following programs may also need to be  */
/* changed:                                                          */
/*             SMC000037                                             */                   /*CUP038*/
/*             SMC000038                                             */                   /*CUP038*/
/*             SMC000045                                             */                   /*CUP038*/
/*             UPC0245                                               */
/*             UPC0246                                               */
/*             UPC0259                                               */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/*       Last Amend No. CUP038             Date 13Sep07              */
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/*       Prev Amend No. CPK025  *MOVED     Date 28Jul06              */
/*                      CUP102             Date 23Aug05              */
/* Midas Release 4.01 -----------------------------------------------*/
/*                      CPK015  *CREATE    Date 22Mar02              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       CUP038 - Re-organisation of migration tools.  Cosmetic.     */
/*       CPK025 - Handle Customer Number changes.  Move to global    */
/*                layer.                                             */
/*       CUP102 - Improve error handling.                            */
/*       CPK015 - 4.01 packaging.  Improvements to CPYDBLIB.         */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&LIBF &LIBT &ODOBNM &ODOBTP &ODOBAT &CRT)
 
             DCL        VAR(&LIBF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ODOBNM) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ODOBTP) TYPE(*CHAR) LEN(8)
             DCL        VAR(&ODOBAT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CRT) TYPE(*CHAR) LEN(4)
 
             DCL        VAR(&RERUN) TYPE(*CHAR) LEN(4) VALUE('*YES')                      /*CPK025*/
             DCL        VAR(&SINGLE) TYPE(*CHAR) LEN(1) VALUE('Y')                        /*CPK025*/
             DCL        VAR(&SM40RTN) TYPE(*CHAR) LEN(10)                                 /*CPK025*/
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)
             DCL        VAR(&IN01) TYPE(*LGL)
             DCL        VAR(&CPYFLD) TYPE(*CHAR) LEN(64) VALUE('(c) +
                          Finastra International Limited +
                          2002')
 
/* Global monitor message */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ABNOR))
 
/* Create temporary file to hold error messages for report. */                            /*CPK025*/
             DLTF       FILE(QTEMP/UPERRMQT)                                              /*CPK025*/
             MONMSG     MSGID(CPF2105)                                                    /*CPK025*/
             CRTPF      FILE(QTEMP/UPERRMQT) RCDLEN(100) +
                          TEXT('Temporary file for holding error +
                          messages')                                                      /*CPK025*/
 
/* Create and rename temporary source file for RUNSQLSTM. */                              /*CPK025*/
             DLTF       FILE(QTEMP/RUNSQLSTM)                                             /*CPK025*/
             MONMSG     MSGID(CPF0000)                                                    /*CPK025*/
             DLTF       FILE(QTEMP/RUNSQL)                                                /*CPK025*/
             MONMSG     MSGID(CPF0000)                                                    /*CPK025*/
             CRTSRCPF   FILE(QTEMP/RUNSQLSTM) RCDLEN(112) +
                          MBR(RUNSQLSTM) TEXT('Temporary source +
                          file for SMC000259')                                            /*CPK025*/
             RNMOBJ     OBJ(QTEMP/RUNSQLSTM) OBJTYPE(*FILE) +
                          NEWOBJ(RUNSQL)                                                  /*CPK025*/
 
             IF         COND(%SST(&ODOBAT 1 2) *EQ 'PF') THEN(DO)
 
/* Before attempting copy check if file exists in both libraries */
/*  and that members match.                                      */
                CALL       PGM(UPC0262) PARM(&ODOBNM &LIBF &LIBT)
                IF         COND(%SWITCH(XXXXXX11)) THEN(DO)                               /*CUP102*/
                   GOTO       CMDLBL(ABNOR)                                               /*CUP102*/
                ENDDO                                                                     /*CUP102*/
 
/* To avoid clashes with the main migration program create temporary copies */            /*CPK025*/
/*  of the DSPFFD and DSPFD *MBRLIST outfiles.                              */            /*CPK025*/
                CRTDUPOBJ  OBJ(UPFFDSTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                             TOLIB(QTEMP)                                                 /*CPK025*/
                CRTDUPOBJ  OBJ(UPMBRLTPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                             TOLIB(QTEMP)                                                 /*CPK025*/
                RMVLIBLE   LIB(QTEMP)                                                     /*CPK025*/
                MONMSG     MSGID(CPF0000)                                                 /*CPK025*/
                ADDLIBLE   LIB(QTEMP)                                                     /*CPK025*/
 
/* Call program to check if file has been affected by Customer Number */                  /*CPK025*/
/*  change.  If it has then the migration will be handled by          */                  /*CPK025*/
/*  SMC000040.  Otherwise a CPYF will be attempted.                   */                  /*CPK025*/
                OVRDBF     FILE(UPFFDSTPD) TOFILE(QTEMP/UPFFDSTPD)                        /*CPK025*/
                OVRDBF     FILE(UPMBRLTPD) TOFILE(QTEMP/UPMBRLTPD)                        /*CPK025*/
                CALL       PGM(SM000040) PARM(&ODOBNM &ODOBTP &LIBF +
                             &LIBT &RERUN &SINGLE &SM40RTN)                               /*CPK025*/
                IF         COND(%SWITCH(XXXXXX11)) THEN(DO)                               /*CPK025*/
                   GOTO       CMDLBL(ABNOR)                                               /*CPK025*/
                ENDDO                                                                     /*CPK025*/
                DLTOVR     FILE(UPFFDSTPD UPMBRLTPD)                                      /*CPK025*/
                IF         COND(&SM40RTN *EQ ' ' *OR &SM40RTN *EQ +
                             '*NOTFOUND') THEN(DO)                                        /*CPK025*/
                   GOTO       CMDLBL(ENDPGM)                                              /*CPK025*/
                ENDDO                                                                     /*CPK025*/
 
                CHGVAR     VAR(&MSGID) VALUE(' ')
                CPYF       FROMFILE(&LIBF/&ODOBNM) +
                           TOFILE(&LIBT/&ODOBNM) FROMMBR(*ALL) +
                           TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                           CRTFILE(&CRT) FMTOPT(*NONE)
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NONE) - Category 1        */
/*                                                                   */
/* First category of monitored messages are critical errors and will */
/* be flagged as failed without attempting other types of CPYF as    */
/* they would also fail.                                             */
/*********************************************************************/
/* If to-file does not exist then end. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2861) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
/* If from-file does not exist */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2802) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If insufficient authority to either from-file or to-file. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2864) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2862) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If from-file has more fields than to-file, treat as error. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2965) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If, because of overrides, utility thinks it is copying to itself. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2874) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If from-file or to-file is locked, or to-file is in use. */
                MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If to-file has insufficient allowed number of members. */
                MONMSG     MSGID(CPF2888) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If from-file not found; this error may be caused by an existing */
/*  override.                                                      */
                MONMSG     MSGID(CPF2875) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If error in writing to 'to' member then it is unable to work    */
/*  out why; therefore flag as failure.                            */
                MONMSG     MSGID(CPF2972) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NONE) - Category 2        */
/*                                                                   */
/* Second category of monitored messages are non-critical errors and */
/* will be flagged as completed without attempting other types of    */
/* as they would also fail.                                          */
/*********************************************************************/
/* If from-file has no members or its only member is empty */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
                   RMVM       FILE(&LIBT/&ODOBNM) MBR(*ALL)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NONE) - Category 3        */
/*                                                                   */
/* Third category of monitored messages are for possibly critical    */
/* errors but further CPYFs should be attempted.                     */
/*********************************************************************/
/* If different FMTOPT required. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2969) EXEC(DO)
                   GOTO       CMDLBL(TAG02)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2963) EXEC(DO)
                   GOTO       CMDLBL(TAG02)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2962) EXEC(DO)
                   GOTO       CMDLBL(TAG02)
                ENDDO
 
/* If CPYF worked then read next record. */
                GOTO       CMDLBL(ENDPGM)
 TAG02:
                CPYF       FROMFILE(&LIBF/&ODOBNM) +
                           TOFILE(&LIBT/&ODOBNM) FROMMBR(*ALL) +
                           TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                           CRTFILE(&CRT) FMTOPT(*MAP *DROP)
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*MAP *DROP) - Category 1   */
/*                                                                   */
/* It is possible that a message from the 3rd category for the first */
/* CPYF was received first; therefore, some category 1 errors must   */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file or to-file is locked, or to-file is in use. */
                MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If to-file has insufficient allowed number of members. */
                MONMSG     MSGID(CPF2888) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If to-file has incorrect data in any fields. */
                MONMSG     MSGID(CPF2972) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*MAP *DROP) - Category 2   */
/*                                                                   */
/* It is possible that a message from the 3rd category for the first */
/* CPYF was received first; therefore, some category 2 errors must   */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file has no members or its only member is empty. */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*MAP *DROP) - Category 3   */
/*                                                                   */
/* Third category of monitored messages are for possibly critical    */
/* errors but further CPYFs should be attempted.                     */
/*********************************************************************/
/* If different FMTOPT required */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2963) EXEC(DO)
                   GOTO       CMDLBL(TAG03)
                ENDDO
 
/* If CPYF worked then read next record */
                GOTO       CMDLBL(ENDPGM)
 TAG03:
                CPYF       FROMFILE(&LIBF/&ODOBNM) +
                           TOFILE(&LIBT/&ODOBNM) FROMMBR(*ALL) +
                           TOMBR(*FROMMBR) MBROPT(*REPLACE) +
                           CRTFILE(&CRT) FMTOPT(*NOCHK)
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NOCHK) - Category 1       */
/*                                                                   */
/* It is possible that a message from the 3rd category for the       */
/* second CPYF was received first; therefore, some category 1 errors */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file or to-file is locked, or to-file is in use. */
                MONMSG     MSGID(CPF2952 CPF2909) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/* If to-file has insufficient allowed number of members. */
                MONMSG     MSGID(CPF2888) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
/*********************************************************************/
/*     Message monitoring for CPYF FMTOPT(*NOCHK) - Category 2       */
/*                                                                   */
/* It is possible that a message from the 3rd category for the       */
/* second CPYF was received first; therefore, some category 2 errors */
/* be monitored for again.                                           */
/*********************************************************************/
/* If from-file has no members or its only member is empty */
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2868) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2869) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
                MONMSG     MSGID(CPF2817) CMPDTA(CPF2870) EXEC(DO)
                   GOTO       CMDLBL(ENDPGM)
                ENDDO
 
             ENDDO
 
             IF         COND(&ODOBTP *EQ *DTAARA) THEN(DO)
/* Check if it exists in 'to' library; if it doesn't then copy rec. */
                CHKOBJ     OBJ(&LIBT/&ODOBNM) OBJTYPE(*DTAARA)
                MONMSG     MSGID(CPF9801) EXEC(DO)
                   IF         COND(&CRT *EQ '*NO') THEN(DO)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                   IF         COND(&CRT *EQ '*YES') THEN(DO)
                      CRTDUPOBJ  OBJ(&ODOBNM) FROMLIB(&LIBF) OBJTYPE(*DTAARA) +
                                   TOLIB(&LIBT)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                ENDDO
/* Call program to check if data area has been affected by Customer */                    /*CPK025*/
/*  Number change.  If it has then the migration will be handled by */                    /*CPK025*/
/*  SM000040.  Otherwise a CPYDTAARA will be attempted.             */                    /*CPK025*/
                CALL       PGM(SM000040) PARM(&ODOBNM &ODOBTP &LIBF +
                             &LIBT &RERUN &SINGLE &SM40RTN)                               /*CPK025*/
                IF         COND(%SWITCH(XXXXXX11)) THEN(DO)                               /*CPK025*/
                   GOTO       CMDLBL(ABNOR)                                               /*CPK025*/
                ENDDO                                                                     /*CPK025*/
                IF         COND(&SM40RTN *EQ ' ' *OR &SM40RTN *EQ +
                             '*NOTFOUND') THEN(DO)                                        /*CPK025*/
                   GOTO       CMDLBL(ENDPGM)                                              /*CPK025*/
                ENDDO                                                                     /*CPK025*/
                CPYDTAARA FMDTAARA(&LIBF/&ODOBNM) +
                                  TODTAARA(&LIBT/&ODOBNM)
                MONMSG     MSGID(CPF0000) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
             ENDDO
 
             IF         COND(&ODOBTP *EQ *DTAQ) THEN(DO)
/* Check if it exists in 'to' library; if it doesn't then copy rec. */
                CHKOBJ     OBJ(&LIBT/&ODOBNM) OBJTYPE(*DTAQ)
                MONMSG     MSGID(CPF9801) EXEC(DO)
                   IF         COND(&CRT *EQ '*NO') THEN(DO)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                   IF         COND(&CRT *EQ '*YES') THEN(DO)
                      CPYDTAQ    FMDTAQ(&LIBF/&ODOBNM) TODTAQ(&LIBT/&ODOBNM) +
                                   CRTDTAQ(*YES)
                      GOTO       CMDLBL(ENDPGM)
                   ENDDO
                ENDDO
                CPYDTAQ    FMDTAQ(&LIBF/&ODOBNM) TODTAQ(&LIBT/&ODOBNM)
                MONMSG     MSGID(CPF0000 RPG0000 MCH0000) EXEC(DO)
                   GOTO       CMDLBL(ABNOR)
                ENDDO
             ENDDO
 
             GOTO       CMDLBL(ENDPGM)
 
ABNOR:
/* Recursive error */
             IF         COND(&IN01) THEN(DO)
                SNDPGMMSG  MSGID(CPF9898) MSGF(*LIBL/QCPFMSG) +
                          MSGDTA('Recursive error in pgm UPC0263') +
                          MSGTYPE(*ESCAPE)
             ENDDO
 
             CHGVAR     VAR(&IN01) VALUE('1')
ABNOR2:
/* Receive escape error message. */
             RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                          MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
/* Pass it back to calling program. */
             SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                          MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
 
ENDPGM:
             CALL       PGM(UP008010) PARM('*REPORT' 'UPC0263' ' ')                       /*CPK025*/
 
             CHGVAR     VAR(&CPYFLD) VALUE('(c) +
                          Finastra International Limited')
             ENDPGM
