/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas UP ADBU Compare Main Program via OTB')          */
/*********************************************************************/
/*                                                                   */
/*       Midas - Upgrade Module                                      */
/*                                                                   */
/*       UPC4900 - ADBU Compare Main Program via OTB                 */
/*                                                                   */
/*       (c) Finastra International Limited 2023                     */
/*                                                                   */
/*       Last Amend No. MD061706 *CRATE    Date 01Aug23              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD061706 - Various changes for transition to aDBU           */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&LAYER)

             DCL        VAR(&LAYER) TYPE(*CHAR) LEN(7)

             DCL        VAR(&PFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&BRGBRGLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&BRGREFER) TYPE(*CHAR) LEN(2)
             DCL        VAR(&GLOBP) TYPE(*CHAR) LEN(2)
             DCL        VAR(&ZONEP) TYPE(*CHAR) LEN(2)
             DCL        VAR(&MESSAGE) TYPE(*CHAR) LEN(50)
             DCL        VAR(&REPLY1) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&ERRORFLAG) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ERRPGM) TYPE(*CHAR) LEN(10) +
                          VALUE('UPC4900')
             DCL        VAR(&RTNCODE) TYPE(*CHAR) LEN(7)
             DCL        VAR(&ERROR) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RETURN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&FLDUPD) TYPE(*CHAR) LEN(10)
             DCL        VAR(&FLDVAL) TYPE(*CHAR) LEN(100)
             DCL        VAR(&GTALIBR) TYPE(*CHAR) LEN(10)
             DCL        VAR(&GTALIB) TYPE(*CHAR) LEN(10)

             DCL        VAR(&SVAL1) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK1) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL2) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK2) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL3) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK3) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL4) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK4) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL5) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK5) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL6) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK6) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL7) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK7) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL8) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK8) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL9) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK9) TYPE(*CHAR) LEN(20)
             DCL        VAR(&SVAL10) TYPE(*CHAR) LEN(200)
             DCL        VAR(&SVALK0) TYPE(*CHAR) LEN(20)

             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2023')

/* Global monitor message */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))

/* Prepare temporary files, job, etc. */
             CALLSUBR   SUBR(PREPARE)

/* Upload latest aDBU exception table from the reference system */
             CHGVAR     VAR(&SVALK1) VALUE('BrgADBUGlobalRefer')
             CHGVAR     VAR(&SVALK2) VALUE('BrgMidasGlobalPrefix')
             CALL       PGM(UPSVALR0) PARM('*GLOBAL' &RTNCODE &SVALK1 &SVAL1 +
                          &SVALK2 &SVAL2 &SVALK3 &SVAL3 &SVALK4 +
                          &SVAL4 &SVALK5 &SVAL5 &SVALK6 &SVAL6 +
                          &SVALK7 &SVAL7 &SVALK8 &SVAL8 &SVALK9 +
                          &SVAL9 &SVALK0 &SVAL10)
             If         COND(&RTNCODE *EQ '*NRF   ') THEN(DO)
                   GOTO       CMDLBL(ERROR)
             ENDDO
             CHGVAR     VAR(&GTALIBR) VALUE((%SST(&SVAL1 1 2)) *TCAT 'GTALIB')
             CHGVAR     VAR(&GTALIB) VALUE((%SST(&SVAL2 1 2)) *TCAT 'GTALIB')
             CPYF       FROMFILE(&GTALIBR/UPEXCCTD) TOFILE(UPEXCCTD) +
                          MBROPT(*REPLACE)
             MONMSG     MSGID(CPF2817) CMPDTA(CPF2869)
             CALL       PGM(UP000701) PARM(&ERRORFLAG 'UPEXCCTD' &GTALIB)

/* Check if ADBU is installed in the system*/
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
             CHGVAR     VAR(&SVALK1) VALUE('BrgADBUGlobalRefer')
             ENDDO
             IF         COND(&LAYER *EQ '*ZONE  ') THEN(DO)
             CHGVAR     VAR(&SVALK1) VALUE('BrgADBUSystemRefer')
             ENDDO
             CALL       PGM(UPSVALR0) PARM(&LAYER &RTNCODE &SVALK1 &SVAL1 +
                          &SVALK2 &SVAL2 &SVALK3 &SVAL3 &SVALK4 +
                          &SVAL4 &SVALK5 &SVAL5 &SVALK6 &SVAL6 +
                          &SVALK7 &SVAL7 &SVALK8 &SVAL8 &SVALK9 +
                          &SVAL9 &SVALK0 &SVAL10)

/* Retrieve required System Values. */
                CALLSUBR   SUBR(RTVSVAL)

/* For a general error just report. */
                IF         COND(&ERRORFLAG *EQ 'E') THEN(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
/* Set up library list. */
                CALLSUBR   SUBR(SETUPLIBL)

/* If *GLOBAL */
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
/* Check that monitor file is present in bridge library */
             CHKOBJ     OBJ(&BRGBRGLIB/UPGCMPTD) OBJTYPE(*FILE)
             MONMSG     MSGID(CPF9801) EXEC(DO)
             CPYF       FROMFILE(UPGCMPTD) +
                          TOFILE(&BRGBRGLIB/UPGCMPTD) CRTFILE(*YES)
             CLRPFM     FILE(&BRGBRGLIB/UPGCMPTD)
             ENDDO

/* Retrieve log for PRFX system */
             CALL UPGCMPWR ('*CHECK    ' &PFX ' ' ' ' &ERROR &RETURN)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO

/* If *ZONE */
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
/*           CLRPFM     FILE(UPZCMPTD) */

/* Retrieve log for PRFX system */
             CALL UPZCMPWR ('*CHECK    ' &PFX ' ' ' ' &ERROR &RETURN)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO

             CHGVAR     VAR(&ERRPGM) VALUE('UPC4900')

/* If file is empty (Compare option never ran), send message to   */
/* Here there is no need to send message, let's just proceed */
             IF         COND(&RETURN *EQ 'Not_found ') THEN(DO)
/* Initialize work table */
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
                CALL UPGCMPWR ('*WRITE    ' &PFX ' ' ' ' &ERROR &RETURN)
                IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CALL UPZCMPWR ('*WRITE    ' &PFX ' ' ' ' &ERROR &RETURN)
                IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO

/* Submit compare. */
             CALL       PGM(UPC4001) PARM(&PFX &BRGREFER &LAYER +
                          &BRGBRGLIB)
             IF         COND(%SWITCH(XXXXXX11)) THEN(GOTO ERROR)
/* Compare GM  */
/* Compare GP  */
/* Compare GTA */
/* Compare GV  */

                   GOTO       CMDLBL(WAITCMP)
             ENDDO

/* If file is not empty (Compare option ran previously), send message to   */
/* Here do the same, force to re-run a new one */
             IF         COND(&RETURN *EQ 'Found     ') THEN(DO)

/* Initialize work table */
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
                CALL UPGCMPWR ('*WRITE    ' &PFX ' ' ' ' &ERROR &RETURN)
                IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO

             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
                CALL UPZCMPWR ('*WRITE    ' &PFX ' ' ' ' &ERROR &RETURN)
                IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO

/* Submit compare. */
             CALL       PGM(UPC4001) PARM(&PFX &BRGREFER &LAYER +
                          &BRGBRGLIB)
             IF         COND(%SWITCH(XXXXXX11)) THEN(GOTO ERROR)
/* Compare GM  */
/* Compare GP  */
/* Compare GTA */
/* Compare GV  */

                   GOTO       CMDLBL(WAITCMP)
                ENDDO

WAITCMP:
/* wait for the status to be completed 'C' or failed 'A' */

             CHGVAR        VAR(&FLDUPD) VALUE('UPCMSS')
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
             CALL UPGCMPWR ('*RTV      ' &PFX &FLDUPD &FLDVAL &ERROR &RETURN)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
             CALL UPZCMPWR ('*RTV      ' &PFX &FLDUPD &FLDVAL &ERROR &RETURN)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO

             IF         COND(&FLDVAL *EQ 'A') THEN(GOTO CMDLBL(ERROR))
             IF         COND(&FLDVAL *EQ 'C') THEN(GOTO CMDLBL(WAITRPT))
             DLYJOB     DLY(3)
             GOTO       CMDLBL(WAITCMP)

WAITRPT:
/* wait for the status to be completed 'C' or failed 'A' */

             CHGVAR        VAR(&FLDUPD) VALUE('UPRPSS')
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
             CALL UPGCMPWR ('*RTV      ' &PFX &FLDUPD &FLDVAL &ERROR &RETURN)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO
             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
             CALL UPZCMPWR ('*RTV      ' &PFX &FLDUPD &FLDVAL &ERROR &RETURN)
             IF         COND(&ERROR *NE '          ') THEN(GOTO ERROR)
             ENDDO

             IF         COND(&FLDVAL *EQ 'A') THEN(GOTO CMDLBL(ERROR))
             IF         COND(&FLDVAL *EQ 'C') THEN(GOTO CMDLBL(UPDATE))
             DLYJOB     DLY(3)
             GOTO       CMDLBL(WAITRPT)

UPDATE:
/* Update done by UPC4910, return now to UPC6014 */


                GOTO       CMDLBL(ENDPGM)
ERROR:
            CHGJOB     SWS(XXXXXX11)
            DMPCLPGM

/******************************************************************************/
/*                                                                            */
/* Subroutine to prepare for run.                                             */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(PREPARE)

             CHGJOB     LOG(4 0 *SECLVL) LOGCLPGM(*YES) SWS(XXXXXX00)

/* Create data area for screen message handling. */
             DLTDTAARA  DTAARA(QTEMP/MIDASMSG)
             MONMSG     MSGID(CPF0000)
             CRTDTAARA  DTAARA(QTEMP/MIDASMSG) TYPE(*CHAR) LEN(800)

             ENDSUBR

/******************************************************************************/
/*                                                                            */
/* Subroutine to set up the library list.                                     */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(SETUPLIBL)

             RMVLIBLE   LIB(&BRGBRGLIB)
             MONMSG     MSGID(CPF0000)
             ADDLIBLE   LIB(&BRGBRGLIB) POSITION(*LAST)
             MONMSG     MSGID(CPF2103)

             SAVLIBL    SAVDTL(UPC4900)

             ENDSUBR

/******************************************************************************/
/*                                                                            */
/* Subroutine to set up the library list.                                     */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(SETUPLIBLP)

             ADDLIBLE   LIB(&BRGBRGLIB) POSITION(*LAST)
             MONMSG     MSGID(CPF2103)

             SAVLIBL    SAVDTL(UPC4900)

             ENDSUBR

/******************************************************************************/
/*                                                                            */
/* Subroutine to retrieve System Values.                                      */
/* Note: even if the job is being run for a zone it still needs to retrieve   */
/*  some global values.                                                       */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(RTVSVAL)

/* Retrieve the appropriate System Values and perform other layer specific */
/*  code.                                                                  */
             IF         COND(&LAYER *EQ '*GLOBAL') THEN(DO)
             CHGVAR     VAR(&SVALK1) VALUE('BrgMidasGlobalPrefix')
             CHGVAR     VAR(&SVALK2) VALUE('BrgDeliveredBrgLib')
             CHGVAR     VAR(&SVALK3) VALUE('BrgADBUGlobalRefer')
             CHGVAR     VAR(&ERRPGM) VALUE('UPSVALR0')
             CALL       PGM(UPSVALR0) PARM(&LAYER &RTNCODE &SVALK1 &SVAL1 +
                          &SVALK2 &SVAL2 &SVALK3 &SVAL3 &SVALK4 +
                          &SVAL4 &SVALK5 &SVAL5 &SVALK6 &SVAL6 +
                          &SVALK7 &SVAL7 &SVALK8 &SVAL8 &SVALK9 +
                          &SVAL9 &SVALK0 &SVAL10)
             CALLSUBR   SUBR(CHECKSVAL)
             CHGVAR     VAR(&PFX) VALUE(%SST(&SVAL1 1 2))
             CHGVAR     VAR(&BRGBRGLIB) VALUE(%SST(&SVAL2 1 10))
             CHGVAR     VAR(&BRGREFER) VALUE(%SST(&SVAL3 1 2))
             ENDDO

             IF         COND(&LAYER *EQ '*ZONE') THEN(DO)
             CHGVAR     VAR(&SVALK1) VALUE('BrgMidasSystemPrefix')
             CHGVAR     VAR(&SVALK2) VALUE('BrgDeliveredBrgLib')
             CHGVAR     VAR(&SVALK3) VALUE('BrgADBUSystemRefer')
             CHGVAR     VAR(&ERRPGM) VALUE('UPSVALR0')
             CALL       PGM(UPSVALR0) PARM(&LAYER &RTNCODE &SVALK1 &SVAL1 +
                          &SVALK2 &SVAL2 &SVALK3 &SVAL3 &SVALK4 +
                          &SVAL4 &SVALK5 &SVAL5 &SVALK6 &SVAL6 +
                          &SVALK7 &SVAL7 &SVALK8 &SVAL8 &SVALK9 +
                          &SVAL9 &SVALK0 &SVAL10)
             CALLSUBR   SUBR(CHECKSVAL)
             CHGVAR     VAR(&PFX) VALUE(%SST(&SVAL1 1 2))
             CHGVAR     VAR(&BRGBRGLIB) VALUE(%SST(&SVAL2 1 10))
             CHGVAR     VAR(&BRGREFER) VALUE(%SST(&SVAL3 1 2))
             ENDDO


             ENDSUBR

/******************************************************************************/
/*                                                                            */
/* Subroutine for checking the call to System Values.                         */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(CHECKSVAL)

             IF         COND(&RTNCODE *NE ' ') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO
             IF         COND(%SST(&SVAL1 1 1) *EQ '*') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO
             IF         COND(&SVAL1 *EQ ' ') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('B')
             ENDDO
             IF         COND(%SST(&SVAL2 1 1) *EQ '*') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO
             IF         COND(&SVAL2 *EQ ' ') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('B')
             ENDDO
             IF         COND(%SST(&SVAL3 1 1) *EQ '*') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO
             IF         COND(&SVAL3 *EQ ' ') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('B')
             ENDDO

             ENDSUBR

/******************************************************************************/
/*                                                                            */
/* Subroutine for checking the call to System Values.                         */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(CHECKSVALP)

             IF         COND(&RTNCODE *NE ' ') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO
             IF         COND(%SST(&SVAL1 1 1) *EQ '*') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO
             IF         COND(&SVAL1 *EQ ' ') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('B')
             ENDDO
             IF         COND(%SST(&SVAL2 1 1) *EQ '*') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('E')
             ENDDO
             IF         COND(&SVAL2 *EQ ' ') THEN(DO)
                CHGVAR     VAR(&ERRORFLAG) VALUE('B')
             ENDDO

             ENDSUBR

/******************************************************************************/
/*                                                                            */
/* Subroutine for reporting blank System Values.                              */
/*                                                                            */
/******************************************************************************/
             SUBR       SUBR(BLANKSVAL)

             RTVMSG     MSGID(UPM0003) MSGF(UTMSGF) MSG(&MESSAGE)
             CHGDTAARA  DTAARA(MIDASMSG (101 50)) VALUE(&MESSAGE)
             RTVMSG     MSGID(UPM0004) MSGF(UTMSGF) MSG(&MESSAGE)
             CHGDTAARA  DTAARA(MIDASMSG (151 50)) VALUE(&MESSAGE)
             CALL       PGM(SCC0010) PARM(&ERRPGM 'ENTER' ' ')

             ENDSUBR

ENDPGM:
             ENDPGM

