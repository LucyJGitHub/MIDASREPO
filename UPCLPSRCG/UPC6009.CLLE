/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas UP OTU Restore reference libraries')            */
/*********************************************************************/
/*                                                                   */
/*       Midas - Bridge                                              */
/*                                                                   */
/*       UPC6009 - Restore reference libraries                       */
/*                                                                   */
/*       Function: This program submits the restore of reference     */
/*                 libraries passed for OTU for the global.          */
/*                                                                   */
/*       (c) Finastra International Limited 2023                     */
/*                                                                   */
/*       Last Amend No. MD062077           Date 08Nov23              */
/*       Prev Amend No. MD061992           Date 23Oct23              */
/*                      MD061954 *CREATE   Date 08Oct23              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD062077 - Include reference BFLIB                          */
/*       MD061992 - Allow 3 char prefix for reference libraries      */
/*       MD061954 - Include restore of reference libraries for aDBU  */
/*                                                                   */
/*********************************************************************/
/*********   PGM        PARM(&LIBDM &LIBDP &LIBDT &LIBDV &LIBGM +
                          &LIBGP &LIBGT &LIBGV &GLOBP &ZONEP +
                          &BRGBRGLIB &RETURN) */                                        /*MD062077*/
             PGM        PARM(&LIBDM &LIBDP &LIBDT &LIBDV &LIBGM +
                          &LIBGP &LIBGT &LIBGV &LIBBF &GLOBP &ZONEP +
                          &BRGBRGLIB &RETURN)                                           /*MD062077*/


             DCL        VAR(&LIBDM) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBDP) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBDT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBDV) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBGM) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBGP) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBGT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBGV) TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBBF) TYPE(*CHAR) LEN(10)                                 /*MD062077*/
             DCL        VAR(&LIB) TYPE(*CHAR) LEN(10)
/**********  DCL        VAR(&GLOBP) TYPE(*CHAR) LEN(2) */                               /*MD061992*/
             DCL        VAR(&GLOBP) TYPE(*CHAR) LEN(3)                                  /*MD061992*/
/**********  DCL        VAR(&ZONEP) TYPE(*CHAR) LEN(2) */                               /*MD061992*/
             DCL        VAR(&ZONEP) TYPE(*CHAR) LEN(3)                                  /*MD061992*/
             DCL        VAR(&BRGBRGLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RETURN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&FAIL) TYPE(*CHAR) LEN(1)

             DCL        VAR(&DTQN) TYPE(*CHAR) LEN(10)  VALUE('UP_OTBRSTG')
             DCL        VAR(&IASP_YN) TYPE(*CHAR) LEN(1)
             DCL        VAR(&IASP) TYPE(*CHAR) LEN(10)
             DCL        VAR(&COUNTZ) TYPE(*DEC) LEN(2 0)
             DCL        VAR(&COUNTG) TYPE(*DEC) LEN(2 0)
             DCL        VAR(&MSGLEN) TYPE(*DEC) LEN(5 0) VALUE(50)
             DCL        VAR(&MSGDATA) TYPE(*CHAR) LEN(50)
             DCL        VAR(&RCVWAIT) TYPE(*DEC) LEN(5 0) VALUE(-1)
/*/COPY GPCPYSRCG,GPSVALDCL  */
             DCL        VAR(&CPYFLD) TYPE(*CHAR) LEN(64) VALUE('(c) +
                          Finastra International Limited +
                          2023')

/* Global monitor message */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ABNOR))

/** Get the global IASP system values */
             CALL       PGM(GPAOSVALR0) PARM(&RSVALRTNC +
                          'IASPinstallation' &SVAL1 'IASPgroup' +
                          &SVAL2 &SVALK3 &SVAL3 &SVALK4 &SVAL4 +
                          &SVALK5 &SVAL5 &SVALK6 &SVAL6 &SVALK7 +
                          &SVAL7 &SVALK8 &SVAL8 &SVALK9 &SVAL9 +
                          &SVALK10 &SVAL10)

/** Check whether system is in IASP environment. */
              CHGVAR     VAR(&IASP_YN) VALUE(%SST(&SVAL1 1 1))

/** If IASP environment */
             IF         COND(&IASP_YN *EQ 'Y') THEN(DO)
/** Get name of IASP. */
              CHGVAR     VAR(&IASP) VALUE(%SST(&SVAL2 1 10))
             ENDDO

/* Submit GMLIB restore if needed */
             IF         COND(&LIBGM *NE ' ') THEN(DO)
             CHGVAR     VAR(&LIB) VALUE(&GLOBP *CAT 'GMLIB')
             SBMJOB     CMD(CALL PGM(UPC6007) PARM(&LIBGM +
                          &LIB &BRGBRGLIB &IASP_YN &IASP)) JOB(RST_GM) +
                          JOBQ(&BRGBRGLIB/SMJOBQNM)
             CHGVAR     VAR(&COUNTG) VALUE(&COUNTG + 1)
             ENDDO

/* Submit GPLIB restore if needed */
             IF         COND(&LIBGP *NE ' ') THEN(DO)
             CHGVAR     VAR(&LIB) VALUE(&GLOBP *CAT 'GPLIB')
             SBMJOB     CMD(CALL PGM(UPC6007) PARM(&LIBGP +
                          &LIB &BRGBRGLIB &IASP_YN &IASP)) JOB(RST_GP) +
                          JOBQ(&BRGBRGLIB/SMJOBQNM)
             CHGVAR     VAR(&COUNTG) VALUE(&COUNTG + 1)
             ENDDO

/* Submit GTALIB restore if needed */
             IF         COND(&LIBGT *NE ' ') THEN(DO)
             CHGVAR     VAR(&LIB) VALUE(&GLOBP *CAT 'GTALIB')
             SBMJOB     CMD(CALL PGM(UPC6007) PARM(&LIBGT +
                          &LIB &BRGBRGLIB &IASP_YN &IASP)) JOB(RST_GTA) +
                          JOBQ(&BRGBRGLIB/SMJOBQNM)
             CHGVAR     VAR(&COUNTG) VALUE(&COUNTG + 1)
             ENDDO

/* Submit BFLIB restore if needed */                                                    /*MD062077*/
             IF         COND(&LIBBF *NE ' ') THEN(DO)                                   /*MD062077*/
             CHGVAR     VAR(&LIB) VALUE(&GLOBP *CAT 'BFLIB')                            /*MD062077*/
             SBMJOB     CMD(CALL PGM(UPC6007) PARM(&LIBBF +
                          &LIB &BRGBRGLIB &IASP_YN &IASP)) JOB(RST_BF) +
                          JOBQ(&BRGBRGLIB/SMJOBQNM)                                     /*MD062077*/
             CHGVAR     VAR(&COUNTG) VALUE(&COUNTG + 1)                                 /*MD062077*/
             ENDDO                                                                      /*MD062077*/
                                                                                        /*MD062077*/
LOOPG:
/* If jobs are complete but at least one FAIL, exit */
             IF         COND((&COUNTG *EQ 0) *AND (&FAIL *EQ 'Y')) +
                          THEN(GOTO       CMDLBL(ABNOR))

/* Before proceeding with DV/GV restore, wait for completion of previous RST */
             IF         COND((&COUNTG *EQ 0) *AND (&FAIL *EQ ' ')) +
                          THEN(DO)

/* Submit GVLIB restore if needed */
                IF         COND(&LIBGV *NE ' ') THEN(DO)
                   CHGVAR     VAR(&LIB) VALUE(&GLOBP *CAT 'GVLIB')
                   SBMJOB     CMD(CALL PGM(UPC6007) PARM(&LIBGV +
                                &LIB &BRGBRGLIB &IASP_YN &IASP)) JOB(RST_GV) +
                                JOBQ(&BRGBRGLIB/SMJOBQNM)
                   CHGVAR     VAR(&COUNTG) VALUE(&COUNTG + 1)

                   CALL       PGM(QRCVDTAQ) PARM(&DTQN &BRGBRGLIB &MSGLEN +
                                &MSGDATA &RCVWAIT)
                   IF         COND(&MSGDATA *EQ 'GV-DONE') THEN(CHGVAR +
                                VAR(&COUNTG) VALUE(&COUNTG - 1))
                   IF         COND(&MSGDATA *EQ 'GV-FAIL') THEN(CHGVAR +
                                VAR(&COUNTG) VALUE(&COUNTG - 1))
                   IF         COND(&MSGDATA *EQ 'GV-FAIL') THEN(CHGVAR +
                                VAR(&FAIL) VALUE('Y'))
                   GOTO       CMDLBL(CHK)
                ENDDO
             ENDDO
             ELSE          CMD(DO)
             CALL       PGM(QRCVDTAQ) PARM(&DTQN &BRGBRGLIB &MSGLEN +
                          &MSGDATA &RCVWAIT)

             IF         COND(&MSGDATA *EQ 'GM-DONE') THEN(CHGVAR +
                          VAR(&COUNTG) VALUE(&COUNTG - 1))
             IF         COND(&MSGDATA *EQ 'GM-FAIL') THEN(CHGVAR +
                          VAR(&COUNTG) VALUE(&COUNTG - 1))
             IF         COND(&MSGDATA *EQ 'GM-FAIL') THEN(CHGVAR +
                          VAR(&FAIL) VALUE('Y'))
             IF         COND(&MSGDATA *EQ 'GP-DONE') THEN(CHGVAR +
                          VAR(&COUNTG) VALUE(&COUNTG - 1))
             IF         COND(&MSGDATA *EQ 'GP-FAIL') THEN(CHGVAR +
                          VAR(&COUNTG) VALUE(&COUNTG - 1))
             IF         COND(&MSGDATA *EQ 'GP-FAIL') THEN(CHGVAR +
                          VAR(&FAIL) VALUE('Y'))
             IF         COND(&MSGDATA *EQ 'GT-DONE') THEN(CHGVAR +
                          VAR(&COUNTG) VALUE(&COUNTG - 1))
             IF         COND(&MSGDATA *EQ 'GT-FAIL') THEN(CHGVAR +
                          VAR(&COUNTG) VALUE(&COUNTG - 1))
             IF         COND(&MSGDATA *EQ 'GT-FAIL') THEN(CHGVAR +
                          VAR(&FAIL) VALUE('Y'))
             IF         COND(&MSGDATA *EQ 'BF-DONE') THEN(CHGVAR +
                          VAR(&COUNTG) VALUE(&COUNTG - 1))                              /*MD062077*/
             IF         COND(&MSGDATA *EQ 'BF-FAIL') THEN(CHGVAR +
                          VAR(&COUNTG) VALUE(&COUNTG - 1))                              /*MD062077*/
             IF         COND(&MSGDATA *EQ 'BF-FAIL') THEN(CHGVAR +
                          VAR(&FAIL) VALUE('Y'))                                        /*MD062077*/
             GOTO       CMDLBL(LOOPG)
             ENDDO

CHK:
             IF         COND(&FAIL *EQ 'Y') THEN(DO)
             GOTO       CMDLBL(ABNOR)
             ENDDO

             GOTO       CMDLBL(END)
ABNOR:
             CHGJOB     SWS(XXXXXX11)
             DMPCLPGM
             CHGVAR     VAR(&RETURN) VALUE('*ERROR')

END:         CHGVAR     VAR(&CPYFLD) VALUE('(c) +
                          Finastra International Limited')

             ENDPGM

