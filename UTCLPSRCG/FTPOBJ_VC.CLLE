/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI *  TEXT('Midas UT Validity checker for FTPOBJ')                */
/*********************************************************************/
/*                                                                   */
/*       Midas - Utilities module                                    */
/*                                                                   */
/*       FTPOBJ_VC - FTPOBJ validity checker                         */
/*                                                                   */
/*       (c) Finastra International Limited 2005                     */
/*                                                                   */
/*       Last Amend No. MD046248           Date 27Oct17              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/*       Prev Amend No. CUP096 *CREATE     Date 17Mar05              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD046248 - Finastra Rebranding                              */
/*       CUP096 - New utility                                        */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&SYSTEM &REMOTEUSER &PASSWORD &FROMOBJL +
                          &RMTSAVF &FROMLIB &OBJTYPEL &TGTRLS +
                          &RESTORE &RSTLIB)
 
/* Parameters */
             DCL        VAR(&SYSTEM    ) TYPE(*CHAR) LEN(15)
             DCL        VAR(&REMOTEUSER) TYPE(*CHAR) LEN(10)
             DCL        VAR(&PASSWORD  ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&FROMOBJL  ) TYPE(*CHAR) LEN(1002)
             DCL        VAR(&FROMOBJ   ) TYPE(*CHAR) LEN(1000)
             DCL        VAR(&FROMLIB   ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&OBJTYPEL  ) TYPE(*CHAR) LEN(177)
             DCL        VAR(&OBJTYPE   ) TYPE(*CHAR) LEN(175)
             DCL        VAR(&TGTRLS    ) TYPE(*CHAR) LEN(8)
             DCL        VAR(&RMTSAVF   ) TYPE(*CHAR) LEN(20)
             DCL        VAR(&RESTORE   ) TYPE(*CHAR) LEN(4)
             DCL        VAR(&RSTLIB    ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TFile     ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&Tlib      ) TYPE(*CHAR) LEN(10)
 
/* Work variables */
             DCL        VAR(&NOOFOBJ  ) TYPE(*DEC) LEN(3)
             DCL        VAR(&NoOfTypes ) TYPE(*DEC) LEN(3)
             DCL        VAR(&Counter  ) TYPE(*DEC) LEN(3)
             DCL        VAR(&Pos      ) TYPE(*DEC) LEN(4)
             DCL        VAR(&Len      ) TYPE(*DEC) LEN(4)
             DCL        VAR(&TCounter ) TYPE(*DEC) LEN(3)
             DCL        VAR(&NoInList ) TYPE(*CHAR) LEN(2)
             DCL        VAR(&FromObj1 ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ObjType1 ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&PosT     ) TYPE(*DEC) LEN(4)
             DCL        VAR(&NBRRCD   ) TYPE(*DEC) LEN(10 0)
 
/* QCLSCAN parameters  */
             DCL        VAR(&STRLEN) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&STRPOS) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&PATLEN) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&RESULT) TYPE(*DEC) LEN(3 0)
 
/* QCMDEXC parameters  */
             DCL        VAR(&CMD       ) TYPE(*CHAR) LEN(1000)
             DCL        VAR(&CMDLEN    ) TYPE(*DEC) LEN(15 5)
 
/* Error handling  */
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)
             DCL        VAR(&IN01) TYPE(*LGL)
 
             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2005')
 
/* Global monitor message */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ABNOR))
 
/* Create data area MIDASMSG in QTEMP */
             DLTDTAARA  DTAARA(QTEMP/MIDASMSG)
             MONMSG     MSGID(CPF0000)
             CRTDTAARA  DTAARA(QTEMP/MIDASMSG) TYPE(*CHAR) LEN(800) +
                          VALUE(' ')
 
/* Check remote system                                */
             PING       RMTSYS(&SYSTEM) MSGMODE(*QUIET *ESCAPE)
             MONMSG     MSGID(TCP3202 TCP3210) EXEC(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                          MSGDTA('0000Ping to remote location ' +
                          *CAT &SYSTEM *TCAT ' failed.') MSGTYPE(*DIAG)
                GOTO       CMDLBL(Abnor)
             ENDDO
 
/* Break down incoming parameters                     */
             CHGVAR     VAR(&TFile) VALUE(%SST(&RMTSAVF 1 10))
             CHGVAR     VAR(&TLIB) VALUE(%SST(&RMTSAVF 11 10))
             CHGVAR     VAR(&NoInList) VALUE(%SST(&FromobjL 1 2))
             CHGVAR     VAR(&NOOFOBJ) VALUE(%BIN(&NoInList))
             CHGVAR     VAR(&Len) VALUE(&NoOfObj*10)
             CHGVAR     VAR(%SST(&FROMOBJ 1 &Len)) +
                          VALUE(%SST(&FROMOBJL 3 &Len))
 
             CHGVAR     VAR(&NoInList) VALUE(%SST(&OBJTYPEL 1 2))
             CHGVAR     VAR(&NoOfTypes) VALUE(%BIN(&NoInList))
             CHGVAR     VAR(&Len) VALUE(&NoOfTypes*7)
             CHGVAR     VAR(%SST(&OBJTYPE 1 &Len)) +
                          VALUE(%SST(&OBJTYPEL 3 &Len))
 
/* If *LIBL specified, must be a specific object/type combination */
             IF         COND(&FromLib = '*LIBL') THEN(DO)
                IF         COND(&NOOFOBJ > 1 *OR &NOOFTYPES > 1) THEN(DO)
                   SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000If +
                          *LIBL is specified, only one object/type +
                          combination can be specified.') MSGTYPE(*DIAG)
                   GOTO       CMDLBL(Abnor)
                ENDDO
 
/* Check for generic or *ALL objects                  */
                CHGVAR     VAR(&STRLEN) VALUE(999)
                CHGVAR     VAR(&STRPOS) VALUE(1)
                CHGVAR     VAR(&PATLEN) VALUE(1)
                CALL       PGM(QCLSCAN) PARM(&FromObj &STRLEN &STRPOS '*' +
                             &PATLEN '0' '0' '' &RESULT)
 
                IF         COND(&RESULT > 0) THEN(DO)
                   SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000Use of +
                          *ALL or generic not allowed with *LIBL.') +
                          MSGTYPE(*DIAG)
                   GOTO       CMDLBL(Abnor)
                ENDDO
             ENDDO
 
/* If QTEMP is specified as the remote library, then must have RESTORE(*YES) */
             IF         COND(&TLIB = 'QTEMP' *AND &RESTORE *NE +
                          '*YES') THEN(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000If +
                          QTEMP is the save-file remote library, +
                          you must specify *YES on the restore +
                          (RESTORE) parameter.')  MSGTYPE(*DIAG)
                GOTO       CMDLBL(Abnor)
             ENDDO
 
/* Check for object existence                         */
             CHGVAR     VAR(&CMDLEN) VALUE(1000)
             CHGVAR     VAR(&COUNTER) VALUE(0)
             CHGVAR     VAR(&Pos) VALUE(1)
             CHGVAR     VAR(&PosT) VALUE(1)
             CHGVAR     VAR(&TCOUNTER) VALUE(0)
             DLTF       FILE(QTEMP/CHKFTPOBJ)
             MONMSG     MSGID(CPF2105)
             CHGVAR     VAR(&FromObj1) VALUE(%SST(&FromObj &POS 10))
ExistLoop:
             CHGVAR     VAR(&ObjType1) VALUE(%SST(&ObjType &PosT 7))
             CHGVAR     VAR(&CMD) VALUE('DSPOBJD OBJ(' *CAT &FROMLIB +
                          *TCAT '/' *CAT &FROMOBJ1 *TCAT ') +
                          OBJTYPE(' *CAT &OBJTYPE1 *TCAT ') +
                          OUTPUT(*OUTFILE) OUTFILE(QTEMP/CHKFTPOBJ) +
                          OUTMBR(*FIRST *ADD)')
             CALL       PGM(QCMDEXC) PARM(&CMD &CMDLEN)
             MONMSG     MSGID(CPF2123)
             CHGVAR     VAR(&PosT) VALUE(&PosT +7)
             CHGVAR     VAR(&TCOUNTER) VALUE(&TCOUNTER +1)
             IF         COND(&TCOUNTER < &NOOFTYPES) THEN(GOTO +
                          CMDLBL(EXISTLOOP))
 
             RTVMBRD    FILE(QTEMP/CHKFTPOBJ) NBRCURRCD(&NBRRCD)
             MONMSG     MSGID(CPF9812)
             IF         COND(&NBRRCD = 0) THEN(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                          MSGDTA('0000Object(s) ' *CAT &FROMOBJ1 +
                          *BCAT 'not found in ' *CAT &FROMLIB *BCAT 'or +
                          you have insufficient authority.') +
                          MSGTYPE(*DIAG)
                GOTO       CMDLBL(Abnor)
             ENDDO
 
             CLRPFM     FILE(QTEMP/CHKFTPOBJ)
             CHGVAR     VAR(&NBRRCD) VALUE(0)
             CHGVAR     VAR(&TCOUNTER) VALUE(0)
             CHGVAR     VAR(&COUNTER) VALUE(&COUNTER +1)
             CHGVAR     VAR(&PosT) VALUE(1)
             CHGVAR     VAR(&Pos) VALUE(&Pos +10)
             CHGVAR     VAR(&FromObj1) VALUE(%SST(&FromObj &POS 10))
 
             IF         COND(&TCOUNTER < &NOOFTYPES *AND &COUNTER < +
                          &NOOFOBJ) THEN(GOTO CMDLBL(EXISTLOOP))
 
             GOTO       CMDLBL(End)
 
 ABNOR:
 /* Recursive error.*/
             IF         COND(&IN01) THEN(DO)
                SNDPGMMSG  MSGID(CDF9898) MSGF(*LIBL/QCPFMSG) +
                             MSGDTA('Recursive error in pgm +
                             FTPOBJ_VC') MSGTYPE(*ESCAPE)
             ENDDO
             CHGVAR     VAR(&IN01) VALUE('1')
             SNDPGMMSG  MSGID(CPF0002) MSGF(QCPFMSG) MSGTYPE(*ESCAPE)
 
END:
 
             ENDPGM
