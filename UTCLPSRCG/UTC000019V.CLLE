/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas UT Validity checker for CFGSQLSEQ')             */
/*********************************************************************/
/*                                                                   */
/*       Midas - Utilities module                                    */
/*                                                                   */
/*       UTC000019V - Validity checker for CFGSQLSEQ                 */
/*                                                                   */
/*       (c) Misys International Banking Systems Ltd. 2011           */
/*                                                                   */
/*       Last Amend No. AR663527 *CREATE   Date 10Jan11              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       AR663527 - RAT Transaction reference number should be a     */
/*                  daily incremental number (Child: AR663528)       */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&SEQ &RESTART &INC &CACHE &ORDER +
                          &MINVAL &MAXVAL &CYCLE &INCBY)
 
             DCL        VAR(&SEQ) TYPE(*CHAR) LEN(20)
             DCL        VAR(&RESTART) TYPE(*CHAR) LEN(4)
             DCL        VAR(&INC) TYPE(*CHAR) LEN(5)
             DCL        VAR(&CACHE) TYPE(*CHAR) LEN(4)
             DCL        VAR(&ORDER) TYPE(*CHAR) LEN(8)
             DCL        VAR(&MINVAL) TYPE(*CHAR) LEN(4)
             DCL        VAR(&MAXVAL) TYPE(*CHAR) LEN(4)
             DCL        VAR(&CYCLE) TYPE(*CHAR) LEN(8)
             DCL        VAR(&INCBY) TYPE(*CHAR) LEN(12)
 
             DCL        VAR(&SEQNAME) TYPE(*CHAR) LEN(10)
             DCL        VAR(&SEQLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MINVALN) TYPE(*DEC) LEN(7 0)
             DCL        VAR(&MAXVALN) TYPE(*DEC) LEN(7 0)
             DCL        VAR(&RESTARTNON) TYPE(*DEC) LEN(7 0)
 
             DCL        VAR(&ERROR) TYPE(*CHAR) LEN(1)
             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)
 
             COPYRIGHT TEXT('(c) Misys International Banking Systems Ltd. +
                          2011')
 
/** Global monitor message. */
 
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))
 
/** Check that the library exists and that the user has */
/** authority to it. */
 
LIBEXTAUT:
             CHGVAR     VAR(&SEQLIB) VALUE(%SST(&SEQ 11 10))
             CHKOBJ     OBJ(&SEQLIB) OBJTYPE(*LIB) AUT(*EXECUTE)
             MONMSG     MSGID(CPF9801 CPF9802) EXEC(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                             MSGDTA('0000Library does not exist or +
                             user has insufficient authority +
                             (*EXECUTE).') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
/** Check that the sequence (data area) exists and that  */
/** the user has authority. */
 
SEQEXTAUT:
             CHGVAR     VAR(&SEQNAME) VALUE(%SST(&SEQ 1 10))
             CHKOBJ     OBJ(&SEQLIB/&SEQNAME) OBJTYPE(*DTAARA) +
                          AUT(*OBJALTER)
             MONMSG     MSGID(CPF9801 CPF9802 CPF9810) EXEC(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                             MSGDTA('0000Sequence does not exist or +
                             user has insufficient authority +
                             (*OBJALTER).') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
/** If minimum and maximum values are specified then check */
/** that the maximum is greater than the minimum. */
 
MINMAXVAL:
             CHGVAR     VAR(&MINVALN) VALUE(%BIN(&MINVAL))
             CHGVAR     VAR(&MAXVALN) VALUE(%BIN(&MAXVAL))
 
/** If both values are *SAME then skip processing. */
 
             IF         COND(&MINVALN *EQ 1000000 *AND &MAXVALN *EQ +
                          1000000) THEN(DO)
                GOTO       CMDLBL(NEXT01)
             ENDDO
 
/** If only one value is *SAME then report. */
 
             IF         COND(&MINVALN *EQ 1000000 *OR &MAXVALN *EQ +
                          1000000) THEN(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) +
                             MSGDTA('0000Both minimum and maximum +
                             values should be specified.') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
/** If either value is set to *NO***VAL then check that */
/** both have been set to NO***VAL. */
 
             IF         COND(&MINVALN *EQ 1111111 *AND &MAXVALN *EQ +
                          1111111) THEN(DO)
                GOTO       CMDLBL(NEXT01)
             ENDDO
             IF         COND(&MINVALN *EQ 1111111 *OR &MAXVALN *EQ +
                          1111111) THEN(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000If +
                             *NOMINVAL is specified then *NOMAXVAL +
                             should also be specified and vice +
                             versa.') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
/** If the minimum value is greater than or equal to the */
/** maximum value then report. */
 
             IF         COND(&MINVALN *GE &MAXVALN) THEN(DO)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000The +
                             maximum value must be larger than the +
                             minimum value.') MSGTYPE(*DIAG)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
/** Check that if a restart is requested that it does not */
/** clash with the minimum or maximum values. */
 
RSTMINMAX:
             CHGVAR     VAR(&RESTARTNON) VALUE(%BIN(&RESTART))
             IF         COND(&RESTARTNON *NE 1000000) THEN(DO)
                IF         COND(&RESTARTNON *LT &MINVALN) THEN(DO)
                   SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000The +
                                restart value must be greater than the +
                                minimum value.') MSGTYPE(*DIAG)
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ERROR)
                ENDDO
                IF         COND(&RESTARTNON *GT &MAXVALN) THEN(DO)
                   SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA('0000The +
                                restart value must be less than the +
                                maximum value.') MSGTYPE(*DIAG)
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ERROR)
                ENDDO
             ENDDO
 
NEXT01:
             GOTO       CMDLBL(ENDPGM)
 
ERROR:
 
/** If validity error then send message back to */
/** command . . . */
 
             IF         COND(&ERROR *EQ 'Y') THEN(DO)
                SNDPGMMSG  MSGID(CPF0002) MSGF(QCPFMSG) MSGTYPE(*ESCAPE)
             ENDDO
 
/** . . .  else send generic message. */
 
             ELSE       CMD(DO)
                IF         COND(&RECURSIVE *EQ 'N') THEN(DO)
                   CHGVAR     VAR(&RECURSIVE) VALUE('Y')
 
RCVMSG:
                   RCVMSG     MSGTYPE(*DIAG) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                                MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   IF         COND(&MSGID *NE ' ') THEN(DO)
                      SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                   MSGDTA(&MSGDTA) MSGTYPE(*DIAG)
                      GOTO       CMDLBL(RCVMSG)
                   ENDDO
                   RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                                MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
                ENDDO
             ENDDO
ENDPGM:
             ENDPGM
