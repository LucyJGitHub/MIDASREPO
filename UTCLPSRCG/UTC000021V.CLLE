/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas UT Validity checker for MDSPSRVPGM')            */
/*********************************************************************/
/*                                                                   */
/*       Midas - Utilities Module                                    */
/*                                                                   */
/*       UTC000021V - Validity checker for MDSPSRVPGM                */
/*                                                                   */
/*       (c) Finastra International Limited 2011                     */
/*                                                                   */
/*       Last Amend No. MD046248           Date 27Oct17              */
/*       Prev Amend No. CUT013  *CREATE    Date 19May11              */
/*                      XXXXXX             Date DDMmmYY              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD046248 - Finastra Rebranding                              */
/*       CUT013 - New utility to display service program information */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&SRVPGM &DETAIL &OUTFILE &OUTMBR &OUTPUT)
 
             DCL        VAR(&SRVPGM) TYPE(*CHAR) LEN(20)
             DCL        VAR(&DETAIL) TYPE(*CHAR) LEN(10)
             DCL        VAR(&OUTFILE) TYPE(*CHAR) LEN(20)
             DCL        VAR(&OUTMBR) TYPE(*CHAR) LEN(20)
             DCL        VAR(&OUTPUT) TYPE(*CHAR) LEN(8)
 
             DCL        VAR(&SRVPGMN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&SRVPGML) TYPE(*CHAR) LEN(10)
             DCL        VAR(&OUTFILEN) TYPE(*CHAR) LEN(10)
             DCL        VAR(&OUTFILEL) TYPE(*CHAR) LEN(10)
             DCL        VAR(&BASEFMT) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CURLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGTXT) TYPE(*CHAR) LEN(132)
             DCL        VAR(&MSGSUB) TYPE(*CHAR) LEN(30)
             DCL        VAR(&OFNOTEXIST) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&ERROR) TYPE(*CHAR) LEN(1)
             DCL        VAR(&FLDDTA) TYPE(*CHAR) LEN(2000)
             DCL        VAR(&RTNCODE) TYPE(*CHAR) LEN(7)
 
             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)
 
             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2011')
 
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))
 
             CHGJOB     SWS(00000000)
 
/* Break down variables. */
             CHGVAR     VAR(&SRVPGMN) VALUE(%SST(&SRVPGM 1 10))
             CHGVAR     VAR(&SRVPGML) VALUE(%SST(&SRVPGM 11 10))
             CHGVAR     VAR(&OUTFILEN) VALUE(%SST(&OUTFILE 1 10))
             CHGVAR     VAR(&OUTFILEL) VALUE(%SST(&OUTFILE 11 10))
 
/* Determine which base file is to be used from DETAIL parameter. */
             IF         COND(&DETAIL *EQ '*MODULE') THEN(DO)
                CHGVAR     VAR(&BASEFMT) VALUE('UTSPMDD0')
             ENDDO
             IF         COND(&DETAIL *EQ '*SRVPGM') THEN(DO)
                CHGVAR     VAR(&BASEFMT) VALUE('UTSPSPD0')
             ENDDO
             IF         COND(&DETAIL *EQ '*ACTGRPEXP') THEN(DO)
                CHGVAR     VAR(&BASEFMT) VALUE('UTSPEAD0')
             ENDDO
             IF         COND(&DETAIL *EQ '*ACTGRPIMP') THEN(DO)
                CHGVAR     VAR(&BASEFMT) VALUE('UTSPDID0')
             ENDDO
             IF         COND(&DETAIL *EQ '*COPYRIGHT') THEN(DO)
                CHGVAR     VAR(&BASEFMT) VALUE('UTSPCID0')
             ENDDO
             IF         COND(&DETAIL *EQ '*PROCEXP') THEN(DO)
                CHGVAR     VAR(&BASEFMT) VALUE('UTSPPED0')
             ENDDO
             IF         COND(&DETAIL *EQ '*DTAEXP') THEN(DO)
                CHGVAR     VAR(&BASEFMT) VALUE('UTSPDED0')
             ENDDO
             IF         COND(&DETAIL *EQ '*SIGNATURE') THEN(DO)
                CHGVAR     VAR(&BASEFMT) VALUE('UTSPSGD0')
             ENDDO
 
/* Check if the service program exists.  As *ALL or *generic is allowed then */
/*  use DSPOBJD *PRINT.                                                      */
             DSPOBJD    OBJ(&SRVPGML/&SRVPGMN) OBJTYPE(*SRVPGM) +
                          OUTPUT(*PRINT)
/* Specified service program not found. */
             MONMSG     MSGID(CPF2105) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&SRVPGMN *CAT &SRVPGML +
                             *CAT 'SRVPGM')
                RTVMSG     MSGID(CPF2105) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
/* No objects exist in the library value. */
             MONMSG     MSGID(CPF2123) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&SRVPGMN *CAT &SRVPGML)
                RTVMSG     MSGID(CPF2123) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
/* Authority issues. */
             MONMSG     MSGID(CPF2189) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&SRVPGMN *CAT &SRVPGML +
                             *CAT 'SRVPGM')
                RTVMSG     MSGID(CPF2189) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
             MONMSG     MSGID(CPF2182) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&SRVPGML)
                RTVMSG     MSGID(CPF2182) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
             MONMSG     MSGID(CPF2124) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE('          ' *CAT &SRVPGML)
                RTVMSG     MSGID(CPF2124) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
/* Specified library not found. */
             MONMSG     MSGID(CPF2110) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&SRVPGML)
                RTVMSG     MSGID(CPF2110) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
/* Check if the outfile already exists; if it does not then and the library */
/*  is *LIBL or *CURLIB then check authority to library ...                 */
             CHKOBJ     OBJ(&OUTFILEL/&OUTFILEN) OBJTYPE(*FILE) +
                          AUT(*CHANGE)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                CHGVAR     VAR(&OFNOTEXIST) VALUE('Y')
                IF         COND(&OUTFILEL *EQ '*LIBL') THEN(DO)
                   CHGVAR     VAR(&OUTFILEL) VALUE('*CURLIB')
                ENDDO
                IF         COND(&OUTFILEL *EQ '*CURLIB') THEN(DO)
                   RTVJOBA    CURLIB(&CURLIB)
                   IF         COND(&CURLIB *EQ '*NONE') THEN(DO)
                      CHGVAR     VAR(&CURLIB) VALUE('QGPL')
                   ENDDO
                   CHKOBJ     OBJ(&CURLIB) OBJTYPE(*LIB) AUT(*CHANGE)
                   MONMSG     MSGID(CPF9802) EXEC(DO)
                      CHGVAR     VAR(&MSGTXT) VALUE('User does not have +
                                   correct authority to the outfile library.')
                      CHGVAR     VAR(&ERROR) VALUE('Y')
                      GOTO       CMDLBL(ERROR)
                   ENDDO
                ENDDO
             ENDDO
/* ... and check that the library exists ... */
             MONMSG     MSGID(CPF9810) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&OUTFILEL)
                RTVMSG     MSGID(CPF9810) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
/* ... and check that the user has authority to the library. */
             MONMSG     MSGID(CPF9820) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&OUTFILEL)
                RTVMSG     MSGID(CPF9820) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
/* If the outfile does exist then check that user has authority to it. */
             MONMSG     MSGID(CPF9802) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&OUTFILEN *CAT &OUTFILEL)
                RTVMSG     MSGID(CPF9802) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
/* If the outfile does exist then check that is has correct format to */
/*  match requested DETAIL.                                           */
             IF         COND(&OFNOTEXIST *EQ 'N') THEN(DO)
                CALL       PGM(UTC000004) PARM(&OUTFILEN &OUTFILEL +
                             'UTC000021F' '*FIRST' '*REPLACE')
                IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                   GOTO       CMDLBL(ERROR)
                ENDDO
                OVRDBF     FILE(UPFFDSTPD) TOFILE(UTC000021F)
                CALL       PGM(UTAOFFDS) PARM(&OUTFILEN ' ' ' ' +
                             '*FIRST' &RTNCODE &FLDDTA)
                DLTOVR     FILE(UPFFDSTPD)
                IF         COND(&RTNCODE *NE ' ') THEN(DO)
                   CHGVAR     VAR(&MSGTXT) VALUE('There is a problem with +
                                the specified outfile.')
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ERROR)
                ENDDO
                IF         COND(%SST(&FLDDTA 28 1) *NE 'P' *OR +
                             %SST(&FLDDTA 47 10) *NE &BASEFMT) THEN(DO)
                   CHGVAR     VAR(&MSGSUB) VALUE(&OUTFILEN *CAT '          +
                                ' *CAT &BASEFMT)
                   RTVMSG     MSGID(CPF3061) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                                MSG(&MSGTXT)
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ERROR)
                ENDDO
             ENDDO
 
             GOTO       CMDLBL(ENDPGM)
 
ERROR:
/* If validity error then send message back to command ... */
             IF         COND(&ERROR *EQ 'Y') THEN(DO)
                CHGVAR     VAR(&MSGTXT) VALUE('0000' *TCAT &MSGTXT)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA(&MSGTXT) +
                             MSGTYPE(*DIAG)
                SNDPGMMSG  MSGID(CPF0002) MSGF(QCPFMSG) MSGTYPE(*ESCAPE)
             ENDDO
/* ...  else send generic message. */
             ELSE       CMD(DO)
                IF         COND(&RECURSIVE *EQ 'N') THEN(DO)
                   CHGVAR     VAR(&RECURSIVE) VALUE('Y')
RCVMSG:
                   RCVMSG     MSGTYPE(*DIAG) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                                MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   IF         COND(&MSGID *NE ' ') THEN(DO)
                      SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                   MSGDTA(&MSGDTA) MSGTYPE(*DIAG)
                      GOTO       CMDLBL(RCVMSG)
                   ENDDO
                   RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                                MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
                ENDDO
             ENDDO
 
ENDPGM:
             ENDPGM
