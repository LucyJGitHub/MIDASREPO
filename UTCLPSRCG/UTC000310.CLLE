/*********************************************************************/
/*XBI    OVRDBF FILE(UTC000310F) TOFILE(UPFDBATPD)                   */
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas UT Source / object cross check')                */
/*********************************************************************/
/*                                                                   */
/*       Midas - Utilities                                           */
/*                                                                   */
/*       UTC000310 - source / object cross check                     */
/*                                                                   */
/*       (c) Finastra International Limited 2007                     */
/*                                                                   */
/*       Last Amend No. MD060719           Date 10Nov22              */
/*       Prev Amend No. MD046248           Date 27Oct17              */
/*                      CPK030             Date 22Aug14              */
/*                      BUG27832A          Date 07Jul10              */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/*                      CUT011  *REWRITE   Date 12Dec07              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD060719 - Make sure SQLRPG are not reported in error,      */
/*                  make reporting of 'out of date' optional         */
/*       MD046248 - Finastra Rebranding                              */
/*       CPK030 - Previous bug fix not applied correctly             */
/*       BUG27832A - New SQLDTAARA member type.                      */
/*       CUT011 - Rewrite of command.  Make it more flexible and     */
/*                easier to maintain.                                */
/*                                                                   */
/*********************************************************************/
/**********  PGM        PARM(&SRCLIB &GLOBAL &ZONE)                                     /*MD060719*/
             PGM        PARM(&SRCLIB &RPTMTC &GLOBAL &ZONE)                             /*MD060719*/

             DCL        VAR(&SRCLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RPTMTC) TYPE(*CHAR) LEN(1)                                 /*MD060719*/
             DCL        VAR(&GLOBAL) TYPE(*CHAR) LEN(91)
             DCL        VAR(&ZONE) TYPE(*CHAR) LEN(95)

             DCL        VAR(&GLOBPFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&GLOBDBTYPE) TYPE(*CHAR) LEN(16)
             DCL        VAR(&GLOBDBLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&GLOBNDTYPE) TYPE(*CHAR) LEN(35)
             DCL        VAR(&GLOBNDLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ZONEPFX) TYPE(*CHAR) LEN(2)
             DCL        VAR(&ZONEDBTYPE) TYPE(*CHAR) LEN(20)
             DCL        VAR(&ZONEDBLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ZONENDTYPE) TYPE(*CHAR) LEN(35)
             DCL        VAR(&ZONENDLIB) TYPE(*CHAR) LEN(10)

             DCL        VAR(&GDB) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GND) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ZDB) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ZND) TYPE(*CHAR) LEN(1)
             DCL        VAR(&BINNO) TYPE(*CHAR) LEN(2)
             DCL        VAR(&NOGDB) TYPE(*INT)
             DCL        VAR(&NOGND) TYPE(*INT)
             DCL        VAR(&NOZDB) TYPE(*INT)
             DCL        VAR(&NOZND) TYPE(*INT)
             DCL        VAR(&DBPOS) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&EPOS) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&EVAL) TYPE(*DEC) LEN(2 0)
             DCL        VAR(&DBESTART) TYPE(*DEC) LEN(3 0)
             DCL        VAR(&POS) TYPE(*DEC) LEN(2 0)
             DCL        VAR(&COUNT) TYPE(*INT)
             DCL        VAR(&DBTYPE) TYPE(*CHAR) LEN(4)
             DCL        VAR(&NDTYPE) TYPE(*CHAR) LEN(7)
             DCL        VAR(&GM) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GP) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GT) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GV) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GDEV) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GCMD) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GOAM) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GSVP) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GPGM) TYPE(*CHAR) LEN(1)
             DCL        VAR(&DM) TYPE(*CHAR) LEN(1)
             DCL        VAR(&DP) TYPE(*CHAR) LEN(1)
             DCL        VAR(&DT) TYPE(*CHAR) LEN(1)
             DCL        VAR(&DV) TYPE(*CHAR) LEN(1)
             DCL        VAR(&DZ) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ZDEV) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ZCMD) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ZOAM) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ZSVP) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ZPGM) TYPE(*CHAR) LEN(1)
             DCL        VAR(&GDBTGTLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&GNDTGTLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ZDBTGTLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&ZNDTGTLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&RTNCODE) TYPE(*CHAR) LEN(1)
             DCL        VAR(&ERRORMSG) TYPE(*CHAR) LEN(100)
             DCL        VAR(&QUOTE) TYPE(*CHAR) LEN(1) VALUE('''')
             DCL        VAR(&SQLSTM) TYPE(*CHAR) LEN(80)
             DCL        VAR(&REPORT) TYPE(*CHAR) LEN(1) VALUE('N')

             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) VALUE(N)
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)

             DCLF       FILE(UTC000310F)

             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2007')

/* Global monitor message. */
             MONMSG     MSGID(CPF0000 MCH0000 RPG0000) EXEC(GOTO +
                          CMDLBL(ERROR))

             CHGJOB     SWS(00000000)

/* Create temporary file to hold messages for SRCOBJXCHK. */
             DLTF       FILE(QTEMP/UPERRMQT)
             MONMSG     MSGID(CPF2105)
             CRTPF      FILE(QTEMP/UPERRMQT) RCDLEN(100) TEXT('Temp. +
                          file for holding msgs from SRCOBJXCHK')

/* Create temporary source file for running SQL statements. */
             DLTF       FILE(QTEMP/RUNSQLSTM)
             MONMSG     MSGID(CPF0000)
             DLTF       FILE(QTEMP/RUNSQL)
             MONMSG     MSGID(CPF0000)
             CRTSRCPF   FILE(QTEMP/RUNSQLSTM) RCDLEN(112) +
                          MBR(RUNSQLSTM)
             RNMOBJ     OBJ(QTEMP/RUNSQLSTM) OBJTYPE(*FILE) +
                          NEWOBJ(RUNSQL)

/* Find out data about the global element.  As the element contains lists the */
/*  positions of values can vary.                                             */
/* Work out the start of the database element; this is actually stored after */
/*  the non-database data and its position may vary according to the values  */
/*  in the non-database section.                                             */
             CHGVAR     VAR(&BINNO) VALUE(%SST(&GLOBAL 3 2))
             CHGVAR     VAR(&EPOS) VALUE(%BIN(&BINNO))
             CHGVAR     VAR(&DBESTART) VALUE(&EPOS + 1)
/* Work out number in database list. */
             CHGVAR     VAR(&EPOS) VALUE(&DBESTART + 4)
             CHGVAR     VAR(&BINNO) VALUE(%SST(&GLOBAL &EPOS 2))
             CHGVAR     VAR(&EVAL) VALUE(%BIN(&BINNO))
             CHGVAR     VAR(&DBPOS) VALUE(&DBESTART + &EVAL)
             CHGVAR     VAR(&BINNO) VALUE(%SST(&GLOBAL &DBPOS 2))
             CHGVAR     VAR(&NOGDB) VALUE(%BIN(&BINNO))
/* Set flag depending on whether global database requests are found or not. */
             IF         COND(&NOGDB *EQ 0) THEN(DO)
                CHGVAR     VAR(&GDB) VALUE('N')
             ENDDO
             ELSE       CMD(DO)
                CHGVAR     VAR(&GDB) VALUE('Y')
             ENDDO

/* The start of the non-database element is a constant (7) so it is easier */
/*  to work out the number of non-database requests.                       */
             CHGVAR     VAR(&BINNO) VALUE(%SST(&GLOBAL 21 2))
             CHGVAR     VAR(&NOGND) VALUE(%BIN(&BINNO))
/* Set flag depending on whether global non-database requests are found or not. */
             IF         COND(&NOGND *EQ 0) THEN(DO)
                CHGVAR     VAR(&GND) VALUE('N')
             ENDDO
             ELSE       CMD(DO)
                CHGVAR     VAR(&GND) VALUE('Y')
             ENDDO

/* Fill in individual parameters for database, if any entered. */
             IF         COND(&GDB *EQ 'Y') THEN(DO)
                CHGVAR     VAR(&EPOS) VALUE(&DBESTART + 2)
                CHGVAR     VAR(&GLOBPFX) VALUE(%SST(&GLOBAL &EPOS 2))
                CHGVAR     VAR(&EPOS) VALUE(&DBESTART + 6)
                CHGVAR     VAR(&GLOBDBLIB) VALUE(%SST(&GLOBAL &EPOS 10))
                IF         COND(&GLOBDBLIB *NE '*PFX' *AND &GLOBDBLIB +
                             *NE ' ') THEN(DO)
                   CHGVAR     VAR(&GDBTGTLIB) VALUE(&GLOBDBLIB)
                ENDDO
                ELSE       CMD(DO)
                   CHGVAR     VAR(&GDBTGTLIB) VALUE('*PFX' *TCAT &GLOBPFX)
                ENDDO
                CHGVAR     VAR(&EPOS) VALUE(&DBPOS + 2)
                CHGVAR     VAR(&EVAL) VALUE(&NOGDB * 4)
                CHGVAR     VAR(&GLOBDBTYPE) VALUE(%SST(&GLOBAL &EPOS +
                             &EVAL))
/* Set on flags for type of compiles requested. */
                CHGVAR     VAR(&POS) VALUE(1)
                DOFOR      VAR(&COUNT) FROM(1) TO(&NOGDB)
                   CHGVAR     VAR(&DBTYPE) VALUE(%SST(&GLOBDBTYPE &POS 4))
                   IF         COND(&DBTYPE *EQ '*GM ') THEN(DO)
                      CHGVAR     VAR(&GM) VALUE('Y')
                   ENDDO
                   IF         COND(&DBTYPE *EQ '*GP ') THEN(DO)
                      CHGVAR     VAR(&GP) VALUE('Y')
                   ENDDO
                   IF         COND(&DBTYPE *EQ '*GTA') THEN(DO)
                      CHGVAR     VAR(&GT) VALUE('Y')
                   ENDDO
                   IF         COND(&DBTYPE *EQ '*GV ') THEN(DO)
                      CHGVAR     VAR(&GV) VALUE('Y')
                   ENDDO
                   CHGVAR     VAR(&POS) VALUE(&POS + 4)
                ENDDO
             ENDDO

/* Fill in individual parameters for non-database, if any entered. */
             IF         COND(&GND *EQ 'Y') THEN(DO)
                CHGVAR     VAR(&GLOBNDLIB) VALUE(%SST(&GLOBAL 11 10))
                CHGVAR     VAR(&GNDTGTLIB) VALUE(&GLOBNDLIB)
                CHGVAR     VAR(&EVAL) VALUE(&NOGND * 7)
                CHGVAR     VAR(&GLOBNDTYPE) VALUE(%SST(&GLOBAL 23 &EVAL))
/* Set on flags for type of compiles requested. */
                CHGVAR     VAR(&POS) VALUE(1)
                DOFOR      VAR(&COUNT) FROM(1) TO(&NOGND)
                   CHGVAR     VAR(&NDTYPE) VALUE(%SST(&GLOBNDTYPE &POS 7))
                   IF         COND(&NDTYPE *EQ '*DEV   ') THEN(DO)
                      CHGVAR     VAR(&GDEV) VALUE('Y')
                   ENDDO
                   IF         COND(&NDTYPE *EQ '*CMD   ') THEN(DO)
                      CHGVAR     VAR(&GCMD) VALUE('Y')
                   ENDDO
                   IF         COND(&NDTYPE *EQ '*OPMMOD') THEN(DO)
                      CHGVAR     VAR(&GOAM) VALUE('Y')
                   ENDDO
                   IF         COND(&NDTYPE *EQ '*SRVPGM') THEN(DO)
                      CHGVAR     VAR(&GSVP) VALUE('Y')
                   ENDDO
                   IF         COND(&NDTYPE *EQ '*PGM   ') THEN(DO)
                      CHGVAR     VAR(&GPGM) VALUE('Y')
                   ENDDO
                   CHGVAR     VAR(&POS) VALUE(&POS + 7)
                ENDDO
             ENDDO

/* Find out data about the zone element.  As the element contains lists the */
/*  positions of values can vary.                                           */
/* Work out the start of the database element; this is actually stored after */
/*  the non-database data and its position may vary according to the values  */
/*  in the non-database section.                                             */
             CHGVAR     VAR(&BINNO) VALUE(%SST(&ZONE 3 2))
             CHGVAR     VAR(&EPOS) VALUE(%BIN(&BINNO))
             CHGVAR     VAR(&DBESTART) VALUE(&EPOS + 1)
/* Work out number in database list. */
             CHGVAR     VAR(&EPOS) VALUE(&DBESTART + 4)
             CHGVAR     VAR(&BINNO) VALUE(%SST(&ZONE &EPOS 2))
             CHGVAR     VAR(&EVAL) VALUE(%BIN(&BINNO))
             CHGVAR     VAR(&DBPOS) VALUE(&DBESTART + &EVAL)
             CHGVAR     VAR(&BINNO) VALUE(%SST(&ZONE &DBPOS 2))
             CHGVAR     VAR(&NOZDB) VALUE(%BIN(&BINNO))
/* Set flag depending on whether zone database requests are found or not. */
             IF         COND(&NOZDB *EQ 0) THEN(DO)
                CHGVAR     VAR(&ZDB) VALUE('N')
             ENDDO
             ELSE       CMD(DO)
                CHGVAR     VAR(&ZDB) VALUE('Y')
             ENDDO

/* The start of the non-database element is a constant (7) so it is easier */
/*  to work out the number of non-database requests.                       */
             CHGVAR     VAR(&BINNO) VALUE(%SST(&ZONE 21 2))
             CHGVAR     VAR(&NOZND) VALUE(%BIN(&BINNO))
/* Set flag depending on whether zone non-database requests are found or not. */
             IF         COND(&NOZND *EQ 0) THEN(DO)
                CHGVAR     VAR(&ZND) VALUE('N')
             ENDDO
             ELSE       CMD(DO)
                CHGVAR     VAR(&ZND) VALUE('Y')
             ENDDO

/* Fill in individual parameters for database, if any entered. */
             IF         COND(&ZDB *EQ 'Y') THEN(DO)
                CHGVAR     VAR(&EPOS) VALUE(&DBESTART + 2)
                CHGVAR     VAR(&ZONEPFX) VALUE(%SST(&ZONE &EPOS 2))
                CHGVAR     VAR(&EPOS) VALUE(&DBESTART + 6)
                CHGVAR     VAR(&ZONEDBLIB) VALUE(%SST(&ZONE &EPOS 10))
                IF         COND(&ZONEDBLIB *NE '*PFX' *AND &ZONEDBLIB +
                             *NE ' ') THEN(DO)
                   CHGVAR     VAR(&ZDBTGTLIB) VALUE(&ZONEDBLIB)
                ENDDO
                ELSE       CMD(DO)
                   CHGVAR     VAR(&ZDBTGTLIB) VALUE('*PFX' *TCAT &ZONEPFX)
                ENDDO
                CHGVAR     VAR(&EPOS) VALUE(&DBPOS + 2)
                CHGVAR     VAR(&EVAL) VALUE(&NOZDB * 4)
                CHGVAR     VAR(&ZONEDBTYPE) VALUE(%SST(&ZONE &EPOS +
                             &EVAL))
/* Set on flags for type of compiles requested. */
                CHGVAR     VAR(&POS) VALUE(1)
                DOFOR      VAR(&COUNT) FROM(1) TO(&NOZDB)
                   CHGVAR     VAR(&DBTYPE) VALUE(%SST(&ZONEDBTYPE &POS 4))
                   IF         COND(&DBTYPE *EQ '*DM ') THEN(DO)
                      CHGVAR     VAR(&DM) VALUE('Y')
                   ENDDO
                   IF         COND(&DBTYPE *EQ '*DP ') THEN(DO)
                      CHGVAR     VAR(&DP) VALUE('Y')
                   ENDDO
                   IF         COND(&DBTYPE *EQ '*DTA') THEN(DO)
                      CHGVAR     VAR(&DT) VALUE('Y')
                   ENDDO
                   IF         COND(&DBTYPE *EQ '*DV ') THEN(DO)
                      CHGVAR     VAR(&DV) VALUE('Y')
                   ENDDO
                   IF         COND(&DBTYPE *EQ '*DZ ') THEN(DO)
                      CHGVAR     VAR(&DZ) VALUE('Y')
                   ENDDO
                   CHGVAR     VAR(&POS) VALUE(&POS + 4)
                ENDDO
             ENDDO

/* Fill in individual parameters for non-database, if any entered. */
             IF         COND(&ZND *EQ 'Y') THEN(DO)
                CHGVAR     VAR(&ZONENDLIB) VALUE(%SST(&ZONE 11 10))
                CHGVAR     VAR(&ZNDTGTLIB) VALUE(&ZONENDLIB)
                CHGVAR     VAR(&EVAL) VALUE(&NOZND * 7)
                CHGVAR     VAR(&ZONENDTYPE) VALUE(%SST(&ZONE 23 &EVAL))
/* Set on flags for type of compiles requested. */
                CHGVAR     VAR(&POS) VALUE(1)
                DOFOR      VAR(&COUNT) FROM(1) TO(&NOZND)
                   CHGVAR     VAR(&NDTYPE) VALUE(%SST(&ZONENDTYPE &POS 7))
                   IF         COND(&NDTYPE *EQ '*DEV   ') THEN(DO)
                      CHGVAR     VAR(&ZDEV) VALUE('Y')
                   ENDDO
                   IF         COND(&NDTYPE *EQ '*CMD   ') THEN(DO)
                      CHGVAR     VAR(&ZCMD) VALUE('Y')
                   ENDDO
                   IF         COND(&NDTYPE *EQ '*OPMMOD') THEN(DO)
                      CHGVAR     VAR(&ZOAM) VALUE('Y')
                   ENDDO
                   IF         COND(&NDTYPE *EQ '*SRVPGM') THEN(DO)
                      CHGVAR     VAR(&ZSVP) VALUE('Y')
                   ENDDO
                   IF         COND(&NDTYPE *EQ '*PGM   ') THEN(DO)
                      CHGVAR     VAR(&ZPGM) VALUE('Y')
                   ENDDO
                   CHGVAR     VAR(&POS) VALUE(&POS + 7)
                ENDDO
             ENDDO

/* Display list of source files. */
             DLTF       FILE(QTEMP/UTC000310F)
             MONMSG     MSGID(CPF0000)
             DLTF       FILE(QTEMP/SRCFILES)
             MONMSG     MSGID(CPF0000)
             CRTDUPOBJ  OBJ(UPFDBATPD) FROMLIB(*LIBL) OBJTYPE(*FILE) +
                          TOLIB(QTEMP) NEWOBJ(UTC000310F)
             DSPFD      FILE(&SRCLIB/*ALL) TYPE(*BASATR) +
                          OUTPUT(*OUTFILE) FILEATR(*PF) +
                          OUTFILE(QTEMP/SRCFILES)
             MONMSG     MSGID(CPF3012) EXEC(DO)
                CHGVAR     VAR(&ERRORMSG) VALUE('There are no source +
                             files to check.')
                CALL       PGM(UP008010) PARM('*WRITE' 'UTC000310' +
                             &ERRORMSG)
                CHGVAR     VAR(&REPORT) VALUE('Y')
                GOTO       CMDLBL(ENDPGM)
             ENDDO
             CPYF       FROMFILE(QTEMP/SRCFILES) +
                          TOFILE(QTEMP/UTC000310F) MBROPT(*REPLACE) +
                          FMTOPT(*MAP *DROP)

             CLRPFM     FILE(UTSRCXPD)

READFILE:
             RCVF
             MONMSG     MSGID(CPF0864) EXEC(DO)
                GOTO       CMDLBL(CROSSCHECK)
             ENDDO

             CHGVAR     VAR(&RTNCODE) VALUE('N')
             IF         COND(&ATDTAT *NE 'S') THEN(DO)
                CHGVAR     VAR(&ERRORMSG) VALUE(&ATFILE *BCAT 'is not a +
                             source file.')
                CALL       PGM(UP008010) PARM('*WRITE' 'UTC000310' +
                             &ERRORMSG)
                CHGVAR     VAR(&REPORT) VALUE('Y')
                GOTO       CMDLBL(READFILE)
             ENDDO

/* Ignore certain source files - /COPYs, skeletons, etc. */
             IF         COND(&ATFILE *EQ 'STDCRTPARM') THEN(DO)
                GOTO       CMDLBL(READFILE)
             ENDDO
             IF         COND(&ATFILE *EQ 'ZSRSRC') THEN(DO)
                GOTO       CMDLBL(READFILE)
             ENDDO
             IF         COND(&ATFILE *EQ 'GPZSRSRCG') THEN(DO)
                GOTO       CMDLBL(READFILE)
             ENDDO
             IF         COND(&ATFILE *EQ 'H') THEN(DO)
                GOTO       CMDLBL(READFILE)
             ENDDO
             IF         COND(%SST(&ATFILE 1 2) *EQ 'SK') THEN(DO)
                GOTO       CMDLBL(READFILE)
             ENDDO
             IF         COND(%SST(&ATFILE 3 3) *EQ 'CPY') THEN(DO)
                GOTO       CMDLBL(READFILE)
             ENDDO
             IF         COND(%SST(&ATFILE 1 8) *EQ 'QWINDSRC') THEN(DO)
                GOTO       CMDLBL(READFILE)
             ENDDO
             IF         COND(%SST(&ATFILE 9 2) *EQ 'QT') THEN(DO)
                GOTO       CMDLBL(READFILE)
             ENDDO
             IF         COND(%SST(&ATFILE 6 3) *EQ 'EXT') THEN(DO)
                GOTO       CMDLBL(READFILE)
             ENDDO

/* Call program to see if this source file is to be checked. */
             CALL       PGM(UT000310) PARM(&ATFILE &GM &GP &GT &GV +
                          &GDEV &GCMD &GOAM &GSVP &GPGM &DM &DP &DT +
                          &DV &DZ &ZDEV &ZCMD &ZOAM &ZSVP &ZPGM +
                          &GDBTGTLIB &GNDTGTLIB &ZDBTGTLIB +
                          &ZNDTGTLIB &RTNCODE)
             IF         COND(&RTNCODE *EQ 'E') THEN(DO)
                CHGVAR     VAR(&ERRORMSG) VALUE('Error in calling +
                             UT000310 for' *BCAT &ATFILE *TCAT '.')
                CALL       PGM(UP008010) PARM('*WRITE' 'UTC000310' +
                             &ERRORMSG)
                CHGVAR     VAR(&REPORT) VALUE('Y')
                GOTO       CMDLBL(READFILE)
             ENDDO
             IF         COND(&RTNCODE *EQ 'Y') THEN(DO)
                CHGVAR     VAR(&ERRORMSG) VALUE(&ATFILE *BCAT 'is not +
                             recognised by UT000310 as a valid source +
                             file.')
                CALL       PGM(UP008010) PARM('*WRITE' 'UTC000310' +
                             &ERRORMSG)
                CHGVAR     VAR(&REPORT) VALUE('Y')
                GOTO       CMDLBL(READFILE)
             ENDDO

             GOTO       CMDLBL(READFILE)

CROSSCHECK:
/* Call program to populate outfiles. */
             CALL       PGM(UTC000311) PARM(&SRCLIB)
             IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                CHGVAR     VAR(&ERRORMSG) VALUE('Error when calling +
                             UTC000311.')
                CALL       PGM(UP008010) PARM('*WRITE' 'UTC000310' +
                             &ERRORMSG)
                CHGVAR     VAR(&REPORT) VALUE('Y')
                GOTO       CMDLBL(ENDPGM)
             ENDDO

/* Call program to amend the objects outfile. */
             CALL       PGM(UT000311)
             IF         COND(%SWITCH(XXXXXX11)) THEN(DO)
                CHGVAR     VAR(&ERRORMSG) VALUE('Error when calling +
                             UT000311.')
                CALL       PGM(UP008010) PARM('*WRITE' 'UTC000310' +
                             &ERRORMSG)
                CHGVAR     VAR(&REPORT) VALUE('Y')
                GOTO       CMDLBL(ENDPGM)
             ENDDO

/* Run SQL statement to change 'SQLRPGLE' member type to 'RPGLE'.  This */
/*  is to fool the utility as object types of *MODULE or *PGM does not  */
/*  recognise attributes of 'SQLRPGLE'.                                 */
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBLIB =' *BCAT &QUOTE *TCAT 'SQLRPGLE' +
                          *TCAT &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLRPGLE *TCAT &QUOTE *TCAT ';')
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*CLEAR')
             CHGVAR     VAR(&SQLSTM) VALUE(' ')
/* SQL statement to set member type to 'RPGLE' if member type is 'SQLRPGLE'. */
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBSEU2 =' *BCAT &QUOTE *TCAT 'RPGLE' +
                          *TCAT &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLRPGLE *TCAT &QUOTE)
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*WRITE')
             RUNSQLSTM  SRCFILE(QTEMP/RUNSQL) SRCMBR(RUNSQLSTM) +
                          COMMIT(*NONE)

/* Run SQL statement to change 'SQLRPG' member type to 'RPG'.  This */                  /*MD060719*/
/*  is to fool the utility as object types of *MODULE or *PGM does not  */              /*MD060719*/
/*  recognise attributes of 'SQLRPGLE'.                                 */              /*MD060719*/
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBLIB =' *BCAT &QUOTE *TCAT 'SQLRPG' +
                          *TCAT &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLRPG *TCAT &QUOTE *TCAT ';')                   /*MD060719*/
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*CLEAR')                            /*MD060719*/
             CHGVAR     VAR(&SQLSTM) VALUE(' ')                                         /*MD060719*/
/* SQL statement to set member type to 'RPGLE' if member type is 'SQLRPGLE'. */         /*MD060719*/
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBSEU2 =' *BCAT &QUOTE *TCAT 'RPG' +
                          *TCAT &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLRPG *TCAT &QUOTE)                             /*MD060719*/
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*WRITE')                            /*MD060719*/
             RUNSQLSTM  SRCFILE(QTEMP/RUNSQL) SRCMBR(RUNSQLSTM) +
                          COMMIT(*NONE)                                                 /*MD060719*/

/* Run SQL statement to change 'SQLTBL' member type to 'PF'.  This */
/*  is to fool the utility as object types of *FILE does not       */
/*  recognise attributes of 'SQLTBL'.                              */
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBLIB =' *BCAT &QUOTE *TCAT 'SQLTBL' +
                          *TCAT &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLTBL *TCAT &QUOTE *TCAT ';')
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*CLEAR')
             CHGVAR     VAR(&SQLSTM) VALUE(' ')
/* SQL statement to set member type to 'PF' if member type is 'SQLTBL'. */
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBSEU2 =' *BCAT &QUOTE *TCAT 'PF' *TCAT +
                          &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLTBL *TCAT &QUOTE)
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*WRITE')
             RUNSQLSTM  SRCFILE(QTEMP/RUNSQL) SRCMBR(RUNSQLSTM) +
                          COMMIT(*NONE)

/* Run SQL statement to change 'SQLVIEW' member type to 'LF'.  This */
/*  is to fool the utility as object types of *FILE does not        */
/*  recognise attributes of 'SQLVIEW'.                              */
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBLIB =' *BCAT &QUOTE *TCAT 'SQLVIEW ' +
                          *TCAT &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLVIEW *TCAT &QUOTE *TCAT ';')
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*CLEAR')
             CHGVAR     VAR(&SQLSTM) VALUE(' ')
/* SQL statement to set member type to 'LF' if member type is 'SQLVIEW'. */
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBSEU2 =' *BCAT &QUOTE *TCAT 'LF' +
                          *TCAT &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLVIEW *TCAT &QUOTE)
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*WRITE')
             RUNSQLSTM  SRCFILE(QTEMP/RUNSQL) SRCMBR(RUNSQLSTM) +
                          COMMIT(*NONE)
                                                                                       /*BUG27832A*/
/* Run SQL statement to change 'SQLDTAARA' member type to 'DTAARA'.  */                /*BUG27832A*/
/* 'Library' field retains original source type.                     */                /*BUG27832A*/
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBLIB =' *BCAT &QUOTE *TCAT 'SQLDTAARA' +
                          *TCAT &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLDTAARA *TCAT &QUOTE *TCAT ';')               /*BUG27832A*/
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*CLEAR')                           /*BUG27832A*/
             CHGVAR     VAR(&SQLSTM) VALUE(' ')                                        /*BUG27832A*/
             CHGVAR     VAR(&SQLSTM) VALUE('update UTC00311FA set +
                          MBSEU2 =' *BCAT &QUOTE *TCAT 'DTAARA' *TCAT +
                          &QUOTE *BCAT 'where MBSEU2 =' *BCAT +
                          &QUOTE *TCAT SQLDTAARA *TCAT &QUOTE)                            /*CPK030*/
/**********               &QUOTE *TCAT SQLDTARA *TCAT &QUOTE)                */ /*BUG27832A CPK030*/
             CALL       PGM(UTWRTSQL) PARM(&SQLSTM '*WRITE')                           /*BUG27832A*/
             RUNSQLSTM  SRCFILE(QTEMP/RUNSQL) SRCMBR(RUNSQLSTM) +
                          COMMIT(*NONE)                                                /*BUG27832A*/

OPNQRYF:
             DLTF       FILE(QTEMP/UTSCOBQF)
             MONMSG     MSGID(CPF0000)

/* Find objects without corresponding source. */
             OPNQRYF    FILE((UTC00311FB) (UTC00311FA)) +
                          FORMAT(UTSCOBQF) JFLD((1/ODOBNM 2/MBNAME +
                          *EQ) (1/ODOBTP 2/MBSEU2)) +
                          JDFTVAL(*ONLYDFT) MAPFLD((SOOBJ ODOBNM) +
                          (SOOBJT ODCRTS) (SORECT '"O"') (SOOTXT +
                          ODOBTX) (SOMTXT MBMTXT) (SOMBNM MBNAME) +
                          (SOMBTP MBSEU2) (SOSRCF MBFILE) (SOSCHG +
                          'MBUPDD') (SOOCHG 'ODCDAT') (SOLIB MBLIB))
             CPYFRMQRYF FROMOPNID(UTC00311FB) TOFILE(QTEMP/UTSCOBQF) +
                          MBROPT(*ADD) CRTFILE(*YES) FMTOPT(*MAP *DROP)
             CLOF       OPNID(UTC00311FB)

/* Find source without corresponding object. */
             OPNQRYF    FILE((UTC00311FA) (UTC00311FB)) +
                          FORMAT(UTSCOBQF) JFLD((2/ODOBNM 1/MBNAME +
                          *EQ) (2/ODOBTP 1/MBSEU2)) +
                          JDFTVAL(*ONLYDFT) MAPFLD((SOOBJ ODOBNM) +
                          (SOOBJT ODCRTS) (SORECT '"S"') (SOOTXT +
                          ODOBTX) (SOMTXT MBMTXT) (SOMBNM MBNAME) +
                          (SOMBTP MBSEU2) (SOSRCF MBFILE) (SOSCHG +
                          'MBUPDD') (SOOCHG 'ODCDAT') (SOLIB MBLIB))
             CPYFRMQRYF FROMOPNID(UTC00311FA) TOFILE(QTEMP/UTSCOBQF) +
                          MBROPT(*ADD) CRTFILE(*YES) FMTOPT(*MAP *DROP)
             CLOF       OPNID(UTC00311FA)

/* Find source and objects matching where source has been changed after */
/*  object.                                                             */
             IF         COND(&RPTMTC *EQ 'Y') THEN(DO)                                  /*MD060719*/
             OPNQRYF    FILE((UTC00311FA) (UTC00311FB)) +
                          FORMAT(UTSCOBQF) QRYSLT('SOSCHD *GT +
                          SOOCHD') JFLD((2/ODOBNM 1/MBNAME *EQ) +
                          (2/ODOBTP 1/MBSEU2)) MAPFLD((SOOBJ +
                          ODOBNM) (SOOBJT ODCRTS) (SORECT '"M"') +
                          (SOOTXT ODOBTX) (SOMBNM MBNAME) (SOMBTP +
                          MBSEU2) (SOSRCF MBFILE) (SOMTXT MBMTXT) +
                          (SOSCHG MBUPDD) (MM '%SST(ODCDAT 1 2)') +
                          (DD '%SST(ODCDAT 3 2)') (YY '%SST(ODCDAT +
                          5 2)') (SOOCHG 'YY *CAT MM *CAT DD') +
                          (SOSCHD 'MBUPDD *CAT SOSCHG *CAT MBUPDT') +
                          (SOOCHD 'ODCCEN *CAT SOOCHG *CAT ODCTIM') +
                          (SOLIB MBLIB))
             CPYFRMQRYF FROMOPNID(UTC00311FA) TOFILE(QTEMP/UTSCOBQF) +
                          MBROPT(*ADD) CRTFILE(*YES) FMTOPT(*MAP *DROP)
             CLOF       OPNID(UTC00311FA)
             ENDDO                                                                      /*MD060719*/

/* Call program to produce report. */
             OVRDBF     FILE(UTSCOBQF) TOFILE(QTEMP/UTSCOBQF)
/**********  CALL       PGM(UT000312) PARM(&SRCLIB) */                                  /*MD060719*/
             CALL       PGM(UT000312) PARM(&SRCLIB &GLOBNDLIB &ZONENDLIB)               /*MD060719*/
             DLTOVR     FILE(UTSCOBQF)

             GOTO       CMDLBL(ENDPGM)

ERROR:
             IF         COND(&RECURSIVE *EQ 'N') THEN(DO)
                CHGVAR     VAR(&RECURSIVE) VALUE('Y')
RCVMSG:
                RCVMSG     MSGTYPE(*DIAG) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                             MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                IF         COND(&MSGID *NE ' ') THEN(DO)
                   SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                MSGDTA(&MSGDTA) MSGTYPE(*DIAG)
                   GOTO       CMDLBL(RCVMSG)
                ENDDO
                RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                             MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                             MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
             ENDDO

ENDPGM:
             IF         COND(&REPORT *EQ 'Y') THEN(DO)
                CALL       PGM(UP008010) PARM('*REPORT' 'UTC000310' ' ')
                MONMSG     MSGID(CPF0000 RPG0000)
                CHGSPLFA   FILE(UP008010P1) SPLNBR(*LAST) +
                             OUTQ(&SRCLIB/SRCOBJXCHK) USRDTA(SRCOBJXCHK)
                MONMSG     MSGID(CPF0000 RPG0000)
             ENDDO

             ENDPGM
