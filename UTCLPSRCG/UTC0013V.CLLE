/*********************************************************************/
/*STD    CLPBASEBND                                                  */
/*EXI    TEXT('Midas UT FETCH validity checker')                     */
/*********************************************************************/
/*                                                                   */
/*       Midas - Utilities Module                                    */
/*                                                                   */
/*       UTC0013V - Validity checker for FETCH command               */
/*                                                                   */
/*       (c) Finastra International Limited 2012                     */
/*                                                                   */
/*       Last Amend No. MD046248           Date 27Oct17              */
/*       Prev Amend No. CUT015  *CREATE    Date 19Jun12              */
/*                      XXXXXXXX           Date DDMmmYY              */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*       MD046248 - Finastra Rebranding                              */
/*       CUT015 - Rewrite for Midas Plus naming conventions.         */
/*                                                                   */
/*********************************************************************/
             PGM        PARM(&MBR &TYPE &PSRCF &MOD &TOMBR &OVERWRITE)
 
             DCL        VAR(&MBR) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TYPE) TYPE(*CHAR) LEN(6)
             DCL        VAR(&PSRCF) TYPE(*CHAR) LEN(20)
             DCL        VAR(&MOD) TYPE(*CHAR) LEN(2)
             DCL        VAR(&TOMBR) TYPE(*CHAR) LEN(10)
             DCL        VAR(&OVERWRITE) TYPE(*CHAR) LEN(4)
 
             DCL        VAR(&TOSRCF) TYPE(*CHAR) LEN(20)
             DCL        VAR(&TOSRC) TYPE(*CHAR) STG(*DEFINED) +
                          LEN(10) DEFVAR(&TOSRCF)
             DCL        VAR(&TOLIB) TYPE(*CHAR) STG(*DEFINED) +
                          LEN(10) DEFVAR(&TOSRCF 11)
             DCL        VAR(&LIBPOS) TYPE(*DEC) LEN(3 0) VALUE(1)
             DCL        VAR(&LIBS) TYPE(*CHAR) LEN(500)
             DCL        VAR(&LIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGTXT) TYPE(*CHAR) LEN(132)
             DCL        VAR(&MSGSUB) TYPE(*CHAR) LEN(30)
 
             DCL        VAR(&ERROR) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&RECURSIVE) TYPE(*CHAR) LEN(1) VALUE('N')
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA) TYPE(*CHAR) LEN(100)
 
             COPYRIGHT TEXT('(c) Finastra International Limited +
                          2012')
 
             MONMSG     MSGID(CPF0000 MCH0000) EXEC(GOTO CMDLBL(ERROR))
 
             CHGVAR     VAR(&TOSRCF) VALUE(&PSRCF)
/* Check that data area FETCH exists in the library list. */
             CHKOBJ     OBJ(FETCH) OBJTYPE(*DTAARA) AUT(*USE)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE('FETCH     ' *CAT '*LIBL')
                RTVMSG     MSGID(CPF9801) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
             MONMSG     MSGID(CPF9802) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE('FETCH     ' *CAT '*LIBL')
                RTVMSG     MSGID(CPF9802) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
/* Check that the data area is populated and that all the libraries exist. */
             RTVDTAARA  DTAARA(FETCH) RTNVAR(&LIBS)
             CHGVAR     VAR(&LIB) VALUE(%SST(&LIBS &LIBPOS 10))
             IF         COND(&LIB *EQ ' ') THEN(DO)
                CHGVAR     VAR(&MSGTXT) VALUE('Data area FETCH does +
                             not have any data.')
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
             DOWHILE    COND(&LIB *NE ' ')
                CHKOBJ     OBJ(&LIB) OBJTYPE(*LIB) AUT(*USE)
                MONMSG     MSGID(CPF9801 CPF9802) EXEC(DO)
                   CHGVAR     VAR(&MSGTXT) VALUE('Either library' *BCAT +
                                &LIB *BCAT 'does not exist or there is +
                                not enough authority.')
                   CHGVAR     VAR(&ERROR) VALUE('Y')
                   GOTO       CMDLBL(ERROR)
                ENDDO
                CHGVAR     VAR(&LIBPOS) VALUE(&LIBPOS + 10)
                CHGVAR     VAR(&LIB) VALUE(%SST(&LIBS &LIBPOS 10))
             ENDDO
 
/* Check that the 'to' library exists. */
             IF         COND(&TOLIB *EQ ' ') THEN(DO)
                CHGVAR     VAR(&MSGTXT) VALUE('A value for the "to" +
                             library must be entered.')
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
             CHKOBJ     OBJ(&TOLIB) OBJTYPE(*LIB) AUT(*CHANGE)
             MONMSG     MSGID(CPF9801) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&TOLIB *CAT 'QSYS')
                RTVMSG     MSGID(CPF9801) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
             MONMSG     MSGID(CPF9802) EXEC(DO)
                CHGVAR     VAR(&MSGSUB) VALUE(&TOLIB *CAT 'QSYS')
                RTVMSG     MSGID(CPF9802) MSGF(QCPFMSG) MSGDTA(&MSGSUB) +
                             MSG(&MSGTXT)
                CHGVAR     VAR(&ERROR) VALUE('Y')
                GOTO       CMDLBL(ERROR)
             ENDDO
 
 
             GOTO       CMDLBL(ENDPGM)
 
ERROR:
/* If validity error then send message back to command . . . */
             IF         COND(&ERROR *EQ 'Y') THEN(DO)
                CHGVAR     VAR(&MSGTXT) VALUE('0000' *TCAT &MSGTXT)
                SNDPGMMSG  MSGID(CPD0006) MSGF(QCPFMSG) MSGDTA(&MSGTXT) +
                             MSGTYPE(*DIAG)
                SNDPGMMSG  MSGID(CPF0002) MSGF(QCPFMSG) MSGTYPE(*ESCAPE)
             ENDDO
/* . . .  else send generic message. */
             ELSE       CMD(DO)
                IF         COND(&RECURSIVE *EQ 'N') THEN(DO)
                   CHGVAR     VAR(&RECURSIVE) VALUE('Y')
RCVMSG:
                   RCVMSG     MSGTYPE(*DIAG) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                                MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   IF         COND(&MSGID *NE ' ') THEN(DO)
                      SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                   MSGDTA(&MSGDTA) MSGTYPE(*DIAG)
                      GOTO       CMDLBL(RCVMSG)
                   ENDDO
                   RCVMSG     MSGTYPE(*EXCP) MSGDTA(&MSGDTA) MSGID(&MSGID) +
                                MSGF(&MSGF) SNDMSGFLIB(&MSGFLIB)
                   SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                                MSGDTA(&MSGDTA) MSGTYPE(*ESCAPE)
                ENDDO
             ENDDO
 
ENDPGM:
             ENDPGM
