     H DEBUG
     H COPYRIGHT('(c) Finastra International Limited 2018')
      *****************************************************************
/*STD *  RPGSQLBND                                                    *
/*EXI *  TEXT('CGL002 Initialization Program')
      *****************************************************************
      *                                                               *
      *  Midas - General Ledger                                       *
      *                                                               *
      *  UT000815 - CGL002 Initialization Program                     *
      *                                                               *
      *  Function: The purpose of the pgm is to Add the Action Code O *
      *            in the Menu Item for Journal Entry                 *
      *                                                               *
      *  (c) Finastra International Limited 2018                      *
      *                                                               *
      *  Last Amend No. MD056561           Date 31Aug20               * 
      *  Prev Amend No. MD049728 *CREATE   Date 12Mar18               *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *  MD056561 - Deliverable Data Split for SFMENUPD and GPMTXTPD  *
      *  MD049728 - CGL002 Initialization program to insert Action    *
      *             code O                                            *
      *                                                               *
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ F-specs                              ¦
      ** ¦ =======                              ¦
      ** +--------------------------------------+

      *****************************************************************
      /EJECT
      *****************************************************************
      ** +--------------------------------------+
      ** ¦ D-specs                              ¦
      ** ¦ =======                              ¦
      ** +--------------------------------------+
      *
     D StrippedINDX    S             10
     D ActionCode      S              1
     D MIAAC           S              2  0
     D PermType        S              8

     D RECCNT          S              2  0
     D PERMM         E DS                  EXTNAME(MITB_PERMM)
     D*SFMNU***      E DS                  EXTNAME(SFMENUPD)                                MD056561
     D SFMNU         E DS                  EXTNAME(SFMNUJW0)                                MD056561
     D  ACTION               158    167
     D  MIAC1                158    158
     D  MIAC2                159    159
     D  MIAC3                160    160
     D  MIAC4                161    161
     D  MIAC5                162    162
     D  MIAC6                163    163
     D  MIAC7                164    164
     D  MIAC8                165    165
     D  MIAC9                166    166
     D  MIAC10               167    167
     D  XMARTF         S                   LIKE(PMARTF)
     D  XMARTD         S                   LIKE(PMARTD)

      /free

       PermType = 'MI_CORE_';
       StrippedINDX = '0000001638';
       ActionCode = 'O';
       XMARTF = 'MI_MNU_CORE_0000001638_JournalEntry_O';
       XMARTD = 'GeneralLedger JournalEntry O';

       EXEC SQL
        set option commit = *CHG;

       // Process SFMENUPD. Add Action Code 'O' if not existing.

       EXEC SQL
        Declare SFcursor cursor for
        Select *
       //**from*SFMENUPD                                                                  //MD056561
        from SFMNUCTD                                                                     //MD056561
        where MIINDX = :StrippedINDX;

       EXEC SQL
        Open SFcursor;

       EXEC SQL
        Fetch Next
        from SFcursor
        into :SFMNU;

       // Check SFMENUPD for existence of Acton Code 'O'

       If SQLCode = 0;
          MIAC1 = MIAAC1;
          MIAC2 = MIAAC2;
          MIAC3 = MIAAC3;
          MIAC4 = MIAAC4;
          MIAC5 = MIAAC5;
          MIAC6 = MIAAC6;
          MIAC7 = MIAAC7;
          MIAC8 = MIAAC8;
          MIAC9 = MIAAC9;
          MIAC10 = MIAAC10;
          MIAAC = %SCAN (ActionCode : ACTION);

          // If Action Code 'O' is not found, check for next available blank Action Code Field

          If MIAAC = 0;
             MIAAC = %SCAN (' ' : ACTION);

             // If All Action Code Fields are used then fail and exit program

             If MIAAC = 0;
               ExSR *PSSR;
             Else;
               ACTION = %REPLACE (ActionCode : ACTION : MIAAC : 1);
               EXEC SQL
          //     Update SFMENUPD set                                                      //MD056561
                 Update SFMNUCTD set                                                      //MD056561
                   MIAAC1 = :MIAC1,
                   MIAAC2 = :MIAC2,
                   MIAAC3 = :MIAC3,
                   MIAAC4 = :MIAC4,
                   MIAAC5 = :MIAC5,
                   MIAAC6 = :MIAC6,
                   MIAAC7 = :MIAC7,
                   MIAAC8 = :MIAC8,
                   MIAAC9 = :MIAC9,
                   MIAAC10 = :MIAC10
                 where MIINDX = :StrippedINDX;
             EndIf;

             // Process MITB_PERMM. Insert Permission for Action Code 'O'

             EXEC SQL
              Declare PEcursor cursor for
              Select count(*)
              from MITB_PERMM
                where PMINDX = :StrippedINDX and PMACTC = :ActionCode;

             EXEC SQL
              Open PEcursor;

             EXEC SQL
              Fetch Next
              from PEcursor
              into :RECCNT;

             EXEC SQL
              Close PEcursor;

             // If Permission is NOT found in MITB_PERMM then
             // proceed with INSERT into BFTC tables
             If RECCNT = 0;
                EXEC SQL
                  Insert into MITB_PERMM
                    Values (
                      :StrippedINDX, :ActionCode, :XMARTF, :XMARTD);

                If SQLCode = 0;
                   EXEC SQL
                    Insert into BFTB_RESOURCE (
                     BFIDPK, BFARTEFACTID, BFTYPE,
                     BFDISPLAYNAME, BFDESCRIPTION,
                     BFSCMVERSION
                     )
                    Values (
                     concat('MI', concat(:StrippedINDX, :ActionCode)),
                     :XMARTF, 101, :XMARTD, :XMARTD,
                     'UNVERSIONED'
                    );

                   EXEC SQL
                    Insert into BFTB_PERMISSION (
                      BFIDPK, BFPERMISSIONNAME, BFLONGDESCRIPTION,
                      VERSIONNUM, BFSHORTDESCRIPTION, BFALLOWINOFFLINE,
                      BFREADONLY)
                    Values (
                      concat('MI', concat(:StrippedINDX, :ActionCode))
                    , concat(concat(concat(
                        replace(replace(:PermType,'*',''),'O','')
                        , :StrippedINDX),'_'),:ActionCode)
                    , :XMARTD, 0, :XMARTD, 1, 1
                    );

                   EXEC SQL
                    Insert into BFTB_RESOURCEPERM (
                      BFIDPK, BFRESOURCEID, BFPERMISSIONID, VERSIONNUM)
                    Values (
                      concat('MIRP', concat(:StrippedINDX, :ActionCode))
                    , :XMARTF
                    , concat('MI', concat(:StrippedINDX, :ActionCode))
                    , 1
                    );
                EndIf;

             EndIf;

          EndIf;
       Else;
          ExSR *PSSR;
       EndIf;

       EXEC SQL
        Close SFcursor;

       EXEC SQL
        Commit;

       Eval *INLR = *ON;
       Return;

      /end-free

      /EJECT
      *********************************************************************
      *                                                                   *
      * *PSSR  - Program exception error routine                          *
      *          Called automatically if a program error occurs,          *
      *          or directly by the program code using EXSR.              *
      *          This subroutine DUMPs the program just once.             *
      *                                                                   *
      * Called by: (**calling routines**)                                 *
      *                                                                   *
      * Calls: None                                                       *
      *                                                                   *
      *********************************************************************
     C     *PSSR         BegSR

     C                   Dump
      /free

        EXEC SQL
         Rollback;
        Eval *INU7 = *ON;
        Eval *INU8 = *ON;
        Eval *INLR = *ON;
        Return;
      /end-free
     C                   EndSR
