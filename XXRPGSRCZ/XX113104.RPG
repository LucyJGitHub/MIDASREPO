     H        1
      *****************************************************************
/*STD *  RPGBASE                                                      *
/*EXI *  TEXT('Midas ME GCMS file extract to I.M.M.')                 *
      *****************************************************************
      *                                                               *
      *  Midas - ME Module                                            *
      *                                                               *
      ***MEJ004*-*GCMS*Messages*for*I.M.M.*****************************                   JMI113
      *  XX113104 - GCMS Messages for I.M.M.                          *                   JMI113
      *                                                               *
      *  Function:  This program extracts GCMS instructions & create  *
      *  the I.M.M files.                                             *
      *                                                               *
      ***Called*By:*MECNNN2*-******************************************                   JMI113
      *  Called By: XXC113102                                         *                   JMI113
      *  Calls    : ME1020  - Add network message to database         *
      *             ME1030  - Verify network message                  *
      *             MEC1304 - Send Prompt to ME FT IMM control        *
      *                                                               *
      ***(c)*Misys*International*Banking*Systems*Ltd.*2007*************                   JMI113
      *  (c) Finastra International Limited 2018                      *                   JMI113
      *                                                               *
      *  Last Amend No. JMI113             Date 29May18               *
      *  Prev Amend No. JMI019             Date 31Oct07               *
      *                 JMI019  *CREATE    Date 21Feb07               *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *  JMI113 - Midas GCMS Interface. Upgrade to FBM 2.1            *
      *  JMI019 - Midas GCMS Interface                                *
      *  JMI019 - Midas GCMS Interface                                *
      *                                                               *
      *****************************************************************
      *                                                               *
      *  Use of indicators.                                           *
      *                                                               *
      *  50    First cycle                                            *
      ***60****EOF*on*MGGCMXL0*****************************************                   JMI113
      ***61****EOF*on*MGGCMMPD*****************************************                   JMI113
      *  60    EOF on XXGCMXL0                                        *                   JMI113
      *  61    EOF on XXGCMMPD                                        *                   JMI113
      *  62    General work indicator                                 *
      *  63    General work indicator                                 *
      *  64    Shut down of job requested                             *
      *  90    General Work Indicator                                 *
      *                                                               *
      *  U7/U8 Error Ocurred                                          *
      *  LR    End program                                            *
      *                                                               *
      *****************************************************************
      *                                                               *
      *  S U B R O U T I N E  I N D E X                               *
      *                                                               *
      *  SRINIT - Initialise and define fields                        *
      *  SRDETL - Detail Processing                                   *
      *  SREND  - End Program                                         *
      *  SRVALD - Validate GCMS Message                               *
      *  SRFNTS - Extract GCMS message datas into array SWD           *
      *  SRDTLS - Add Incoming Message Details                        *
      *  SRHEAD - Add Incoming Message Control                        *
      *  SRAUTO - Prompt FT Auto Generation                           *
      *  SRBLK1 - Process Block Identifier 1                          *
      *  SRBLK2 - Process Block Identifier 2                          *
      *  SRBLK3 - Process Block Identifier 3                          *
      *  SRBLK4 - Process Block Identifier 4                          *
      *  SRBLK5 - Process Block Identifier 5                          *
      *  SRBLKS - Process Block Identifier S                          *
      *  SRBLOK - Search for position of next Block I.D               *
      *  SRDATA - Extract Data String Details                         *
      *  SRUPDT - Add Incoming Message Detail Line To Database        *
      *  SRC2   - Find start of next line delimiter                   *
      *  SRPART - Add Incoming Message Midas Transaction Control      *
      *  SRDAT4 - Extract Tag Message Line Data                       *
      *  SREXPT - Extract Part Details from the message               *
      *  SREXC2 - Extract 2nd line of tag details                     *
      *  SREXAM - Extract Value Date/Currency/Amount details          *
      *                                                               *
      *****************************************************************
     F**********MGGCMXL0UF  E           K        DISK         KINFSR SRFILE     UC        JMI113
     FXXGCMXL0UF  E           K        DISK         KINFSR SRFILE     UC                  JMI113
     F                                              KCOMIT
      *
      *  GCMS index file
      *
     F**********MGGCMMPDIF  E           K        DISK         KINFSR SRFILE     UC
     FXXGCMMPDIF  E           K        DISK         KINFSR SRFILE     UC                  JMI113
      *                                                                                   JMI113
      *  GCMS incoming message data file
      *
     F/EJECT
     E                    CPY@    1   1 80
      *
      *  Copyright table
      *
      *  /Copy point for Arrays
      *
     E/COPY MECPYSRC,SRERRE
      *
      *  Copysource for error processing
      *
     E                    SWD      9999  1
      *
      *  Swift Data
      *
     E                    TTAG   10  60  3   TFMT    1
      *
      *  Value Date/Currency/Amount formats for tags 30 to 34
      *
     E                    STYP    1  22  3   STAG    3
      *
      *  Message Type/Tag no. that denotes start of a new Part No.
      *
     E                    RTYP    1  10  3   RTAG    3
      *
      *  Message Type/Tag No. that denotes source of Transaction Ref.
      *
     E                    FLA        17  1               format field
      *
      *  Seventeen long field for substitution of "," for ","
      *
     E/EJECT
     ICPYR@#      DS
      *
      *  Data structure for compilation  - Copyright insertion
      *
     I                                        1  80 CPY@
     I                                        1  20 CPY@##
      *
     I/COPY MECPYSRC,SRERRI
      *
      *  End of Program Error Processing copysource
      *
     IRUNDTA    E DSRUNDAT
      *
      *  Define rundat data area
      *
     I**********SDGCMS    E DSSDGCMSPD                                                    JMI113
     ISDGCMS    E DSXXGCMSPD                                                              JMI113
      *
      *  Define GCMS interface ICD
      *
     IINCR      E DSMEINCRPD
      *
      *  Define Incoming Message Control data structure
      *
     IINDT      E DSMEINDTPD
      *
      *  Define Incoming Message Detail data structure
      *
     IINMP      E DSMEINMPPD
      *
      *  Define Incoming Message Part Detail data structure
      *
     IINMC      E DSMEINMCPD
      *
      *  Define Verification of message data structure
      *
     ISDBANK    E DSSDBANKPD
      *
      *   Bank details
      *
     IDSFDY     E DSDSFDY
      *
      *   First data structure for access program; short data structure
      *
     IDSSDY     E DSDSSDY
      *   Second DS for access programs; long data structure
      *
      *
      *  Define parameters to be passed for message checking
      *
     IW1DATA      DS                            512
      *
      *  Define data structure used to pass file data structures
      *
     IDSSTID      DS
      *
      *  Breakdown of Incoming Message Sender field
      *
     I                                        1  12 STID
     I                                        1   8 STID1
     I                                        9   9 STID2
     I                                       10  12 STID3
     IDSSNDR      DS
      *
      *  Construct Sender field
      *
     I                                        1  20 SNDR
     I                                        1   8 SNDR1
     I                                        9  11 SNDR2
     I                                       12  20 SNDR3
      *
     IDSBLK2      DS
      *
      *  Breakdown of Block 2 data
      *
      *           Input/Output Identifier
     I                                        1   1 B2IO
      *           Message Type
     I                                        2   40B2TYP
      *           Input Time (sender)
     I                                        5   80B2INTI
      *           Mir/Input Date (sender)
     I                                        9  36 B2MIR
     I                                        9  14 B2INTD
      *           Output Date (receiver)
     I                                       37  420B2OUTD
      *           Output Time (receiver)
     I                                       43  460B2OUTT
      *           Message Priority
     I                                       47  47 B2PTY
      *
     IDSTAG       DS
      *
      *  Breakdown Tag details for message part processing
      *
     I                                        1   5 WKTAG
     I                                        1   3 PTAG
     I                                        2   4 PTAGP
      *
     IDSMSG       DS
     I                                        1  25 DMSG
      *
      *  Breakdown message details for Date/Amount/Currency
      *  Format 1
      *
      *             Tag 30                } Date only
      *         and Tag 31 (all formats)  }
      *
      *             Tag 32 (A,C,D,P,R,S)  }
      *         and Tag 33 (A,C,D,P,R)    } Date/Currency/Amount
      *         and Tag 34 (A,C,D,P,R)    }
      *
      *             Tag 32 (T)            } Date (ISO form)/Ccy/Amt
      *
      *             Tag 32 (K)            } Maturity Period/Ccy/Amt
      *         and Tag 33 (K)            }
      *
     I                                        1   60D1DTE
     I                                        1   1 D1MTY
     I                                        2   40D1MNO
     I                                        5   6 D1MIN
      *
     I                                        7   9 D1CCY
     I                                       10  24 D1AMT
      *
      *  Format 2
      *
      *             Tag 32 (B,G,M)        }
      *         and Tag 33 (B,E,F,S,T,V)  }
      *         and Tag 33 (G)            } Currency/Amount
      *         and Tag 34 (B)            }
      *
      *             Tag 32 (E)            } Currency Only
      *
      *             Tag 32 (L)            } Currency/Amount (optional)
      *
      *             Tag 32 (F)            } Unit of metal or coin/Qty
      *
     I                                        1   3 D2CCY
     I                                        4  18 D2AMT
      *
      *  Format 3
      *
      *             Tag 32 (N)            } Negative Ind. (optional)
      *         and Tag 33 (N)            } plus Date/Currency/Amount.
      *         and Tag 34 (N)            } If no ind, use format A
      *
     I                                        1   1 D3NEG
     I                                        2   70D3DTE
     I                                        8  10 D3CCY
     I                                       11  25 D3AMT
     I                                        7   7 D3C7
      *
      *  Format 4
      *
      *             Tag 32 (H)            } Neg Ind. (optional) plus
      *         and Tag 34 (E)            } plus Currency/Amount
      *                                   } If no ind, use format B
      *
     I                                        1   1 D4NEG
     I                                        2   4 D4CCY
     I                                        5  19 D4AMT
     I                                        4   4 D4C4
      *
      *  Format 5
      *
      *             Tag 34 (G,H)          } No. of Days/Ccy/Amount
      *
     I                                        1   30D5DAY
     I                                        4   6 D5CCY
     I                                        7  21 D5AMT
     I                                        1   1 D5C1
      *
      *  Format 6
      *
      *             Tag 34 (F)            } Currency/DR,CR/Amount
      *
     I                                        1   3 D6CCY
     I                                        4   4 D6DC
     I                                        5  19 D6AMT
      *
     IDSDLIM      DS
      *
      *  To define carriage return delimiters for message scanning
      *
      *  Hex value  '  :'  = CRLF: Start of text/Field Separator
      *              027
      *              D5A
      *
     I                                        1   3 CRLFC
     I                                        1   1 BTA
     I                                        2   2 BTB
     I                                        3   3 CLN
     IDSSWD       DS                          19999
      *
      * Data structure used in scanning SWIFT message data
      *
     I                                        19999 SWD
      *
      * Named Constant used to determine if a field contains numerics
      *
     I              '0123456789'          C         DIGITS
     I/EJECT
      *****************************************************************
      *                 M A I N L I N E
      *****************************************************************
      *
      *  Define entry parameters
      *
     C           *ENTRY    PLIST
     C                     PARM           P#WTTM  50
      *
      *  Initialise program
      *
     C           *IN50     IFEQ '0'
     C                     EXSR SRINIT
     C                     END
      *
      *  Detail processing
      *
     C                     EXSR SRDETL
      *
      *  End Program
      *
     C                     EXSR SREND
      *
      *****************************************************************
      *                                                               *
      *  SRDETL   : Detail Processing                                 *
      *                                                               *
      *  CALLED BY: Main processing section                           *
      *                                                               *
      *  CALLS    : SRVALD - Validate GCMS Message                    *
      *             SRFNTS - Extract GCMS message datas into array SWD*
      *             SRDTLS - Add Incoming Message Details             *
      *             SRHEAD - Add Incoming Message Control             *
      *             SRAUTO - Prompt FT Auto Generation                *
      *                                                               *
      *****************************************************************
     CSR         SRDETL    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRDETL'  @STK,Q
      *
      * Read available GCMS instructions until EOF
      *
     C********** *LOVAL    SETLLMGGCMXL0                                                  JMI113
     C**********           READ MGGCMXL0                 60                               JMI113
     C           *LOVAL    SETLLXXGCMXL0                                                  JMI113
     C                     READ XXGCMXL0                 60                               JMI113
     C                     MOVEL*BLANKS   W0PREF
     C                     MOVELJ0MOR     W0PREF
      *
     C           *IN60     DOWEQ'0'
      *
      * Verify SWIFT message
      *
     C                     EXSR SRVALD
      *
      * If valid message to be used
      *
     C           W1RTN     IFEQ 'MIN0090'
      *
      * Fill array SWD
      *
     C                     EXSR SRFNTS
      *
      * Add Incoming Message Details
      *
     C                     EXSR SRDTLS
      *
      * Add Incoming Message Control
      *
     C                     EXSR SRHEAD
      *
      **Set*Incoming*Msg*Processed*Flag*to*'P'*on*MGGCMXPD                                JMI113
      * Set Incoming Msg Processed Flag to 'P' on XXGCMXPD                                JMI113
      *
     C                     MOVEL'P'       J0IMPF
     C**********           EXCPTMGGCMX                                                    JMI113
     C                     EXCPTXXGCMX                                                    JMI113
     C                     COMIT
      *
      *  Prompt FT Auto Generation
      *
     C**********           EXSR SRAUTO                                                        JMI019
      *
     C                     END
      *
      * Get next available SWIFT record
      *
     C**********           READ MGGCMXL0                 60                               JMI113
     C                     READ XXGCMXL0                 60                               JMI113
     C                     MOVEL*BLANKS   W0PREF
     C                     MOVELJ0MOR     W0PREF
      *
      * Check for shut down / cancellation
      *
     C                     SHTDN                     64
      *
     C           *IN64     IFEQ '1'
     C                     MOVEL'1'       *INLR
     C                     RETRN
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRVALD   : Validate GCMS Message                             *
      *                                                               *
      *  CALLED BY: SRDETL  - detail processing                       *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *****************************************************************
     CSR         SRVALD    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRVALD'  @STK,Q
      *
      * Set up data structure to be passed as a parameter
      *
     C                     CLEARINMC
      *
     C                     Z-ADD0         MCMSGR
     C                     MOVELJ0MTPY    MCMTPY
     C                     MOVELJ0MIRF    MCMIR
     C                     MOVEL'GCMS  '  MCNWRK
     C                     MOVELJ0MOR     MCMOR
     C                     MOVEL'*ENTRY ' MCACPT
     C                     MOVEL'GCMS  '  MCSNDR
     C                     MOVEL##PGM     MCCPGM
      *
      * Verify SWIFT message
      *
     C                     MOVELINMC      W1DATA
      *
     C                     CALL 'ME1020'               90
     C                     PARM '*ADDMSG 'W1ACT   8
     C                     PARM           W1DATA
     C                     PARM *BLANKS   W1RTN   7
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W1RTN     OREQ '*ERROR*'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD1         W0ERNB           * DB ERROR 01 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  If return with invalid message,
      ***set*Incoming*Msg*Processed*Flag*to*'I'*Invalid,*on*MGGCMXPD                      JMI113
      *  set Incoming Msg Processed Flag to 'I' Invalid, on XXGCMXPD                      JMI113
      *
      *  Or message is S.W.I.F.T. Specific
      *
     C           W1RTN     IFEQ 'MIN0091'
     C           J0MTPY    ORGE '000'
     C           J0MTPY    ANDLT'101'
     C                     MOVEL'MIN0091' W1RTN
     C                     MOVEL'I'       J0IMPF
     C**********           EXCPTMGGCMX                                                    JMI113
     C                     EXCPTXXGCMX                                                    JMI113
     C                     COMIT
      *
      *  If return with valid message,
      *  set data structure with returned fields - unique msg ref.
      *
     C                     ELSE
     C                     MOVELW1DATA    INMC
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXVALD    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRFNTS   : Extract Data From GCMS Message                    *
      *                                                               *
      *  CALLED BY: SRDETL  - detail processing                       *
      *                                                               *
      *  CALLS    : SRERR   - report error and close down program     *
      *                                                               *
      *****************************************************************
     CSR         SRFNTS    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRFNTS'  @STK,Q
      *
      *  Initialise fields
      *
     C                     MOVEL*BLANKS   SWD
     C                     Z-ADD1         D
     C                     MOVEL'0'       *IN61
      *
      * Get all records for GCMS message and place all associated
      * records into array. A maximum of 10 records is assumed.
      *
     C                     MOVELJ0MIRF    J0MIR
     C********** J0MIR     SETLLMGGCMMPD                                                  JMI113
     C********** J0MIR     READEMGGCMMPD                 61                               JMI113
     C           J0MIR     SETLLXXGCMMPD                                                  JMI113
     C           J0MIR     READEXXGCMMPD                 61                               JMI113
      *
     C           *IN61     DOWEQ'0'
      *
      * IF more than 9999 characters, process for database error
      * ELSE move data to array
      *
     C           D         IFGT 9999
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVELWKDATA    W0KEY            ***************
     C                     Z-ADD2         W0ERNB           * DB ERROR 02 *
     C                     MOVEL'MIN0251' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
     C                     ELSE
     C                     MOVEAJ0MDTA    SWD,D
     C                     END
      *
      *  Get next record. If it is for GCMS message then determine
      *  where to fill array.
      *
     C********** J0MIR     READEMGGCMMPD                 61                               JMI113
     C           J0MIR     READEXXGCMMPD                 61                               JMI113
      *
     C                     ADD  256       D
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXSWFT    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRDTLS   : Add Incoming Message Details                      *
      *                                                               *
      *  CALLED BY: SRDETL  - detail processing                       *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRDTLS    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRDTLS'  @STK,Q
      *
      *  Initialise message fields and work fields
      *
     C                     Z-ADD0         WKPART
     C                     Z-ADD0         WKSEQ
     C                     MOVEL*BLANKS   WKSVDT
     C                     MOVEL*BLANKS   WKCYCD
     C                     MOVEL*BLANKS   WKAMTS
     C                     MOVEL*BLANKS   WKPDE
     C                     MOVEL*BLANKS   WKSPD
     C                     MOVEL*BLANKS   WKTAG
     C                     MOVEL*BLANKS   WKDATA
      *
     C                     MOVEL*BLANKS   L2INBK
     C                     MOVEL*BLANKS   L2ACIN
     C                     MOVEL*BLANKS   L2BENF
      *
      *  Clear Incoming Message Control file data structure
      *  (other data structures are cleared more frequently)
      *
     C                     CLEARINCR
      *
      ** Move the Sender GCMS directly to the output field for
      ** IMM database update access object
      *
     C                     MOVEL*BLANK    SNDR
     C                     MOVEL'GCMS  '  SNDR
      *
      *  Determine which tag no. denotes the start of a new Part No.
      *  for the message type.
      *
      *  Look up a table and if the message type is not found then use
      *  tag :20 as the default.
      *
     C                     Z-ADD1         X
     C           J0MTPY    LOKUPSTYP,X                   63
      *
     C           *IN63     IFEQ '1'
     C                     MOVELSTAG,X    PSTAG   3
     C                     ELSE
     C                     MOVEL':20'     PSTAG
     C                     END
      *
      *  Determine which tag no. denotes the source of the Transaction
      *  Reference field for the message type.
      *
      *  Look up a table and if the message type is not found then use
      *  tag :20 as the default.
      *
     C                     Z-ADD1         X
     C           J0MTPY    LOKUPRTYP,X                   63
      *
     C           *IN63     IFEQ '1'
     C                     MOVELRTAG,X    TRTAG   3
     C                     ELSE
     C                     MOVEL':20'     TRTAG
     C                     END
      *
      *  Process Block Identifier 1:
      *
     C                     EXSR SRBLK1
      *
      *  Process Block Identifier 2:
      *
     C                     EXSR SRBLK2
      *
      *  Process Block Identifier 3:
      *
     C                     EXSR SRBLK3
      *
      *  Process Block Identifier 4:
      *
     C                     EXSR SRBLK4
      *
      *  Process Block Identifier 5:
      *
     C                     EXSR SRBLK5
      *
      *  Process Block Identifier S:
      *
     C                     EXSR SRBLKS
      *
      *  Unwind subroutine stack name
      *
     C           EXDTLS    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK1   : Process Block Identifier 1                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLK1    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLK1'  @STK,Q
      *
      * Extract Block I.D. and place in parameter data structure
      *
      * Search starts from the closing bracket of the previous block.
      * As this is the first block default the start posn to 1
      *
     C                     MOVEL'1:'      BLKID   2
     C                     Z-ADD1         C
     C                     EXSR SRBLOK
      *
      * Block 1: optional in GCMS
      *
     C           WKTAG     IFEQ *BLANKS
     C                     GOTO EXBLK1
     C                     END
      *
      * Extract data string
      *
      * Setup start position - will always be the first character after
      * the end of the Block I.D.
      *
     C           E         ADD  1         S                Start Posn
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database. The block no. is used
      *  as the message tag.
      *
     C                     EXSR SRUPDT
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK1    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK2   : Process Block Identifier 2                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLK2    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLK2'  @STK,Q
      *
      * Block 2: optional in GCMS.  The rest of the codes in this
      * subroutine currently will not be performed as the GCMS interface
      * does not require information from this block.
      * It is included here only for completeness purposes for
      * future enhancements.
      *
     C                     GOTO EXBLK2
      *
      * Extract Block I.D.
      *
     C                     MOVEL'2:'      BLKID
     C                     EXSR SRBLOK
      *
      * Extract data string
      *
      * Set up start posn - will always be the first character after
      * the end of the tag no.
      *
     C           E         ADD  1         S                Start Posn
     C                     EXSR SRDATA
      *
      *  The first character of the message data denotes whether it is
      *  an Incoming or Outgoing message.
      *
      *  If 'I' for Incoming, results in a database error as Incoming
      *  message processing is not catered for.
      *
      *  If 'O' for Outgoing, Sent date and time will be stored on the
      *  Incoming Message Control file.
      *
     C                     MOVELWKDATA    DSBLK2
      *
     C           B2IO      IFEQ 'I'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVELWKDATA    W0KEY            ***************
     C                     Z-ADD5         W0ERNB           * DB ERROR 05 *
     C                     MOVEL'MIN0092' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database. Block No. is used as the
      *  tag no.
      *
     C                     EXSR SRUPDT
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK2    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK3   : Process Block Identifier 3                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLK3    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLK3'  @STK,Q
      *
      *  Extract Block I.D.
      *
     C                     MOVEL'3:'      BLKID
     C                     EXSR SRBLOK
      *
      *  Only process if Block Identifier is found - add header tag
      *
     C           WKTAG     IFNE *BLANKS
     C                     MOVEL*BLANKS   WKDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
     C                     EXSR SRUPDT
      *
      *  Block Identifier 3 may have two different tags. Each tag
      *  is of the format {nnn:xxxxx}
      *
      *  May be in the order of {113: {108: or vice versa. To allow for
      *  this, commence the search of each tag from the end of the
      *  Block I.D.
      *
     C                     Z-ADDE         B
      *
      *              *****************************
      *
      *  Extract tag '113:'
      *
      *
      *  Clear message tag field
      *
      *  Determine Start position of tag - begin search from end of
      *  block identifier
      *
     C                     MOVEL*BLANKS   WKTAG
      *
     C                     MOVEL'{113:'   TAGID   5
      *
     C           TAGID:5   SCAN DSSWD:B   S
      *
      *  If Tag found, extract data which exists between tag no. and
      *  next closing bracket
      *
      *  Beginning of tag no. is the position after the open bracket
      *
      *  End of the tag no. is the next colon, start search after
      *  start position of the tag reference
      *
     C           S         IFNE 0
     C                     MOVEL'113:'    WKTAG
      *
     C           ':':1     SCAN DSSWD:S   E
      *
      *  Extract data string starting from position after end of tag
      *
     C           E         ADD  1         S
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
     C                     END
      *
      *              *****************************
      *
      *  Extract tag '108:'
      *
      *  Clear message tag field
      *
      *  Determine Start position of tag - begin search from end of
      *  block identifier
      *
     C                     MOVEL*BLANKS   WKTAG
      *
     C                     MOVEL'{108:'   TAGID
      *
     C           TAGID:5   SCAN DSSWD:B   S
      *
      *  If Tag found, extract data that exists between end of tag no.
      *  and next closing bracket
      *
      *  Beginning of tag no. is the position after the open bracket
      *
      *  End of the tag no. is the next colon, start search after
      *  start position of the tag reference
      *
     C           S         IFNE 0
     C                     MOVEL'108:'    WKTAG
      *
     C           ':':1     SCAN DSSWD:S   E
      *
      *  Extract data string starting from position after end of tag
      *
     C           E         ADD  1         S
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
     C                     END
      *
      *              *****************************
      *
      *  After all tags are extracted, set E to be the position of the
      *  tag delimiter '}}' starting search from end of Block I.D
      *
     C           '}}':2    SCAN DSSWD:B   E
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK3    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK4   : Process Block Identifier 4                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    : SRC2   - Find start of next line delimiter        *
      *                                                               *
      *****************************************************************
     CSR         SRBLK4    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLK4'  @STK,Q
      *
      *  Reset 204 flag
      *
     C                     MOVEL*BLANKS   ##204
      *
      *  Extract Block I.D.
      *
     C                     MOVEL'4:'      BLKID
     C                     EXSR SRBLOK
      *
      * If no Block 4: found process for database error
      *
     C           WKTAG     IFEQ *BLANKS
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVELWKDATA    W0KEY            ***************
     C                     Z-ADD6         W0ERNB           * DB ERROR 06 *
     C                     MOVEL'MIN0093' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message detail for header tag
      *
     C                     EXSR SRUPDT
      *
      *  Determine initial delimiter positions for the block
      *
      *  Search for delimiter FS2/3 - start of tag component
      *                       CS2   - start of next line for tag
      *                       FS4   - End of block
      *
      *  Begin search after end position of the Block Tag No.
      *
     C           FS3:3     SCAN DSSWD:E   F3
     C           FS4:3     SCAN DSSWD:E   F4
      *
     C                     Z-ADDE         F
     C                     EXSR SRC2
      *
      *  Set C with end block delimiter as this equates to the other
      *  block's closing bracket. C is used in SRBLOK as the position
      *  to commence searching for the start of the next block.
      *
     C                     Z-ADDF4        C
      *
      *            ***********************************
      *
      *  Extract the Block's data
      *
      *  Repeat process while the new tag delimiter FS3 is prior to
      *  the Block's End of text delimiter FS4
      *
     C           F3        DOWLTF4
      *
      *
      *  TAG PROCESSING
      *
      *  If new tag delimiter FS3 is less than new line delimiter CS2
      *  then process for new tag.
      *
     C           F3        DOWLTC2
      *
      *  Clear message tag field
      *
     C                     MOVEL*BLANKS   WKTAG
      *
      *  Extract tag no.
      *
      *  Beginning of tag no. is the colon of the delimiter so start
      *  search of tag from start position of delimiter
      *
      *  End of the tag no. is the next colon, start search after
      *  position of the first ':'
      *
      *  Determine length of tag - (End - Start + 1)
      *
      *  Extract tag no.
      *
     C           ':':1     SCAN DSSWD:F3  S
      *
     C           S         ADD  1         T
     C           ':':1     SCAN DSSWD:T   E
      *
     C           E         SUB  S         L
     C                     ADD  1         L
      *
     C           L         SUBSTDSSWD:S   WKTAG
      *
      *  If Tag No. is ':20:' it signifies a new part of the message.
      *
      *  If this is the first part of the msg i.e the current part no.
      *  is 0, then only increment the part no. and clear the record
      *  format data structure.
      *
      *  If the part no. is greater than 0 it means that a part has
      *  just been extracted and needs to be added to the database
      *  before processing for the current part commences.
      *
     C           PTAG      IFEQ PSTAG
      * or 102 and sequence C
     C           J0MTPY    OREQ '102'
     C           WKTAG     ANDEQ':32A:'
     C*          J0MTPY    OREQ '101'
      *
      * If 204 and first :20 then ignore and include in part zero
      *
     C           J0MTPY    IFEQ '204'
     C           WKPART    ANDEQ0
     C           ##204     ANDEQ*BLANKS
     C                     MOVEL'Y'       ##204   1
     C                     ELSE
      *
     C           WKPART    IFGT 0
     C                     EXSR SRPART
      *
      * Clear flags relating to Account line analysis
      *
     C                     MOVEL*BLANKS   L2BENF
     C                     MOVEL*BLANKS   L2INBK
     C                     MOVEL*BLANKS   L2ACIN
     C                     END
      *
     C                     CLEARINMP
     C                     ENDIF
     C                     ADD  1         WKPART
      *                                                                   140532
     C                     END
      *
      * If 102 and sequence C, started at tag :32A
      * set part to zero
      *
     C           J0MTPY    IFEQ '102'
     C           WKTAG     ANDEQ':32A:'
     C                     Z-ADD0         WKPART
     C                     ENDIF
      *
      *  Search for next FS3 delimiter starting from the tag no.
      *
      *  If no more FS3s for the block, the system sets the delimiter
      *  to '0' - in that case re-set it to the same value as the FS4
      *  delimiter otherwise the do loop will loop.
      *
     C           FS3:3     SCAN DSSWD:S   F3
      *
     C           F3        IFEQ 0
     C           F3        ORGT F4
     C                     Z-ADDF4        F3
     C                     END
      *
      *  Determine start position of data string. It will be the
      *  start position of the tag no. plus the length of the tag no.
      *
     C                     ADD  L         S
      *
      *  Extract data string
      *
     C                     EXSR SRDAT4
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
      *  Determine if the tag is one of those that holds data for the
      *  Incoming Message Part Detail record
      *
     C                     EXSR SREXPT
      *
     C                     ENDDO
      *
      *
      *  LINE PROCESSING
      *
      *  If new line delimiter is less than new tag delimiter then
      *  add additional line details for the current tag no.
      *
     C           C2        DOWLTF3
      *
      *  Determine start position of the next line's data string. It
      *  will be the start position of the delimiter plus it's length
      *
     C           C2        ADD  2         S
      *
      *  Search for next CS2 delimiter commencing from start of the
      *  data string
      *
     C                     Z-ADDS         F
     C                     EXSR SRC2
      *
      *  Extract data string
      *
     C                     EXSR SRDAT4
      *
      *  Set flag to denote multiple line
      *
     C                     MOVEL*BLANKS   WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
      *  If the line is for tag :56:, :57:, :58:, :59: then additional
      *  processing must be done to ensure that the details stored in
      *  the message part file for the Intermediary, Acct with Inst,
      *  and the Beneficiary do not commence with a '/'.
      *
      *  The above fields were extracted in subroutine SREXPT while
      *  processing the tag no. The field must be checked and if the
      *  first character is a '/' then the contents of the second line
      *  of the tag must be placed there instead.
      *
     C                     EXSR SREXC2
      *
     C                     ENDDO
      *
     C                     ENDDO
      *
      *          ******************************
      *
      *  If a message part has been processed, add last processed part
      *  to database and re-set part no. to 0. Parts only apply to Blk4
      *
     C           WKPART    IFGT 0
     C                     EXSR SRPART
     C                     Z-ADD0         WKPART
     C                     CLEARINMP
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK4    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRC2     : Find Start of Next Line delimiter                 *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRC2      BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRC2  '  @STK,Q
      *
      *  The CS2 delimiter is the same as the first two characters of
      *  the FS3 and FS4 delimiters. Therefor the character after the
      *  delimiter must be checked. If it is a ':' then the delimiter
      *  is really an FS3, and if it is a '-' then the delimiter is FS4
      *
      *  Start scan
      *
     C                     MOVEL*BLANKS   FND     1
      *
     C           FND       DOWEQ*BLANKS
      *
     C           CS2:2     SCAN DSSWD:F   C2
      *
      *  If no more CS2s for the block, the system sets the delimiter
      *  to '0' - in that case re-set it to the same value as the FS4
      *  delimiter to permit exiting from the SRBLK4 Do loop.
      *
     C           C2        IFEQ 0
     C           C2        ORGT F4
     C                     Z-ADDF4        C2
     C                     LEAVE
      *
     C                     ELSE
      *
      * Check if character after the delimiter denotes an FS3 or FS4.
      * If not, then a true C2 is found - no more checks
      *
     C           C2        ADD  2         F
      *
     C           SWD,F     IFNE ':'
     C           SWD,F     ANDNE'-'
     C                     MOVEL'Y'       FND
     C                     END
      *
     C                     END
      *
     C                     ENDDO
      *
      *  Unwind subroutine stack name
      *
     C           EXSRC2    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLK5   : Process Block Identifier 5                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLK5    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLK5'  @STK,Q
      *
      * Block 5: optional in GCMS.  The rest of the codes in this
      * subroutine currently will not be performed as the GCMS interface
      * does not require information from this block.
      * It is included here only for completeness purposes for
      * future enhancements.
      *
     C                     GOTO EXBLK5
      *
      *  Extract Block I.D.
      *
     C                     MOVEL'5:'      BLKID
     C                     EXSR SRBLOK
      *
      * Block 5: optional in GCMS
      *
     C           WKTAG     IFEQ *BLANKS
     C                     GOTO EXBLK5
     C                     END
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message detail for header tag
      *
     C                     EXSR SRUPDT
      *
      *  Determine initial delimiter positions for the block
      *
      *  Search for delimiter OPB - start of tag component '{'
      *                       ENB - end of block           '}}'
      *
      *  Begin search after end position of the Block Tag No.
      *
     C           OPB:1     SCAN DSSWD:E   OP
     C           ENB:2     SCAN DSSWD:E   EN
      *
      *
      *  Extract the Block's data
      *
      *  Repeat process until the new tag delimiter OPB is after the
      *  Block's End of text delimiter ENB
      *
     C           OP        DOWLTEN
      *
      *  Clear message tag field
      *
     C                     MOVEL*BLANKS   WKTAG
      *
      *  Extract tag no.
      *
      *  Beginning of tag no. is position after the open bracket
      *
      *  End of the tag no. is the next colon, start search at the
      *  beginning of the tag
      *
      *  Determine length of tag - (End - Start + 1)
      *
     C           OP        ADD  1         S
      *
     C           ':':1     SCAN DSSWD:S   E
      *
     C           E         SUB  S         L
     C                     ADD  1         L
      *
     C           L         SUBSTDSSWD:S   WKTAG
      *
      *  Check if tag denotes a duplicate message
      *
     C                     SELEC
     C*
     C           WKTAG     WHEQ 'SAI:'
     C                     MOVEL'SAI'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDE:'
     C                     MOVEL'PDE'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDM:'
     C                     MOVEL'PDM'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDI:'
     C                     MOVEL'PDI'     WKPDE
     C*
     C           WKTAG     WHEQ 'PDR:'
     C                     MOVEL'PDR'     WKPDE
     C*
     C           WKTAG     WHEQ 'DUP:'
     C                     MOVEL'DUP'     WKPDE
     C*
     C           WKTAG     WHEQ 'SPD:'
     C                     MOVEL'SPD'     WKSPD
     C*
     C                     ENDSL
      *
      *  Extract data string
      *
      *  Determine start position of data string. It will be the
      *  position after the end of the tag no.
      *
     C           E         ADD  1         S
      *
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
      *  Search for next open bracket starting from the end of the
      *  current data string
      *
      *  If no more open brackets, the system sets the delimiter
      *  to '0' - in that case re-set it to the same value as the end
      *  of block delimiter otherwise the do loop will loop.
      *
     C           OPB:1     SCAN DSSWD:E   OP
      *
     C           OP        IFEQ 0
     C           OP        ORGT EN
     C                     Z-ADDEN        OP
     C                     END
      *
     C                     ENDDO
      *
      *  Unwind subroutine stack name
      *
     C           EXBLK5    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLKS   : Process Block Identifier S                        *
      *                                                               *
      *  CALLED BY: SRDETL - Add Incomimg Message Detail Lines        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLKS    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLKS'  @STK,Q
      *
      * Block S: optional in GCMS.  The rest of the codes in this
      * subroutine currently will not be performed as the GCMS interface
      * does not require information from this block.
      * It is included here only for completeness purposes for
      * future enhancements.
      *
     C                     GOTO EXBLKS
      *
      *  Extract Block I.D.
      *
     C                     MOVEL'S:'      BLKID
     C                     EXSR SRBLOK
      *
      * Block S: optional in GCMS
      *
     C           WKTAG     IFEQ *BLANKS
     C                     GOTO EXBLKS
     C                     END
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message detail for header tag
      *
     C                     EXSR SRUPDT
      *
      *  Determine initial delimiter positions for the block
      *
      *  Search for delimiter OPB - start of tag component '{'
      *                       ENB - end of block           '}}'
      *
      *  Begin search after end position of the Block Tag No.
      *
     C           OPB:1     SCAN DSSWD:E   OP
     C           ENB:2     SCAN DSSWD:E   EN
      *
      *
      *  Extract the Block's data
      *
      *  Repeat process until the new tag delimiter OPB is after the
      *  Block's End of text delimiter ENB
      *
     C           OP        DOWLTEN
      *
      *  Clear message tag field
      *
     C                     MOVEL*BLANKS   WKTAG
      *
      *  Extract tag no.
      *
      *  Beginning of tag no. is position after the open bracket
      *
      *  End of the tag no. is the next colon, start search at the
      *  beginning of the tag
      *
      *  Determine length of tag - (End - Start + 1)
      *
     C           OP        ADD  1         S
      *
     C           ':':1     SCAN DSSWD:S   E
      *
     C           E         SUB  S         L
     C                     ADD  1         L
      *
     C           L         SUBSTDSSWD:S   WKTAG
      *
      *  Check if tag denotes a duplicate message
      *
     C                     SELEC
      *
     C           WKTAG     WHEQ 'SAI:'
     C                     MOVEL'SAI'     WKPDE
      *
     C           WKTAG     WHEQ 'PDE:'
     C                     MOVEL'PDE'     WKPDE
      *
     C           WKTAG     WHEQ 'PDI:'
     C                     MOVEL'PDI'     WKPDE
      *
     C           WKTAG     WHEQ 'PDR:'
     C                     MOVEL'PDR'     WKPDE
      *
     C           WKTAG     WHEQ 'DUP:'
     C                     MOVEL'DUP'     WKPDE
      *
     C           WKTAG     WHEQ 'SPD:'
     C                     MOVEL'SPD'     WKSPD
      *
     C                     ENDSL
      *
      *  Extract data string
      *
      *  Determine start position of data string. It will be the
      *  position after the end of the tag no.
      *
     C           E         ADD  1         S
      *
     C                     EXSR SRDATA
      *
      *  Set flag to denote first line of tag
      *
     C                     MOVEL'F'       WKFPID
      *
      *  Add message line details to database
      *
     C                     EXSR SRUPDT
      *
      *  Search for next open bracket starting from the end of the
      *  current data string
      *
      *  If no more open brackets, the system sets the delimiter
      *  to '0' - in that case re-set it to the same value as the end
      *  of block delimiter otherwise the do loop will loop.
      *
     C           OPB:1     SCAN DSSWD:E   OP
      *
     C           OP        IFEQ 0
     C           OP        ORGT EN
     C                     Z-ADDEN        OP
     C                     END
      *
     C                     ENDDO
      *
      *  Unwind subroutine stack name
      *
     C           EXBLKS    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRBLOK   : Search for position of next Block I.D             *
      *                                                               *
      *  CALLED BY: SRBLK1 - Process Block Identifier 1               *
      *             SRBLK2 - Process Block Identifier 2               *
      *             SRBLK3 - Process Block Identifier 3               *
      *             SRBLK4 - Process Block Identifier 4               *
      *             SRBLK5 - Process Block Identifier 5               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRBLOK    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRBLOK'  @STK,Q
      *
      *  Clear message tag field and message data field
      *
     C                     MOVEL*BLANKS   WKTAG
     C                     MOVEL*BLANKS   WKDATA
      *
      * Extract Block I.D
      *
      * Search for Start of Block. Begin search from the closing
      * bracket of the previous data string, field 'C'
      *
      * If substring found :-
      * Determine End position - start posn plus 2
      *
      * Determine Length - always 2
      *
      * Move data into parameter data structure
      *
     C           BLKID:2   SCAN DSSWD:C   S                Start Posn
      *
     C           S         IFGT 0
      ** Because some of the blocks are optional in GCMS, we can
      ** face a problem when positionning. For instance if block 2: is
      ** not present we risk to get wrongly positionned at tag :72:
      ** (which belongs to block 4:)
      ** So we ensure that what we found is a guenine block
      ** To achieve this we test the presence of '{'
      ** For block 2 we have necessary {2:
     C           *LIKE     DEFN S         WBK
     C           S         SUB  1         WBK
     C           1         SUBSTDSSWD:WBK WBRKT   1
     C           WBRKT     IFEQ '{'
     C           S         ADD  1         E                End Posn
      *
     C                     Z-ADD2         L                Strng Lngth
      *
     C           L         SUBSTDSSWD:S   WKTAG
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXBLOK    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRDATA   : Extract Data String Details                       *
      *                                                               *
      *  CALLED BY: SRBLK1 - Process Block Identifier 1               *
      *             SRBLK2 - Process Block Identifier 2               *
      *             SRBLK3 - Process Block Identifier 3               *
      *             SRBLK5 - Process Block Identifier 5               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRDATA    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRDATA'  @STK,Q
      *
      *  Clear message data field
      *
     C                     MOVEL*BLANKS   WKDATA
      *
      * Start position is set prior to execution of subroutine. It is
      * calculated as (End of tag no./block I.D. + 1)
      *
      * Search for closing bracket of string. As there is only 1 line
      * for the string it will be the first '}' found. Begin the search
      * from the End position of the Block I.D.
      *
      * Determine End position of the string. It is the character
      * before the closing bracket of the string.
      *
      * Then determine length of data string (End - Start + 1)
      * May be zero if tag has no data.
      *
      * Then move data string into data structure field that will be
      * passed to the access object ME1020. ('P' in posn 53 indicates
      * that the result field will be padded on the right with blanks
      * if factor 1 is shorter than the length of the result field)
      *
     C           '}':1     SCAN DSSWD:E   C                Close bracket
      *
      * If no '}' found process for database error
      *
     C           C         IFEQ 0
      *
     C           Q         SUB  1         R       20
     C                     MOVEL@STK,R    W0FILE
     C                     MOVELE         W0KEY            ***************
     C                     Z-ADD9         W0ERNB           * DB ERROR 09 *
     C                     MOVEL'MIN0095' W0MSGD           ***************
     C                     MOVEL'MEMSG  ' W0MSGF
     C                     EXSR SRERR
      *
     C                     ELSE
      *
     C           C         SUB  1         E                End of string
      *
     C           E         SUB  S         L
     C                     ADD  1         L                String lngth
      *
     C           L         IFGT 0
     C           L         SUBSTDSSWD:S   WKDATA    P
     C                     END
      *
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXDATA    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRDAT4   : Extract Tag Message Line Data                     *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRDAT4    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRDAT4'  @STK,Q
      *
      *  Clear message data field
      *
     C                     MOVEL*BLANKS   WKDATA
      *
      *  Extract data string
      *
      *  Start position was determined in SRBLK4
      *
      *  Determine end position of data string. It will be prior to
      *  the position of the next delimiter.
      *
      *  Check which is the next delimiter
      *
     C           F3        IFLT C2
     C                     Z-ADDF3        NXT
     C                     ELSE
     C                     Z-ADDC2        NXT
     C                     END
      *
     C           F4        IFLT NXT
     C                     Z-ADDF4        NXT
     C                     END
      *
     C           NXT       SUB  1         E
      *
      * Determine length of data string (End - Start + 1)
      *
     C           E         SUB  S         L
     C                     ADD  1         L
      *
      * Then move data string into parameter data structure.
      * ('P' in posn 53 indicates that the result field will be padded
      * on the right with blanks if factor 1 is shorter than the
      * length of the result field)
      *
     C           L         IFGT 0
     C           L         SUBSTDSSWD:S   WKDATA    P
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXDAT4    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SREXPT   : Extract Part Details from the message             *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    : SREXAM - Extract Value Dtae/Ccy/Amount            *
      *                                                               *
      *****************************************************************
     CSR         SREXPT    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SREXPT'  @STK,Q
      *
      *  If an 800 series message use field 51 for Beneficiary
      *  if not already set
      *
     C                     MOVELMCMTPY    ##001   1
     C           PTAG      IFEQ ':51'
     C           MPBENF    ANDEQ*BLANKS
     C           ##001     ANDEQ'8'
     C                     MOVELWKDATA    MPBENF
     C                     END
      *
      *  If a 900 series message use field 25 for Beneficiary
      *
     C                     MOVELMCMTPY    ##001   1
     C           PTAG      IFEQ ':25'
     C           MPBENF    ANDEQ*BLANKS
     C           ##001     ANDEQ'9'
     C                     MOVELWKDATA    MPBENF
     C                     END
      *
      *  Extract data
      *
     C                     SELEC
      *
      *  If tag :19: extract Sum Of Amounts
      *
      *  This is only done if the tag occurs prior to the first :20:
      *  tag i.e. when the part no. is still 0.
      *
      *  It occurs ONLY on a message with multiple parts.
      *
      *  The amount is used for the Incoming Message Control record.
      *
     C           PTAG      WHEQ ':19'
     C           WKPART    ANDEQ0
     C                     MOVELWKDATA    CRAMTS
      *
      *  If tag :20: extract Transaction Reference
      *
     C           PTAG      WHEQ TRTAG
     C                     MOVELWKDATA    MPTRNO
      *
      *  If tag :56: extract Intermediary
      *
     C           PTAG      WHEQ ':56'
     C                     MOVELWKDATA    MPINBK
      *
      *  If tag :57: extract Account With Institution
      *
     C           PTAG      WHEQ ':57'
     C                     MOVELWKDATA    MPACIN
      *
      *  If tag :58: or :59: extract Beneficiary
      *
     C           PTAG      WHEQ ':58'
     C           PTAG      OREQ ':59'
     C                     MOVELWKDATA    MPBENF
      *
      *  If tag is within the range of :30: to :34: extract Value Date,
      *  Currency and Amount
      *
     C           PTAG      WHEQ ':30'
     C           PTAG      OREQ ':31'
     C           PTAG      OREQ ':32'
     C           PTAG      OREQ ':33'
     C           PTAG      OREQ ':34'
     C                     EXSR SREXAM
      *
     C                     ENDSL
      *
      *  Unwind subroutine stack name
      *
     C           EXEXPT    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SREXAM   : Extract Value Date/Currency/Amount details        *
      *                                                               *
      *  CALLED BY: SREXPT - Extract Part Details from message        *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SREXAM    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SREXAM'  @STK,Q
      *
      *  Move data field to data structure for breakdown
      *
     C                     MOVELWKDATA    DMSG
      *
      *  Lokup table to determine in which format the info. is held.
      *
     C                     MOVEL*BLANKS   FMT     1
      *
     C                     Z-ADD1         X       30
     C           PTAGP     LOKUPTTAG,X                   63
      *
     C           *IN63     IFEQ '1'
     C                     MOVELTFMT,X    FMT
     C                     END
      *
      *  If format has an optional field that is not used then another
      *  format must be set.
      *
      *  Format 3
      *  If :32N:, :33N:, :34N: the negative amt indicator is optional.
      *
      *  If ind. is there, posn 7 will be the end of the date and so is
      *  numeric else it will be the start of the ccy and thus alpha.
      *
      *  If indicator is not there, replace with format 1
      *
     C                     SELEC
      *
     C           PTAGP     WHEQ '32N'
     C           PTAGP     OREQ '33N'
     C           PTAGP     OREQ '34N'
      *
     C           DIGITS    CHECKD3C7                     62
      *
     C           *IN62     IFEQ '1'                         Not numeric
     C                     MOVEL'1'       FMT
     C                     END
      *
      *  Format 4
      *  If :32H:, :34E: the negative amount indicator is optional.
      *
      *  If ind. is there, posn 4 will be the end of the ccy and so is
      *  alpha else it will be the start of the amt and thus numeric.
      *
      *  If indicator is not there, replace with format 2
      *
     C           PTAGP     WHEQ '32H'
     C           PTAGP     OREQ '34E'
      *
     C           DIGITS    CHECKD4C4                     62
      *
     C           *IN62     IFEQ '0'                         Numeric
     C                     MOVEL'1'       FMT
     C                     END
      *
      *  Format 5
      *  If :34G:, :34H: the No. Of days field is optional.
      *
      *  If Days is there, posn 1 will be the start of the days and so
      *  numeric else it will be the start of the ccy and thus alpha.
      *
      *  If indicator is not there, replace with format 2
      *
     C           PTAGP     WHEQ '34G'
     C           PTAGP     OREQ '34H'
      *
     C           DIGITS    CHECKD5C1                     62
      *
     C           *IN62     IFEQ '1'                         Not numeric
     C                     MOVEL'2'       FMT
     C                     END
      *
      *  Format 6
      *  If :34F: the Debit/Credit indicator is optional.
      *
      *  If Ind. is there, posn 4 will be the indicator and so alpha
      *  else it will be the start of the amt and thus numeric.
      *
      *  If indicator is not there, replace with format 2
      *
     C           PTAGP     WHEQ '34F'
      *
     C           D6DC      IFNE 'D'
     C           D6DC      ANDNE'C'
     C                     MOVEL'2'       FMT
     C                     END
      *
     C                     ENDSL
      *                                                                                       JMI019
     C           J0MTPY    IFEQ '101'                                                         JMI019
     C           PTAG      ANDEQ':30'                                                         JMI019
     C           J0MTPY    OREQ '101'                                                         JMI019
     C           PTAG      ANDEQ':32'                                                         JMI019
      *
      *  Move format fields to file fields
      *
     C                     SELEC
      *
      *  Format 1 - Date/Currency/Amount
      *
     C           FMT       WHEQ '1'
     C                     MOVELD1DTE     MPSVDT
     C                     MOVELD1CCY     MPCYCD
     C                     MOVELD1AMT     MPAMTS
      *
      *  Format 2 - Currency/Amount
      *
     C           FMT       WHEQ '2'
     C                     MOVELD2CCY     MPCYCD
     C                     MOVELD2AMT     MPAMTS
      *
      *  Format 3 - Negative Indicator/Date/Currency/Amount
      *
     C           FMT       WHEQ '3'
     C                     MOVELD3DTE     MPSVDT
     C                     MOVELD3CCY     MPCYCD
     C                     MOVELD3AMT     MPAMTS
      *
      *  Format 4 - Negative Indicator/Currency/Amount
      *
     C           FMT       WHEQ '4'
     C                     MOVELD4CCY     MPCYCD
     C                     MOVELD4AMT     MPAMTS
      *
      *  Format 5 - Days/Currency/Amount
      *
     C           FMT       WHEQ '5'
     C                     MOVELD5DAY     MPSVDT
     C                     MOVELD5CCY     MPCYCD
     C                     MOVELD5AMT     MPAMTS
      *
      *  Format 6 - Currency/DR,CR Indicator/Amount
      *
     C           FMT       WHEQ '6'
     C                     MOVELD6CCY     MPCYCD
     C                     MOVELD6AMT     MPAMTS
      *
      *  Format 7 - Date only
      *
     C           FMT       WHEQ '7'
     C                     MOVELD1DTE     MPSVDT
      *
     C                     ENDSL
     C                     ENDIF                                                              JMI019
      *
      *  If the currency,value date details are extracted prior to the
      *  occurrence of :20, i.e. when the part no. is 0, then the data
      *  must be used for the Incoming Message Control record -
      *
      *  BUT, only if the control fields have not yet been set up
      *  when processing the Tag :19 in subroutine SREXPT
      *
      *  This happens ONLY if the message has multiple parts
      *
     C           WKPART    IFEQ 0
      *
     C           CRSVDT    IFEQ *BLANKS
     C                     MOVELMPSVDT    CRSVDT
     C                     END
      *
     C           CRCYCD    IFEQ *BLANKS
     C                     MOVELMPCYCD    CRCYCD
     C                     END
      *
     C           CRAMTS    IFEQ *BLANKS
     C                     MOVELMPAMTS    CRAMTS
     C                     END
      *
     C                     END
      *
      *  Extract SWIFT Amount into MPPYAM amount field 18,3
      *
     C                     MOVELMPAMTS    ZFIELD
      *
      *  Replace "," with "." for conversion
      *
     C                     MOVEAZFIELD    FLA
     C                     Z-ADD1         A       50
     C           ','       LOKUPFLA,A                    90
     C           *IN90     IFEQ '1'
     C                     MOVE '.'       FLA,A
     C                     END
     C                     MOVEAFLA       ZFIELD
      *
     C                     CALL 'ZALIGN'
     C                     PARM *BLANKS   ZRTN    7        B:Return Code
     C                     PARM           ZFIELD 16        B:Check Field
     C                     PARM 3         ZADEC   10       I:No Of Decs
     C                     PARM 12        ZADIG   20       I:No Of Digits
     C                     PARM           ZAFLD  16        O:Check Field
      *
     C                     Z-ADD0         MPPYAM
     C           ZRTN      IFEQ *BLANKS
     C                     MOVE ZAFLD     ZNUM15 150
     C           ZNUM15    DIV  1000      MPPYAM
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXEXAM    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SREXC2   : Extract 2nd line of tag details                   *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SREXC2    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SREXPT'  @STK,Q
      *
      *  If the line is for tag :56:, :57:, :58:, :59: then additional
      *  processing must be done to ensure that the details stored in
      *  the message part file for the Intermediary, Acct with Inst,
      *  and the Beneficiary do not commence with a '/'.
      *
      *  The above fields were extracted in subroutine SREXPT while
      *  processing the tag no. The field must be checked and if the
      *  first character is a '/' then the contents of the second line
      *  of the tag must be placed there IF the first character of that
      *  line is NOT '/'.
      *
      *  This processing is ONLY performed for the first line after the
      *  tag no. initial processing. A flag is set to condition the
      *  processing.
      *
      *  If tag :56: extract Intermediary
      *
     C                     SELEC
      *
     C           PTAG      WHEQ ':56'
     C           L2INBK    ANDEQ*BLANKS
     C                     MOVEL'Y'       L2INBK  1
     C                     MOVELMPINBK    CHAR1   1
     C                     MOVELWKDATA    CHAR2   1
      *
     C           CHAR1     IFEQ '/'
     C           CHAR2     ANDNE'/'
     C                     MOVELWKDATA    MPINBK
     C                     END
      *
      *  If tag :57: extract Account With Institution
      *
     C           PTAG      WHEQ ':57'
     C           L2ACIN    ANDEQ*BLANKS
     C                     MOVEL'Y'       L2ACIN  1
     C                     MOVELMPACIN    CHAR1
     C                     MOVELWKDATA    CHAR2   1
      *
     C           CHAR1     IFEQ '/'
     C           CHAR2     ANDNE'/'
     C                     MOVELWKDATA    MPACIN
     C                     END
      *
      *  If tag :58: or :59: extract Beneficiary
      *
     C           PTAG      WHEQ ':58'
     C           L2BENF    ANDEQ*BLANKS
      *
     C           PTAG      OREQ ':59'
     C           L2BENF    ANDEQ*BLANKS
     C                     MOVEL'Y'       L2BENF  1
     C                     MOVELMPBENF    CHAR1
     C                     MOVELWKDATA    CHAR2   1
      *
     C           CHAR1     IFEQ '/'
     C           CHAR2     ANDNE'/'
     C                     MOVELWKDATA    MPBENF
     C                     END
      *
     C                     ENDSL
      *
      *  Unwind subroutine stack name
      *
     C           EXEXC2    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRUPDT   : Add Incoming Message Detail Line To Database      *
      *                                                               *
      *  CALLED BY: SRBLK1 - Process Block Identifier 1               *
      *             SRBLK2 - Process Block Identifier 2               *
      *             SRBLK3 - Process Block Identifier 3               *
      *             SRBLK4 - Process Block Identifier 4               *
      *             SRBLK5 - Process Block Identifier 5               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRUPDT    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRUPDT'  @STK,Q
      *
      * Increment tag message line sequence no.
      *
     C                     ADD  1         WKSEQ
      *
      * Move data to record format data structure
      *
     C                     CLEARINDT
     C                     CLEARW1DATA
      *
     C                     MOVELMCMSGR    DTMSGR
     C                     Z-ADDWKSEQ     DTSEQN
     C                     MOVELWKTAG     DTMTG
     C                     MOVELWKFPID    DTFPID
     C                     Z-ADDWKPART    DTPART
     C                     MOVELWKDATA    DTMFLD
      *
      * Add Incoming Message Line
      *
     C                     MOVELINDT      W1DATA
      *
     C                     CALL 'ME1020'               90
     C                     PARM '*MSGDATA'W1ACT   8
     C                     PARM           W1DATA
     C                     PARM *BLANKS   W1RTN   7
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W1RTN     OREQ '*ERROR*'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD10        W0ERNB           * DB ERROR 10 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Set flag to denote one of multiple lines for tag
      *
     C                     MOVEL*BLANKS   WKFPID
      *
      *  Unwind subroutine stack name
      *
     C           EXUPDT    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRPART   : Add Incoming Message Midas Transaction Control    *
      *             Record To Database                                *
      *                                                               *
      *  CALLED BY: SRBLK4 - Process Block Identifier 4               *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRPART    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRPART'  @STK,Q
      *
      *  Set up Incoming Message Part Detail record
      *
      *  The majority of the fields were set in subr SREXPT during the
      *  extraction of the message tags.
      *
      *  The initial clearing of the record format data structure occur
      *  in subr SRBLK4 when a new part is being processed
      *
      *  If the Part's value date field is blank then use the value
      *  date that has been stored in the Control record date field
      *  in subroutine SREXAM
      *
     C           MPSVDT    IFEQ *BLANKS
     C                     MOVELCRSVDT    MPSVDT           Value Date
     C                     END
      *
     C           MPSVDT    IFNE *BLANKS
     C                     MOVELMPSVDT    MPSVDC
     C           MPSVDC    IFLT '72'
     C                     MOVE '20'      MPSVDC
     C                     ELSE
     C                     MOVE '19'      MPSVDC
     C                     ENDIF
     C                     ENDIF
      *
     C                     Z-ADDMCMSGR    MPMSGR           Uniq Ref.
     C                     Z-ADDWKPART    MPKPRT           Part No.Key
      *
      *  Add Incoming Message Midas Transaction Control
      *
     C                     CLEARW1DATA
     C                     MOVELINMP      W1DATA
      *
     C                     CALL 'ME1020'               90
     C                     PARM '*MSGPART'W1ACT   8
     C                     PARM           W1DATA
     C                     PARM *BLANKS   W1RTN   7
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W1RTN     OREQ '*ERROR*'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD11        W0ERNB           * DB ERROR 11 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Store last used part no. in control field - used for updating
      *
     C                     Z-ADDWKPART    CRNPRT           No. Of Parts
      *
      *  Store last used part info that will be used for updating the
      *  Control file IF only one part exists.
      *
     C                     MOVELMPSVDT    WKSVDT           Value date
     C                     MOVELMPCYCD    WKCYCD           Currency
     C                     MOVELMPAMTS    WKAMTS           Amount
      *
      *  Unwind subroutine stack name
      *
     C           EXPART    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
     C/EJECT
      *****************************************************************
      *                                                               *
      *  SRHEAD   : Add Incoming Message Control Record               *
      *                                                               *
      *  CALLED BY: SRDETL  - detail processing                       *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRHEAD    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q
     C                     MOVEL'SRHEAD'  @STK,Q
      *
      *  Extract data from the GCMS message and place in the data
      *  structure fields of the record format
      *
     C                     CLEARW1DATA
      *
      *  The Unique Reference No. is accessed from a data area once the
      *  message is verified.
      *
     C                     MOVELMCMSGR    CRMSGR           Unique Ref.
      *
      *  The following fields are available on MSIXI2PD
      *
     C                     MOVEL*BLANKS   CRSYTM           System
     C                     MOVEL'GCMS  '  CRNWRK           Network
     C                     MOVELSNDR      CRSNDR           Sender
     C                     MOVELJ0MIRF    CRMIR            MIR
     C                     MOVELJ0MOR     CRMOR            MOR
     C                     MOVELJ0MTPY    CRMTPY           Msg Type
     C                     MOVELJ0MPRY    CRMPRY           Priority
     C**********           MOVELJ0MODE    CRMODE           Received Date                      JMI019
     C                     MOVE J0MODE    CRMODE           Received Date                      JMI019
     C                     MOVELJ0MOTM    CRMOTM           Received Time
     C                     MOVELJ0BRCA    CRBRCA           Branch
      *
     C                     MOVELCRMODE    CRMDEC
     C           CRMDEC    IFLT '72'
     C                     MOVE '20'      CRMDEC
     C                     ELSE
     C                     MOVE '19'      CRMDEC
     C                     ENDIF
      *
      *  Check if the Duplication Flag is found in Block Identifier 5
      *  or Block Identifier S.
      *
     C           WKPDE     IFNE *BLANKS
     C                     MOVELWKPDE     CRDUPF           Duplication
     C                     ELSE
      *
     C           WKSPD     IFNE *BLANKS
     C                     MOVELWKSPD     CRDUPF
     C                     END
      *
     C                     END
      *
      *  The following Sent date/time fields are found within Block 2
      *  Output record - extract info using a data structure
      *
     C                     MOVELB2INTD    CRSNTD           Sent Date
     C                     MOVELB2INTI    CRSNTT           Sent Time
      *
     C                     MOVELCRSNTD    CRSTDC
     C           CRSTDC    IFLT '72'
     C                     MOVE '20'      CRSTDC
     C                     ELSE
     C                     MOVE '19'      CRSTDC
     C                     ENDIF
      *
      *
      *  The No. of Parts is accumulated in the SRPART subroutine
      *
      *  If there is only one part for the message then use the saved
      *  values from that part to fill the Ccy/Date Amount fields.
      *
      *  If a multiple message, the fields were filled in the SREXPT &
      *  SREXAM subroutines if the relevant tag nos occured prior to
      *  the message's first Start of Part tag.
      *
     C           CRNPRT    IFEQ 1
     C                     MOVELWKSVDT    CRSVDT           Value date
     C                     MOVELWKCYCD    CRCYCD           Currency
     C                     MOVELWKAMTS    CRAMTS           Amount
     C                     END
      *
      ** Initialisation of Value Date century field in MEINCRPD
      *
     C           CRSVDT    IFNE *BLANKS
     C                     MOVELCRSVDT    CRSVDC
     C           CRSVDC    IFLT '72'
     C                     MOVE '20'      CRSVDC
     C                     ELSE
     C                     MOVE '19'      CRSVDC
     C                     ENDIF
     C                     ENDIF
      *
      *
      *  N.B. Audit stamp is setup in access object
      *
      *  Add Incoming Message Control
      *
     C                     MOVELINCR      W1DATA
      *
     C                     CALL 'ME1020'               90
     C                     PARM '*MSGHEAD'W1ACT   8
     C                     PARM           W1DATA
     C                     PARM *BLANKS   W1RTN   7
      *
      *  If return with an error (LR seton in called program) then
      *  process for database error.
      *
     C           *IN90     IFEQ '1'
     C           W1RTN     OREQ '*ERROR*'
     C                     MOVEL'ME1020  'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD12        W0ERNB           * DB ERROR 12 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Unwind subroutine stack name
      *
     C           EXHEAD    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C                     ENDSR
     C/EJECT
      *****************************************************************                       JMI019
      **********                                                      *                       JMI019
      ***SRAUTO*  : Prompt FT Auto Generation                         *                       JMI019
      **********                                                      *                       JMI019
      ***CALLED*BY: SRDETL  - detail processing                       *                       JMI019
      **********                                                      *                       JMI019
      *****************************************************************                       JMI019
     C**********SR         SRAUTO    BEGSR                                                    JMI019
      **********                                                                              JMI019
      ***Set*up*subroutine stack name                                                         JMI019
      **********                                                                              JMI019
     C**********           ADD  1         Q       50                                          JMI019
     C**********           MOVEL'SRAUTO'  @STK,Q                                              JMI019
      **********                                                                              JMI019
      ***Set*up*parameters                                                                    JMI019
      **********                                                                              JMI019
     C**********           CLEARINMC                       Input Data Str.                    JMI019
      **********                                                                              JMI019
     C**********           MOVELCRNWRK    MCNWRK                                              JMI019
     C**********           MOVELCRMTPY    MCMTPY                                              JMI019
     C**********           MOVELCRSNDR    MCSNDR                                              JMI019
     C**********           MOVEL'*AUTO  ' MCACPT                                              JMI019
     C**********           MOVEL##PGM     MCCPGM                                              JMI019
      **********                                                                              JMI019
      **Move*passed parameter data to relevant data structure                                 JMI019
      **and*on*to called program's data structure                                             JMI019
      **********                                                                              JMI019
     C**********           MOVELINMC      W1DATA                                              JMI019
      **********                                                                              JMI019
      **Verify*message                                                                        JMI019
      **********                                                                              JMI019
     C**********           CALL 'ME1030'               90                                     JMI019
     C**********           PARM '*AUTO   'W1ACT                                               JMI019
     C**********           PARM           W1DATA                                              JMI019
     C**********           PARM *BLANKS   W1RTN                                               JMI019
      **********                                                                              JMI019
      ***If*return with an error (LR seton in called program) then                            JMI019
      ***process for database error.                                                          JMI019
      **********                                                                              JMI019
     C********** *IN90     IFEQ '1'                                                           JMI019
     C********** W1RTN     OREQ '*ERROR*'                                                     JMI019
     C**********           MOVEL'ME1030  'W0FILE           ***************                    JMI019
     C**********           MOVEL'*CALL'   W0KEY            * DB ERROR 14 *                    JMI019
     C**********           Z-ADD14        W0ERNB           ***************                    JMI019
     C**********           MOVEL'MEM5003' W0MSGD                                              JMI019
     C**********           MOVEL'MIDAS  ' W0MSGF                                              JMI019
     C**********           EXSR SRERR                                                         JMI019
     C**********           END                                                                JMI019
      **********                                                                              JMI019
      ***Process for invalid message if return code is 'MIN0091'                              JMI019
      **********                                                                              JMI019
     C********** W1RTN     IFEQ 'MIN0091'                                                     JMI019
     C**********           GOTO EXAUTO                                                        JMI019
     C**********           END                                                                JMI019
      **********                                                                              JMI019
      ***Set up parameters for prompt                                                         JMI019
      **********                                                                              JMI019
     C**********           MOVELCRMSGR    O#MSGR                                              JMI019
     C**********           MOVEL*BLANKS   O#PRTY                                              JMI019
     C********** CRMPRY    IFEQ 'U'                                                           JMI019
     C**********           MOVEL'HIGH'    O#PRTY                                              JMI019
     C**********           ELSE                                                               JMI019
     C**********           MOVEL'NORMAL'  O#PRTY                                              JMI019
     C**********           END                                                                JMI019
      **********                                                                              JMI019
      ***Prompt FT Auto Generation                                                            JMI019
      **********                                                                              JMI019
     C**********           CALL 'MEC1304'              90                                     JMI019
     C**********           PARM *BLANKS   W2RTN   7                                           JMI019
     C**********           PARM           O#MSGR  8                                           JMI019
     C**********           PARM           O#PRTY 10                                           JMI019
      **********                                                                              JMI019
      ***If return with an error (LR seton in called program) then                            JMI019
      ***process for database error.                                                          JMI019
      **********                                                                              JMI019
     C********** *IN90     IFEQ '1'                                                           JMI019
     C********** W2RTN     ORNE *BLANKS                                                       JMI019
     C********** W2RTN     ANDNE'MIN0222'                                                     JMI019
     C**********           MOVEL'MEC1304 'W0FILE           ***************                    JMI019
     C**********           MOVEL'*CALL'   W0KEY            * DB ERROR 15 *                    JMI019
     C**********           Z-ADD15        W0ERNB           ***************                    JMI019
     C**********           MOVEL'MEM5003' W0MSGD                                              JMI019
     C**********           MOVEL'MIDAS  ' W0MSGF                                              JMI019
     C**********           EXSR SRERR                                                         JMI019
     C**********           END                                                                JMI019
      **********                                                                              JMI019
      ***Unwind subroutine stack name                                                         JMI019
      **********                                                                              JMI019
     C********** EXAUTO    TAG                                                                JMI019
     C**********           MOVEA*BLANKS   @STK,Q                                              JMI019
     C**********           SUB  1         Q                                                   JMI019
      **********                                                                              JMI019
     C**********SR                   ENDSR                                                    JMI019
     C**********/EJECT                                                                        JMI019
      *****************************************************************
      *                                                               *
      *  SRINIT   : Initialise and define fields                      *
      *                                                               *
      *  CALLED BY: Main processing                                   *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SRINIT    BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q       50
     C                     MOVEL'SRINIT'  @STK,Q
      *
      *  Set up copyright statement
      *
     C                     MOVEACPY@      BIS@   80
      *
      *  Define fields
      *
     C           *LIKE     DEFN DTPART    WKPART
     C           *LIKE     DEFN DTFPID    WKFPID
     C           *LIKE     DEFN DTSEQN    WKSEQ
     C           *LIKE     DEFN DTMFLD    WKDATA
      *
     C           *LIKE     DEFN CRSVDT    WKSVDT
     C           *LIKE     DEFN CRCYCD    WKCYCD
     C           *LIKE     DEFN CRAMTS    WKAMTS
     C           *LIKE     DEFN CRDUPF    WKPDE
     C           *LIKE     DEFN CRDUPF    WKSPD
      *
     C                     Z-ADD0         B       50
     C           *LIKE     DEFN B         C
     C           *LIKE     DEFN B         D
     C           *LIKE     DEFN B         E
     C           *LIKE     DEFN B         F
     C           *LIKE     DEFN B         L
     C           *LIKE     DEFN B         S
     C           *LIKE     DEFN B         T
     C           *LIKE     DEFN B         F3
     C           *LIKE     DEFN B         F4
     C           *LIKE     DEFN B         C2
     C           *LIKE     DEFN B         OP
     C           *LIKE     DEFN B         EN
     C           *LIKE     DEFN B         NXT
      *
      *  Set up error processing message defaults
      *
     C                     MOVEL*BLANKS   W0MSGD
     C                     MOVEL'MEMSG   'W0MSGF
      *
      * Open Files
      *
     C**********           OPEN MGGCMXL0                                                  JMI113
     C**********           OPEN MGGCMMPD                                                  JMI113
     C                     OPEN XXGCMXL0                                                  JMI113
     C                     OPEN XXGCMMPD                                                  JMI113
      *
      *  Get Rundate information
      *
     C           *NAMVAR   DEFN RUNDAT    RUNDTA
     C                     IN   RUNDTA
     C                     MOVE AGMRDT    WUMRDT  7        Midas Run date
     C                     MOVE AGRDNB    WURDNB  50       Run day number
     C                     MOVE AGSUC     WUSUC   1        Set up complete
     C                     MOVE AGDFF     WUDFF   1        Date Format
     C                     MOVE AGMBIN    WUMBIN  1        Multi Branched
      *
      *  Get GCMS process information
      *
     C**********           CALL 'AOGCMSR0'                                                JMI113
     C                     CALL 'XXGCMSR0'                                                JMI113
     C                     PARM           @RTCD   7
     C                     PARM '*FIRST'  @OPTN   7
     C           SDGCMS    PARM SDGCMS    DSSDY
     C           @RTCD     IFNE *BLANKS
     C**********           MOVEL'AOGCMSR0'W0FILE                                          JMI113
     C                     MOVEL'XXGCMSR0'W0FILE                                          JMI113
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD17        W0ERNB           * DB ERROR 17 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      ** Convert minutes into seconds
     C           J0PYPF    MULT 60        P#WTTM
      *
      * Setup field for 'CRLF', used in SCAN checking to determine
      * delimiters for Block data strings
      *
     C                     BITOF'01236'   BTA
     C                     BITON'457'     BTA
     C                     BITOF'01346'   BTB
     C                     BITON'257'     BTB
      *
      * Setup Block 4 delimiters
      *
      * Setup delimiter FS2/FS3 - start of tag within message block
      *
     C                     MOVE ':'       CLN
     C                     MOVELCRLFC     FS3     3
      *
      * Setup delimiter CS2 - start of new line within tag
      *
     C                     MOVELCRLFC     CS2     2
      *
      * Setup delimiter FS4 - end of Block 4:
      *
     C                     MOVE '-'       CLN
     C                     MOVELCRLFC     FS4     3
      *
      * Setup Block 5 delimiters
      *
     C                     MOVE '{'       OPB     1
     C                     MOVE '}}'      ENB     2
      *
      * Access sdbankpd
      *
     C                     CALL 'AOBANKR0'
     C                     PARM '*MSG    '@RTCD   7
     C                     PARM '*FIRST  '@OPTN   7
     C           SDBANK    PARM SDBANK    DSFDY
     C           @RTCD     IFNE *BLANKS
     C                     MOVEL'AOBANKR0'W0FILE
     C                     MOVEL'*CALL'   W0KEY            ***************
     C                     Z-ADD16        W0ERNB           * DB ERROR 16 *
     C                     MOVEL'MEM5003' W0MSGD           ***************
     C                     MOVEL'MIDAS  ' W0MSGF
     C                     EXSR SRERR
     C                     END
      *
      *  Indicate that set up is complete
      *
     C                     SETON                     50
      *
      *  Unwind subroutine stack name
      *
     C           EXINIT    TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     CSR                   ENDSR
      *****************************************************************
      *                                                               *
      *  SREND    : End Program                                       *
      *                                                               *
      *  CALLED BY: Main processing                                   *
      *                                                               *
      *  CALLS    :                                                   *
      *                                                               *
      *****************************************************************
     CSR         SREND     BEGSR
      *
      *  Set up subroutine stack name
      *
     C                     ADD  1         Q       50
     C                     MOVEL'SREND'   @STK,Q
      *
     C                     SHTDN                     64
      *
      *  Unwind subroutine stack name
      *
     C           EXEND     TAG
     C                     MOVEA*BLANKS   @STK,Q
     C                     SUB  1         Q
      *
     C           *IN64     IFEQ '1'
     C                     MOVEL'1'       *INLR
     C                     ELSE
     C                     RETRN
     C                     END
      *
     CSR                   ENDSR
     C/EJECT
      *
      * File and Program Error Processing
     C/COPY MECPYSRC,SRERRC
      *
     C/EJECT
      *****************************************************************
      **Update*MGGCMXPD*GCMS*Messages                                                     JMI113
      * Update XXGCMXPD GCMS Messages                                                     JMI113
      *****************************************************************
      *
     O**********MGGCMXD0E                MGGCMX                                           JMI113
     O**********               J0IMPF                                                     JMI113
     OXXGCMXD0E                XXGCMX                                                     JMI113
     O                         J0IMPF                                                     JMI113
      *
**  CPY@ table
(c) Finastra International Limited 2018
**  TTAG/TFMT Tag no.(3) - Format type (1) for date/ccy/amount
30:731B731C731D731E731F731G731H731J731L7
31P731R731S731T731X732A132B232C132D132E2
32E232F232G232H432K132L232M232N332P132R1
32S132T133A133B233C133D133E233F233G233K1
33N333P133R133S233T233V234A134B234C134D1
34E434F634G534H534N334P134R1
**  STYP/STAG Message Type (3) - Tag (3) for start of Part No.  101:21
101:20
102:21
210:21
571:28
572:28
573:28
574:28
577:28
579:27
580:23
700:27
701:27
705:40
710:27
711:27
720:27
721:27
760:27
767:27
800:23
801:51
802:23
**  RTYP/RTAG Message Type (3) - Tag (3) for Transaction Reference  101:21
101:20
102:21
210:21
710:21
711:21
720:21
721:21
742:21
800:23
802:23
