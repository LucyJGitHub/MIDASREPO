/*********************************************************************/
/*STD    CLPBASEMOD                                                  */
/*EXI *  TEXT('Midas ZA Send message to the System Operator')        */
/*********************************************************************/
/*                                                                   */
/*       Midas Standard routines                                     */
/*                                                                   */
/*       ZAMSGTOOPR - Send a message to the System Operaror          */
/*                                                                   */
/*       Function: This module sends a message to the system         */
/*                 operator (using the symbolic value *SYSOPR).      */
/*                 The message can be either an ad-hoc one, or       */
/*                 the contents of a message ID.                     */
/*                                                                   */
/*                 If the message ID parameter is blank, the         */
/*                 content of the &MESSAGE parameter is sent as an   */
/*                 ad-hoc message.  Otherwise the message specified  */
/*                 in the message ID and message file parameters     */
/*                 is sent, and the &MESSAGE parameter is used as    */
/*                 replacement data for the message.                 */
/*                                                                   */
/*                 The possible return codes are:                    */
/*                    'NotExist  ' - The message file does not exist */
/*                    'NotAut    ' - the user is not authorised to   */
/*                                   the message file                */
/*                    'NoMsgID   ' - The message ID does not exist   */
/*                                   in the message file             */
/*                    'Error     ' - A serious error occured on      */
/*                                   sending the message             */
/*                                                                   */
/*       (c) Misys International Banking Systems Ltd. 2001           */
/*                                                                   */
/* Bank Fusion Midas 1.4 Base ---------------------------------------*/
/* Midas Plus 1.4 Base 04 -------------------------------------------*/
/* Midas Plus 1.4 Base ----------------------------------------------*/
/* Midas Plus 1.3 ---------------- Base -----------------------------*/
/* Midas Release 4 --------------- Base -----------------------------*/
/* Midas DBA 3.00 ---------------- Base -----------------------------*/
/*       Last Amend No. CAP002  *CREATE    Date 18Nov97              */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*                                                                   */
/*       CAP002 - Conversion of Midas inputs to modular API structure*/
/*                                                                   */
/*********************************************************************/
/**/
             PGM        PARM(&RETURNCODE &MESSAGE &MSGID &MSGF)
/**/
/** Declares                                                         */
/** Return code **/
             DCL        VAR(&RETURNCODE) TYPE(*CHAR) LEN(10)
 
/** Message text or message data **/
             DCL        VAR(&MESSAGE) TYPE(*CHAR) LEN(132)
 
/** Message ID **/
             DCL        VAR(&MSGID) TYPE(*CHAR) LEN(7)
 
/** Message file **/
             DCL        VAR(&MSGF) TYPE(*CHAR) LEN(10)
 
/** The following fields are for existence and authority checking: **/
             DCL        VAR(&LIBL) TYPE(*CHAR) LEN(10) VALUE('*LIBL')
             DCL        VAR(&OBJTYPE) TYPE(*CHAR) LEN(7) VALUE('*MSGF')
             DCL        VAR(&MBRBLANK) TYPE(*CHAR) LEN(10)
             DCL        VAR(&USE) TYPE(*CHAR) LEN(10) VALUE('*USE')
 
             COPYRIGHT TEXT('(c) Misys International Banking Systems Ltd. +
                          2001')
 
/** +
    The global monitor sends an escape message, which will end the +
    program instantly if it is executed. +
**/
             MONMSG     MSGID(CPF0000 MCH0000) EXEC(GOTO CMDLBL(ABNOR))
 
/** +
    If the message ID field is blank, treat the &MESSAGE field +
    as a message text, and just send it and exit: +
**/
             IF         COND(&MSGID = ' ') THEN(DO)
 
                SNDPGMMSG  MSG(&MESSAGE) TOMSGQ(*SYSOPR)
                RETURN
 
             ENDDO
 
/** +
    Otherwise send the message specified in the message ID and file +
    parameters, and treat the &MESSAGE field as replacment data. +
                                                                      +
    First check the existence of and authority to the message file. +
**/
             CALLPRC    PRC(UTCHOBJEX) PARM(&RETURNCODE &MSGF &LIBL +
                          &OBJTYPE &MBRBLANK)
 
/** +
    Continue if the return code indicates that the object exists; +
    otherwise the return code will be percolated to the caller. +
**/
 
             IF         COND(&RETURNCODE = 'NotExist') THEN(RETURN)
 
/** +
    Check that the user has authority to the message file: +
**/
             CALLPRC    PRC(UTCHOBJAUT) PARM(&RETURNCODE &MSGF &LIBL +
                          &OBJTYPE &USE)
 
/** +
    Continue if the return code indicates that the user is authorised; +
    otherwise the return code will be percolated to the caller. +
**/
 
             IF         COND(&RETURNCODE = 'NotAut') THEN(RETURN)
 
/** +
    Check that the message ID exists in the message file: +
**/
             RTVMSG     MSGID(&MSGID) MSGF(&MSGF)
             MONMSG     MSGID(CPF2419) EXEC(DO)
                CHGVAR     VAR(&RETURNCODE) VALUE('NoMsgID')
                RETURN
             ENDDO
 
/** +
    If processing gets to here, the message can be sent. +
**/
             SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGF) MSGDTA(&MESSAGE) +
                          TOMSGQ(*SYSOPR)
 
/** +
    Clear the return code to prevent spurious values being returned +
**/
             CHGVAR     VAR(&RETURNCODE) VALUE(' ')
 
             RETURN
 
ABNOR:
             CHGVAR     VAR(&RETURNCODE) VALUE('Error')
             SNDPGMMSG  MSGID(CPF9898) MSGF(QCPFMSG) MSGDTA('Error +
                          while sending message') +
                          MSGTYPE(*ESCAPE)
             ENDPGM
