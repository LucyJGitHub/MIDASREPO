      *****************************************************************
      *                                                               *
      *  Midas - /COPY Member (RPG)                                   *
      *                                                               *
      *  XXXXXXX - (/COPY Name)                                       *
      *                                                               *
      * Bank Fusion Midas 1.4 Base -----------------------------------*
      * Midas Plus 1.4 Base 04 ---------------------------------------*
      * Midas Plus 1.4 Base ------------------------------------------*
      * Midas Plus 1.3 ----------- Base ------------------------------*
      * Midas Release 4 --------------- Base -------------------------*
      *  Last Amend No. nnnnnn  *CREATE    Date ddmmmyy               *
      *  Prev Amend No. nnnnnn             Date ddmmmyy               *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *  nnnnnn - (change description)                                *
      *                                                               *
      *****************************************************************
  STANDARD SUBROUTINE - ZALIGN
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
  Purpose:
  ~~~~~~~~
   In certain cases, for example keyboard entry, a numeric field must
   be input as alpha in order to allow for the inclusion of a decimal
   point, '.', in the input field. The ZALIGN subroutine validates this
   alphameric input field as numeric with a specified number of
   positions before and after the decimal point, and right-aligns the
   value in the output field.
 
  Notes for when including in RPG pgm for compiling:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   /COPY ZSRSRC ZALIGNZ1 should be included in the 'E' specifications
   /COPY ZSRSRC ZALIGNZ2 should be included in the subroutine section
 
   Notes: (1)- If ZEDIT is required in same pgm do not include both
               ZALIGNZ1 and ZEDITZ1, as they are the same.
 
   Requirements:
   ~~~~~~~~~~~~
   The subroutine references two execution time arrays on which the
   validation operations are performed and which must be described on
   extension specifications.
 
   ZA1    -     An alphameric array of 16 one-byte elements which will
                contain the input field.
 
   ZA2    -     An alphameric array of 16 one-byte elements which will
                contain the validated output array.
 
   Input:
   ~~~~~
 
   ZFIELD  -    A 16 character alphameric field to contain the numeric
                input. The field may contain leading and trailing
                blanks and a decimal point, and may have up to 15
                digits. Note: 15 digits and one decimal point = 16
                characters.
 
   ZADEC   -    A one-digit numeric field containing the required
                number of decimal positions as a constant in your
                program.
 
   ZADIG   -    A two-digit numeric field containing the required
                number of digits before the decimal point as a constant
                in your program.
 
   Procedure:
   ~~~~~~~~~
 
   1.   The input fiels, ZFIELD, is move to array ZA1.
 
   2.   ZFIELD is filled with blanks ready for output to it.
 
   3.   A check is made to ensure that the constants specified for
        number of digits before the decimal point and the number of
        digits after the decimal point do not together exceed 15.
 
   4.   The elements of ZA1 are checked as follows:
        a) The decimal point, if any, is found and verified as unique.
        b) Leading blanks are ignored.
        c) Any character which is not '.' or ' ' is validated as
           numeric.
 
   5.   The numeric contents of ZA1 (i.e. not including '.' or ' ' is
        move to ZA2.
 
   6.   A check is made to ensure there are no embedded blanks.
 
   7.   Checks are made to ensure that the number of digits each side
        of the decimal point do not exceed the respective constant
        specified.
 
   8.   Trailing blanks are zero-filled.
 
   9.   The validated value is right-aligned in array ZA1.
 
  10.   The validated and right aligned value is moved back to ZFIELD.
 
  11.   If the input field fails any of the above validations,
        indicator 99 is set on and the rest of the subroutine is
        bypassed.
 
   Output:
   ~~~~~~
 
   ZFIELD - the 16 character alphameric field containing the validated
            and right aligned value, with no decimal point. Except in
            the case of embedded blanks, any failure in validation will
            leave ZFIELD as blank field.
 
   Indicator 99 - set on if the input field is not a valid numeric
                  field or if the number of digits before or after the
                  decimal point exceeds the specified constants.
